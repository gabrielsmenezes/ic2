framework,Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,date,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate
Android,1925534,2,,1925486,2009-12-18 0:24:29,0,,107,,"<p>Most Android and iPhone apps I have seen use an initial screen or dialog box to ask for credentials.  I think it is cumbersome for the user to have to re-enter their name/password often, so storing that info makes sense from a usability perspective. </p>

<p>The advice from the (<a href=""http://developer.android.com/guide/practices/security.html#UserData"" rel=""noreferrer"">Android dev guide</a>) is:</p>

<blockquote>
  <p>In general, we recommend minimizing the frequency of asking for user
  credentials -- to make phishing attacks more conspicuous, and less
  likely to be successful. Instead use an authorization token and
  refresh it.</p>
  
  <p>Where possible, username and password should not be stored on the
  device. Instead, perform initial authentication using the username and
  password supplied by the user, and then use a short-lived,
  service-specific authorization token.</p>
</blockquote>

<p>Using the <a href=""http://developer.android.com/reference/android/accounts/AccountManager.html"" rel=""noreferrer"">AccountManger</a> is the best option for storing credentials.  The <a href=""https://github.com/googlesamples/android-BasicSyncAdapter/#readme"" rel=""noreferrer"">SampleSyncAdapter</a> provides an example of how to use it. </p>

<p>If this is not an option to you for some reason, you can fall back to persisting credentials using the <a href=""http://developer.android.com/guide/topics/data/data-storage.html"" rel=""noreferrer"">Preferences</a> mechanism.  Other applications won't be able to access your preferences, so the user's information is not easily exposed.   </p>
",3767,,-1,,2017-12-16 0:24:45,2017-12-16 0:24:45,,,,10,,,
Android,7030900,2,,6763149,2011-08-11 18:21:34,602,,21,,"<p>There's an example app that comes with the NDK called <a href=""https://github.com/googlesamples/android-ndk/tree/master/native-audio"" rel=""nofollow noreferrer"">NativeAudio</a>. It has examples of nearly anything you would ever want to implement: effects, streaming, synthesis, etc. If you look at its code, you'll get a good head start.</p>
",573432,,3427520,,2018-07-25 7:11:49,2018-07-25 7:11:49,,,,0,,,
Android,8382574,2,,8382501,2011-12-05 8:18:31,717,,22,,"<p>Update: Barcode Detection is now available in <a href=""http://android-developers.blogspot.com/2015/08/barcode-detection-in-google-play.html"" rel=""nofollow noreferrer"">Google Play services</a>.  <a href=""https://search-codelabs.appspot.com/codelabs/bar-codes#1"" rel=""nofollow noreferrer"">Code lab</a>, <a href=""https://developers.google.com/vision/barcodes-overview"" rel=""nofollow noreferrer"">api docs</a>, <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow noreferrer"">and a sample project</a>.</p>

<p>There is no API in android. You have to use third party libraries. You can try <a href=""http://code.google.com/p/zxing/"" rel=""nofollow noreferrer"">Zxing.</a> There are lot of discussions related to barcode scanning on stackoverflow. Search for them. Few are 
<a href=""https://stackoverflow.com/questions/2050263/using-zxing-to-create-an-android-barcode-scanning-app"">Using ZXing to create an android barcode scanning app</a>. </p>

<p><a href=""https://stackoverflow.com/questions/2739550/android-is-there-a-way-to-implement-the-barcode-scanner-into-an-app"">Android: Is there a way to implement the barcode scanner into an app?</a></p>
",495906,,-1,,2017-05-23 11:54:56,2015-08-22 13:51:53,,,,1,,,
Android,12989033,2,,11441626,2012-10-20 13:45:47,1038,,4,,"<p>You should check out the Random Music Player sample that comes with android  SDK samples.  It gives you lock screen controls and bluetooth control ability on ICS devices &amp; up.  I've used it myself, it is excellent.  Also, the UniversalMusicPlayer sample on Github: <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""nofollow"">https://github.com/googlesamples/android-UniversalMusicPlayer</a></p>

<p><a href=""http://developer.android.com/samples/index.html"" rel=""nofollow"">Sample code</a> can be found online too.</p>

<p>Igor</p>
",6998684,,6998684,,2016-04-28 13:14:13,2016-04-28 13:14:13,,,,1,,,
Android,13155277,2,,6763149,2012-10-31 9:55:00,1048,,10,,"<p>After a quite searching the more valuable information I've found:</p>

<ul>
<li>The <a href=""https://github.com/googlesamples/android-ndk/tree/master/native-audio"" rel=""nofollow noreferrer"">NativeAudio</a> project included in NDK is a good start.</li>
<li>Also it's a great start point the chapter 7 ""Playing Sound with OpenSL ES"" of the book <a href=""https://rads.stackoverflow.com/amzn/click/com/1849691525"" rel=""nofollow noreferrer"" rel=""nofollow noreferrer"">""Android NDK Beginner's Guide"" by Sylvain Ratabouil</a> (You can take a look in amazon using the ""look inside"" feature or buy it).</li>
<li><a href=""https://github.com/jkytomaki/opensl-soundpool"" rel=""nofollow noreferrer"">This google code project for replace SoundPool with OpenSL</a> is a great example too. All credits and thanks to their authors.</li>
</ul>
",973036,,3427520,,2018-07-25 7:12:09,2018-07-25 7:12:09,,,,1,,,
Android,20485213,2,,15575605,2013-12-10 2:59:45,1453,,79,,"<p>Make sure that you call the IabHelper's <code>handleActivityResult</code> in the Activity's <code>onActivityResult</code>, and <strong>NOT</strong> in the Fragment's <code>onActivityResult</code>.</p>

<p>The following code snippet is from TrivialDrive's <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/MainActivity.java#L446"" rel=""noreferrer"">MainActivity</a>:</p>

<pre><code>@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    Log.d(TAG, ""onActivityResult("" + requestCode + "","" + resultCode + "","" + data);
    if (mHelper == null) return;

    // Pass on the activity result to the helper for handling
    if (!mHelper.handleActivityResult(requestCode, resultCode, data)) {
        // not handled, so handle it ourselves (here's where you'd
        // perform any handling of activity results not related to in-app
        // billing...
        super.onActivityResult(requestCode, resultCode, data);
    }
    else {
        Log.d(TAG, ""onActivityResult handled by IABUtil."");
    }
}
</code></pre>

<p><strong>Update:</strong> </p>

<ul>
<li>There is now a <a href=""https://developer.android.com/google/play/billing/api.html"" rel=""noreferrer"">In-app Billing Version 3 API</a> (what was the version in 2013?)</li>
<li>The code sample has moved to <a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample"" rel=""noreferrer"">Github</a>. Snippet above edited to reflect current sample, but is logically the same as before.</li>
</ul>
",1161743,,1161743,,2017-07-01 3:12:41,2017-07-01 3:12:41,,,,12,,,
Android,20696266,2,,20427411,2013-12-20 4:25:54,1463,,37,,"<p>Yes, it is possible. In one of the samples they have demoed this here <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/BasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/ChangeTextBehaviorTest.java"" rel=""noreferrer"">https://github.com/googlesamples/android-testing/blob/master/ui/espresso/BasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/ChangeTextBehaviorTest.java</a></p>

<pre><code>@Test
public void changeText_newActivity() {
    // Type text and then press the button.
    onView(withId(R.id.editTextUserInput)).perform(typeText(STRING_TO_BE_TYPED),
            closeSoftKeyboard());
    onView(withId(R.id.activityChangeTextBtn)).perform(click());

    // This view is in a different Activity, no need to tell Espresso.
    onView(withId(R.id.show_text_view)).check(matches(withText(STRING_TO_BE_TYPED)));
}
</code></pre>

<p>Read the inline comment.</p>

<p>Waiting for the new activity to load is taken care of implicitly by Espresso.</p>
",1000837,,1000837,,2016-08-19 5:43:14,2016-08-19 5:43:14,,,,3,,,
Android,21046811,2,,21045509,2014-01-10 14:28:05,1485,,102,,"<ol>
<li><p>To verify if dialog appears you can simply check if View with a text that present inside the dialog is shown:</p>

<pre><code>onView(withText(""dialogText"")).check(matches(isDisplayed()));
</code></pre>

<p>or, based on text with id</p>

<pre><code>onView(withId(R.id.myDialogTextId)).check(matches(allOf(withText(myDialogText), isDisplayed()));
</code></pre></li>
<li><p>To click on dialogs button do this (button1 - OK, button2 - Cancel):</p>

<pre><code>onView(withId(android.R.id.button1)).perform(click());
</code></pre>

<p>UPDATE</p></li>
<li>I think is possible since Espresso has <a href=""https://github.com/googlesamples/android-testing"">multi window support</a>.</li>
<li>Not sure about clicking outside the custom dialog view but for checking if it is displaying or not you have to create your custom matcher and check inside it.</li>
</ol>
",2980933,,2980933,,2016-10-19 8:18:49,2016-10-19 8:18:49,,,,6,,,
Android,21221034,2,,21220993,2014-01-19 18:46:41,1494,,12,,"<p>Check out the <a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow noreferrer"">BluetoothChat</a> example that Google provides in the SDK. It'll show you how to implement basic sending of text over bluetooth.</p>
",2631333,,2631333,,2019-03-19 19:43:05,2019-03-19 19:43:05,,,,2,,,
Android,21413175,2,,21406246,2014-01-28 17:56:56,1503,,2,,"<p>Probably you have animation inside your activity, which blocks espresso execution. You have to disable it - see  <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso/BasicSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testing/tree/master/ui/espresso/BasicSample</a></p>
",2980933,,2980933,,2019-01-09 12:42:18,2019-01-09 12:42:18,,,,3,,,
Android,22356513,2,,2868047,2014-03-12 15:38:55,1546,,120,,"<p>There's a technique called <a href=""https://developer.android.com/training/system-ui/immersive.html"" rel=""noreferrer"">Immersive Full-Screen Mode</a> available in <strong>KitKat</strong>.
<img src=""https://i.stack.imgur.com/LwAMZ.png"" alt=""Immersive Full-Screen Mode Demo""></p>

<p><a href=""https://github.com/googlesamples/android-ImmersiveMode/"" rel=""noreferrer"">Example</a></p>
",2093236,,1853912,,2018-04-25 18:19:28,2018-04-25 18:19:28,,,,3,,,
Android,25078006,2,,15153708,2014-08-01 10:19:03,1687,,5,,"<p>Google releases a new API for automatic deploy to Alpha/Beta and Production channels!</p>

<p>take a look <a href=""https://developers.google.com/android-publisher/?rd=1"" rel=""nofollow"">here</a> </p>

<p>Api features: </p>

<ul>
<li>Uploading new versions of an app Releasing apps, by assigning APKs to
various Tracks (alpha, beta, staged rollout, or production) </li>
<li>Creating and modifying Google Play Store listings, including localized text
and graphics and multi-device screenshots</li>
</ul>

<p>Updated:</p>

<p>Some java samples about how to use the API: <a href=""https://github.com/googlesamples/android-play-publisher-api/tree/master/v2/java"" rel=""nofollow"">samples</a></p>

<p><strong>Updated (08-June-2015):</strong></p>

<p>I found and I'm using a gradle plugin that use this API, its called <a href=""https://github.com/Triple-T/gradle-play-publisher"" rel=""nofollow"">gradle-play-publisher</a>. It is very easy to use, you need only to get a Service account and download a p12 file with a certificate (PlayStore --> Settings --> API access >> ""Create Service Account"" >> choose p12 format and read instruction in plugin website! </p>
",713168,,713168,,2015-06-08 21:09:46,2015-06-08 21:09:46,,,,0,,,
Android,25995765,2,,25993623,2014-09-23 12:59:40,1741,,3,,"<p>Not really sure what you are asking for, but here are two samples. One if for an Android NFC reader app and one is for an Android HCE app.</p>

<p><a href=""https://github.com/googlesamples/android-CardReader"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-CardReader</a></p>

<p><a href=""https://github.com/googlesamples/android-CardEmulation"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-CardEmulation</a></p>

<p>Please clarify your question if I did not understand you correctly.</p>

<p>CardReader</p>

<p>This sample demonstrates how to implement a low-level NFC card reader, for reading cards that do not contain NDEF or Android Beam data. This sample is designed to read the virtual loyalty card implemented in the CardEmulation sample.</p>

<p>In particular, this sample demonstrates how to disable Android Beam, select which AIDs the reader is interested in, and establish communication with the card. See Host-based Card Emulation for more information on the HCE APIs.</p>

<p>CardEmulation</p>

<p>This sample demonstrates how to emulate an NFC card, using the Host Card Emulation feature added in Android 4.4. This sample makes the device appear as a loyalty card whenever the screen is on and the user taps their device on an appropriately configured NFC reader.</p>

<p>The CardReader sample can be used to read the loyalty card implemented in this sample.</p>
",4052132,,-1,,2019-03-12 1:25:20,2019-03-12 1:25:20,,,,2,,,
Android,26617199,2,,26488015,2014-10-28 19:46:33,1776,,1,,"<p><strong>1. ActionBarDrawerToggle: deprecation, new version style for Lollipop and updated samples</strong></p>

<p><a href=""http://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html"" rel=""nofollow noreferrer"">DrawerLayout</a> has a nested interface <a href=""http://developer.android.com/reference/android/support/v4/widget/DrawerLayout.DrawerListener.html"" rel=""nofollow noreferrer"">DrawerListener</a> implemented by:</p>

<ol>
<li><a href=""http://developer.android.com/reference/android/support/v4/app/ActionBarDrawerToggle.html"" rel=""nofollow noreferrer"">android.support.v4.app.ActionBarDrawerToggle (deprecated on API 21)</a>.</li>
<li><a href=""http://developer.android.com/reference/android/support/v7/app/ActionBarDrawerToggle.html"" rel=""nofollow noreferrer"">android.support.v7.app.ActionBarDrawerToggle (recommended  version)</a>.</li>
</ol>

<p>The new <a href=""http://developer.android.com/tools/support-library/features.html#v7-appcompat"" rel=""nofollow noreferrer"">support-v7-appcompat</a> version is compatible with <a href=""https://www.android.com/versions/lollipop-5-0/"" rel=""nofollow noreferrer"">Android Lollipop</a> and <a href=""https://developer.android.com/design/material/index.html"" rel=""nofollow noreferrer"">Material Design</a> style.</p>

<p>See <a href=""https://stackoverflow.com/a/27086157/1009132"">this response</a> to update it, or the <a href=""https://github.com/google/iosched"" rel=""nofollow noreferrer"">Google I/O app implementation</a> and <a href=""https://github.com/googlesamples/android-NavigationDrawer"" rel=""nofollow noreferrer"">Google sample</a>.</p>

<p>Requires latest SDK version, appcompat-v7.21.0.+, support-v4.21.0.+ and Android Support Repository.</p>

<hr>

<p><strong>2. Travis configuration: Latest SDK tools, platform-tools, build-tools and extra-m2repository required</strong></p>

<p>Add <code>extra-android-m2repository</code> and  <code>build-tools-21.1.1</code> to <code>android: components:</code>.</p>

<p><a href=""http://docs.travis-ci.com/user/languages/android/#CI-Environment-for-Android-Projects"" rel=""nofollow noreferrer"">Travis CI for Android projects</a> uses tools 23.0.2 by default, Lollipop requires <a href=""http://developer.android.com/tools/revisions/platforms.html#5.0"" rel=""nofollow noreferrer"">SDK tools 23.0.5</a>. </p>

<blockquote>
  <p>Important: To download the most recent Android system components from
  the Android SDK Manager, you must first update the SDK Tools to the
  most recent release and restart the SDK Manager. If you do not, the
  latest Android system components will not be available for download.</p>
</blockquote>

<p>You need update SDK <code>tools</code> first so you get the latest revisions of the other components. Tools v23.0.5 requires <code>platform-tools</code> v19+ to be updated and v21+ to work. Plus platform, sys-img, etc. Try this:</p>

<pre><code>android:
  components:
    # Uncomment the lines below if you want to
    # use the latest revision of Android SDK Tools
    - platform-tools
    - tools
    - build-tools-21.1.1
    - android-21
    - extra-android-support
    - extra-android-m2repository
    - extra-google-m2repository
    - extra-google-google_play_services
    - sys-img-armeabi-v7a-android-21
  licenses:
    - 'android-sdk-license-5be876d5'
</code></pre>

<hr>

<p><strong>3. Important: Gradle based projects require extra-android-m2repository no extra-android-support</strong></p>

<p><code>extra-android-m2repository</code> contains the artifacts (.aar files) for gradle/android studio.</p>

<blockquote>
  <p>Note: If you're developing with Android Studio, select and install
  the Android Support Repository item instead (of Android Support
  Library on Eclipse).</p>
</blockquote>

<p>Further info for Android Studio: <a href=""https://developer.android.com/tools/support-library/setup.html"" rel=""nofollow noreferrer"">https://developer.android.com/tools/support-library/setup.html</a></p>

<hr>

<p><strong>4. The missing DrawerLayoutImpl class contained in android.support:support-v4:21.0.2 internal .jar</strong></p>

<p><img src=""https://i.stack.imgur.com/BQBHk.png"" alt=""Missing DrawerLayoutImpl""></p>

<p>You can try to change <code>21.0.+</code> to <code>21.0.2</code>. I'm not sure about Travis-ci dependency resolution workflow.</p>

<pre><code>compile 'com.android.support:support-v4:21.0.2'

compile 'com.android.support:appcompat-v7:21.0.2'
</code></pre>

<p>I dont know but perhaps it copies other android.support version  without the inner missing class and jar.</p>

<p>Check if the internal jar is there by adding something as this to your build:</p>

<pre><code>export MOD_NAME= yourapplicationmodulename

'cat ${TRAVIS_BUILD_DIR}/${MOD_NAME}/build/intermediates/tmp/dex/debug/libraryList.txt'
</code></pre>

<p>If you use 21.0.+ and download the m2repository 21.0.0 version but then looks for updated versions on maven it foundd Android Support Library, revision 21.0.1 without the aar, so try the new 21.0.2 version.</p>

<hr>

<p><strong>5. Espresso or Double Espresso, DrawerActions, espresso-contrib jar and other dependencies</strong></p>

<p>About <code>Espresso</code> and other transitive dependencies to old support libraries, you could try to upgrade them or exclude the android.support <a href=""http://mvnrepository.com/artifact/com.jakewharton.espresso/espresso-support-v4/1.1-r2"" rel=""nofollow noreferrer"">dependencies</a>:</p>

<pre><code>configurations {
    compile.exclude group: 'com.android.support'
}
</code></pre>

<p>I'm not familiar with <code>Double espresso</code>, a pure Gradle port of the Espresso testing utility for Android but Jake Wharton writes <a href=""https://github.com/JakeWharton/double-espresso/"" rel=""nofollow noreferrer"">here</a> (<a href=""https://code.google.com/p/android/issues/detail?id=65445"" rel=""nofollow noreferrer"">Related issue</a>):</p>

<blockquote>
  <p>Duplicated Dependencies</p>
  
  <p>Due to a bug in the current Android plugin, you may need to exclude
  dependencies which are duplicated in both the app and test app.</p>
  
  <p>For example, if you have a dependency on Dagger you will need to
  manually exclude it from the test dependency for the time being.</p>
  
  <p>androidTestCompile('com.jakewharton.espresso:espresso:1.1-r3') {<br>
  exclude group: 'com.squareup.dagger' } The following are the
  dependencies of Espresso which may need to be temporarily excluded:</p>
  
  <p>com.squareup.dagger:dagger:1.2.1 ... and those of the 'support-v4'
  module:</p>
  
  <p>com.android.support:support-v4:21.0.0 &lt;-----------</p>
</blockquote>

<p>About <a href=""https://code.google.com/p/android-test-kit/wiki/Espresso"" rel=""nofollow noreferrer"">Espresso</a>, I read that supports up to kitkat but I don't know if Lollipop is now  fully supported and I found a related issue about <a href=""https://code.google.com/p/android-test-kit/issues/detail?id=65&amp;thanks=65&amp;ts=1396432619"" rel=""nofollow noreferrer"">Espresso.registerIdlingResources(instance)</a> and I quote from <a href=""https://code.google.com/p/android-test-kit/wiki/Espresso#To_use_Espresso_without_dependencies"" rel=""nofollow noreferrer"">here</a>:</p>

<blockquote>
  <p>Sometimes you want to use a version of Espresso where you are in
  control of the dependencies For example, Espresso utilizes Hamcrest
  Matchers and therefore has an explicit dependency on it. To avoid
  errors while Dexing your test code <strong>you can use the no dependencies
  version of Espresso and explicitly declare your dependencies</strong></p>
  
  <p>If you need any functionality from the contrib library, such as
  <strong>DrawerActions</strong>, copy the <strong>espresso-contrib jar</strong> from <a href=""https://code.google.com/p/android-test-kit/source/browse/#git%2Fbin%2Fespresso-contrib-dependencies"" rel=""nofollow noreferrer"">here</a>.
  Espresso actions for using a <strong>DrawerLayout</strong>.</p>
</blockquote>

<hr>

<p><strong>6. ProGuard shrinking step: update rules for API 21 changes</strong></p>

<p>I'm using <a href=""https://github.com/google/iosched"" rel=""nofollow noreferrer"">Google I/O app implementation</a> as I saw you are doing to learn Material Design and all this stuff. They recently <a href=""https://github.com/ardock/iosched/blob/master/android/src/main/java/com/google/samples/apps/iosched/ui/BaseActivity.java#L375"" rel=""nofollow noreferrer"">updated the app, added app-compat and fixed nav drawer</a> but I think they didn't update ProGuard rules. If you are using a similar configuration, I suggest you update it and check the aapt rules to be sure missing classes are kept.</p>

<p>As an experimental sample, I'm learning it too, I added the <a href=""http://developer.android.com/reference/android/view/View.html#View(android.content.Context,%20android.util.AttributeSet,%20int,%20int)"" rel=""nofollow noreferrer"">new API 21 View constructor</a> and <code>includedescriptorclasses</code> </p>

<pre><code># Added includedescriptorclasses for unkept android.support descriptors
-keep,includedescriptorclasses public class * extends android.view.View {
public &lt;init&gt;(android.content.Context);
public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);
public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int, int); # Added in API 21
public void set*(...);
</code></pre>

<p>And 43 of 44 notes about unkept descriptors were solved, included </p>

<blockquote>
  <p>Note: the configuration keeps the entry point 'android.support.v4.widget.DrawerLayout { void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener); }', but not the descriptor class 'android.support.v4.widget.DrawerLayout$DrawerListener'</p>
</blockquote>
",1009132,,-1,,2017-05-23 12:22:48,2015-10-27 9:19:13,,,,4,,,
Android,27114050,2,,27107212,2014-11-24 20:58:52,1803,,12,,"<p><strong>UPDATE</strong>: 
A comment clarified that the question was actually about viewing/controlling other apps' MediaSessions, not your own.</p>

<p>Although there is no way to do it directly, due to privacy reasons, you have two options with different levels of available controls/information and different requirements for user interaction:</p>

<ol>
<li><p>If you just want to skip musics or play/pause, you can send media button events (via <a href=""http://developer.android.com/reference/android/media/AudioManager.html#dispatchMediaKeyEvent(android.view.KeyEvent)"" rel=""nofollow noreferrer"">AudioManager</a>) and/or <a href=""https://stackoverflow.com/questions/11275400/reliably-pausing-media-playback-system-wide-in-android"">request/release audio focus</a>.</p></li>
<li><p>If you need to also know the metadata of what is currently playing, there is a more intrusive way that requires explicit user interaction:</p></li>
</ol>

<p>First, create and register a NotificationListenerService:</p>

<pre><code>public class NotificationListener extends NotificationListenerService {
    public NotificationListener() {
    }
}
</code></pre>

<p>In AndroidManifest.xml:</p>

<pre><code>&lt;service android:name="".NotificationListener""
    android:permission=""android.permission.BIND_NOTIFICATION_LISTENER_SERVICE""
    android:enabled=""true"" android:exported=""true""&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=""android.service.notification.NotificationListenerService"" /&gt;
    &lt;/intent-filter&gt;
&lt;/service&gt;
</code></pre>

<p>Then you will be able to fetch MediaSessions by specifying your NotificationListenerService componentName in the getActiveSessions call:</p>

<pre><code>MediaSessionManager mm = (MediaSessionManager) this.getSystemService(
    Context.MEDIA_SESSION_SERVICE);
List&lt;MediaController&gt; controllers = mm.getActiveSessions(
    new ComponentName(this, NotificationListener.class));
Log.i(TAG, ""found "" + controllers.size() + "" controllers"");
</code></pre>

<p>One caveat is that the user will need to explicitly give your app Notification access permission, by going to Settings -> Sound &amp; Notification -> Notification access</p>

<h3>Original response:</h3>

<p>The object that describes your MediaSession and that can be passed along to allow other components/apps to control an existing MediaSesion is the MediaSession.Token. With a token, you can create a MediaController directly, without resorting to the MediaSessionManager. The code for that would be something like:</p>

<pre><code>MediaController mediaController = new MediaController(getActivity(),
    sessionToken);
</code></pre>

<p>This doesn't require any special permission. If you are also using the MediaBrowser or the MediaBrowserService, you should get the token associated with the MediaBrowser, by using it's getSessionToken() method.</p>

<p>We just released <a href=""https://github.com/googlesamples/android-MediaBrowserService"" rel=""nofollow noreferrer"">an example</a> that uses a MediaBrowserService to handle music browsing, playback and media style notification and provides a simple Activity to control playback.</p>
",1429114,,-1,,2017-05-23 12:34:12,2014-11-26 19:51:33,,,,4,,,
Android,27268376,2,,27267850,2014-12-03 9:48:48,1811,,14,,"<p>you can view this example may this will help you</p>

<p>Android Camera2Basic Sample</p>

<p>This sample demonstrates the basic use of Camera2 API. Check the source code to see how you can display camera preview and take pictures. Pre-requisites</p>

<p>Android SDK v21
Android Build Tools v21.1.1
Android Support Repository</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></p>
",3690456,,,,,2014-12-03 9:48:48,,,,2,,,
Android,27268418,2,,26925384,2014-12-03 9:50:44,1811,,2,,"<p>you can view this example may this will help you</p>

<p>Android Camera2Basic Sample</p>

<p>This sample demonstrates the basic use of Camera2 API. Check the source code to see how you can display camera preview and take pictures.
Pre-requisites</p>

<pre><code>Android SDK v21
Android Build Tools v21.1.1
Android Support Repository
</code></pre>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic</a></p>

<p>Please check this Github Repo for Android L (API 21) Camera Preview Library PkmX/lcamera</p>
",3690456,,,,,2014-12-03 9:50:44,,,,0,,,
Android,27515749,2,,27437536,2014-12-16 23:19:46,1825,,3,,"<p>You could try the <a href=""https://github.com/googlesamples/android-fit/blob/master/BasicHistorySessions/app/src/main/java/com/google/android/gms/fit/samples/basichistorysessions/MainActivity.java"" rel=""nofollow"">basichistorysessions sample</a> from Google Fit Github repository.</p>

<p>sample code:</p>

<pre><code>  // Build a session read request
        SessionReadRequest readRequest = new SessionReadRequest.Builder()
                .setTimeInterval(startTime, endTime, TimeUnit.MILLISECONDS)
                .read(DataType.TYPE_SPEED)
                .setSessionName(SAMPLE_SESSION_NAME)
                .build();


// Invoke the Sessions API to fetch the session with the query and wait for the result
                    // of the read request.
                    SessionReadResult sessionReadResult =
                            Fitness.SessionsApi.readSession(mClient, readRequest)
                                    .await(1, TimeUnit.MINUTES);

                    // Get a list of the sessions that match the criteria to check the result.
                    Log.i(TAG, ""Session read was successful. Number of returned sessions is: ""
                            + sessionReadResult.getSessions().size());
                    for (Session session : sessionReadResult.getSessions()) {
                        // Process the session
                        dumpSession(session);

                        // Process the data sets for this session
                        List&lt;DataSet&gt; dataSets = sessionReadResult.getDataSet(session);
                        for (DataSet dataSet : dataSets) {
                            dumpDataSet(dataSet);
                        }
                    }
</code></pre>

<p>You can refer to this <a href=""https://developers.google.com/fit/android/using-sessions#read_fitness_data_using_sessions"" rel=""nofollow"">reading fitness data using sessions</a> section for more information.</p>
",4195406,,,,,2014-12-16 23:19:46,,,,1,,,
Android,27703286,2,,27695071,2014-12-30 10:01:07,1838,,9,,"<p><strong>Brief response:</strong></p>

<p><a href=""https://stackoverflow.com/questions/1980452/what-causes-java-lang-incompatibleclasschangeerror"">This</a> seems a good link about <code>java.lang.IncompatibleClassChangeError</code>. And If you try it on CI:</p>

<p>Emulator is not fully booted after wait-for-device, it's not ready for your tests and your app is not installed due a timeout, so there are no tests performed and the build fails as a new behavior added to alert you about it.</p>

<p>You can replace <code>adb wait-for-device</code> by a loop waiting for <code>stopped</code> state (fully booted) checking <code>adb -e shell getprop init.svc.bootanim</code> as <a href=""https://github.com/google/iosched/blob/master/scripts/wait_for_emulator.sh"" rel=""nofollow noreferrer"">this script</a> in public domain does. <a href=""https://devmaze.wordpress.com/2011/12/12/starting-and-stopping-android-emulators/"" rel=""nofollow noreferrer"">Further info here</a>.</p>

<p>Possible CI issue, Double Espresso was deprecated and Espresso 2.0 released:</p>

<p><strong>About CI and no tests found:</strong></p>

<p>I answered another question <a href=""https://stackoverflow.com/questions/27084948/com-android-builder-testing-connecteddevice-hasteststestavd-5-0-failed"">but specific for Travis-ci here</a>. Similar error but due the script used was bugged. If you run <code>gradle installDebug --debug</code> you'll know more about the error (share the log here).</p>

<p>But running the same steps on a CI server, if I'm right, you'll see an InstallException caused by ShellCommandUnresponsiveException due a two minutes <code>INSTALL_TIMEOUT</code>. You can increase this value using an environment variable <code>ADB_INSTALL_TIMEOUT=6</code> #minutes, but this is not your problem now. </p>

<p>If you are running it locally first, try it without <code>-no-window</code> (so you see it) or add <code>-no-boot-anim</code> (speed up it but is incompatible with wait-for-emulator script) or use <code>adb wait-for-device &amp;&amp; sleep 300</code> (to be sure emulator is fully booted).</p>

<p><strong>About Espresso:</strong></p>

<p><a href=""https://github.com/JakeWharton/double-espresso"" rel=""nofollow noreferrer"">Double Espresso is deprecated</a> because <a href=""https://code.google.com/p/android-test-kit/wiki/ReleaseNotes"" rel=""nofollow noreferrer"">Espresso 2.0 is now available</a>. Double Espresso is a pure Gradle port of Espresso 1.1 and Jake Wharton deprecated it when version 2.0 was published two weeks ago.</p>

<p>They <a href=""https://code.google.com/p/android-test-kit/w/list"" rel=""nofollow noreferrer"">updated the wiki</a>  and <a href=""https://code.google.com/p/android-test-kit/wiki/EspressoSetupInstructions#Javadoc"" rel=""nofollow noreferrer"">JavaDoc (they will move it to android.com)</a>.</p>

<p><a href=""https://code.google.com/p/android-test-kit/wiki/EspressoSetupInstructions"" rel=""nofollow noreferrer"">You can now use the Android Support Repository to download the latest version.</a></p>

<p>And Google <a href=""https://github.com/googlesamples/android-testing"" rel=""nofollow noreferrer"">published new samples:</a></p>

<blockquote>
  <p>Samples prerequisites: Android SDK v21, Android Build Tools v21.1.2,
  Android Support Repository.</p>
  
  <p>These samples use the Gradle build system. To build a project, enter
  the project directory and use the ./gradlew assemble command or use
  ""Import Project"" in Android Studio. Use ./gradlew connectedCheck to
  run the tests on a connected emulator or device.</p>
</blockquote>

<p><strong>About Gradle tasks:</strong></p>

<p>From <a href=""http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Android-tasks"" rel=""nofollow noreferrer"">Android tasks</a> and <a href=""http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Running-tests"" rel=""nofollow noreferrer"">Running tests</a> (Gradle Plugin User Guide):</p>

<ul>
<li><code>assemble</code> The task to assemble the output(s) of the project</li>
<li><code>connectedCheck</code> Runs checks that requires a connected device or emulator.</li>
</ul>

<p>Checks requiring a connected device are launched with the anchor task called <code>connectedCheck</code>. This depends on the task androidTest and therefore will run it. This task does the following:</p>

<ul>
<li>Ensure the app and the test app are built (depending on assembleDebug and assembleTest)</li>
<li>Install both apps</li>
<li>Run the tests</li>
<li>Uninstall both apps.</li>
</ul>

<p><strong>So I think:</strong></p>

<ul>
<li>It's a good moment to migrate to Espresso 2.0 (and avoid the <a href=""https://github.com/JakeWharton/double-espresso/blob/gradle/README.md"" rel=""nofollow noreferrer"">dependencies?</a> issue).</li>
<li>You need to wait for emulator stopped state and I recommend <a href=""https://devmaze.wordpress.com/2011/12/12/starting-and-stopping-android-emulators/"" rel=""nofollow noreferrer"">this link</a> to understand it.</li>
<li>You don't need specific <code>install*</code> tasks and can replace <code>assemble</code> by <code>build</code> (includes <code>lint</code>) and use <code>connectedCheck</code> (includes <code>connectedAndroidTest</code>).</li>
<li>If there is more than one ABI installed, you'll need to choose one (and answer no): <code>- echo no | android create avd -f -n test -t $ANDROID_TARGET -b $ANDROID_ABI</code></li>
<li>I would try their samples on the CI server you choose as a second step following your goal.</li>
</ul>
",1009132,,-1,,2017-05-23 10:28:11,2015-01-14 12:25:51,,,,2,,,
Android,27739665,2,,22246183,2015-01-02 9:02:03,1841,,11,,"<h2>Espresso 2.0</h2>

<p>Recently <strong>Espresso 2.0</strong> was released making it now part of the <strong>Android Support Library</strong>. This was <a href=""https://plus.google.com/+AndroidDevelopers/posts/jHXFkebKjEb"" rel=""nofollow noreferrer"">announced on the android dev blog</a>.</p>

<h2>Setup Guide</h2>

<p>With that they also <a href=""https://google.github.io/android-testing-support-library/docs/espresso/setup/index.html"" rel=""nofollow noreferrer"">linked an updated setup guide</a>. There you can find instructions to configure from scratch or to update your existing espresso config for 2.0.</p>

<h2>Other Tips</h2>

<p><em>Changes are the above 2 links contain all information you need. If not I have listed some common mistakes below</em></p>

<h3>Upgrade Android Studio to 1.0.*</h3>

<p>Start by upgrading your android Studio build. You should be able to get at least 1.0 from the stable builds channels (=default). So just use the menu option <strong>Android Studio</strong> > <strong>Check for updates...</strong> .</p>

<p>To get the latest from the latest you can also go into Preferences, search for updates and change the channel to <strong>canary channel</strong>.</p>

<h3>Update Android Support Library to v 11+</h3>

<p>Espresso was included in the Support library from version 11 so you have to get at least that version. Check for updates using the <strong>Android SDK manager</strong>. The Support Library is within the <strong>Extras</strong> tree at the bottom.</p>

<h3>New dependencies and namespace</h3>

<p>If upgading from an older espresso release you'll have to update the dependencies and the namespace. For new projects just add these to the <code>dependencies</code> in your <code>build.gradle</code> file.</p>

<pre><code>dependencies {
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
}
</code></pre>

<p>And since the namespace changed you'll have to update all imports:</p>

<pre><code>android.support.test.espresso
</code></pre>

<p>Note that it's easier to use static imports. <em>Some</em> commonly used imports as an example:</p>

<pre><code>import static android.support.test.espresso.Espresso.onView;
import static android.support.test.espresso.assertion.ViewAssertions.matches;
import static android.support.test.espresso.matcher.ViewMatchers.withId;
import static android.support.test.espresso.matcher.ViewMatchers.withText;
import static android.support.test.espresso.matcher.ViewMatchers.withContentDescription;
</code></pre>

<p>For asserts use hamcrest, again <em>some</em> examples:</p>

<pre><code>import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.startsWith;
import static org.hamcrest.Matchers.endsWith;
import static org.hamcrest.Matchers.equalToIgnoringCase;
import static org.hamcrest.Matchers.equalToIgnoringWhiteSpace;
</code></pre>

<h3>Instrumentation runner</h3>

<p>The test runner needs to be configured in both your <code>build.gradle</code> file within defaultConfig and the run configuration used to launch your tests from Android Studio. </p>

<pre><code>defaultConfig {
    testInstrumentationRunner ""android.support.test.runner.AndroidJUnitRunner""
}
</code></pre>

<p>And in your run configuration use this as instrumentation runner (full class name only):</p>

<pre><code>android.support.test.runner.AndroidJUnitRunner
</code></pre>

<h3>Example test case</h3>

<p>And an example test case to finish with. Note that <code>MainActivity</code> is your actvitiy you want to test. The tests themselves are public methods that start with test, like <code>testListGoesOverTheFold</code> in the below example.</p>

<pre><code>@LargeTest
public class HelloWorldEspressoTest extends ActivityInstrumentationTestCase2&lt;MainActivity&gt; {

    public HelloWorldEspressoTest() {
            super(MainActivity.class);
        }

    @Override
    public void setUp() throws Exception {
        super.setUp();
        getActivity();
    }

    public void testListGoesOverTheFold() {
        onView(withText(""Hello world"")).check(isDisplayed());
    }
}
</code></pre>

<p><em>For more information on writing tests visit <a href=""https://github.com/googlesamples/android-testing"" rel=""nofollow noreferrer"">the espresso start guide</a>.</em></p>
",312743,,1947601,,2016-09-08 0:06:10,2016-09-08 0:06:10,,,,0,,,
Android,27820255,2,,2456344,2015-01-07 13:09:10,1847,,64,,"<p>Since API Level 21 (Lollipop) Android provides a <a href=""https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html"" rel=""noreferrer"">PdfRenderer class</a>:</p>

<pre><code>// create a new renderer
 PdfRenderer renderer = new PdfRenderer(getSeekableFileDescriptor());

 // let us just render all pages
 final int pageCount = renderer.getPageCount();
 for (int i = 0; i &lt; pageCount; i++) {
     Page page = renderer.openPage(i);

     // say we render for showing on the screen
     page.render(mBitmap, null, null, Page.RENDER_MODE_FOR_DISPLAY);

     // do stuff with the bitmap

     // close the page
     page.close();
 }

 // close the renderer
 renderer.close();
</code></pre>

<p>For more information see the <a href=""https://github.com/googlesamples/android-PdfRendererBasic"" rel=""noreferrer"">sample app</a>.</p>

<p>For older APIs I recommend <a href=""https://github.com/barteksc/AndroidPdfViewer"" rel=""noreferrer"">Android PdfViewer library</a>, it is very fast and easy to use, licensed under Apache License 2.0:</p>

<pre><code>pdfView.fromAsset(String)
  .pages(0, 2, 1, 3, 3, 3) // all pages are displayed by default
  .enableSwipe(true)
  .swipeHorizontal(false)
  .enableDoubletap(true)
  .defaultPage(0)
  .onDraw(onDrawListener)
  .onLoad(onLoadCompleteListener)
  .onPageChange(onPageChangeListener)
  .onPageScroll(onPageScrollListener)
  .onError(onErrorListener)
  .enableAnnotationRendering(false)
  .password(null)
  .scrollHandle(null)
  .load();
</code></pre>
",2380518,,2380518,,2017-02-20 13:19:55,2017-02-20 13:19:55,,,,10,,,
Android,27890329,2,,27885600,2015-01-11 18:04:36,1851,,3,,"<p>i hate answering my own question, but i always do:).</p>

<p>so from an example of google <a href=""https://github.com/googlesamples/android-SwipeRefreshMultipleViews"" rel=""nofollow"">SwipeRefreshMultipleViews</a>, with a little change in class <code>MultiSwipeRefreshLayout</code> i managed to solve the problem.</p>

<pre><code>&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""@color/black""&gt;

    &lt;android.support.v7.widget.Toolbar xmlns:app=""http://schemas.android.com/apk/res-auto""
        android:id=""@+id/main_toolbar""
        android:layout_width=""match_parent""
        android:layout_height=""?attr/actionBarSize""
        android:background=""@color/dark_blue""
        app:theme=""@style/Theme.AppCompat""
        android:layout_alignParentTop=""true""/&gt;

    &lt;com.mehdok.slidingtabs.SlidingTabLayout
        android:id=""@+id/main_sliding_tabs""
        android:background=""@color/blue""   
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:layout_below=""@id/main_toolbar"" /&gt;

    &lt;fr.castorflex.android.smoothprogressbar.SmoothProgressBar
        xmlns:android=""http://schemas.android.com/apk/res/android""
            xmlns:app=""http://schemas.android.com/apk/res-auto""
        android:layout_width=""match_parent""
            android:layout_height=""4dp""
        android:indeterminate=""true""
            app:spb_sections_count=""4""
        app:spb_color=""@color/white""
            app:spb_speed=""0.5""
        app:spb_stroke_width=""4dp""
            app:spb_stroke_separator_length=""4dp""
        app:spb_reversed=""false""
            app:spb_mirror_mode=""false""
        app:spb_progressiveStart_activated=""false""
            app:spb_progressiveStart_speed=""1.5""
        app:spb_progressiveStop_speed=""3.4""
        android:layout_below=""@id/main_toolbar""
        android:visibility=""gone""
        android:id=""@+id/downloadBar""/&gt;

    &lt;com.mehdok.views.MultiSwipeRefreshLayout
        android:id=""@+id/swiperefresh""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:layout_below=""@id/main_sliding_tabs""&gt;

    &lt;android.support.v4.view.ViewPager
                android:id=""@+id/main_pager""
                android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        &gt;
        &lt;/android.support.v4.view.ViewPager&gt;
        &lt;/com.mehdok.views.MultiSwipeRefreshLayout&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>the java part</p>

<pre><code>public class MultiSwipeRefreshLayout extends SwipeRefreshLayout {

    private GridView[] mSwipeableChildren;
    private int visibleView = 0;

    public MultiSwipeRefreshLayout(Context context) {
        super(context);
        mSwipeableChildren = new GridView[3];
    }

    public MultiSwipeRefreshLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
        mSwipeableChildren = new GridView[3];
    }


    public void addGridView(GridView v, int i)
    {
        mSwipeableChildren[i] = v;
    }


    /**
     * This method controls when the swipe-to-refresh gesture is triggered. By returning false here
     * we are signifying that the view is in a state where a refresh gesture can start.
     *
     * &lt;p&gt;As {@link android.support.v4.widget.SwipeRefreshLayout} only supports one direct child by
     * default, we need to manually iterate through our swipeable children to see if any are in a
     * state to trigger the gesture. If so we return false to start the gesture.
     */
    @Override
    public boolean canChildScrollUp() {
        if (mSwipeableChildren != null &amp;&amp; mSwipeableChildren.length &gt; 0) {
                for(int i = 0; i &lt; 3; i++)
                {
                        if((i == visibleView) &amp;&amp; mSwipeableChildren[i] != null &amp;&amp; !canViewScrollUp(mSwipeableChildren[i]))
                        {
                                return false;
                        }
                }               
        }

        return true;
    }



    /**
     * Utility method to check whether a {@link View} can scroll up from it's current position.
     * Handles platform version differences, providing backwards compatible functionality where
     * needed.
     */
    private static boolean canViewScrollUp(GridView view)
    {
        return view.getChildCount() &gt; 0 &amp;&amp;
                (view.getFirstVisiblePosition() &gt; 0
                        || view.getChildAt(0).getTop() &lt; view.getPaddingTop());
    }

    public void setVisibleView(int i)
    {
        visibleView = i;
    }

}
</code></pre>
",884076,,884076,,2016-05-19 10:47:49,2016-05-19 10:47:49,,,,8,,,
Android,27906489,2,,26664922,2015-01-12 16:26:27,1852,,20,,"<p>If you take a look at your logs, immediately above the stack trace you'll probably see a warning similar to:</p>

<pre><code>W/OpenGLRenderer﹕ Layer exceeds max. dimensions supported by the GPU (1080x5856, max=4096x4096)
</code></pre>

<p>Scene animations work by creating a bitmap layer of the target scene. The GPU has a maximum capacity for this layer. On a Nexus 5 this is 4096x4096. Your target scene has views in it which result in a layer which is too large, probably due to the large amounts of text content. This exceeds the capacity of the GPU causing the app to crash. The reason why this doesn't occur on the emulator is because the host GPU has a greater memory.</p>

<p><strong>Solution</strong></p>

<p>Avoid creating a target layer which is higher than 4096 before the transition animation ends. Instead load your content after the transition ends. You can listen for the transition ended event by implementing the <a href=""https://developer.android.com/reference/android/transition/Transition.TransitionListener.html"" rel=""noreferrer"">TransitionListener interface</a>. An example of this can be found <a href=""https://github.com/googlesamples/android-ActivitySceneTransitionBasic/blob/master/Application/src/main/java/com/example/android/activityscenetransitionbasic/DetailActivity.java"" rel=""noreferrer"">here</a>. You can then load your content. </p>
",824903,,,,,2015-01-12 16:26:27,,,,4,,,
Android,27996730,2,,24611977,2015-01-17 6:08:32,1856,,3,,"<p>LocationClient is removed. GoogleApiClient is api to use for Google Play services Location APIs.</p>

<p>The sample code for the common scenarios is <a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow"">here</a> and the training classes <a href=""http://developer.android.com/training/location/index.html"" rel=""nofollow"">were updated</a> with more coming soon.</p>
",1375603,,,,,2015-01-17 6:08:32,,,,0,,,
Android,28056617,2,,28034982,2015-01-20 22:50:09,1860,,2,,"<p>The APIs or controls exposed by MediaController are the most common uses cases concerned with remote control from either the lockscreen, notifications or headset media buttons. </p>

<ol>
<li><p>The <a href=""http://developer.android.com/reference/android/media/session/MediaController.html#sendCommand(java.lang.String,%20android.os.Bundle,%20android.os.ResultReceiver)"" rel=""nofollow"">MediaController#sendCommand(String command, Bundle args, ResultReceiver cb)</a> was designed for app specific custom commands between your application UI and the service managing the MediaSession. This is well suited for the specific usecase you have in mind w.r.t EQ settings. </p></li>
<li><p><a href=""http://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#sendCustomAction(java.lang.String,%20android.os.Bundle)"" rel=""nofollow"">MediaController.TransportControls#sendCustomAction(...)</a> on the other hand is for any PlaybackState.CustomAction(s) which can be displayed by other apps. An example of a CustomAction would be say marking an item as a favorite. (You can see how this is implemented in the MusicService class in the <a href=""http://github.com/googlesamples/android-MediaBrowserService"" rel=""nofollow"">MediaBrowserService</a> sample)</p></li>
</ol>

<p>Also note that there is a <a href=""https://developer.android.com/reference/android/media/VolumeProvider.html"" rel=""nofollow"">VolumeProvider</a> class that can be set on the session to receive callbacks about changes/set. In the absence of this, the session handles updates to volume.</p>
",80221,,80221,,2015-01-20 22:59:00,2015-01-20 22:59:00,,,,3,,,
Android,28201586,2,,28200818,2015-01-28 20:17:23,1868,,1,,"<p>Play Services has a Low Consumption location API. You can found more info in <a href=""https://developer.android.com/training/location/receive-location-updates.html"" rel=""nofollow"">Android Developer Site</a></p>

<p><strong>UPDATE</strong></p>

<p><a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow"">Here</a> you can found a example of Play Location Service stored in Github. Look the <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates"" rel=""nofollow"">LocationUpdates</a> example.</p>

<p>When you setup you Location Request you can change the priority, see more info <a href=""https://developer.android.com/training/location/receive-location-updates.html#location-request"" rel=""nofollow"">here</a>. I think that you use <code>PRIORITY_BALANCED_POWER_ACCURACY</code></p>
",766654,,766654,,2015-01-29 14:07:32,2015-01-29 14:07:32,,,,5,,,
Android,28363249,2,,28248828,2015-02-06 10:08:26,1876,,5,,"<p>Unit tests run on a local JVM (without a need for a device or emulator) are supported in Android Studio since version 1.1 and Gradle 1.1.0-rc1.</p>

<p>For setup instructions see: <a href=""http://tools.android.com/tech-docs/unit-testing-support"" rel=""nofollow"">http://tools.android.com/tech-docs/unit-testing-support</a></p>

<p>Examples: <a href=""https://github.com/googlesamples/android-testing"" rel=""nofollow"">https://github.com/googlesamples/android-testing</a> (and then /unittesting/BasicSample)</p>

<p>If you want JUnit4 support - checkout Testing Support Library <a href=""https://developer.android.com/tools/testing-support-library/index.html"" rel=""nofollow"">https://developer.android.com/tools/testing-support-library/index.html</a></p>
",1135827,,1135827,,2015-04-06 13:10:03,2015-04-06 13:10:03,,,,0,,,
Android,28439147,2,,11369332,2015-02-10 18:32:56,1881,,1,,"<p>I am also encountering this error. My app is only published in beta-testing mode. Could that be the problem, I wonder? </p>

<p>In case it is relevant, I am using a modified version of <a href=""https://github.com/googlesamples/android-play-publisher-api/tree/master/v2/python"" rel=""nofollow"">googlesamples/android-play-publisher-api</a> where I changed <code>basic_list_apks</code> to act as a subscription revoker, by modifying the service-call defining line to be like this:</p>

<pre><code>service.purchases().subscriptions().revoke(packageName=package_name,
    subscriptionId=product_id,
    token=purchase_token)
</code></pre>
",1776544,,,,,2015-02-10 18:32:56,,,,0,,,
Android,28479262,2,,28321007,2015-02-12 13:55:25,1883,,2,,"<p>You have <a href=""https://github.com/googlesamples/android-play-publisher-api/blob/master/v2/java/src/com/google/play/developerapi/samples/BasicUploadApk.java"" rel=""nofollow"">here</a> an example of how they're sending an apk, following the <a href=""https://developers.google.com/resources/api-libraries/documentation/androidpublisher/v2/java/latest/com/google/api/services/androidpublisher/AndroidPublisher.html"" rel=""nofollow"">API doc</a>, 
you should arrive to something like that </p>

<pre><code>Edits edits = service.edits();
Insert editRequest = edits
.insert(ApplicationConfig.PACKAGE_NAME,
   null /** no content */);
AppEdit edit = editRequest.execute();

Upload uploadRequest = edits
.images()
.upload(ApplicationConfig.PACKAGE_NAME,
   editId,
   ""fr-FR"",
   ""Your image type"",
   mediaContent); // Your image as an AbstractInputStreamContent
Image image = uploadRequest.execute();
</code></pre>

<p>For the mediaContent var, <a href=""http://javadoc.google-api-java-client.googlecode.com/hg/1.4.1-beta/com/google/api/client/http/AbstractInputStreamContent.html"" rel=""nofollow"">here's</a> the link to the API </p>

<p>Hope that'll help you :)</p>
",3008340,,,,,2015-02-12 13:55:25,,,,0,,,
Android,28576705,2,,24819546,2015-02-18 5:36:57,1888,,2,,"<p>You can do this with the Google Play Developer API but it looks pretty painful.</p>

<p><a href=""https://developers.google.com/android-publisher/edits/overview"" rel=""nofollow"">https://developers.google.com/android-publisher/edits/overview</a></p>

<p><a href=""https://github.com/googlesamples/android-play-publisher-api/blob/master/v2/java/src/com/google/play/developerapi/samples/ListApks.java"" rel=""nofollow"">https://github.com/googlesamples/android-play-publisher-api/blob/master/v2/java/src/com/google/play/developerapi/samples/ListApks.java</a></p>
",192798,,,,,2015-02-18 5:36:57,,,,0,,,
Android,28622798,2,,28609915,2015-02-20 6:21:26,1890,,5,,"<p>The best and most comprehensive example is Android's official bluetooth chat example. You probably do not need to change most of the stuff. See this:
<a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BluetoothChat</a></p>
",3236788,,3236788,,2018-05-04 17:27:17,2018-05-04 17:27:17,,,,2,,,
Android,28737314,2,,28734594,2015-02-26 8:11:36,1896,,5,,"<p>google camera2video sample code :<br />    <a href=""https://github.com/googlesamples/android-Camera2Video"" rel=""noreferrer"">https://github.com/googlesamples/android-Camera2Video</a></p>
",4364595,,,,,2015-02-26 8:11:36,,,,5,,,
Android,28765850,2,,28764222,2015-02-27 13:05:30,1898,,3,,"<blockquote>
  <p>The Google Play services location APIs are preferred over the Android
  framework location APIs (android.location) as a way of adding location
  awareness to your app. If you are currently using the Android
  framework location APIs, you are strongly encouraged to switch to the
  Google Play services location APIs as soon as possible.    </p>
</blockquote>

<p>Source: <a href=""http://developer.android.com/training/location/index.html"" rel=""nofollow"">Making Your App Location-Aware</a></p>

<p>I have used it and found the following to be quite efficient, esp in terms of nuking the battery vs obtaining the location frequently, accurately:</p>

<p><em>1.</em>  Use <a href=""http://developer.android.com/reference/com/google/android/gms/location/FusedLocationProviderApi.html"" rel=""nofollow"">Fused Location Provider</a>, <a href=""http://developer.android.com/reference/com/google/android/gms/common/api/GoogleApiClient.html"" rel=""nofollow"">GoogleApiClient</a>:  </p>

<pre><code>   mGoogleApiClient = new GoogleApiClient.Builder(this)
           .addConnectionCallbacks(this)
           .addOnConnectionFailedListener(this)
           .addApi(LocationServices.API)
           .build();
           mGoogleApiClient.connect();  
</code></pre>

<p><em>2.</em>  Use <a href=""http://developer.android.com/reference/com/google/android/gms/location/LocationRequest.html"" rel=""nofollow"">LocationRequest</a> according to the requirement:  </p>

<pre><code>mLocationRequest = new LocationRequest();    
mLocationRequest.setFastestInterval(120000);
    //there are other options associated with this objects
    // including types of priority
    mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);
</code></pre>

<p><em>3.</em>  Set the LocationServices to use a <code>this</code> if class implements <code>LocationListener</code> or define a new one in:  </p>

<pre><code>LocationServices.FusedLocationApi.requestLocationUpdates(
                     mGoogleApiClient, mLocationRequest, this);
</code></pre>

<p>All components are under the package  </p>

<pre><code>com.google.android.gms  
</code></pre>

<p><a href=""http://developer.android.com/reference/com/google/android/gms/location/package-summary.html"" rel=""nofollow"">gms/location/package-summary</a></p>

<p>Reference: <a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow"">googlesamples/android-play-location</a></p>
",2450263,,,,,2015-02-27 13:05:30,,,,3,,,
Android,29002760,2,,28759454,2015-03-12 5:53:50,1910,,22,,"<p><strong><em>UPDATE 3</em></strong>:  </p>

<p><strong><em><a href=""https://developer.android.com/training/location/change-location-settings#prompt"" rel=""nofollow noreferrer"">Prompt the user to change location settings</a></em></strong>
as @patrickandroid, mentioned in comments, the link from second update is broken</p>

<p><strong><em><a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">GoogleSamples; android Location and options - for code reference.</a></em></strong></p>

<p><strong><em>UPDATE 2</em></strong>:  </p>

<p><strong><em><a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationSettings"" rel=""nofollow noreferrer"">GoogleSamples; - for code reference.</a></em></strong></p>

<blockquote>
  <p>This sample builds on the LocationUpdates sample included in this
  repo, and allows the user to update the device's location settings
  using a location dialog.</p>
  
  <p>Uses the SettingsApi to ensure that the device's system settings are
  properly configured for the app's location needs.</p>
</blockquote>

<hr>

<p><strong><em>UPDATE 1</em></strong>:  </p>

<p><strong><a href=""https://developer.android.com/google/play-services/index.html"" rel=""nofollow noreferrer"">Google Play services, Version 7.0 (March 2015) released...</a></strong>  </p>

<blockquote>
  <p><strong>Location settings</strong> - While the FusedLocationProviderApi combines multiple sensors to give you the optimal location, the accuracy of the
  location your app receives still depends greatly on the settings
  enabled on the device (GPS, wifi, airplane mode, and others). Using
  the new SettingsApi class, you can bring up a Location Settings dialog
  which displays a one-touch control for users to change their settings
  without leaving your app.</p>
</blockquote>

<p>Using the <strong><a href=""https://developer.android.com/reference/com/google/android/gms/location/SettingsApi.html"" rel=""nofollow noreferrer"">public interface SettingsApi</a></strong>  </p>

<blockquote>
  <ul>
  <li>Determine if the relevant system settings are enabled on the device to carry out the desired location request.</li>
  <li>Optionally, invoke a dialog that allows the user to enable the necessary location settings with a single tap.</li>
  </ul>
</blockquote>

<hr>

<hr>

<p>Leaving the previous part for reference:<br>
<strong><em>Update/Answer</em></strong><br>
For everybody looking for this answer, <strong>Google Play Services 7.0</strong><br>
It Adds APIs For Detecting Places And Connecting To Nearby Devices, Improves On Mobile Ads, Fitness Data, Location Settings, And More  </p>

<blockquote>
  <p>In Google Play services 7.0, we’re introducing a standard mechanism to
  check that the necessary location settings are enabled for a given
  LocationRequest to succeed. If there are possible improvements, you
  can display a one touch control for the user to change their settings
  without leaving your app.</p>
  
  <p><img src=""https://i.stack.imgur.com/81TfP.png"" alt=""exactly this""></p>
  
  <p>This API provides a great opportunity to make for a much better user
  experience, particularly if location information is critical to the
  user experience of your app such as was the case with Google Maps when
  they integrated the Location Settings dialog and saw a dramatic
  increase in the number of users in a good location state.</p>
</blockquote>

<p><strong>Source:</strong> <a href=""http://android-developers.blogspot.in/2015/03/google-play-services-70-places-everyone.html"" rel=""nofollow noreferrer"">Android developers blog: Google Play services 7.0 - Places Everyone!</a></p>

<blockquote>
  <p><strong>SDK Coming Soon!</strong><br>
  We will be rolling out Google Play services 7.0 over
  the next few days. Expect an update to this blog post, published
  documentation, and the availability of the SDK once the rollout is
  completed.</p>
</blockquote>

<p>will update the programmatic l-o-c after implementation  </p>
",2450263,,2450263,,2019-01-29 4:22:16,2019-01-29 4:22:16,,,,6,,,
Android,29061164,2,,28058284,2015-03-15 13:30:15,1914,,1,,"<p>While having separate service could definitely fit the bill, I was researching for possibly having just one service for both CanvasWatchFaceService and being registered for Data Layers API, and seems the DigitalWatchFaceService in the Google sample/android-WatchFace provide an example of this.</p>

<p>Notice it provide example to register both as BroadcastReceiver AND the Data API.</p>

<p>Hope this helps.</p>

<p><a href=""https://github.com/googlesamples/android-WatchFace/blob/master/Wearable/src/main/java/com/example/android/wearable/watchface/DigitalWatchFaceService.java"" rel=""nofollow"">https://github.com/googlesamples/android-WatchFace/blob/master/Wearable/src/main/java/com/example/android/wearable/watchface/DigitalWatchFaceService.java</a></p>
",893991,,,,,2015-03-15 13:30:15,,,,0,,,
Android,29157564,2,,28663778,2015-03-20 0:46:23,1918,,4,,"<p>The result at my end is exactely same with yours, that is, cannot select subtree on Google Drive.</p>

<p>Based on the <a href=""https://github.com/googlesamples/android-DirectorySelection"" rel=""nofollow"">Android official sample</a> about OPEN_DOCUMENT_TREE: 
The system displays all DocumentsProvider <strong>instances that support subtree selection</strong></p>

<p>So I think the reason is that Google Drive DocumentsProvider instance did not support handle OPEN_DOCUMENT_TREE yet.</p>
",1379193,,,,,2015-03-20 0:46:23,,,,2,,,
Android,29178620,2,,29178472,2015-03-21 2:33:26,1919,,2,,"<p>I like how I post a question just before finding the answer... </p>

<p>The above code works fine, I just didn't set an interval.  on the LocationRequest, just call setInterval(whatever needed)... goodnight.</p>

<p><a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow"">https://github.com/googlesamples/android-play-location</a></p>
",3311886,,,,,2015-03-21 2:33:26,,,,1,,,
Android,29311776,2,,29307702,2015-03-27 23:26:37,1926,,1,,"<p>The new camera2 API has a fairly different way of working, so I recommend you take a look at the basic samples available on GitHub here:</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic</a></p>

<p>You also don't have to switch to the new API - the old android.hardware.Camera API is deprecated, but continues to work as before. It will eventually be removed, but it will be quite a while before that happens.</p>
",1344825,,,,,2015-03-27 23:26:37,,,,0,,,
Android,29314773,2,,29314457,2015-03-28 7:28:08,1926,,5,,"<p>Your location implementation is based on an older version of Google Play services but you imported Play services 7.0.0 that ""GooglePlayServicesClient"" is no longer exist.</p>

<p>You can change play services version to an older version in your build.gradle file
or
You can use <a href=""https://github.com/googlesamples/android-play-location/tree/master/BasicLocationSample"" rel=""nofollow"">this</a> sample for newer location implementation.</p>
",2036835,,,,,2015-03-28 7:28:08,,,,2,,,
Android,29402007,2,,8264805,2015-04-01 22:31:53,1931,,2,,"<p>If you are using Android 5.0 > it became a lot easier, functionallity changed, but you can use the same code. </p>

<pre><code>//Some Vars
public static final int NOTIFICATION_ID = 1; //this can be any int


//Building the Notification
NotificationCompat.Builder builder = new NotificationCompat.Builder(this);
builder.setSmallIcon(R.drawable.ic_stat_notification);
builder.setContentTitle(""BasicNotifications Sample"");
builder.setContentText(""Time to learn about notifications!"");

NotificationManager notificationManager = (NotificationManager) getSystemService(
            NOTIFICATION_SERVICE);
notificationManager.notify(NOTIFICATION_ID, builder.build());
</code></pre>

<p>Make sure you are in an application context, if not you may need to pass the context and change your sourcecode as follows</p>

<pre><code>NotificationCompat.Builder builder = new NotificationCompat.Builder(context);
...
..
.

NotificationManager notificationManager = (NotificationManager) context.getSystemService(
            context.NOTIFICATION_SERVICE);
</code></pre>

<p><strong>You can see the full-source-code at:</strong>
<a href=""https://github.com/googlesamples/android-BasicNotifications/blob/master/Application/src/main/java/com/example/android/basicnotifications/MainActivity.java#L73"" rel=""nofollow"">https://github.com/googlesamples/android-BasicNotifications/blob/master/Application/src/main/java/com/example/android/basicnotifications/MainActivity.java#L73</a></p>
",1767754,,,,,2015-04-01 22:31:53,,,,1,,,
Android,29425821,2,,27529852,2015-04-03 3:32:35,1932,,2,,"<p>Before using any feature of Camera2 API, first you need to check if that feature is supported by device or not. For your case, you can check like below:</p>

<pre><code>// CONTROL_AE_STATE can be null on some devices
                        Integer aeState = result.get(CaptureResult.CONTROL_AE_STATE);
                        if (aeState == null ||
                                aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {
                            mState = STATE_WAITING_NON_PRECAPTURE;
                            captureStillPicture();
                        } else {
                            runPrecaptureSequence();
                        }
</code></pre>

<p>For more details you can check official sample code from Google here: <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic</a> </p>
",631803,,,,,2015-04-03 3:32:35,,,,0,,,
Android,29503138,2,,27443221,2015-04-07 23:24:16,1937,,2,,"<p>Here's a good implementation of WearableListView using v1.1.0 of the wearable support library that still supports the proper zooming behavior (directly from the official Google samples):</p>

<p><a href=""https://github.com/googlesamples/android-WatchFace/blob/master/Wearable/src/main/java/com/example/android/wearable/watchface/DigitalWatchFaceWearableConfigActivity.java#L249"" rel=""nofollow"">android-WatchFace/DigitalWatchFaceWearableConfigActivity.java</a></p>
",268156,,,,,2015-04-07 23:24:16,,,,1,,,
Android,29594177,2,,29594056,2015-04-12 20:17:40,1942,,13,,"<h2>Important to know:</h2>

<p><strong><code>androidTestCompile</code></strong> - <strong>androidTest</strong> folder - ui testing</p>

<p><strong><code>testCompile</code></strong> - <strong>test</strong> folder - unit testing</p>

<h2>For <code>Unit</code> Test:</h2>

<p>Add:</p>

<pre><code>testCompile 'junit:junit:4.12'
</code></pre>

<p>To:</p>

<pre><code>dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.0.0'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.0'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    testCompile 'junit:junit:4.12' // &lt;-- added
}
</code></pre>

<h2>For your <code>Espresso</code> Test:</h2>

<p>Remove Junit and Annotations.</p>

<pre><code>public class MainActivityTest extends ActivityInstrumentationTestCase2&lt;MainActivity&gt; {
    public MainActivityTest(){
        super(MainActivity.class);
    }
    Activity mActivity;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mActivity = getActivity();
        // injectInstrumentation(InstrumentationRegistry.getInstrumentation()); // not sure what this is 

    }
    private final String STRING_TO_TYPE = ""Hello, Testing"";

    public void testChangeText_sameActivity()
    {
        onView(withId(R.id.edittextview)).perform(typeText(STRING_TO_TYPE), closeSoftKeyboard());
        onView(withId(R.id.edittextview)).check(matches(withText(STRING_TO_TYPE)));
    }
}
</code></pre>

<h3>Examples:</h3>

<p><a href=""https://github.com/googlesamples/android-testing/blob/master/espresso/BasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/ChangeTextBehaviorTest.java"" rel=""noreferrer"">https://github.com/googlesamples/android-testing/blob/master/espresso/BasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/ChangeTextBehaviorTest.java</a>
<a href=""https://github.com/jaredsburrows/AndroidGradleTemplate"" rel=""noreferrer"">https://github.com/jaredsburrows/AndroidGradleTemplate</a></p>

<p><strong>Official Documentation:</strong> <a href=""https://developer.android.com/tools/testing-support-library/index.html"" rel=""noreferrer"">https://developer.android.com/tools/testing-support-library/index.html</a> and <a href=""https://code.google.com/p/android-test-kit/wiki/AndroidJUnitRunnerUserGuide"" rel=""noreferrer"">https://code.google.com/p/android-test-kit/wiki/AndroidJUnitRunnerUserGuide</a></p>
",950427,,950427,,2015-05-24 18:55:37,2015-05-24 18:55:37,,,,9,,,
Android,29667336,2,,29459630,2015-04-16 6:51:12,1945,,3,,"<p>Ensure that you have added the required values to your AndroidManifest.xml</p>

<p>Permission:</p>

<pre><code>&lt;uses-permission android:name=""com.google.android.providers.gsf.permission.READ_GSERVICES""/&gt;
</code></pre>

<p>Meta-Data:</p>

<pre><code>&lt;meta-data
            android:name=""com.google.android.geo.API_KEY""
            android:value=""ADD_YOUR_API_KEY_HERE""/&gt;
</code></pre>

<p>Take a look at the Sample AndroidManifest.xml <a href=""https://github.com/googlesamples/android-play-places/blob/master/PlaceComplete/Application/src/main/AndroidManifest.xml"" rel=""nofollow"">here</a></p>
",2469765,,,,,2015-04-16 6:51:12,,,,2,,,
Android,29861971,2,,29848140,2015-04-25 6:45:12,1954,,2,,"<p>As per the <a href=""https://github.com/googlesamples/android-XYZTouristAttractions/issues/2"" rel=""nofollow noreferrer"">issue</a> filed on github, the problem is the path length being too long (also see <a href=""https://stackoverflow.com/questions/24875555/android-studio-wear-app-error-unable-to-open-png"">this stackoverflow</a> question for a similar problem).</p>
",268156,,-1,,2017-05-23 10:28:04,2015-04-25 6:45:12,,,,2,,,
Android,29937159,2,,28999124,2015-04-29 7:33:53,1958,,58,,"<p>Actually it's a bug of new update version of Espresso Contrib, you can refer this workaround : <a href=""https://github.com/googlesamples/android-testing/blob/master/build.gradle#L21"">android-testing/build.gradle</a></p>

<pre><code>configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:22.1.0'
}
</code></pre>
",1896861,,,,,2015-04-29 7:33:53,,,,6,,,
Android,29959079,2,,19945732,2015-04-30 4:33:45,1959,,7,,"<p>For those that are using the new version 3 of RoboElectric check out this sample from their github on how to use the ResourceLoader.</p>

<p><a href=""https://github.com/robolectric/robolectric/blob/490e5fcb7165bec9ef2ddc1c937af790806bb13d/robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java#L59"" rel=""nofollow"">https://github.com/robolectric/robolectric/blob/490e5fcb7165bec9ef2ddc1c937af790806bb13d/robolectric/src/test/java/org/robolectric/shadows/ViewStubTest.java#L59</a></p>

<p>Took me way to long to find an example like this!</p>

<p><strong>Edit:</strong></p>

<p>I just wanted to update this thread since a lot of things have changed over the past year. Google has somewhat provided a means of official documenation around testing with Android. You can find it</p>

<p>here: <a href=""https://google.github.io/android-testing-support-library/"" rel=""nofollow"">https://google.github.io/android-testing-support-library/</a></p>

<p>&amp; here: <a href=""https://github.com/googlesamples/android-testing"" rel=""nofollow"">https://github.com/googlesamples/android-testing</a></p>
",1784299,,1784299,,2015-10-16 21:45:25,2015-10-16 21:45:25,,,,1,,,
Android,29992150,2,,29991138,2015-05-01 17:47:30,1961,,1,,"<p>According to <a href=""https://developers.google.com/places/supported_types#table3"" rel=""nofollow"">place types</a> the closest you can get is the <code>establishment</code> filter. You are going to have to perform a search rather than an autocomplete in order to use the <code>restaurant</code> filter.</p>

<p>Using the Places API for Android <a href=""https://github.com/googlesamples/android-play-places/tree/master/PlaceComplete"" rel=""nofollow"">PlaceComplete</a> sample I tried passing in <code>Place.TYPE_ESTABLISHMENT</code> and <code>Place.TYPE_RESTAURANT</code> to  <code>AutocompleteFilter.create</code> to verify.</p>
",188779,,188779,,2015-05-01 18:30:23,2015-05-01 18:30:23,,,,0,,,
Android,30019643,2,,29402828,2015-05-03 21:30:33,1963,,5,,"<p>You’re calling <code>CameraDevice#close()</code>, but this doesn’t close the camera immediately. You should keep the thread running until the device is done.</p>

<p>Your code might be based on <a href=""https://github.com/googlesamples/android-Camera2Video"">Google’s Camera2 sample app</a>. To finish everything off neatly, stop the thread in your <code>CameraDevice.StateCallback</code> instead by overriding the <code>#onClosed(CameraDevice)</code> method:</p>

<pre><code>private CameraDevice.StateCallback mStateCallback
        = new CameraDevice.StateCallback() {

    // ...

    @Override
    public void onClosed(CameraDevice camera) {
        // Keep the thread alive until the camera is closed.
        stopBackgroundThread();
    }

};
</code></pre>

<p>It looks like the current behaviour might be a bug since the <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#close()"">documentation for <code>CameraDevice#close()</code></a> says:</p>

<blockquote>
  <p>Immediately after this call, besides the final <code>onClosed(CameraDevice)</code> calls, <strong>no further callbacks from the device or the active session will occur</strong>, and any remaining submitted capture requests will be discarded, as if <code>abortCaptures()</code> had been called, except that no success or failure callbacks will be invoked.</p>
</blockquote>
",3556730,,3556730,,2015-05-03 21:41:31,2015-05-03 21:41:31,,,,1,,,
Android,30164523,2,,30164176,2015-05-11 9:52:13,1970,,5,,"<p><a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationSettings"" rel=""noreferrer"">I think you can check sample project by google</a></p>
",1426313,,,,,2015-05-11 9:52:13,,,,0,,,
Android,30252683,2,,30216432,2015-05-15 6:12:00,1974,,4,,"<p>Actually there is a sample app by Google <a href=""https://github.com/googlesamples/android-play-location/tree/master/ActivityRecognition"" rel=""nofollow"">https://github.com/googlesamples/android-play-location/tree/master/ActivityRecognition</a></p>

<p>You need to requestActivityUpdates e.g., from your activity</p>

<pre><code>googleApiClient = new GoogleApiClient.Builder(this)
        .addConnectionCallbacks(this)
        .addOnConnectionFailedListener(this)
        .addApi(ActivityRecognition.API)
        .build();

googleApiClient.connect();

Intent intent = new Intent(this, YourService.class);
PendingIntent pendingIntent = PendingIntent.getService(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);

ActivityRecognition.ActivityRecognitionApi.requestActivityUpdates(
            googleApiClient,
            1000 /* detection interval */,
            pendingIntent);
</code></pre>
",1019366,,1019366,,2015-05-15 6:55:05,2015-05-15 6:55:05,,,,5,,,
Android,30252848,2,,30164176,2015-05-15 6:23:00,1974,,2,,"<p>More specific, relevant code is below</p>

<pre><code>class MainActivity extends Activity implements ResultCallback&lt;LocationSettingsResult&gt; {
    protected void checkLocationSettings() {
        PendingResult&lt;LocationSettingsResult&gt; result =
                LocationServices.SettingsApi.checkLocationSettings(
                        mGoogleApiClient,
                        mLocationSettingsRequest
                );
        result.setResultCallback(this);
    }

    @Override
    public void onResult(LocationSettingsResult locationSettingsResult) {
        final Status status = locationSettingsResult.getStatus();
        switch (status.getStatusCode()) {
            case LocationSettingsStatusCodes.SUCCESS:
                Log.i(TAG, ""All location settings are satisfied."");
                startLocationUpdates();
                break;
            case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
                Log.i(TAG, ""Location settings are not satisfied. Show the user a dialog to"" +
                        ""upgrade location settings "");
                try {
                    // Show the dialog by calling startResolutionForResult(), and check the result
                    // in onActivityResult().
                    status.startResolutionForResult(MainActivity.this, REQUEST_CHECK_SETTINGS);
                } catch (IntentSender.SendIntentException e) {
                    Log.i(TAG, ""PendingIntent unable to execute request."");
                }
                break;
            case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
                Log.i(TAG, ""Location settings are inadequate, and cannot be fixed here. Dialog "" +
                        ""not created."");
                break;
        }
    }
}
// This code is from https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java
</code></pre>

<p>In the result callback of LocationSettingsStatusCodes#RESOLUTION_REQUIRED, Status.startResolutionForResult will do the trick.</p>
",1019366,,1019366,,2015-09-24 19:54:46,2015-09-24 19:54:46,,,,0,,,
Android,30273301,2,,17844957,2015-05-16 8:07:51,1975,,4,,"<p>This is now supported in Android Studio starting with Android Gradle plugin 1.1.0, check this out:</p>

<p><a href=""https://developer.android.com/training/testing/unit-testing/local-unit-tests.html"" rel=""nofollow"">https://developer.android.com/training/testing/unit-testing/local-unit-tests.html</a></p>

<p>Sample app with local unit tests on GitHub:</p>

<p><a href=""https://github.com/googlesamples/android-testing/tree/master/unittesting/BasicSample"" rel=""nofollow"">https://github.com/googlesamples/android-testing/tree/master/unittesting/BasicSample</a></p>
",885464,,,,,2015-05-16 8:07:51,,,,1,,,
Android,30305402,2,,30305297,2015-05-18 14:07:25,1978,,1,,"<p>Asserting that a new activity has been launched is as easy as asserting that a view belonging to that new activity is displayed on the screen. </p>

<p>Check <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso"" rel=""nofollow noreferrer"">this</a> for more samples. Additional info: </p>

<blockquote>
  <p>By default, Espresso waits for UI events in the current message queue to process and default AsyncTasks* to complete before it moves on to the next test operation. This should address the majority of application/test synchronization in your application.</p>
</blockquote>

<p>Thus, given your ""really simple"" test case, I'm assuming there's no waiting on custom resource loading and asserting that a view is displayed should be enough.</p>
",1368705,,667348,,2019-02-13 13:58:53,2019-02-13 13:58:53,,,,2,,,
Android,30310186,2,,30307117,2015-05-18 18:14:15,1978,,2,,"<p>I have put together a sample of how to create the search bar and a couple of other toolbar examples.  it is under FloatingSearchToolbar file.  You would need to have the view over the main toolbar and set the floating toolbar to be View.GONE. </p>

<p><a href=""https://github.com/EugeneHoran/Android-Hard-Toolbar-with-many-different-elements"" rel=""nofollow"">https://github.com/EugeneHoran/Android-Hard-Toolbar-with-many-different-elements</a> </p>

<p>As for the animation you would need to configure a view animation from the top right corner. The view animation below is from a sample from google which could be found on.  </p>

<p><a href=""https://github.com/googlesamples/android-RevealEffectBasic/"" rel=""nofollow"">https://github.com/googlesamples/android-RevealEffectBasic/</a></p>

<pre><code> Animator animator = ViewAnimationUtils.createCircularReveal(
                View v **Your view here**,
                0,
                0,
                0,
                (float) Math.hypot(shape.getWidth(), shape.getHeight()));
</code></pre>
",3904085,,,,,2015-05-18 18:14:15,,,,0,,,
Android,30427031,2,,30426760,2015-05-24 18:42:56,1984,,6,,"<p>Your would need to Animate a view (in this example a LinearLayout).  Set the x and y values of the createCircularReveal to the fab button. </p>

<pre><code>fab.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View view) {
        LinearLayout shape = (LinearLayout) rootView.findViewById(R.id.circle);
        // Create a reveal {@link Animator} that starts clipping the view from
        // the top left corner until the whole view is covered.
        Animator animator = ViewAnimationUtils.createCircularReveal(
            shape,
            0,
            0,
            0,
            (float) Math.hypot(shape.getWidth(), shape.getHeight()));

        // Set a natural ease-in/ease-out interpolator.
        animator.setInterpolator(new AccelerateDecelerateInterpolator());

        // Finally start the animation
        animator.start();
    }
});
</code></pre>

<p>This is the information on the createCircleReveal</p>

<pre><code>createCircularReveal(View view,
        int centerX,  int centerY, float startRadius, float endRadius);
</code></pre>

<p>Example Project:</p>

<p><a href=""https://github.com/googlesamples/android-RevealEffectBasic/"" rel=""noreferrer"">https://github.com/googlesamples/android-RevealEffectBasic/</a></p>

<p><strong>UPDATE</strong></p>

<p>Instead of setting the view to GONE, set it to INVISIBLE.  Also make the view setEnabled(false) to prevent it from being touched etc. </p>

<pre><code>LinearLayout shape;

@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    final View view = inflater.inflate(R.layout.reveal_effect_basic, container, false);
    shape = (LinearLayout) view.findViewById(R.id.circle);
    shape.setVisibility(View.INVISIBLE);
    shape.setEnabled(false);
    ImageButton fab = (ImageButton) view.findViewById(R.id.share);
    fab.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            Animator animator = ViewAnimationUtils.createCircularReveal(
                shape,
                shape.getWidth() - 130,
                shape.getHeight() - 130,
                0,
                (float) Math.hypot(shape.getWidth(), shape.getHeight()));
            shape.setVisibility(View.VISIBLE);
            animator.setInterpolator(new AccelerateDecelerateInterpolator());
            if (shape.getVisibility() == View.VISIBLE) {
                animator.setDuration(400);
                animator.start();
                shape.setEnabled(true);
            }
        }
    });
</code></pre>
",3904085,,3904085,,2015-05-25 19:02:47,2015-05-25 19:02:47,,,,9,,,
Android,30441391,2,,30440860,2015-05-25 15:15:37,1985,,1,,"<p>From the official doc of <strong><a href=""https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html"" rel=""nofollow"">ViewHold</a></strong>:</p>

<blockquote>
  <p>A ViewHolder describes an item view and metadata about its place
  within the RecyclerView.</p>
</blockquote>

<p>So you should avoid do anything else in the viewhold, instead use <strong><code>onBindViewHolder</code></strong> in the <strong><code>RecyclerView</code></strong> <br /></p>

<p>If you take a look at the example made by <strong>Google</strong> of RecyclerView on <a href=""https://github.com/googlesamples/android-RecyclerView"" rel=""nofollow"">GitHub</a> you will see google does not set listeners in the ViewHolder </p>
",4025983,,,,,2015-05-25 15:15:37,,,,2,,,
Android,30571011,2,,30570620,2015-06-01 10:21:25,1991,,1,,"<p>I think you will be better of trying to stream to a surface view, not sure if this can even be done with a imageview.</p>

<p>try this <a href=""https://www.airpair.com/android/android-camera-surface-view-fragment"" rel=""nofollow"">tutorial</a> it should get you going in the right direction </p>

<p>or <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">this</a> for a more up to date example provided by google</p>
",2543058,,2543058,,2015-06-01 13:48:37,2015-06-01 13:48:37,,,,3,,,
Android,30586140,2,,11271436,2015-06-02 2:00:37,1992,,7,,"<p>As of Android 5.0+, you can use the new functionality in the SDK called <a href=""https://developer.android.com/reference/android/media/projection/package-summary.html"">media projections</a> to do screen capture without root privileges.  There is sample code by Google available <a href=""https://github.com/googlesamples/android-ScreenCapture"">here</a>.</p>
",1316252,,,,,2015-06-02 2:00:37,,,,0,,,
Android,30596636,2,,30590994,2015-06-02 12:49:56,1993,,1,,"<p>I will answer myself, based on the answer I got here: <a href=""https://github.com/googlesamples/android-play-publisher-api/issues/20#issuecomment-107923343"" rel=""nofollow"">https://github.com/googlesamples/android-play-publisher-api/issues/20#issuecomment-107923343</a></p>

<p>Something like this works for me:</p>

<pre><code>        var service = new AndroidPublisherService(new BaseClientService.Initializer()
        {
            HttpClientInitializer = credential
        });

        // Insert new edit
        var edit = new AppEdit()
        {
            ExpiryTimeSeconds = ToEpochTime(DateTime.UtcNow.AddMinutes(30)).ToString()
        };
        edit = service.Edits.Insert(edit, packageName).Execute();

        // Fetching the Alpha track and clearing the version code from it
        var tracks = service.Edits.Tracks.List(packageName, edit.Id).Execute().Tracks;
        var alphaTrack = tracks.Single(track =&gt; track.TrackValue.Equals(EditsResource.TestersResource.GetRequest.TrackEnum.Alpha.ToString(), StringComparison.InvariantCultureIgnoreCase));
        var versionCode = alphaTrack.VersionCodes.Single();
        alphaTrack.VersionCodes.Clear();
        service.Edits.Tracks.Patch(alphaTrack, packageName, edit.Id, EditsResource.TracksResource.PatchRequest.TrackEnum.Alpha).Execute();

        // Updating a Beta track with the same version code as in the Alpha track
        var betaTrack = new Track {TrackValue = ""beta"", VersionCodes = new [] { versionCode }};
        service.Edits.Tracks.Update(betaTrack, packageName, edit.Id, EditsResource.TracksResource.UpdateRequest.TrackEnum.Beta).Execute();

        // Commit the edit
        service.Edits.Commit(packageName, edit.Id).Execute();
</code></pre>
",863882,,,,,2015-06-02 12:49:56,,,,0,,,
Android,30600429,2,,24300953,2015-06-02 15:33:27,1993,,4,,"<p>From your explanation, what you have in mind to implement is a screen recorder. Of course your intention is that the system will have it implemented as part of the technology that your software is offering.</p>

<p><img src=""https://i.stack.imgur.com/hC3On.jpg"" alt=""enter image description here""></p>

<p>In such case, the best approach is to improve what already exist, incorporating the code with new features or new performance and giving credit to the original source that you came across and included as part of your software - as expected. This is the beauty of Open Source, which allows code to be reused, distributed and improved.</p>

<p><img src=""https://i.stack.imgur.com/HZ5bd.jpg"" alt=""enter image description here""></p>

<p>At Github there are plenty of projects... as you know, some nice and others awesome. For your particular case, my suggestion is to use existing code that allows your streaming recording system to capture the video, writing it without any need to root the device, as final users would not be interested to void the warranty of a newly purchased device only to run your software.</p>

<p><img src=""https://i.stack.imgur.com/eoHxm.png"" alt=""enter image description here""></p>

<p>It is also important to achieve a good speed that allows at least capturing 20 screen per second in Android for different screen sizes, providing clearly resolution and low CPU usage. All these characteristics would keep your solution stable and still looking rock solid. </p>

<p><img src=""https://i.stack.imgur.com/TWcxP.jpg"" alt=""enter image description here""></p>

<p>I think the best approach you can take, that will save yourself time and lots of headaches, would be to incorporate the ""sji-android-screen-capture"" code as part of your project. If your target devices are Android 4.2~4.4, you are good to go as it supports these Android versions. More info and the source code itself, you find available at <a href=""https://github.com/sjitech/sji-android-screen-capture"" rel=""nofollow noreferrer"">Github repository</a>. Alternatively, you can also use Android <a href=""https://github.com/googlesamples/android-ScreenCapture"" rel=""nofollow noreferrer"">ScreenCapture Sample</a>  to capture device screen in real time.</p>
",3016219,,3016219,,2015-06-02 18:32:37,2015-06-02 18:32:37,,,,0,,,
Android,30628530,2,,4916209,2015-06-03 19:04:42,1994,,75,,"<p><strong>Update November 2018</strong></p>

<p>After working and blogging about MVC and MVP in Android for several years (see the body of the answer below), I decided to capture my knowledge and understanding in a more comprehensive and easily digestible form.</p>

<p>So, I released a full blown video course about Android applications architecture. So, if you're interested in mastering the most advanced architectural patterns in Android development, <a href=""https://www.udemy.com/android-architecture/?couponCode=STACKOVERFLOW"" rel=""nofollow noreferrer"">check out this comprehensive course here</a>.</p>

<p><strong>This answer was updated in order to remain relevant as of November 2016</strong></p>

<hr>

<p>It looks like you are seeking for <a href=""http://en.wikipedia.org/wiki/Architectural_pattern"" rel=""nofollow noreferrer"">architectural patterns</a> rather than <a href=""http://en.wikipedia.org/wiki/Software_design_pattern"" rel=""nofollow noreferrer"">design patterns</a>.</p>

<p><strong>Design patterns</strong> aim at describing a general ""trick"" that programmer might implement for handling a particular set of recurring software tasks. For example: In OOP, when there is a need for an object to notify a set of other objects about some events, the <a href=""https://en.wikipedia.org/wiki/Observer_pattern"" rel=""nofollow noreferrer"">observer design pattern</a> can be employed.</p>

<p>Since Android applications (and most of AOSP) are written in Java, which is object-oriented, I think you'll have a hard time looking for a single OOP design pattern which is NOT used on Android.</p>

<p><strong>Architectural patterns</strong>, on the other hand, do not address particular software tasks - they aim to provide <strong>templates</strong> for software organization based on the use cases of the software component in question.</p>

<p>It sounds a bit complicated, but I hope an example will clarify: If some application will be used to fetch data from a remote server and present it to the user in a structured manner, then <a href=""https://developer.android.com/topic/libraries/data-binding/index.html"" rel=""nofollow noreferrer"">MVC</a> might be a good candidate for consideration. Note that I said nothing about software tasks and program flow of the application - I just described it from user's point of view, and a candidate for an architectural pattern emerged.</p>

<p>Since you mentioned MVC in your question, I'd guess that architectural patterns is what you're looking for.</p>

<p><a href=""https://i.stack.imgur.com/EVpWm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EVpWm.png"" alt=""Enter image description here""></a></p>

<hr>

<p>Historically, there were no official guidelines by Google about applications' architectures, which (among other reasons) led to a total mess in the source code of Android apps. In fact, even today most applications that I see still do not follow OOP best practices and do not show a clear logical organization of code.</p>

<p>But today the situation is different - Google recently released the <a href=""https://developer.android.com/topic/libraries/data-binding/index.html"" rel=""nofollow noreferrer"">Data Binding library</a>, which is fully integrated with Android Studio, and, even, rolled out a set of <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">architecture blueprints for Android applications</a>.</p>

<p>Two years ago it was very hard to find information about MVC or MVP on Android. Today, MVC, MVP and MVVM has become ""buzz-words"" in the Android community, and we are surrounded by countless experts which constantly try to convince us that MVx is better than MVy. In my opinion, discussing whether MVx is better than MVy is totally pointless because the terms themselves are very ambiguous - just look at the answers to <a href=""https://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference"">this question</a>, and you'll realize that different people can associate these abbreviations with completely different constructs.</p>

<p>Due to the fact that a search for a best architectural pattern for Android has officially been started, I think we are about to see several more ideas come to light. At this point, it is really impossible to predict which pattern (or patterns) will become industry standards in the future - we will need to wait and see (I guess it is matter of a year or two).</p>

<p>However, there is one prediction I can make with a high degree of confidence: Usage of the Data Binding library will not become an industry standard. I'm confident to say that because the Data Binding library (in its current implementation) provides short-term productivity gains and some kind of architectural guideline, but it will make the code non-maintainable in the long run. Once long-term effects of this library will surface - it will be abandoned.</p>

<hr>

<p>Now, although we do have some sort of official guidelines and tools today, I, personally, don't think that these guidelines and tools are the best options available (and they are definitely not the only ones). In my applications I use my own implementation of an MVC architecture. It is simple, clean, readable and testable, and does not require any additional libraries.</p>

<p>This MVC is not just cosmetically different from others - it is based on a theory that <a href=""http://www.techyourchance.com/activities-android/"" rel=""nofollow noreferrer"">Activities in Android are not UI Elements</a>, which has tremendous implications on code organization.</p>

<p>So, if you're looking for a good architectural pattern for Android applications that follows <a href=""http://www.techyourchance.com/mvp-mvc-android-1/"" rel=""nofollow noreferrer"">SOLID</a> principles, you can find a description of one in my post about <a href=""http://www.techyourchance.com/mvp-mvc-android-1/"" rel=""nofollow noreferrer"">MVC and MVP architectural patterns in Android</a>.</p>
",2463035,,2463035,,2018-11-10 6:48:12,2018-11-10 6:48:12,,,,2,,,
Android,30765965,2,,30593059,2015-06-10 19:49:57,2001,,7,,"<p>For me, the <a href=""https://github.com/googlesamples/android-credentials/"" rel=""noreferrer"">Smart Lock for Passwords on Android</a> sample project worked fine. You might want to try starting from there and see if that helps. In the sample code, save credential is implemented as:</p>

<p>In <code>onCreate</code>:</p>

<pre><code>    mCredentialsApiClient = new GoogleApiClient.Builder(this)
            .addConnectionCallbacks(this)
            .addOnConnectionFailedListener(this)
            .addApi(Auth.CREDENTIALS_API)
            .build();
</code></pre>

<p>...
In the <code>saveCredetial</code> method:</p>

<pre><code>    final Credential credential = new Credential.Builder(email)
            .setPassword(password)
            .build();

    Auth.CredentialsApi.save(mCredentialsApiClient, credential).setResultCallback(
            new ResultCallback&lt;Status&gt;() {
                @Override
                public void onResult(Status status) {
                    if (status.isSuccess()) {
                        Log.d(TAG, ""SAVE: OK"");
                        showToast(""Credential Saved"");
                        hideProgress();
                    } else {
                        resolveResult(status, RC_SAVE);
                    }
                }
            });
</code></pre>

<p>...
The <code>resolveResult</code> method on the main activity:</p>

<pre><code>private void resolveResult(Status status, int requestCode) {
    Log.d(TAG, ""Resolving: "" + status);
    if (status.hasResolution()) {
        Log.d(TAG, ""STATUS: RESOLVING"");
        try {
            status.startResolutionForResult(MainActivity.this, requestCode);
        } catch (IntentSender.SendIntentException e) {
            Log.e(TAG, ""STATUS: Failed to send resolution."", e);
            hideProgress();
        }
    } else {
        Log.e(TAG, ""STATUS: FAIL"");
        showToast(""Could Not Resolve Error"");
        hideProgress();
    }
}
</code></pre>
",1552344,,1552344,,2015-06-10 19:56:30,2015-06-10 19:56:30,,,,2,,,
Android,30811697,2,,28019657,2015-06-12 20:29:38,2003,,2,,"<p>If you still have the need, you can use the new Espresso-Intent that mocks the activity result that you can use to test this flow.  <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample"" rel=""nofollow noreferrer"">See the sample from Android Testing</a></p>
",133616,,3627736,,2017-05-30 10:35:52,2017-05-30 10:35:52,,,,2,,,
Android,30874325,2,,29006960,2015-06-16 17:30:38,2007,,6,,"<p>Fingerprint API preview for Android M is found <a href=""https://developer.android.com/about/versions/marshmallow/android-6.0.html#fingerprint-authentication"" rel=""nofollow noreferrer"">here</a> with <a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow noreferrer"">Sample App</a>. As of this writing, Android Compatibility Definition for Android M hasn't been published. So, if fingerprint sensor, the key hardware component of the fingerprint framework, is left as a ""SHOULD"" requirement (most likely to be true), then OEMs decide either to incorporate the sensor or not. But, since <a href=""https://www.android.com/intl/en_us/pay/"" rel=""nofollow noreferrer"">Android Pay</a> is strongly ties to finger print framework, this may drive OEMs to include the fingerprint sensor. </p>
",1966235,,2603965,,2016-08-28 8:37:12,2016-08-28 8:37:12,,,,0,,,
Android,31035452,2,,30994528,2015-06-24 19:34:15,2015,,2,,"<p>How does the bluetooth device read the position? I'm assuming some code constantly monitors the playbackstate to get the current position?</p>

<p>To prevent you from constantly having to update the <code>PlaybackState</code>, the playback state contains the necessary values to compute the approximate current position of the stream.</p>

<p>When setting the playbackState, you provide values such as speed, current position and the update time. </p>

<p><code>PlaybackState.Buider.setState(int state, long position, float playbackSpeed, long updateTime)</code></p>

<p>Given the assertion that unless the playback state changes and it is currently playing, you can calculate the currentPosition from the lastUpdate time, speed and the previousPosition.</p>

<pre><code>long timeDelta = SystemClock.elapsedRealtime() - lastPlaybackState.getLastPositionUpdateTime();
long currentPosition = (int) timeDelta * lastPlaybackState.getPlaybackSpeed();
</code></pre>

<p>You can take a look at how uAmp does this in <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/f3154af7ac972ee9b7b1fd32ca3c935e02268a18/mobile/src/main/java/com/example/android/uamp/ui/FullScreenPlayerActivity.java#L398-L413"" rel=""nofollow noreferrer"">FullScreenPlayerActivity</a>. The specific method is <code>updateProgress(..)</code></p>
",80221,,990745,,2019-02-14 3:23:32,2019-02-14 3:23:32,,,,4,,,
Android,31040012,2,,30213210,2015-06-25 2:02:29,2015,,1,,"<p>I (and many others) have also noticed this. Unfortunately, it looks like address is not supported. See here:</p>

<p><a href=""https://github.com/googlesamples/android-play-places/issues/6#issuecomment-114951775"" rel=""nofollow"">https://github.com/googlesamples/android-play-places/issues/6#issuecomment-114951775</a></p>
",5044492,,,,,2015-06-25 2:02:29,,,,1,,,
Android,31062980,2,,31062804,2015-06-26 0:27:12,2016,,3,,"<p>Maybe you should take a look at Topeka .
<a href=""http://android-developers.blogspot.co.uk/2015/06/more-material-design-with-topeka-for_16.html"" rel=""nofollow"">http://android-developers.blogspot.co.uk/2015/06/more-material-design-with-topeka-for_16.html</a></p>

<p>Available at GitHub:
<a href=""https://github.com/googlesamples/android-topeka"" rel=""nofollow"">https://github.com/googlesamples/android-topeka</a></p>
",4109713,,,,,2015-06-26 0:27:12,,,,1,,,
Android,31137678,2,,31136527,2015-06-30 11:59:16,2020,,7,,"<p>You should go for use AutoSuggestEditext and give background effect like google have and put left and right image by <code>Relativelayout</code></p>

<p>Here is example for Auto Suggest for place search .</p>

<p><a href=""https://github.com/googlesamples/android-play-places/blob/master/PlaceCompleteFragment/Application/src/main/java/com/example/google/playservices/placecompletefragment/MainActivity.java"" rel=""noreferrer"">Auto Place complete</a></p>

<p>Hope from it you will understand.</p>
",596725,,596725,,2015-12-28 5:51:14,2015-12-28 5:51:14,,,,2,,,
Android,31191045,2,,31188849,2015-07-02 17:31:31,2023,,4,,"<p>Ok from the start (as i dont know what  other way works)</p>

<ul>
<li>Go to Git master page (it has 'download to zip' or 'clone to desktop' button). use <a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location</a> as a test master page if you like to ensure you have no other issues i did not.</li>
<li>Click 'download zip'</li>
<li>Unzip the project</li>
<li>Close the current project in Android Studio -> File/Close Projects</li>
<li>A popup screen like this will appear, choose Import Project (Eclipse ADT, Gradle etc.)</li>
<li>You will be asked to select the project, select your unzipped project within the master folder, eg basicLocation</li>
<li>Select 'create project from existing resources' default</li>
<li>dont change project name (may cause issues)</li>
<li>Next through 'import project -> directories'</li>
<li>Next through project -> libraries</li>
<li>Next Through import projects -> modules and module dependencies</li>
<li>Next through import project ->SDK</li>
<li>Next through import project ->manifest.xmls</li>
<li>Android Studio starts. Ensure the configurations dropdown has a project in it called 'app' app</li>
<li>Select 'sync Gradle' icon (green circle)</li>
<li>May get language warning, ignore or accept restart, doesnt matter</li>
</ul>

<p>At bottom it should now say 'Gradle executing tasks' after which it will run on device or emulator :)</p>

<p><img src=""https://i.stack.imgur.com/g0XGL.png"" alt=""enter image description here""></p>
",510981,,,,,2015-07-02 17:31:31,,,,0,,,
Android,31225752,2,,31225443,2015-07-04 22:55:56,2025,,2,,"<p>For organizing your source files take a look at some open source projects to get an idea about organizing your file structure. An example is the Google sample project <a href=""https://github.com/googlesamples/android-topeka/tree/master/app/src/main/java/com/google/samples/apps/topeka"" rel=""nofollow"">android-topeka</a>.</p>

<p>This project groups the source code into sub-folders in the following structure:</p>

<pre><code>/source
  /activity
  /adapter
  /fragment
  /helper
  /model
  /persistence
  /widget
</code></pre>
",4517878,,,,,2015-07-04 22:55:56,,,,0,,,
Android,31253089,2,,22756238,2015-07-06 18:30:45,2027,,7,,"<p>Theres an <a href=""https://github.com/googlesamples/android-testing/blob/master/integration/ServiceTestRuleSample/app/src/androidTest/java/com/example/android/testing/ServiceTestRuleSample/LocalServiceTest.java"" rel=""nofollow noreferrer"">example using JUnit 4</a>:</p>

<p>Service:</p>

<pre><code>/**
 * {@link Service} that generates random numbers.
 * &lt;p&gt;
 * A seed for the random number generator can be set via the {@link Intent} passed to
 * {@link #onBind(Intent)}.
 */
public class LocalService extends Service {
    // Used as a key for the Intent.
    public static final String SEED_KEY = ""SEED_KEY"";

    // Binder given to clients
    private final IBinder mBinder = new LocalBinder();

    // Random number generator
    private Random mGenerator = new Random();

    private long mSeed;

    @Override
    public IBinder onBind(Intent intent) {
        // If the Intent comes with a seed for the number generator, apply it.
        if (intent.hasExtra(SEED_KEY)) {
            mSeed = intent.getLongExtra(SEED_KEY, 0);
            mGenerator.setSeed(mSeed);
        }
        return mBinder;
    }

    public class LocalBinder extends Binder {

        public LocalService getService() {
            // Return this instance of LocalService so clients can call public methods.
            return LocalService.this;
        }
    }

    /**
     * Returns a random integer in [0, 100).
     */
    public int getRandomInt() {
        return mGenerator.nextInt(100);
    }
}
</code></pre>

<p>Test:</p>

<pre><code>public class LocalServiceTest {
    @Rule
    public final ServiceTestRule mServiceRule = new ServiceTestRule();

    @Test
    public void testWithBoundService() throws TimeoutException {
        // Create the service Intent.
        Intent serviceIntent =
                new Intent(InstrumentationRegistry.getTargetContext(), LocalService.class);

        // Data can be passed to the service via the Intent.
        serviceIntent.putExtra(LocalService.SEED_KEY, 42L);

        // Bind the service and grab a reference to the binder.
        IBinder binder = mServiceRule.bindService(serviceIntent);

        // Get the reference to the service, or you can call public methods on the binder directly.
        LocalService service = ((LocalService.LocalBinder) binder).getService();

        // Verify that the service is working correctly.
        assertThat(service.getRandomInt(), is(any(Integer.class)));
    }
}
</code></pre>
",273119,,273119,,2017-03-26 23:01:12,2017-03-26 23:01:12,,,,4,,,
Android,31328133,2,,31323114,2015-07-09 21:00:41,2030,,1,,"<p>Not all Android Wear devices provide a GPS unit. Instead, you should use the FusedLocationProviderApi from Google Play Services to request location updates. The nice part about this API is that if your phone and watch are together, it will use the GPS in the phone to save battery - it will only use the GPS on the wearable when it is disconnected from the phone. The FusedLocationProviderApi uses the same API as available on phones, so you can reuse most of your existing code.</p>

<p>Here is a blog post I wrote about this:
<a href=""http://android-developers.blogspot.com/2014/10/gps-on-android-wear-devices.html"" rel=""nofollow"">http://android-developers.blogspot.com/2014/10/gps-on-android-wear-devices.html</a></p>

<p>Documentation for FusedLocationProviderApi:
<a href=""https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi"" rel=""nofollow"">https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi</a></p>

<p>And a sample that implements this:
<a href=""https://github.com/googlesamples/android-SpeedTracker"" rel=""nofollow"">https://github.com/googlesamples/android-SpeedTracker</a></p>

<p>There is no emulator that provides the GPS functionality of the Sony SmartWatch 3.</p>
",2574733,,,,,2015-07-09 21:00:41,,,,4,,,
Android,31399045,2,,31397477,2015-07-14 6:18:05,2034,,1,,"<p>You may clone samples at <a href=""https://github.com/googlesamples/android-ndk.git"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk.git</a>, according to android studio doc <a href=""http://tools.android.com/tech-docs/android-ndk-preview"" rel=""nofollow noreferrer"">http://tools.android.com/tech-docs/android-ndk-preview</a>.</p>

<p>You had errors compiling the samples until I append </p>

<pre><code>tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}
</code></pre>

<p>to build.gradle (app).</p>

<p><a href=""https://stackoverflow.com/questions/31371440/android-studio-new-gradle-build-ndk-sample-app-error/31398811#31398811"">Android Studio: New gradle build NDK sample app error</a></p>
",3079823,,-1,,2017-05-23 11:44:00,2015-07-14 6:18:05,,,,0,,,
Android,31448664,2,,31428191,2015-07-16 8:07:39,2036,,4,,"<p>Android Studio supports JNI debugging first time with 1.3 RC 1. See <a href=""http://tools.android.com/recent"" rel=""nofollow"">here</a></p>

<p>To get started using this feature, go to <a href=""https://developer.android.com/studio/projects/add-native-code.html"" rel=""nofollow"">add native code</a>.</p>

<p>Check <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow"">this repository</a> for Android NDK samples using the new Android Studio 1.3 preview C++ integration.</p>
",4124416,,4124416,,2016-09-20 8:04:55,2016-09-20 8:04:55,,,,2,,,
Android,31489502,2,,31489268,2015-07-18 8:57:40,2038,,1,,"<p>Google Play Services 7 introduced a way to open the GPS directly from the app.
See <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java"" rel=""nofollow"">this sample</a> from google for more information. The specific code block is</p>

<pre><code>    protected void checkLocationSettings() {
    PendingResult&lt;LocationSettingsResult&gt; result =
            LocationServices.SettingsApi.checkLocationSettings(
                    mGoogleApiClient,
                    mLocationSettingsRequest
            );
    result.setResultCallback(this);
}

/**
 * The callback invoked when
 * {@link com.google.android.gms.location.SettingsApi#checkLocationSettings(GoogleApiClient,
 * LocationSettingsRequest)} is called. Examines the
 * {@link com.google.android.gms.location.LocationSettingsResult} object and determines if
 * location settings are adequate. If they are not, begins the process of presenting a location
 * settings dialog to the user.
 */
@Override
public void onResult(LocationSettingsResult locationSettingsResult) {
    final Status status = locationSettingsResult.getStatus();
    switch (status.getStatusCode()) {
        case LocationSettingsStatusCodes.SUCCESS:
            Log.i(TAG, ""All location settings are satisfied."");
            startLocationUpdates();
            break;
        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
            Log.i(TAG, ""Location settings are not satisfied. Show the user a dialog to"" +
                    ""upgrade location settings "");

            try {
                // Show the dialog by calling startResolutionForResult(), and check the result
                // in onActivityResult().
                status.startResolutionForResult(MainActivity.this, REQUEST_CHECK_SETTINGS);
            } catch (IntentSender.SendIntentException e) {
                Log.i(TAG, ""PendingIntent unable to execute request."");
            }
            break;
        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
            Log.i(TAG, ""Location settings are inadequate, and cannot be fixed here. Dialog "" +
                    ""not created."");
            break;
    }
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    switch (requestCode) {
        // Check for the integer request code originally supplied to startResolutionForResult().
        case REQUEST_CHECK_SETTINGS:
            switch (resultCode) {
                case Activity.RESULT_OK:
                    Log.i(TAG, ""User agreed to make required location settings changes."");
                    startLocationUpdates();
                    break;
                case Activity.RESULT_CANCELED:
                    Log.i(TAG, ""User chose not to make required location settings changes."");
                    break;
            }
            break;
    }
}
</code></pre>

<p><a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java"" rel=""nofollow"">Credit</a> </p>
",,user2213590,,,,2015-07-18 8:57:40,,,,0,,,
Android,31494321,2,,31493900,2015-07-18 18:38:00,2039,,1,,"<p>I'm not sure I understand the question exactly, but I think there is an official Android sample that does exactly that:</p>

<p><a href=""https://github.com/googlesamples/android-SlidingTabsColors/"" rel=""nofollow"">https://github.com/googlesamples/android-SlidingTabsColors/</a></p>

<p>This is at least a reasonable starting point..</p>
",3029413,,,,,2015-07-18 18:38:00,,,,0,,,
Android,31531426,2,,31471146,2015-07-21 6:00:51,2041,,7,,"<p>Google had revised the camera API from in API version 21, henceforth we have to adopt new camera2 package and has to be adhered in cases where camera functionalities comes into picture. Here is the link to sample code published by google which uses surface view implementation and it works flawless in Android 5.0. I believe it solves a bit of mystery.</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"">https://github.com/googlesamples/android-Camera2Basic</a></p>
",4571119,,,,,2015-07-21 6:00:51,,,,2,,,
Android,31573490,2,,31572323,2015-07-22 20:35:19,2043,,28,,"<p>Holy crap, after much searching I found the official Google sample, which defines this constant to <code>0x1</code>.</p>

<pre><code>protected static final int REQUEST_CHECK_SETTINGS = 0x1;
</code></pre>

<p>The Sample and the constant in question <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java#L61"">can be found on GitHub</a>.</p>

<p>It seems this value is just an int just like when you use <code>StartActivityForResult()</code> to make sure we are returning from something we requested.</p>
",368379,,,,,2015-07-22 20:35:19,,,,1,,,
Android,31579457,2,,29276026,2015-07-23 6:14:50,2043,,4,,"<p>Android M preview introducing FingerPrint scanner API.
You can checkout example for this here :
<a href=""https://github.com/googlesamples/android-FingerprintDialog/"" rel=""nofollow"">https://github.com/googlesamples/android-FingerprintDialog/</a></p>
",966347,,,,,2015-07-23 6:14:50,,,,0,,,
Android,31688008,2,,31686666,2015-07-28 22:11:06,2049,,1,,"<p>You should be using the ViewHolder paradigm which is most easily implemented with <a href=""https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"" rel=""nofollow"">RecyclerView</a> when Adapters are involved. Online sample code available <a href=""https://developer.android.com/samples/RecyclerView/project.html"" rel=""nofollow"">here</a> and GitHub sample cloneable via AndroidStudio directly or <a href=""https://github.com/googlesamples/android-RecyclerView"" rel=""nofollow"">via Github</a>.</p>

<p>The HashMap solution will work, but why incur a HashMap lookup when you can simply hold a reference to the object? Also, RecyclerView natively handles different View TYPEs so you don't have to roll your own solution when you have section header rows which look differently from data rows.</p>

<p>===============================================</p>

<p>A more detailed explanation of <code>RecyclerView</code> follows based on snippets from the sample I linked to.</p>

<p>Have your <code>CustomAdapter</code> extend <code>RecyclerView</code>.</p>

<pre><code>public class CustomAdapter extends RecyclerView.Adapter&lt;CustomAdapter.ViewHolder&gt; {
</code></pre>

<p>Create a Custom <code>ViewHolder</code> class. It should almost always be a static class if embedded within your <code>CustomAdapter</code>.</p>

<pre><code>    public static class ViewHolder extends RecyclerView.ViewHolder {
        private final TextView textView;

        public ViewHolder(View v) {
            super(v);
            // Define click listener for the ViewHolder's View.
            v.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Log.d(TAG, ""Element "" + getPosition() + "" clicked."");
                }
            });
            textView = (TextView) v.findViewById(R.id.textView);
</code></pre>

<p>Notice that the <code>ViewHolder</code> finds the views in the constructor since a <code>ViewHolder</code> instance is tied to a <code>View</code> instance. The <code>ViewHolder</code> should have references to any UI elements that you plan to update in an <code>onBind</code> callback. The <code>ViewHolder</code> object is then associated with the <code>View</code> by <code>RecyclerView</code> when you include the following code in your <code>CustomAdapter</code>.</p>

<pre><code>// Create new views (invoked by the layout manager)
@Override
public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
    // Create a new view.
    View v = LayoutInflater.from(viewGroup.getContext())
            .inflate(R.layout.text_row_item, viewGroup, false);

    return new ViewHolder(v);
}
</code></pre>

<p>Notice how the <code>onCreateViewHolder</code> callback is given a <code>viewType</code> parameter. The current code always returns the same type of custom <code>ViewHolder</code>, but it could be providing different ViewHolder classes based on the type (this is how you support rows that support different views). The following code is then how you update your UI when the view is bound to a dataset.</p>

<pre><code>// Replace the contents of a view (invoked by the layout manager)
@Override
public void onBindViewHolder(ViewHolder viewHolder, final int position) {
    Log.d(TAG, ""Element "" + position + "" set."");

    // Get element from your dataset at this position and replace the contents of the view
    // with that element
    viewHolder.getTextView().setText(mDataSet[position]);
}
</code></pre>

<p>With these pieces in place <code>RecyclerView</code> will create and reuse your <code>Views</code> AND <code>ViewHolders</code> by corresponding type reducing view hierarchy look ups and potentially making your app much less ""janky"".</p>
",1375603,,1375603,,2015-07-29 18:05:35,2015-07-29 18:05:35,,,,4,,,
Android,31725277,2,,31646148,2015-07-30 13:34:10,2051,,1,,"<p>There's an <a href=""https://github.com/googlesamples/android-BluetoothLeGatt"" rel=""nofollow"">Android Open Source Project</a> example that show how to get data from a BLE device, that will be easier if you start with this !</p>
",3343174,,,,,2015-07-30 13:34:10,,,,6,,,
Android,31821256,2,,16667903,2015-08-04 23:53:37,2056,,1,,"<p>Now that Android Studio is in the stable channel, it is pretty straightforward to get the <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow"">android-ndk samples</a> running.  These samples use the <a href=""http://tools.android.com/tech-docs/new-build-system/gradle-experimental"" rel=""nofollow"">ndk experimental plugin</a> and are newer than the ones linked to from the Android NDK online documentation.  Once you know they work you can study the build.gradle, local.properties and gradle-wrapper.properties files and modify your project accordingly.  Following are the steps to get them working.</p>

<ol>
<li><p>Go to settings, Appearance &amp; Behavior, System Settings, Android SDK, selected the SDK Tools tab, and check Android NDK version 1.0.0 at the bottom of the list.  This will download the NDK.</p></li>
<li><p>Point to the location of the newly downloaded NDK.  Note that it will be placed in the sdk/ndk-bundle directory.  Do this by selecting File, Project Structure, SDK Location (on left), and supplying a path under Android NDK location.  This will add an ndk entry to local.properties similar to this:  </p>

<blockquote>
  <p>Mac/Linux: ndk.dir=/Android/sdk/ndk-bundle<br>
  Windows: ndk.dir=C:\Android\sdk\ndk-bundle</p>
</blockquote></li>
</ol>

<p>I have successfully built and deployed all projects in the repository this way, except gles3gni, native-codec and builder.  I'm using the following:  </p>

<p>Android Studio 1.3 build AI-141.2117773<br>
android-ndk samples published July 28, 2015 (link above)<br>
SDK Tools 24.3.3<br>
NDK r10e extracted to C:\Android\sdk\ndk-bundle<br>
Gradle 2.5<br>
Gradle plugin 0.2.0<br>
Windows 8.1 64 bit  </p>
",3549440,,3549440,,2015-08-05 0:45:41,2015-08-05 0:45:41,,,,0,,,
Android,31840258,2,,31761416,2015-08-05 18:35:47,2057,,10,,"<p><strong>Edit to answer latest question</strong></p>

<p>You can avoid using an intent to search for paired devices. When connecting to a device that is not paired, a notification will pop up asking to pair the devices. Once paired this message should not show again for these devices, the connection should be automatic (according to how you have written your program).</p>

<p>I use an intent to enable bluetooth, and to make my device discoverable, I then set up my code to connect, and press a button to connect. In your case, you will need to ensure your accessories are discoverable also. In my case I use a unique UUID, and both devices must recognise this to connect. This can only be used if you are programming both devices, whether both are android or one android and one other device type.</p>

<p>Try this, and see if it solves your problem.</p>

<hr>

<p><strong>This answer is to the original question before it was edited to be another question.</strong></p>

<p>I've edited my answer for clarity as I can see from the comments it is misleading. Your question has two parts. </p>

<blockquote>
  <p>On my MotoG (KitKat) if I turn my Bluetooth it connects autommatically
  to device (if it's near and paired ofc...) but on my LG G3 I must go
  to Configuration/Bluetooth/Paired devices/ and there tap the device to
  connect... and I want to avoid this... should be possible?</p>
</blockquote>

<p><strong>This is less of a programming issue and more of a platform issue.</strong><br>
There is a <strong>well documented bug in Android 5.0</strong> with Bluetooth not automatically connecting and many other BT issues.  These issues continue with all the updates on 5.0. versions and is not fixed until the 5.1. upgrade. </p>

<p><a href=""http://www.digitaltrends.com/mobile/android-lollipop-problems/11/"" rel=""noreferrer"">http://www.digitaltrends.com/mobile/android-lollipop-problems/11/</a></p>

<p><a href=""http://forums.androidcentral.com/lg-g3/473064-bluetooth-streaming-choppy-lg-3-lollipop.html"" rel=""noreferrer"">http://forums.androidcentral.com/lg-g3/473064-bluetooth-streaming-choppy-lg-3-lollipop.html</a></p>

<p><strong>First port of call is to update to 5.1</strong></p>

<p>These issues have been addressed in the Lollipop update 5.1</p>

<p><a href=""http://www.reddit.com/r/Android/comments/306m3y/lollipop_51_bluetooth/"" rel=""noreferrer"">http://www.reddit.com/r/Android/comments/306m3y/lollipop_51_bluetooth/</a></p>

<hr>

<p><strong>Edit:</strong>
<em>I don't believe this is going to fix your problem of the automatic pairing, you wanted to know how to use BTGatt.</em></p>

<blockquote>
  <p>I've seen if I type device. to check what can I do it let me
  connectGatt() means /.../
  But I can't figure it out how to do this...</p>
</blockquote>

<p><strong>To use BluetoothGatt</strong></p>

<p><a href=""https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html"" rel=""noreferrer"">https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html</a></p>

<blockquote>
  <p>This class provides Bluetooth GATT functionality to enable
  communication with Bluetooth Smart or Smart Ready devices.
   /.../
  GATT capable devices can be discovered using the Bluetooth device
  discovery or BLE scan process.</p>
</blockquote>

<p><a href=""https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html"" rel=""noreferrer"">https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback.html</a></p>

<p>Here is a great example of how to use BluetoothGatt (it uses hear rate):<br>
<a href=""https://github.com/googlesamples/android-BluetoothLeGatt/blob/master/Application/src/main/java/com/example/android/bluetoothlegatt/BluetoothLeService.java"" rel=""noreferrer"">https://github.com/googlesamples/android-BluetoothLeGatt/blob/master/Application/src/main/java/com/example/android/bluetoothlegatt/BluetoothLeService.java</a></p>

<p>I have reproduced some of the code here, in case the link dies.</p>

<p>It basically follows similar lines to a regular bluetooth connection. You need to discover and find supported devices. 
Monitor state, etc.<br>
These are the two most pertinent features to gatt.</p>

<p>The callback:</p>

<pre><code>// Implements callback methods for GATT events that the app cares about.  For example,
// connection change and services discovered.
private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {
    @Override
    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
        String intentAction;
        if (newState == BluetoothProfile.STATE_CONNECTED) {
            intentAction = ACTION_GATT_CONNECTED;
            mConnectionState = STATE_CONNECTED;
            broadcastUpdate(intentAction);
            Log.i(TAG, ""Connected to GATT server."");
            // Attempts to discover services after successful connection.
            Log.i(TAG, ""Attempting to start service discovery:"" +
                    mBluetoothGatt.discoverServices());

        } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
            intentAction = ACTION_GATT_DISCONNECTED;
            mConnectionState = STATE_DISCONNECTED;
            Log.i(TAG, ""Disconnected from GATT server."");
            broadcastUpdate(intentAction);
        }
    }

    @Override
    public void onServicesDiscovered(BluetoothGatt gatt, int status) {
        if (status == BluetoothGatt.GATT_SUCCESS) {
            broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);
        } else {
            Log.w(TAG, ""onServicesDiscovered received: "" + status);
        }
    }

    @Override
    public void onCharacteristicRead(BluetoothGatt gatt,
                                     BluetoothGattCharacteristic characteristic,
                                     int status) {
        if (status == BluetoothGatt.GATT_SUCCESS) {
            broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);
        }
    }

    @Override
    public void onCharacteristicChanged(BluetoothGatt gatt,
                                        BluetoothGattCharacteristic characteristic) {
        broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);
    }
};
</code></pre>

<p>The broadcast:</p>

<pre><code>private void broadcastUpdate(final String action,
                             final BluetoothGattCharacteristic characteristic) {
    final Intent intent = new Intent(action);

    // This is special handling for the Heart Rate Measurement profile.  Data parsing is
    // carried out as per profile specifications:
    // http://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml
    if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) {
        int flag = characteristic.getProperties();
        int format = -1;
        if ((flag &amp; 0x01) != 0) {
            format = BluetoothGattCharacteristic.FORMAT_UINT16;
            Log.d(TAG, ""Heart rate format UINT16."");
        } else {
            format = BluetoothGattCharacteristic.FORMAT_UINT8;
            Log.d(TAG, ""Heart rate format UINT8."");
        }
        final int heartRate = characteristic.getIntValue(format, 1);
        Log.d(TAG, String.format(""Received heart rate: %d"", heartRate));
        intent.putExtra(EXTRA_DATA, String.valueOf(heartRate));
    } else {
        // For all other profiles, writes the data formatted in HEX.
        final byte[] data = characteristic.getValue();
        if (data != null &amp;&amp; data.length &gt; 0) {
            final StringBuilder stringBuilder = new StringBuilder(data.length);
            for(byte byteChar : data)
                stringBuilder.append(String.format(""%02X "", byteChar));
            intent.putExtra(EXTRA_DATA, new String(data) + ""\n"" + stringBuilder.toString());
        }
    }
    sendBroadcast(intent);
}
</code></pre>

<p>This question also has some relevant code that may help cut it down when learning:<br>
<a href=""https://stackoverflow.com/questions/29758890/bluetooth-gatt-callback-not-working-with-new-api-for-lollipop"">BLuetooth Gatt Callback not working with new API for Lollipop</a></p>

<p>Now here's the rub. Are your devices bluetooth smart or smart ready?</p>

<p>This link gives a great list of smart devices. You will also find out when you implement your program.</p>

<p><a href=""http://www.bluetooth.com/Pages/Bluetooth-Smart-Devices-List.aspx"" rel=""noreferrer"">http://www.bluetooth.com/Pages/Bluetooth-Smart-Devices-List.aspx</a></p>
",3956566,,-1,,2017-05-23 12:09:02,2015-08-10 13:08:57,,,,16,,,
Android,31858505,2,,30444150,2015-08-06 14:31:27,2058,,1,,"<p>I think the cardstream java code is a great set of java methods that one can use in your app. While there are no javadocs for cardstream you can read the descriptions of the method in the code itself as the method descriptions are written above the individual methods.</p>

<p>I would however make sure that your app can use cardstream before you import it into your code.</p>

<p>For example, if I look at the code, I can see that cardstream is just manipulating a linearLayout and not really adding cards to a recyclerview / listview. </p>

<p>The mainactivity displays the layout from here <a href=""https://github.com/googlesamples/android-play-places/blob/master/PlacePicker/Application/src/main/res/layout/activity_main.xml"" rel=""nofollow"">https://github.com/googlesamples/android-play-places/blob/master/PlacePicker/Application/src/main/res/layout/activity_main.xml</a>: </p>

<pre><code>&lt;fragment
    android:id=""@+id/fragment_cardstream""
    android:name=""com.example.google.playservices.placepicker.cardstream.CardStreamFragment""
    xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context="".MainActivity""
    tools:layout=""@layout/cardstream""/&gt;
</code></pre>

<p>The fragment then pulls the layout from here:</p>

<p><a href=""https://github.com/googlesamples/android-play-places/blob/master/PlacePicker/Application/src/main/res/layout/cardstream.xml"" rel=""nofollow"">https://github.com/googlesamples/android-play-places/blob/master/PlacePicker/Application/src/main/res/layout/cardstream.xml</a></p>

<pre><code>&lt;ScrollView xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:fillViewport=""true""&gt;

    &lt;com.example.google.playservices.placepicker.cardstream.CardStreamLinearLayout
        style=""@style/CardStream""
        android:id=""@+id/card_stream""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""/&gt;

&lt;/ScrollView&gt;
</code></pre>

<p>The layout here that the fragment uses is a cardStreamLinearLayout.</p>

<p>If your app just want to addViews / removeView for a few cards from a linearLayout, then this library is great. But most android apps will want to add on a 'stream' of cards, so it doesn't really make sense from an efficiency perspective to add them onto the linearLayout as that would really be inefficient.</p>

<p>There are tools available on android like listview or recyclerview which would provide a better experience as they are optimised to do so.</p>
",3178944,,,,,2015-08-06 14:31:27,,,,0,,,
Android,31879270,2,,31756424,2015-08-07 13:44:15,2059,,5,,"<p>Here is a sample app that works <a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""nofollow"">https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint</a></p>

<p>You must use</p>

<pre><code>buildToolsVersion = '23.0.0rc3'
</code></pre>

<p>And of course</p>

<pre><code>publishNonDefault true
</code></pre>
",1299158,,,,,2015-08-07 13:44:15,,,,0,,,
Android,31880936,2,,30585289,2015-08-07 15:01:58,2059,,66,,"<p>I got this from <a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""noreferrer"">the new testing template</a> from Google.</p>

<p>Create a new <code>AndroidManifest.xml</code> file in your <code>test</code> or <code>androidTest</code> folder.</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest
    xmlns:tools=""http://schemas.android.com/tools""
    package=""your.package.name""&gt;

    &lt;uses-sdk tools:overrideLibrary=""android.support.test.uiautomator.v18""/&gt;
&lt;/manifest&gt;
</code></pre>
",1747491,,,,,2015-08-07 15:01:58,,,,1,,,
Android,31882037,2,,31507891,2015-08-07 15:58:53,2059,,9,,"<p>As Awanish said - read the <a href=""http://tools.android.com/tech-docs/new-build-system/gradle-experimental"">Experimental Plugin User Guide</a> step by step <strong>VERY</strong> carefully. For even more clearance check the build.gradle files in the <a href=""https://github.com/googlesamples/android-ndk"">ndk-samples</a> provided by google.</p>

<p><code>sourceSets.main { }</code> has different syntax and should be outside the <code>android { }</code> block. In your case it should look something like this:</p>

<pre><code>model {

    android {
        //...
    }

    android.sources {
        main {
            jniLibs {
                source {
                    srcDirs 'libs'
                }
            }
        }
    }

}
</code></pre>
",4621448,,,,,2015-08-07 15:58:53,,,,2,,,
Android,31929113,2,,31928868,2015-08-10 21:02:36,2062,,13,,"<p>As per the current example: <a href=""https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java#L195"">https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java#L195</a></p>

<pre><code>@Override
public void onRequestPermissionsResult(int requestCode, String[] permissions,
        int[] grantResults) {
    if (requestCode == REQUEST_CAMERA) {
        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            doThing();
            //STORE FALSE IN SHAREDPREFERENCES
        } else {
            //STORE TRUE IN SHAREDPREFERENCES
        }
    }
</code></pre>

<p>Store a boolean in SharedPreferences with key as your permission code and value as indicated above, to indicate whether that preference has been denied before.</p>

<p>Sadly, you probably can't check against a preference that has been accepted and later denied while your app is running. The final spec is not available, but there's a chance that your app either gets restarted or gets mock values until the next launch.</p>
",1266326,,,,,2015-08-10 21:02:36,,,,3,,,
Android,31949873,2,,31925769,2015-08-11 18:59:27,2063,,17,,"<p>If the only capture request you send to the camera is the one for the final picture, this is not surprising.</p>

<p>The camera automatic exposure, focus, and white balance routines generally need a second or two of streaming buffers before they converge to good results.</p>

<p>While you don't need to draw preview on screen, the simplest method here is to first run a repeating request targeting a dummy SurfaceTexture for a second or two, and then fire off the JPEG capture.
You could just stream the JPEG capture, but JPEG capture is slow, so you'll need a longer time for convergence (plus it's more likely a camera implementation has a bug with repeated JPEG capture and getting good exposure, than with a typical preview).</p>

<p>So, create a dummy SurfaceTexture with a random texture ID argument:</p>

<pre><code>private SurfaceTexture mDummyPreview = new SurfaceTexture(1);
private Surface mDummySurface = new Surface(mDummyPreview);
</code></pre>

<p>and include the Surface in your session configuration.  Once the session is configured, create a preview request that targets the dummy preview, and after N capture results have come in, submit the capture request for the JPEG you want.  You'll want to experiment with N, but probably ~30 frames is enough.</p>

<p>Note that you're still not dealing with:</p>

<ul>
<li>Locking AF to ensure a sharp image for your JPEG</li>
<li>Running AE precapture to allow for flash metering, if you want to  allow for flash use</li>
<li>Having some way for the user to know what they'll be capturing, since there's no preview, they can't aim the device at anything very well.</li>
</ul>

<p>The AF lock and precapture trigger sequences are included in Camera2Basic sample here: <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a>, so you can take a look at what those do.</p>
",1344825,,1344825,,2015-08-13 20:43:30,2015-08-13 20:43:30,,,,7,,,
Android,31976075,2,,31953155,2015-08-12 21:55:32,2064,,4,,"<p>Simply declare an <code>intent-filter</code> for <a href=""https://developer.android.com/guide/components/intents-common.html#PlaySearch"" rel=""nofollow"">MEDIA_PLAY_FROM_SEARCH</a> in an Activity declaration. It is not mandatory for Android Auto to actually handle the intent, since Android Auto will call the <code>MediaSession.Callback.onPlayFromSearch</code>. The declaration in the manifest serves to flag your app as available to respond media voice commands. However, you might want to handle it properly, because other non-Auto environments, like Google Now, will submit voice searches via that intent.</p>

<p>The best way to handle the intent is by calling <code>MediaController.TransportControls.playFromSearch</code>, so you handle it in a consistent way no matter how the voice search was triggered.</p>

<p>See this snippet from <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/AndroidManifest.xml#L50-L64"" rel=""nofollow"">uAmp AndroidManifest.xml</a>:</p>

<pre><code>    &lt;!-- Main activity for music browsing on phone --&gt;
    &lt;activity
        android:name="".ui.MusicPlayerActivity""
        android:label=""@string/app_name""&gt;

        [...]

        &lt;!-- Use this intent filter to get voice searches, like ""Play The Beatles"" --&gt;
        &lt;intent-filter&gt;
            &lt;action android:name=""android.media.action.MEDIA_PLAY_FROM_SEARCH"" /&gt;
            &lt;category android:name=""android.intent.category.DEFAULT"" /&gt;
        &lt;/intent-filter&gt;
    &lt;/activity&gt;
</code></pre>

<p>And <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/ui/MusicPlayerActivity.java#L172-L183"" rel=""nofollow"">this is how</a> the intent is handled:</p>

<pre><code>@Override
protected void onMediaControllerConnected() {
    if (mVoiceSearchParams != null) {
        String query = mVoiceSearchParams.getString(SearchManager.QUERY);
        getMediaController().getTransportControls().playFromSearch(query, mVoiceSearchParams);
        mVoiceSearchParams = null;
    }
    getBrowseFragment().onConnected();
}
</code></pre>

<blockquote>
  <p>One caveat: you need to publish your app with the intent-filter and
  wait a few days to get it flagged and indexed for the ""Play [x] <strong>on
  [y]</strong>"" type of query. It is not instantaneous.</p>
</blockquote>
",1429114,,,,,2015-08-12 21:55:32,,,,1,,,
Android,32029162,2,,32021193,2015-08-15 20:43:58,2067,,38,,"<p><strong>Directly using the barcode detector</strong></p>

<p>One approach is to use the barcode detector directly on a bitmap, like this:</p>

<pre><code>BarcodeDetector barcodeDetector = new BarcodeDetector.Builder(context).build();
Frame frame = new Frame.Builder().setBitmap(bitmap).build();
SparseArray&lt;Barcode&gt; barcodes = barcodeDetector.detect(frame);
if (barcodes.size() &gt; 0) {
    // Access detected barcode values
}
</code></pre>

<p><strong>Receiving notifications</strong></p>

<p>Another approach is to set up a pipeline structure for receiving detected barcodes from camera preview video (see the <a href=""https://github.com/googlesamples/android-vision/tree/master/face/multi-tracker/app/src/main/java/com/google/android/gms/samples/vision/face/multitracker"">MultiTracker example</a> on GitHub).  You'd define your own Tracker to receive detected barcodes, like this:</p>

<pre><code>class BarcodeTrackerFactory implements MultiProcessor.Factory&lt;Barcode&gt; {
    @Override
    public Tracker&lt;Barcode&gt; create(Barcode barcode) {
        return new MyBarcodeTracker();
    }
} 

class MyBarcodeTracker extends Tracker&lt;Barcode&gt; {
    @Override
    public void onUpdate(Detector.Detections&lt;Barcode&gt; detectionResults, Barcode barcode) {
        // Access detected barcode values
    }
 }
</code></pre>

<p>A new instance of this tracker is created for each barcode, with the onUpdate method receiving the detected barcode value.</p>

<p>You then set up the camera source to continuously stream images into the detector, receiving the results in your tracker:</p>

<pre><code>BarcodeDetector barcodeDetector = new BarcodeDetector.Builder(context).build();
BarcodeTrackerFactory barcodeFactory = new BarcodeTrackerFactory();
barcodeDetector.setProcessor(
    new MultiProcessor.Builder&lt;&gt;(barcodeFactory).build());

mCameraSource = new CameraSource.Builder(context, barcodeDetector)
    .setFacing(CameraSource.CAMERA_FACING_BACK)
    .setRequestedPreviewSize(1600, 1024)
    .build();
</code></pre>

<p>Later, you'd either start the camera source directly or use it in conjunction with a view that shows the camera preview (see the <a href=""https://github.com/googlesamples/android-vision/tree/master/face/multi-tracker/app/src/main/java/com/google/android/gms/samples/vision/face/multitracker"">MultiTracker example</a> for more details).</p>
",5231007,,,,,2015-08-15 20:43:58,,,,12,,,
Android,32043994,2,,31836149,2015-08-17 6:28:34,2068,,1,,"<p>What you are looking for is more along the collapsed version of the MediaStyle notification. While I'm not sure how to force it to stay collapsed, this should set you on the right path. I used a bit of the code found in the UniversalMusicPlayer that is part of the sample code provided for Android.</p>

<p>Specifically - You want to check out the MediaNotificationManager and MusicService classes. </p>

<p><a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/MediaNotificationManager.java"" rel=""nofollow"">https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/MediaNotificationManager.java</a></p>

<p>Both of which are a bit overly complex for what you are trying to achieve, but could be a good place to refer to. Specifically, the createNotification method (see a Play/Pause version below).</p>

<pre><code>private Notification createNotification() {
    if (mMetadata == null || mPlaybackState == null) {
        return null;
    }

    NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(mService);
    int playPauseButtonPosition = 0;


    addPlayPauseAction(notificationBuilder);

    MediaDescriptionCompat description = mMetadata.getDescription();

    String fetchArtUrl = null;
    Bitmap art = null;
    if (description.getIconUri() != null) {
        // This sample assumes the iconUri will be a valid URL formatted String, but
        // it can actually be any valid Android Uri formatted String.
        // async fetch the album art icon
        String artUrl = description.getIconUri().toString();
        art = ChannelImageCache.getInstance().getBigImage(artUrl);
        if (art == null) {
            fetchArtUrl = artUrl;
            // use a placeholder art while the remote art is being downloaded
            art = BitmapFactory.decodeResource(mService.getResources(),
                    R.drawable.ic_default_art);
        }
    }

    notificationBuilder
            .setStyle(new NotificationCompat.MediaStyle()
                    .setShowActionsInCompactView(
                            new int[]{playPauseButtonPosition})  // show only play/pause in compact view
                    .setMediaSession(mSession.getSessionToken()))
            .setColor(mNotificationColor)
            .setSmallIcon(R.drawable.ic_notification)
            .setVisibility(Notification.VISIBILITY_PUBLIC)
            .setUsesChronometer(true)
            .setContentIntent(createContentIntent(description))
            .setContentTitle(description.getTitle())
            .setContentText(description.getSubtitle())
            .setLargeIcon(art);

    setNotificationPlaybackState(notificationBuilder);
    if (fetchArtUrl != null) {
        fetchBitmapFromURLAsync(fetchArtUrl, notificationBuilder);
    }

    return notificationBuilder.build();
}

private void addPlayPauseAction(NotificationCompat.Builder builder) {
    String label;
    int icon;
    PendingIntent intent;
    if (mPlaybackState.getState() == PlaybackStateCompat.STATE_PLAYING) {
        label = mService.getString(R.string.mr_media_route_controller_pause);
        icon = R.drawable.uamp_ic_pause_white_24dp;
        intent = mPauseIntent;
    } else {
        label = mService.getString(R.string.mr_media_route_controller_play);
        icon = R.drawable.uamp_ic_play_arrow_white_24dp;
        intent = mPlayIntent;
    }
    builder.addAction(new NotificationCompat.Action(icon, label, intent));
}
</code></pre>

<p>This Notification will use a MediaSession in your service (where I am assuming you AACDecoder/AACPlayer is living). When you get your ID3 Metadata from the player, you'll want to update the Metadata and set it to the mediaSession.  </p>

<pre><code>private void updateMetadata() {

    final MediaMetadataCompat track = generateMediaMetadataCompat(currentMetaData);

    mediaSession.setMetadata(track);
}

    private MediaMetadataCompat generateMediaMetadataCompat(SomeMetadataModelObject streamMetadata)
{
    currentMediaMetadataCompat = new MediaMetadataCompat.Builder()
            .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID, streamMetadata.getMediaId())
            .putString(MediaMetadataCompat.METADATA_KEY_ALBUM, streamMetadata.getAlbumName())
            .putString(MediaMetadataCompat.METADATA_KEY_ARTIST, streamMetadata.getArtistName())

            .putString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI, ""http://somealbumart.png"" )
            .putString(MediaMetadataCompat.METADATA_KEY_TITLE, streamMetadata.getSongTitle())

            .build();
    return currentMediaMetadataCompat;
}
</code></pre>
",1895707,,,,,2015-08-17 6:28:34,,,,1,,,
Android,32051974,2,,32051973,2015-08-17 13:41:50,2069,,19,,"<p>I modified the CameraSourcePreview (....) constructor to be as follows:</p>

<pre><code>public CameraSourcePreview(Context context, AttributeSet attrs) {
    super(context, attrs);
    mContext = context;
    mStartRequested = false;
    mSurfaceAvailable = false;

    mSurfaceView = new SurfaceView(context);
    mSurfaceView.getHolder().addCallback(new SurfaceCallback());
    addView(mSurfaceView);
    mSurfaceView.setOnClickListener(new OnClickListener() {
        @Override
        public void onClick(View v) {
            cameraFocus(mCameraSource, Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
        }
    });
}

private static boolean cameraFocus(@NonNull CameraSource cameraSource, @NonNull String focusMode) {
    Field[] declaredFields = CameraSource.class.getDeclaredFields();

    for (Field field : declaredFields) {
        if (field.getType() == Camera.class) {
            field.setAccessible(true);
            try {
                Camera camera = (Camera) field.get(cameraSource);
                if (camera != null) {
                    Camera.Parameters params = camera.getParameters();
                    params.setFocusMode(focusMode);
                    camera.setParameters(params);
                    return true;
                }

                return false;
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }

            break;
        }
    }

    return false;
}
</code></pre>

<p>The advice was given here: <a href=""https://github.com/googlesamples/android-vision/issues/2"" rel=""noreferrer"">https://github.com/googlesamples/android-vision/issues/2</a></p>

<p>and the code reference was here: <a href=""https://gist.github.com/Gericop/7de0b9fdd7a444e53b5a"" rel=""noreferrer"">https://gist.github.com/Gericop/7de0b9fdd7a444e53b5a</a></p>

<p>I also had to modify the FaceTrackerFactory draw(Canvas ...) method:</p>

<pre><code>@Override
public void draw(Canvas canvas) {
    Face face = mFace;
    if (face == null) {
        return;
    }

    // Draws a circle at the position of the detected face, with the face's track id below.
    float cx = translateX(face.getPosition().x + face.getWidth() / 2);
    float cy = translateY(face.getPosition().y + face.getHeight() / 2);
    canvas.drawCircle(cx, cy, FACE_POSITION_RADIUS, mFacePositionPaint);
    canvas.drawText(""id: "" + getId(), cx + ID_X_OFFSET, cy + ID_Y_OFFSET, mIdPaint);

    // Draws an oval around the face.
    float xOffset = scaleX(face.getWidth() / 2.0f);
    float yOffset = scaleY(face.getHeight() / 2.0f);
    float left = cx - xOffset;
    float top = cy - yOffset;
    float right = cx + xOffset;
    float bottom = cy + yOffset;
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
        canvas.drawOval(left, top, right, bottom, mBoxPaint);
    } else {
        canvas.drawCircle(cx, cy, Math.max(xOffset, yOffset), mBoxPaint);
    }
}
</code></pre>
",932052,,932052,,2015-08-17 13:52:09,2015-08-17 13:52:09,,,,2,,,
Android,32081995,2,,32014978,2015-08-18 20:25:52,2070,,2,,"<p>I tried the newest <code>NearBy API demo</code> and succeed.</p>

<p>You can just go <a href=""https://github.com/googlesamples/android-nearby/tree/master/messages/NearbyDevices"" rel=""nofollow noreferrer"">here</a> and clone it. Open it in Android Studio, and follow the following steps:</p>

<ul>
<li><p>Create a project on <a href=""https://console.developers.google.com/"" rel=""nofollow noreferrer"">Google Developer Console</a>. Or, use an existing
project.</p></li>
<li><p>Click on <code>APIs &amp; auth -&gt; APIs</code>, and enable <code>Nearby Messages API</code>.</p></li>
<li><p>Click on <code>Credentials</code>, then click on Create new key, and pick Android
key. Then register your Android app's SHA1 certificate fingerprint
and package name for your app. Use
<code>com.google.android.gms.nearby.messages.samples.nearbydevices</code> for the
package name. </p></li>
<li><p>You can get SHA1 by using: <code>keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -list -v</code> and the password by default is <code>android</code>.</p></li>
</ul>

<p><a href=""https://i.stack.imgur.com/51sOY.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/51sOY.jpg"" alt=""enter image description here""></a></p>

<ul>
<li>Copy the API key generated, and paste it in AndroidManifest.xml.</li>
</ul>

<p><a href=""https://i.stack.imgur.com/JFB6sl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JFB6sl.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/ixEC2.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ixEC2.jpg"" alt=""enter image description here""></a></p>
",4186942,,,,,2015-08-18 20:25:52,,,,3,,,
Android,32100941,2,,32099530,2015-08-19 16:26:39,2071,,3,,"<p><strong>Based on the documentation here:</strong> <a href=""https://developers.google.com/android/reference/com/google/android/gms/vision/package-summary"" rel=""nofollow"">https://developers.google.com/android/reference/com/google/android/gms/vision/package-summary</a> <strong>and here:</strong> <a href=""https://developers.google.com/android/reference/com/google/android/gms/vision/Detector#isOperational()"" rel=""nofollow"">https://developers.google.com/android/reference/com/google/android/gms/vision/Detector#isOperational()</a></p>

<h2>Documentation:</h2>

<blockquote>
  <p><strong>public boolean  isOperational()</strong> </p>
  
  <p>Indicates whether the detector has all of the required dependencies
  available locally in order to do detection.</p>
  
  <p>When an app is first installed, it may be necessary to download
  required files. If this returns false, those files are not yet
  available. Usually this download is taken care of at application
  install time, but this is not guaranteed. In some cases the download
  may have been delayed. </p>
  
  <p>If your code has added a processor, an indication of the detector
  operational state is also indicated with the detectorIsOperational()
  method. You can check this in your app as it processes detection
  results, and can convey this state to the user if appropriate.</p>
  
  <p>Returns •true if the detector is operational, false if the dependency
  download is in progress</p>
</blockquote>

<p><strong>and</strong></p>

<blockquote>
  <p><strong>public boolean  detectorIsOperational()</strong> </p>
  
  <p>Returns true if the detector is operational, false if it is not
  operational. In the non-operational case, the detector will return no
  results.</p>
  
  <p>A detector may be non-operational for a while when starting an app for
  the first time, if a download is required to obtain the associated
  library and model files required to do detection.</p>
</blockquote>

<p>It looks like your device needs to finish downloading the libraries through Google Play Services in order for your application to work right away.</p>

<h2>Based on the Google Samples(a comment in the source):</h2>

<pre><code>        // Note: The first time that an app using the barcode or face API is installed on a
        // device, GMS will download a native libraries to the device in order to do detection.
        // Usually this completes before the app is run for the first time.  But if that
        // download has not yet completed, then the above call will not detect any barcodes
        // and/or faces.
        //
        // isOperational() can be used to check if the required native libraries are currently
        // available.  The detectors will automatically become operational once the library
        // downloads complete on device.
</code></pre>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/multi-tracker/app/src/main/java/com/google/android/gms/samples/vision/face/multitracker/MultiTrackerActivity.java#L156"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/multi-tracker/app/src/main/java/com/google/android/gms/samples/vision/face/multitracker/MultiTrackerActivity.java#L156</a></p>
",950427,,322642,,2015-08-29 10:56:08,2015-08-29 10:56:08,,,,1,,,
Android,32105820,2,,32105132,2015-08-19 21:17:41,2071,,4,,"<p>An issue identified is that the CameraSource class used for this app does not include an auto focus setting.  For some barcode formats, such as EAN 13, this reduces the detection rate.</p>

<p>We have recently open sourced the CameraSource class, and this includes an option for auto-focus.  We recommend that you use this version of CameraSource and enable auto-focus:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java</a></p>

<p><strong>Update:</strong></p>

<p>The CameraSource provided with Google Play Services 8.4 now has an auto focus option.</p>
",5231007,,5231007,,2015-12-22 16:39:09,2015-12-22 16:39:09,,,,1,,,
Android,32134285,2,,32134187,2015-08-21 7:04:04,2072,,3,,"<p>This is <code>deprecated</code>. You can't switch on/off location programmatically. Better I suggest you to use the latest version of <code>GooglePlayService</code>. Using <code>PlayService</code> you can check at anytime whether the <code>location</code> is enabled or not. If it's not enabled then the <code>AlertDialog</code> to enable it. Without even leaving your application you can enable GPS. If it's not enabled then you can do whatever the operation you want to perform. You can find the more details from this <a href=""http://android-developers.blogspot.in/2015/03/google-play-services-70-places-everyone.html"" rel=""nofollow"">post</a></p>

<p>Basically your <code>Activity</code> should implement <code>ResultCallback&lt;LocationSettingsResult&gt;</code></p>

<p>And register <code>PendingIntent</code> like below,</p>

<pre><code>PendingResult&lt;LocationSettingsResult&gt; result =
            LocationServices.SettingsApi.checkLocationSettings(
                    mGoogleApiClient,
                    mLocationSettingsRequest
            );
    result.setResultCallback(this);
</code></pre>

<p>Now you have a <code>onResult</code> callback in that you can perform what you want to do</p>

<pre><code>@Override
public void onResult(LocationSettingsResult locationSettingsResult) {
    final Status status = locationSettingsResult.getStatus();
    switch (status.getStatusCode()) {
        case LocationSettingsStatusCodes.SUCCESS:
            Log.i(TAG, ""All location settings are satisfied."");
            startLocationUpdates();
            break;
        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
            Log.i(TAG, ""Location settings are not satisfied. Show the user a dialog to"" +
                    ""upgrade location settings "");
            try {
                // Show the dialog by calling startResolutionForResult(), and check the result
                // in onActivityResult().
                status.startResolutionForResult(MainActivity.this, REQUEST_CHECK_SETTINGS);
            } catch (IntentSender.SendIntentException e) {
                Log.i(TAG, ""PendingIntent unable to execute request."");
            }
            break;
        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
            Log.i(TAG, ""Location settings are inadequate, and cannot be fixed here. Dialog "" +
                    ""not created."");
            break;
    }
}
// This code is from https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java
</code></pre>

<p>Please find the sample google project in <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationSettings"" rel=""nofollow"">Github</a></p>
",3475831,,3475831,,2015-08-21 7:15:00,2015-08-21 7:15:00,,,,0,,,
Android,32146854,2,,32105785,2015-08-21 18:13:36,2073,,5,,"<p>There is a ""Getting Started"" page, which talks about how to import the sample projects:</p>

<p><a href=""https://developers.google.com/vision/getting-started"" rel=""nofollow"">https://developers.google.com/vision/getting-started</a></p>

<blockquote>
  <p>To download and set up the sample application in Android Studio:</p>
  
  <ol>
  <li>Download the Vision samples from Github.</li>
  </ol>
  
  <p>You can either use the ""Download ZIP"" button on the Github Page or
  clone on the command line:</p>
  
  <p>git clone <a href=""https://github.com/googlesamples/android-vision.git"" rel=""nofollow"">https://github.com/googlesamples/android-vision.git</a> </p>
  
  <ol start=""2"">
  <li>Import the photo-demo project in Android Studio:</li>
  </ol>
  
  <p>Click File > New > Import Project.</p>
  
  <p>In the ""Select Eclipse or Gradle
  Project to Import"" window, navigate to the directory where you
  downloaded the vision samples repository. </p>
  
  <p>Select the ""photo-demo"" folder and click OK. </p>
  
  <p>Android Studio may prompt you to install the
  latest version of various Android libraries, especially
  com.android.gms.play-services in this case. Click ""Install Repository
  and sync project"" and follow the instructions. </p>
  
  <ol start=""3"">
  <li><p>Connect your device
  over USB. You should see a notification that says ‘USB Debugging
  Enabled’. If you don’t see this notification, follow Step 2 here to
  enable USB debugging on your device, then plug your device in again.</p></li>
  <li><p>Run the app either by clicking the green arrow in the bar, or go to
  Run > Run 'app'.</p></li>
  </ol>
</blockquote>
",5231007,,5231007,,2015-08-23 14:57:54,2015-08-23 14:57:54,,,,0,,,
Android,32150276,2,,32146987,2015-08-21 22:40:22,2073,,3,,"<p>We recently updated the <a href=""https://github.com/googlesamples/android-ndk/tree/master/native-audio"" rel=""nofollow"">native-audio sample</a> to toggle on fastpath audio when available.</p>

<p><a href=""https://github.com/googlesamples/android-ndk/issues/new"" rel=""nofollow"">Feedbacks are welcome</a> if you run into any issue.</p>
",656408,,,,,2015-08-21 22:40:22,,,,1,,,
Android,32150507,2,,32150500,2015-08-21 23:06:11,2073,,19,,"<p>There is detailed instructions on the <a href=""http://tools.android.com/tech-docs/android-ndk-preview"">Android NDK Preview</a> site.</p>

<h2>The gist of it</h2>

<ul>
<li><a href=""http://developer.android.com/sdk/index.html"">Download</a> Android Studio 1.3+</li>
<li>Install the NDK bundle from <em>Tools > Android > SDK Manager</em>
<a href=""https://i.stack.imgur.com/TdOBo.png""><img src=""https://i.stack.imgur.com/TdOBo.png"" alt=""NDK in android sdk manager""></a></li>
<li>Import the hello-jn sample using <em>File > Import Sample</em> (Note: This sample is using the new <code>gradle-experimental</code> plugin)
<a href=""https://i.stack.imgur.com/4BX8f.png""><img src=""https://i.stack.imgur.com/4BX8f.png"" alt=""import sample diaglog""></a></li>
<li>Click <em>Run > Edit Configurations...</em> and andd a new <em>Android Native</em> configuration
<a href=""http://tools.android.com/_/rsrc/1436485240263/tech-docs/android-ndk-preview/ndk-native.png"">native run configuration http://tools.android.com/_/rsrc/1436485240263/tech-docs/android-ndk-preview/ndk-native.png</a></li>
<li>Run and debug your application as usual</li>
</ul>

<h2>A few things to try from there:</h2>

<ul>
<li>Generate JNI bindings for Native Java function.
<a href=""https://i.stack.imgur.com/YQ5GO.gif""><img src=""https://i.stack.imgur.com/YQ5GO.gif"" alt=""generate jni binding""></a></li>
<li>Put breakpoint in native code (with the current limitation that breakpoint on init/onCreate get skipped, should be already fixed in <a href=""http://tools.android.com/download/studio/canary"">Android Studio 1.4 Preview</a>)</li>
<li>Give <a href=""http://tools.android.com/feedback"">feedback</a> to the team</li>
<li>Try and contribute to the <a href=""https://github.com/googlesamples/android-ndk"">new sample on GitHub</a></li>
<li>Explore the <a href=""http://developer.android.com/ndk/index.html"">new documentation</a> and <a href=""http://developer.android.com/ndk/reference/index.html"">API reference</a>.</li>
</ul>
",656408,,656408,,2015-08-21 23:26:11,2015-08-21 23:26:11,,,,0,,,
Android,32157057,2,,2050263,2015-08-22 14:10:30,2074,,5,,"<p>Barcode Detection is now available in <a href=""http://android-developers.blogspot.com/2015/08/barcode-detection-in-google-play.html"" rel=""noreferrer"">Google Play services</a>.  <a href=""https://search-codelabs.appspot.com/codelabs/bar-codes#1"" rel=""noreferrer"">Code lab</a> of the setup process, here are the <a href=""https://developers.google.com/vision/barcodes-overview"" rel=""noreferrer"">api docs</a>, and a <a href=""https://github.com/googlesamples/android-vision"" rel=""noreferrer"">sample project</a>.</p>
",821544,,,,,2015-08-22 14:10:30,,,,1,,,
Android,32190055,2,,28804307,2015-08-24 19:19:24,2076,,6,,"<p>If you set your minSdkVersion to 23 or higher Android M makes it easy to generate and manage symmetric keys as of this month.</p>

<p>Check out the 4th example listed here.
<a href=""https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html"" rel=""noreferrer"">https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html</a></p>

<pre><code> KeyGenerator keyGenerator = KeyGenerator.getInstance(
         KeyProperties.KEY_ALGORITHM_AES, ""AndroidKeyStore"");
 keyGenerator.initialize(
         new KeyGenParameterSpec.Builder(""key2"",
                 KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
                 .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
                 .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
                 .build());
 SecretKey key = keyGenerator.generateKey();

 Cipher cipher = Cipher.getInstance(""AES/GCM/NoPadding"");
 cipher.init(Cipher.ENCRYPT_MODE, key);
 ...

 // The key can also be obtained from the Android Keystore any time as follows:
 KeyStore keyStore = KeyStore.getInstance(""AndroidKeyStore"");
 keyStore.load(null);
 key = (SecretKey) keyStore.getKey(""key2"", null);
</code></pre>

<p>This example also was helpful.
<a href=""https://github.com/googlesamples/android-ConfirmCredential/blob/master/Application/src/main/java/com/example/android/confirmcredential/MainActivity.java"" rel=""noreferrer"">https://github.com/googlesamples/android-ConfirmCredential/blob/master/Application/src/main/java/com/example/android/confirmcredential/MainActivity.java</a></p>
",1387849,,1387849,,2015-08-24 20:30:04,2015-08-24 20:30:04,,,,4,,,
Android,32199938,2,,32199094,2015-08-25 9:10:07,2076,,1,,"<p>You should have a structure like this:</p>

<pre><code>root
  module
    src
      main
      test
</code></pre>

<p>And all you need in your <code>build.gradle</code> is (without setting source sets):</p>

<pre><code>dependencies {
    // Unit testing dependencies.
    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.okhttp:mockwebserver:2.4.0'
}
</code></pre>

<p>You can check in the official repo from Google:</p>

<ul>
<li><a href=""https://github.com/googlesamples/android-testing/tree/master/unit/BasicSample/app"" rel=""nofollow"">A collection of samples demonstrating different frameworks</a> </li>
<li><a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""nofollow"">collection of Google's Android testing tools</a></li>
</ul>

<p>If you would like to use unit test and Instrumentation tests you should have:</p>

<pre><code>root
  module
    src
      main
      test
      androidTest
</code></pre>

<p>In this case your build.gradle should be:</p>

<pre><code>dependencies {

    // Dependencies for local unit tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    // Android Testing Support Library's runner and rules
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'

}
</code></pre>
",2016562,,,,,2015-08-25 9:10:07,,,,2,,,
Android,32215828,2,,17567119,2015-08-25 23:40:57,2077,,1,,"<p>the native-audio sample is updated to playback in low latency path; a new sample <a href=""https://github.com/googlesamples/android-ndk/tree/master/audio-echo"" rel=""nofollow"">audio-echo</a> is created to loop back audio in low latency path on Android.</p>
",4496512,,,,,2015-08-25 23:40:57,,,,0,,,
Android,32215914,2,,24729488,2015-08-25 23:52:13,2077,,2,,"<p>You may try to use Java function interface:<br>
        AudioManager myAudioMgr = (AudioManager) getSystemService(Context.AUDIO_SERVICE);<br>
        nativeSampleRate  =  myAudioMgr.getProperty(AudioManager.PROPERTY_OUTPUT_SAMPLE_RATE);</p>

<p>to retrieve the hardware default sample rate on your phone, use that to create the player.<br>
   Also try to use:
        nativeSampleBufSize =myAudioMgr.getProperty(AudioManager.PROPERTY_OUTPUT_FRAMES_PER_BUFFER);  </p>

<p>to get default audio buffer size( it is in frames ) and use that for your playback.</p>

<p>You could look at the JNI sample code <a href=""https://github.com/googlesamples/android-ndk/tree/master/audio-echo"" rel=""nofollow"">audio-echo</a> if JNI is ok for you. </p>
",4496512,,,,,2015-08-25 23:52:13,,,,4,,,
Android,32216037,2,,22088854,2015-08-26 0:06:59,2077,,2,,"<p>you might check out <a href=""https://github.com/googlesamples/android-ndk/tree/master/audio-echo"" rel=""nofollow"">audio-echo</a>sample, in README.md, irregularity of the callback is a factor mentioned there too. Put your audio into the platform fast audio path will improve the callback irregularity, it is platform dependent, might worth a try.</p>
",4496512,,,,,2015-08-26 0:06:59,,,,0,,,
Android,32283362,2,,32282920,2015-08-29 6:33:58,2080,,1,,"<p>To Achieve this,  You will have to create your own embedded camera in your application rather than using a intent to open a camera application installed on your device. You can use the latest Camera API 2. </p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">Here</a> is the basic example which I customized for my applications need. And also there are 2 sample applications you can get straight from Android studio's sample projects.</p>

<p>Using this, you can Save all the images on the call back Method and also have a additional button or on Back Button Pressed, you can start the Uploading of those images.</p>

<p>This is the callback method,</p>

<pre><code>/**
 * This a callback object for the {@link ImageReader}. ""onImageAvailable"" will be called when a
 * still image is ready to be saved.
 */
private final ImageReader.OnImageAvailableListener mOnImageAvailableListener
        = new ImageReader.OnImageAvailableListener() {

    @Override
    public void onImageAvailable(ImageReader reader) {

        //mBackgroundHandler.post(new ImageSaver(reader.acquireNextImage(), mFile));
        // Do what ever you like, Original code does is, it save the image using a handler.
    }

};
</code></pre>

<p>Only Cavity here is, you will not get the Advanced features provided by a dedicated camera application and you do not want to write a advanced camera application, which is a different project and also beware of different manufacturer support Samsung S5 with Lollipop had some issue, But the code works after some minor changes to the code.</p>
",892788,,892788,,2015-08-29 6:47:39,2015-08-29 6:47:39,,,,0,,,
Android,32296783,2,,30999337,2015-08-30 12:54:56,2082,,1,,"<p>Have a look on this <a href=""https://github.com/googlesamples/android-ndk/issues/34"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/issues/34</a></p>

<p>Edit your <code>app/build.gradle</code> file like this:</p>

<pre><code>model {
    android {
        ...
    }
    ...
    compileOptions.with {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }
}
</code></pre>
",2090096,,,,,2015-08-30 12:54:56,,,,0,,,
Android,32300841,2,,32258675,2015-08-30 20:30:01,2082,,1,,"<p>We have recently open sourced the CameraSource class.  See here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java</a></p>

<p>This version includes a fix for the picture size issue.  It will automatically select the highest resolution that the camera supports which matches the aspect ratio of the preview.</p>
",5231007,,5231007,,2015-12-22 18:05:32,2015-12-22 18:05:32,,,,2,,,
Android,32329783,2,,32324926,2015-09-01 10:53:24,2083,,1,,"<p><a href=""https://github.com/googlesamples/android-HorizontalPaging/"" rel=""nofollow"">https://github.com/googlesamples/android-HorizontalPaging/</a></p>

<p>This has the link to something similar to what you have shown in the images. Let me know if there is something additional you are looking for, and I will link the relevant libraries.</p>

<p>Basically the difference between ViewPager and recyclerView is that, in recyclerView you are switching between many item, while in ViewPager you are switching between many fragments or independent pages itself.</p>

<p>I see you are using this <a href=""https://github.com/lsjwzh/RecyclerViewPager"" rel=""nofollow"">https://github.com/lsjwzh/RecyclerViewPager</a>, is there any particular use case you have in mind?</p>
",4989390,,,,,2015-09-01 10:53:24,,,,0,,,
Android,32356466,2,,32349454,2015-09-02 14:52:15,2085,,1,,"<p>If you are drawing graphics over a live camera preview, you need to take a few things into account:</p>

<ol>
<li>the device's rotation</li>
<li>the scale of the view relative to the size of the preview image</li>
<li>whether you are using the front facing camera (which will mirror the image)</li>
</ol>

<p>The sample code for the face tracker demo has utility methods (translateX, translateY, scaleX, scaleY) to help with this:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/FaceGraphic.java#L99"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/FaceGraphic.java#L99</a></p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/ui/camera/GraphicOverlay.java#L100"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/ui/camera/GraphicOverlay.java#L100</a></p>
",5231007,,,,,2015-09-02 14:52:15,,,,0,,,
Android,32391107,2,,10418792,2015-09-04 6:04:03,2086,,2,,"<p>I know I am quite late to answer here but all the folks looking for an updated answer to this question, no more a need to depend on third party apis, Google offers <a href=""http://android-developers.blogspot.in/2015/08/barcode-detection-in-google-play.html"" rel=""nofollow"">Barcode Scanning APIs</a> via Google Play Services 7.8. Refer to <a href=""https://search-codelabs.appspot.com/codelabs/bar-codes#1"" rel=""nofollow"">CodeLabs</a>, <a href=""https://developers.google.com/vision/?utm_campaign=barcode-815&amp;utm_source=dac&amp;utm_medium=blog"" rel=""nofollow"">Documentation</a>, <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow"">Github Sample</a> for more information.</p>
",4002813,,,,,2015-09-04 6:04:03,,,,0,,,
Android,32391858,2,,32202685,2015-09-04 6:54:54,2086,,1,,"<p>Sometimes detector dependencies are downloaded when the app runs for the first time and not when the app installs. I too faced the same issue, the problem is either your network connection is weak or you don't have enough storage for download say 10% of the total space though it does not take that much space but downloads from Google Play Services does require good amount of storage and don't forget to clear cache(Simple check try to update any application from playstore). Refer this <a href=""https://github.com/googlesamples/android-vision/issues/14"" rel=""nofollow"">Github thread</a> for more information.</p>
",4002813,,,,,2015-09-04 6:54:54,,,,0,,,
Android,32393148,2,,32155107,2015-09-04 8:08:56,2086,,3,,"<p>This is possible now with the new <a href=""http://android-developers.blogspot.in/2015/08/barcode-detection-in-google-play.html"" rel=""nofollow"">Barcode Scanning Apis</a> available from Google Play Services 7.8 version. It has method to detect barcode passed as a bitmap.
Get path of image from gallery and convert it to bitmap and pass it like below:</p>

<pre><code>     Frame frame = new Frame.Builder().setBitmap(bitmap).build();
     BarcodeDetector barcodeDetector = new BarcodeDetector.Builder(context)
                    .build();
if(barcode.isOperational()){
    SparseArray&lt;Barcode&gt; sparseArray = barcodeDetector.detect(frame);
                if(sparseArray != null &amp;&amp; sparseArray.size() &gt; 0){
                    for (int i = 0; i &lt; sparseArray.size(); i++){
                                        Log.d(LOG_TAG, ""Value: "" + sparseArray.valueAt(i).rawValue + ""----"" + sparseArray.valueAt(i).displayValue);
                                        Toast.makeText(LOG_TAG, sparseArray.valueAt(i).rawValue, Toast.LENGTH_SHORT).show();

                                    }
                }else {
                    Log.e(LOG_TAG,""SparseArray null or empty"");
                }

}else{
    Log.e(LOG_TAG, ""Detector dependencies are not yet downloaded"");
}
</code></pre>

<p>In your build.gradle file, include the following under dependencies section:
compile 'com.google.android.gms:play-services:7.8.+'</p>

<p>Following Manifest permissions are must:</p>

<pre><code>&lt;uses-feature android:name=""android.hardware.camera"" /&gt;
    &lt;uses-feature android:name=""android.hardware.camera.autofocus"" /&gt;

    &lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
    &lt;uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"" /&gt;
    &lt;uses-permission android:name=""android.permission.CAMERA"" /&gt;
    &lt;uses-permission android:name=""com.google.android.providers.gsf.permission.READ_GSERVICES"" /&gt;
    &lt;uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"" /&gt;
    &lt;uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE"" /&gt;
</code></pre>

<p>Meta data for google play services:</p>

<pre><code>&lt;meta-data
            android:name=""com.google.android.gms.version""
            android:value=""@integer/google_play_services_version"" /&gt;
</code></pre>

<p>Meta data for first time install/run time dependencies to be downloaded for getting barcode detector operational.</p>

<pre><code>&lt;meta-data
            android:name=""com.google.android.gms.vision.DEPENDENCIES""
            android:value=""barcode"" /&gt;
</code></pre>

<p>For detailed usage of this api, Refer <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow"">Github Sample</a>, follow <a href=""https://search-codelabs.appspot.com/codelabs/bar-codes"" rel=""nofollow"">Code Lab</a>, <a href=""https://developers.google.com/android/reference/com/google/android/gms/vision/package-summary"" rel=""nofollow"">Documentation</a>.</p>
",4002813,,,,,2015-09-04 8:08:56,,,,1,,,
Android,32404701,2,,32393134,2015-09-04 18:45:25,2087,,16,,"<p>For Android, I tried to use <code>Place picker for Android</code>. It can add the <code>built-in place picker UI widget</code> to your app, so users can choose from a set of nearby places displayed on a map. It easy to use, you just need to do is:</p>

<pre><code>int PLACE_PICKER_REQUEST = 1;
PlacePicker.IntentBuilder builder = new PlacePicker.IntentBuilder();    
startActivityForResult(builder.build(this), PLACE_PICKER_REQUEST);
</code></pre>

<p>It will show the UI below to pick a place for you, and you can get the place info by using below:</p>

<pre><code>protected void onActivityResult(int requestCode, int resultCode, Intent data) {
  if (requestCode == PLACE_PICKER_REQUEST) {
    if (resultCode == RESULT_OK) {
        Place place = PlacePicker.getPlace(data, this);
        String toastMsg = String.format(""Place: %s"", place.getName());
        Toast.makeText(this, toastMsg, Toast.LENGTH_LONG).show();
    }
  }
}
</code></pre>

<p><a href=""https://i.stack.imgur.com/REjZCl.jpg""><img src=""https://i.stack.imgur.com/REjZCl.jpg"" alt=""enter image description here""></a></p>

<p>For more details, please refer to guide <a href=""https://developers.google.com/places/android-api/placepicker"">here</a> and code <a href=""https://github.com/googlesamples/android-play-places/blob/master/PlacePicker/Application/src/main/java/com/example/google/playservices/placepicker/PlacePickerFragment.java#L106-L170"">here</a>.</p>

<p>However, it cannot set the place type because it no feature for the Build in UI.. If you really need to set, you should use <code>Google Places API Web Service API</code> <a href=""https://developers.google.com/places/web-service/search#PlaceSearchRequests"">here</a>, search the location yourself, parse the JSON data, and show on your own UI.</p>

<p>A Nearby Search lets you search for places within a specified area. You can refine your search request by supplying keywords or specifying the type of place you are searching for.</p>

<p>A Nearby Search request is an HTTP URL of the following form:</p>

<pre><code>https://maps.googleapis.com/maps/api/place/nearbysearch/output?parameters
</code></pre>

<p>Note that in parameters you need to set <code>types=hospital</code></p>

<p><strong>EDIT</strong></p>

<p>Example on how to pass the search request for specific locations in JSON using the google places API web API web service API.</p>

<p>Request</p>

<pre><code>location: -33.8670,151.1957
radius: 500
types: food
name: cruise
key: API_KEY
</code></pre>

<p>Url for this:</p>

<p><a href=""https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670,151.1957&amp;radius=500&amp;types=food&amp;name=cruise&amp;key=API_KEY"">https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670,151.1957&amp;radius=500&amp;types=food&amp;name=cruise&amp;key=API_KEY</a></p>

<p>and Response JSON like this:</p>

<pre><code>{
   ""debug_log"" : {
      ""line"" : []
   },
   ""html_attributions"" : [],
   ""logging_info"" : {
      ""experiment_id"" : [],
      ""query_geographic_location"" : ""AU""
   },
   ""results"" : [
      {
         ""geometry"" : {
            ""location"" : {
               ""lat"" : -33.86879,
               ""lng"" : 151.194217
            }
         },
         ""icon"" : ""http://maps.gstatic.com/mapfiles/place_api/icons/restaurant-71.png"",
         ""id"" : ""21a0b251c9b8392186142c798263e289fe45b4aa"",
         ""name"" : ""Rhythmboat Cruises"",
         ""opening_hours"" : {
            ""open_now"" : false,
            ""weekday_text"" : []
         },
         ""photos"" : [
            {
               ""height"" : 426,
               ""html_attributions"" : [
                  ""\u003ca href=\""https://www.google.com/maps/views/profile/104066891898402903288\""\u003eRhythmboat Cruises\u003c/a\u003e""
               ],
               ""photo_reference"" : ""CmRdAAAA-YL_I_Gk02blOX6S0nKHry8PFu9pDyp3Y9AnqISsa3Eq8mkbdD5mXuu1Fax60s0nSy3iiX-h5j-ztyLHcc1-782MsLQsgLLa4t3ZgDmCMll-a8ABapZGnZwDKByk67LFEhBgedv_u_eYFsEo9ay8jxJjGhTUHKPJ4G82vBJqSNliuv7UlAtclw"",
               ""width"" : 640
            }
         ],
         ""place_id"" : ""ChIJyWEHuEmuEmsRm9hTkapTCrk"",
         ""reference"" : ""CnRmAAAAvQlMKw-XtxEY4vWFCvudF7CEMQGI5ycNbfVgGl9rAF75fdiPOiLJw1k9NL2v8ZIJsOJuRS3Lm9Dw1vga4ajycAs7PlxN1MVnnYT9la0pBvEvSQNlyvszKANS1R4P7Mvk_jhqswMggqCUtwJ13LN2hRIQOiAkLTWUi3DOjVVOw7J5IRoUb_cJyJaJNqKdmkDM2f0OjQjh9F0"",
         ""scope"" : ""GOOGLE"",
         ""types"" : [ ""restaurant"", ""food"", ""point_of_interest"", ""establishment"" ],
         ""vicinity"" : ""Pyrmont Bay Wharf (Near Australia Maritime Museum), Pyrmont, NSW 2009""
      },
      {
         ""geometry"" : {
            ""location"" : {
               ""lat"" : -33.867591,
               ""lng"" : 151.201196
            }
         },
         ""icon"" : ""http://maps.gstatic.com/mapfiles/place_api/icons/restaurant-71.png"",
         ""id"" : ""a97f9fb468bcd26b68a23072a55af82d4b325e0d"",
         ""name"" : ""Australian Cruise Group"",
         ""opening_hours"" : {
            ""open_now"" : false,
            ""weekday_text"" : []
         },
         ""photos"" : [
            {
               ""height"" : 1331,
               ""html_attributions"" : [
                  ""\u003ca href=\""https://www.google.com/maps/views/profile/110751364053842618118\""\u003eAustralian Cruise Group\u003c/a\u003e""
               ],
               ""photo_reference"" : ""CmRdAAAAtEoj29FJcNBccrsu6bHt0xgwVGhYlciCY1fe6gTr_d5_KkeP3LITnOwnpNRJWnX39B04-aIBOKXKJH6ltx948T5vWIYBoah1yZDXsWngWZ5kMsK7xyCB5P_q_xBIBxxUEhAYWeB4PiOm_Jy093fB-j0iGhSYmIs9xB2aa6u-RH8V8lZEk-Q5ig"",
               ""width"" : 2000
            }
         ],
         ""place_id"" : ""ChIJrTLr-GyuEmsRBfy61i59si0"",
         ""reference"" : ""CnRqAAAAFbukrZvRNsc05TreHUCrPEya5NcN9v0fFLLaK-D1fSyxFTuQlUDhDstU3qwXKw_fADX4W6guUkexax1nufgiYIuGCKoZPEnup1r-LhGGNz9dn1uf9Of5iOtZ1XgCeDjJaYvGbSB3C0pAXL8r9kOsmhIQbx2Sia2DAWTjtSZwuh5aehoUhM6upqBCDLhGruZAGGsCOwAiIq8"",
         ""scope"" : ""GOOGLE"",
         ""types"" : [
            ""restaurant"",
            ""travel_agency"",
            ""food"",
            ""point_of_interest"",
            ""establishment""
         ],
         ""vicinity"" : ""32 The Promenade, King Street Wharf 5, Sydney""
      },
      {
         ""geometry"" : {
            ""location"" : {
               ""lat"" : -33.870943,
               ""lng"" : 151.190311
            }
         },
         ""icon"" : ""http://maps.gstatic.com/mapfiles/place_api/icons/bar-71.png"",
         ""id"" : ""e644f7f34cf875b9919c6548f1b721947362850a"",
         ""name"" : ""Lunch Cruise with Jazz on Sydney Harbour"",
         ""opening_hours"" : {
            ""open_now"" : false,
            ""weekday_text"" : []
         },
         ""photos"" : [
            {
               ""height"" : 292,
               ""html_attributions"" : [
                  ""\u003ca href=\""https://www.google.com/maps/views/profile/105423912060796272053\""\u003eFrom a Google User\u003c/a\u003e""
               ],
               ""photo_reference"" : ""CmRdAAAAR4bqFTKYWdBwZwdBdON_JRD7V_joTwwIPwRUpZIZWkSSd8GQ3P2O-_aQbUJdL2RhoAyzCUIF0f--DI4oXFneTpj5zZfFq-iFiT7i_x0tjnDveIY8tJv-6o0uWSSjYqabEhCKqQWZqrKAoddjDcc64N48GhQZ2T1_ntPzNKCooHpZzlYQ7AxFOA"",
               ""width"" : 438
            }
         ],
         ""place_id"" : ""ChIJLfySpTOuEmsRPCRKrzl8ZEY"",
         ""reference"" : ""CoQBewAAAFd2fO_YWGTiT4RzXWb5tsOuOt7YyV_ScQOwm0tqJSrAyACCczeOzV-P_mgZLro1oKP_34Nt0nVC_1OEKAQUcd7cUm7xmAMSX-EkbSWiD0kOWGgGgKuDRtb0t_8qsxBGU_izugWCyK7SRWezTxELYNdkS0OEiSWPnvhxvXuQktBBEhAAtEe7fagW2kUR14T1QpVsGhQBO7YpIyYSPvo4zUJuL_bX30nJZw"",
         ""scope"" : ""GOOGLE"",
         ""types"" : [ ""bar"", ""restaurant"", ""food"", ""point_of_interest"", ""establishment"" ],
         ""vicinity"" : ""37 Bank St, Pyrmont""
      }
   ],
   ""status"" : ""OK""
}
</code></pre>

<p>The below example returns a list of hospitals near London, England.</p>

<pre><code>https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=51.503186,-0.126446&amp;radius=5000&amp;types=hospital&amp;key=API_KEY
</code></pre>

<p>For more details please refer <a href=""https://developers.google.com/places/web-service/"">here</a>.</p>
",4186942,,4186942,,2015-09-07 6:37:16,2015-09-07 6:37:16,,,,7,,,
Android,32408132,2,,6353188,2015-09-04 23:58:05,2087,,2,,"<p>This use-case may be a good fit for the recently released Nearby API. See the Nearby Messages <a href=""https://developers.google.com/nearby/messages/overview"" rel=""nofollow"">developer overview</a></p>

<p>Nearby has its own runtime permission saving you from adding BLUETOOTH_ADMIN or similar to your manifest. It works across iOS and Android by utilizing multiple technologies (Classic Bluetooth, BLE, ultrasound). There's an option to use only the ultrasonic modem which reduces the range to about 5 feet.</p>

<p>I've included a partial example below, you can find a more complete sample on <a href=""https://github.com/googlesamples/android-nearby/blob/master/messages/NearbyDevices/app/src/main/java/com/google/android/gms/nearby/messages/samples/nearbydevices/MainFragment.java"" rel=""nofollow"">github</a></p>

<pre><code>// Call this when the user clicks ""find players"" or similar
// In the ResultCallback you'll want to trigger the permission
// dialog
Nearby.Messages.getPermissionStatus(client)
  .setResultCallback(new ResultCallback&lt;Status&gt;() {
    public void onResult(Status status) {
      // Request Nearby runtime permission if missing
      // ... see github sample for details
      // If you already have the Nearby permission,
      // call publishAndSubscribe()
    }
  });

void publishAndSubscribe() {
  // You can put whatever you want in the message up to a modest
  // size limit (currently 100KB). Smaller will be faster, though.
  Message msg = ""your device identifier/MAC/etc."".getBytes();
  Nearby.Messages.publish(googleApiClient, msg)
      .setResultCallback(...);

  MessageListener listener = new MessageListener() {
    public void onFound(Message msg) {
      Log.i(TAG, ""You found another device "" + new String(msg));
    }
  });

  Nearby.Messages.subscribe(googleApiClient, listener)
    .setResultCallback(...);
}
</code></pre>

<p><em>Disclaimer</em> I work on the Nearby API</p>
",5302459,,,,,2015-09-04 23:58:05,,,,0,,,
Android,32424365,2,,3290936,2015-09-06 14:00:54,2089,,7,,"<p><code>getRunningTasks()</code> is deprecated in Android L. </p>

<p>To obtain app usage statistics you can use <a href=""https://developer.android.com/reference/android/app/usage/UsageStats.html"" rel=""noreferrer"">UsageStats</a> class from <a href=""https://developer.android.com/reference/android/app/usage/package-summary.html"" rel=""noreferrer"">android.app.usage</a> package.</p>

<p>The new App usage statistics API allows app developers to collect statistics related to usage of the applications. This API provides more detailed usage information than the deprecated getRecentTasks() method.</p>

<p>To use this API, you must first declare the <code>android.permission.PACKAGE_USAGE_STATS</code> permission in your manifest. The user must also enable access for this app through <code>Settings &gt; Security &gt; Apps with usage access</code>.</p>

<p><a href=""https://github.com/googlesamples/android-AppUsageStatistics"" rel=""noreferrer"">Here</a> is a basic app example showing how to use App usage statistics API to let users collect statistics related to usage of the applications.</p>
",2602984,,,,,2015-09-06 14:00:54,,,,2,,,
Android,32489015,2,,31743477,2015-09-09 20:56:02,2092,,2,,"<p>I guess there is some issue with the permissions.</p>

<p>Use the new <a href=""https://developer.android.com/reference/android/media/projection/MediaProjection.html"" rel=""nofollow"">MediaProjection</a> apis to do it.</p>

<p>Refer <a href=""https://github.com/googlesamples/android-ScreenCapture"" rel=""nofollow"">https://github.com/googlesamples/android-ScreenCapture</a> for source code.</p>
",2027272,,,,,2015-09-09 20:56:02,,,,1,,,
Android,32497145,2,,32496742,2015-09-10 8:46:58,2092,,7,,"<pre><code>Prerequisite:
•   Android 4.2.2+
•   Latest Android SDK
•   Google Play Services 7.8+ (Rev. 26.0 in SDK)
•   compile 'com.android.support:appcompat-v7:22.0.0'
•   compile 'com.google.android.gms:play-services:7.8+'
</code></pre>

<p>Download the code sample code from this <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow noreferrer"">link</a>,import the barcode-reader project in android studio. Add the google play services 7.8+ &amp; add the mentioned support library in your app gradle. Now modified the BarcodeTrackerFactory.java and MultiTrackerActivity.java class.</p>

<p>BarcodeTrackerFactory.java</p>

<pre><code>import android.app.Activity;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.util.Log;

import com.google.android.gms.samples.vision.face.multitracker.ui.camera.GraphicOverlay;
import com.google.android.gms.vision.MultiProcessor;
import com.google.android.gms.vision.Tracker;
import com.google.android.gms.vision.barcode.Barcode;

/**
 * Factory for creating a tracker and associated graphic to be associated with a new barcode.  The
 * multi-processor uses this factory to create barcode trackers as needed -- one for each barcode.
 */
class BarcodeTrackerFactory implements MultiProcessor.Factory&lt;Barcode&gt; {
    public Activity context;
    private GraphicOverlay mGraphicOverlay;


    BarcodeTrackerFactory(GraphicOverlay graphicOverlay) {
        mGraphicOverlay = graphicOverlay;
    }
    BarcodeTrackerFactory(GraphicOverlay graphicOverlay ,Activity ctx) {
        mGraphicOverlay = graphicOverlay;
        this.context =ctx;
    }
    @Override
    public Tracker&lt;Barcode&gt; create(Barcode barcode) {
        BarcodeGraphic graphic = new BarcodeGraphic(mGraphicOverlay,context);
        return new GraphicTracker&lt;&gt;(mGraphicOverlay, graphic);
    }
}

/**
 * Graphic instance for rendering barcode position, size, and ID within an associated graphic
 * overlay view.
 */
class BarcodeGraphic extends TrackedGraphic&lt;Barcode&gt; {
    private static final int COLOR_CHOICES[] = {
            Color.BLUE,
            Color.CYAN,
            Color.GREEN
    };
    private static int mCurrentColorIndex = 0;

    private Paint mRectPaint;
    private Paint mTextPaint;
    private volatile Barcode mBarcode;
    private Activity context;
private boolean isFirstScandetaction=true;
    BarcodeGraphic(GraphicOverlay overlay ,Activity context) {
        super(overlay);
        this.context=context;
        mCurrentColorIndex = (mCurrentColorIndex + 1) % COLOR_CHOICES.length;
        final int selectedColor = COLOR_CHOICES[mCurrentColorIndex];

        mRectPaint = new Paint();
        mRectPaint.setColor(selectedColor);
        mRectPaint.setStyle(Paint.Style.STROKE);
        mRectPaint.setStrokeWidth(4.0f);

        mTextPaint = new Paint();
        mTextPaint.setColor(selectedColor);
        mTextPaint.setTextSize(36.0f);
    }

    /**
     * Updates the barcode instance from the detection of the most recent frame.  Invalidates the
     * relevant portions of the overlay to trigger a redraw.
     */
    void updateItem(Barcode barcode) {
        mBarcode = barcode;
        if (isFirstScandetaction) {
            postInvalidate();
            if (null != mBarcode) {
                isFirstScandetaction = false;

                Intent intent = new Intent();
                intent.putExtra(""SCAN_RESULT"", barcode.rawValue.toString());
                intent.putExtra(""SCAN_RESULT_FORMAT"",String.valueOf( barcode.format));
                 context.setResult(Activity.RESULT_OK, intent);
                 context.finish();
            }

        }
    }

    /**
     * Draws the barcode annotations for position, size, and raw value on the supplied canvas.
     */
    @Override
    public void draw(Canvas canvas) {
        Barcode barcode = mBarcode;
        if (barcode == null) {
            return;
        }

        // Draws the bounding box around the barcode.
        RectF rect = new RectF(barcode.getBoundingBox());
        rect.left = translateX(rect.left);
        rect.top = translateY(rect.top);
        rect.right = translateX(rect.right);
        rect.bottom = translateY(rect.bottom);
        canvas.drawRect(rect, mRectPaint);

        // Draws a label at the bottom of the barcode indicate the barcode value that was detected.
        canvas.drawText(barcode.rawValue, rect.left, rect.bottom, mTextPaint);

        Log.v(""On Draw"", ""called"");
    }
}
</code></pre>

<p>MultiTrackerActivity.java</p>

<pre><code>import java.io.IOException;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.samples.vision.face.multitracker.ui.camera.CameraSourcePreview;
import com.google.android.gms.samples.vision.face.multitracker.ui.camera.GraphicOverlay;
import com.google.android.gms.vision.CameraSource;
import com.google.android.gms.vision.MultiProcessor;
import com.google.android.gms.vision.barcode.BarcodeDetector;

/**
 * Activity for the multi-tracker app.  This app detects faces and barcodes with the rear facing
 * camera, and draws overlay graphics to indicate the position, size, and ID of each face and
 * barcode.
 */
public final class MultiTrackerActivity extends AppCompatActivity {
    private static final String TAG = ""MultiTracker"";

    private static final int RC_HANDLE_GMS = 9001;
    // permission request codes need to be &lt; 256
    private static final int RC_HANDLE_CAMERA_PERM = 2;

    private CameraSource mCameraSource = null;
    private CameraSourcePreview mPreview;
    private GraphicOverlay mGraphicOverlay;

    /**
     * Initializes the UI and creates the detector pipeline.
     */
    @Override
    public void onCreate(Bundle icicle) {
        super.onCreate(icicle);
        setContentView(R.layout.main);

        mPreview = (CameraSourcePreview) findViewById(R.id.preview);
        mGraphicOverlay = (GraphicOverlay) findViewById(R.id.faceOverlay);

        // Check for the camera permission before accessing the camera.  If the
        // permission is not granted yet, request permission.
        int rc = ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA);
        if (rc == PackageManager.PERMISSION_GRANTED) {
            createCameraSource();
        } else {
            requestCameraPermission();
        }
    }

    /**
     * Handles the requesting of the camera permission.  This includes
     * showing a ""Snackbar"" message of why the permission is needed then
     * sending the request.
     */
    private void requestCameraPermission() {
        Log.w(TAG, ""Camera permission is not granted. Requesting permission"");

        final String[] permissions = new String[]{Manifest.permission.CAMERA};

        if (!ActivityCompat.shouldShowRequestPermissionRationale(this,
                Manifest.permission.CAMERA)) {
            ActivityCompat.requestPermissions(this, permissions, RC_HANDLE_CAMERA_PERM);
            return;
        }

        final Activity thisActivity = this;

        View.OnClickListener listener = new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ActivityCompat.requestPermissions(thisActivity, permissions,
                        RC_HANDLE_CAMERA_PERM);
            }
        };

        Snackbar.make(mGraphicOverlay, R.string.permission_camera_rationale,
                Snackbar.LENGTH_INDEFINITE)
                .setAction(R.string.ok, listener)
                .show();
    }



    /**
     * Creates and starts the camera.  Note that this uses a higher resolution in comparison
     * to other detection examples to enable the barcode detector to detect small barcodes
     * at long distances.
     */
    private void createCameraSource() {


        Context context = getApplicationContext();

        // A barcode detector is created to track barcodes.  An associated multi-processor instance
        // is set to receive the barcode detection results, track the barcodes, and maintain
        // graphics for each barcode on screen.  The factory is used by the multi-processor to
        // create a separate tracker instance for each barcode.      
        BarcodeDetector barcodeDetector = new BarcodeDetector.Builder(context).build();
        BarcodeTrackerFactory barcodeFactory = new BarcodeTrackerFactory(mGraphicOverlay,this);
        barcodeDetector.setProcessor(
                new MultiProcessor.Builder&lt;&gt;(barcodeFactory).build());


        if (!barcodeDetector.isOperational()) {
            // Note: The first time that an app using the barcode or face API is installed on a
            // device, GMS will download a native libraries to the device in order to do detection.
            // Usually this completes before the app is run for the first time.  But if that
            // download has not yet completed, then the above call will not detect any barcodes
            // and/or faces.
            //
            // isOperational() can be used to check if the required native libraries are currently
            // available.  The detectors will automatically become operational once the library
            // downloads complete on device.
            Log.w(TAG, ""Detector dependencies are not yet available."");
        }

        // Creates and starts the camera.  Note that this uses a higher resolution in comparison
        // to other detection examples to enable the barcode detector to detect small barcodes
        // at long distances.
        mCameraSource = new CameraSource.Builder(getApplicationContext(), barcodeDetector)
                .setFacing(CameraSource.CAMERA_FACING_BACK)
                .setRequestedPreviewSize(1600, 1024)
                .setRequestedFps(15.0f)
                .build();
    }

    /**
     * Restarts the camera.
     */
    @Override
    protected void onResume() {
        super.onResume();

        startCameraSource();
    }

    /**
     * Stops the camera.
     */
    @Override
    protected void onPause() {
        super.onPause();
        mPreview.stop();
    }

    /**
     * Releases the resources associated with the camera source, the associated detectors, and the
     * rest of the processing pipeline.
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (mCameraSource != null) {
            mCameraSource.release();
        }
    }


    /**
     * Callback for the result from requesting permissions. This method
     * is invoked for every call on {@link #requestPermissions(String[], int)}.
     * &lt;p&gt;
     * &lt;strong&gt;Note:&lt;/strong&gt; It is possible that the permissions request interaction
     * with the user is interrupted. In this case you will receive empty permissions
     * and results arrays which should be treated as a cancellation.
     * &lt;/p&gt;
     *
     * @param requestCode  The request code passed in {@link #requestPermissions(String[], int)}.
     * @param permissions  The requested permissions. Never null.
     * @param grantResults The grant results for the corresponding permissions
     *                     which is either {@link PackageManager#PERMISSION_GRANTED}
     *                     or {@link PackageManager#PERMISSION_DENIED}. Never null.
     * @see #requestPermissions(String[], int)
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode != RC_HANDLE_CAMERA_PERM) {
            Log.d(TAG, ""Got unexpected permission result: "" + requestCode);
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
            return;
        }

        if (grantResults.length != 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Log.d(TAG, ""Camera permission granted - initialize the camera source"");
            // we have permission, so create the camerasource
            createCameraSource();
            return;
        }

        Log.e(TAG, ""Permission not granted: results len = "" + grantResults.length +
                "" Result code = "" + (grantResults.length &gt; 0 ? grantResults[0] : ""(empty)""));

        DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                finish();
            }
        };

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(""Multitracker sample"")
                .setMessage(R.string.no_camera_permission)
                .setPositiveButton(R.string.ok, listener)
                .show();
    }
    /**
     * Starts or restarts the camera source, if it exists.  If the camera source doesn't exist yet
     * (e.g., because onResume was called before the camera source was created), this will be called
     * again when the camera source is created.
     */
    private void startCameraSource() {

        // check that the device has play services available.
        int code = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(
                getApplicationContext());
        if (code != ConnectionResult.SUCCESS) {
            Dialog dlg =
                    GoogleApiAvailability.getInstance().getErrorDialog(this, code, RC_HANDLE_GMS);
            dlg.show();
        }

        if (mCameraSource != null) {
            try {
                mPreview.start(mCameraSource, mGraphicOverlay);
            } catch (IOException e) {
                Log.e(TAG, ""Unable to start camera source."", e);
                mCameraSource.release();
                mCameraSource = null;
            }
        }
    }
}
</code></pre>

<p>Now to call the scan code and recieve the result-
BarCodeReader.java</p>

<pre><code>import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;

public class BarCodeReader extends FragmentActivity {

    String QR_CODE = ""256"";
    private Button btnscan;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.scanlayout);
        btnscan = (Button) findViewById(R.id.scanbtn);

        btnscan.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                Intent intent = new Intent(BarCodeReader.this,
                        MultiTrackerActivity.class);

                startActivityForResult(intent, 0);
            }
        });
    }

    public void onActivityResult(int requestCode, int resultCode, Intent intent) {
        if (requestCode == 0) {
            if (resultCode == RESULT_OK) {

                String contents = intent.getStringExtra(""SCAN_RESULT"");
                String format = intent.getStringExtra(""SCAN_RESULT_FORMAT"");
                if (format.equals(QR_CODE)) {
                    Toast.makeText(
                            BarCodeReader.this,
                            ""content is : "" + contents + "" \n Format is:    ""
                                    + format, Toast.LENGTH_LONG).show();
                } else {
                    Toast.makeText(BarCodeReader.this, ""wrong format"",
                            Toast.LENGTH_LONG).show();
                }

            } else if (resultCode == RESULT_CANCELED) {
                // To Handle cancel
                Log.i(""App"", ""Scan unsuccessful"");
            }
        }
    }

}
</code></pre>
",3912847,,3912847,,2018-07-05 5:52:44,2018-07-05 5:52:44,,,,0,,,
Android,32510087,2,,32497852,2015-09-10 19:22:46,2093,,5,,"<p>The download mechanism is careful not to download when a device is considered to be ""too low"" on storage.</p>

<p>We updated the sample apps to include a low storage check.  For example:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/photo-demo/app/src/main/java/com/google/android/gms/samples/vision/face/photo/PhotoViewerActivity.java#L91"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/photo-demo/app/src/main/java/com/google/android/gms/samples/vision/face/photo/PhotoViewerActivity.java#L91</a></p>

<p><strong>Update:</strong></p>

<p>Google Vision has lowered the free storage requirement to 500 MB in Google Play Services 8.4.  See the release notes here:</p>

<p><a href=""https://developers.google.com/vision/release-notes?hl=en"" rel=""nofollow"">https://developers.google.com/vision/release-notes?hl=en</a></p>
",5231007,,5231007,,2015-12-22 16:35:53,2015-12-22 16:35:53,,,,2,,,
Android,32517143,2,,32516539,2015-09-11 6:42:34,2093,,2,,"<p>In Camera2 API, </p>

<p>Quoting from the documentation of <code>CameraCaptureSession</code>,</p>

<blockquote>
  <p>If a new session is created by the camera device, then the previous
  session     is closed, and its associated onClosed callback will 
  be invoked. All of the session methods will throw an
  IllegalStateException if called once the session is closed.</p>
</blockquote>

<p>So, as the documentation implies, you are calling a closed session. find this out. I can help a bit more of you put more code.</p>

<p>And also, I hope that you are imitating the Camera2 API sample code.If not I suggest you to have a look at <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">it</a>.</p>
",892788,,,,,2015-09-11 6:42:34,,,,0,,,
Android,32518639,2,,32516539,2015-09-11 8:10:18,2093,,8,,"<p>You can only capture to a surface that is configured for the session, so you should prepare the surface before the session is created.</p>

<p>In the official document:</p>

<blockquote>
  <p><strong>IllegalArgumentException</strong>  if the request targets no Surfaces or
  Surfaces that are <strong>not configured as outputs for this session</strong>; ...</p>
</blockquote>

<p>Just like there, you need to have the surface <code>mImageReader.getSurface()</code> ready when you create the session</p>

<pre><code>           mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),
                new CameraCaptureSession.StateCallback() {
                    ...
                }, null);
</code></pre>

<p>official sample:</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic/tree/master/Application/src/main/java/com/example/android/camera2basic"">https://github.com/googlesamples/android-Camera2Basic/tree/master/Application/src/main/java/com/example/android/camera2basic</a></p>
",5231999,,,,,2015-09-11 8:10:18,,,,4,,,
Android,32534782,2,,29050372,2015-09-12 3:08:50,2094,,3,,"<p>Doing this the proper way involves a huge amount of code. You have to make use of the location <a href=""https://developers.google.com/android/reference/com/google/android/gms/location/SettingsApi"" rel=""nofollow"">SettingsApi</a> class. </p>

<blockquote>
  <p>The main entry point for interacting with the location
  settings-enabler APIs.</p>
  
  <p>This API makes it easy for an app to ensure that the device's system
  settings are properly configured for the app's location needs.</p>
</blockquote>

<p>Fortunately there is a full blown sample provided by Google on <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java"" rel=""nofollow"">github</a> </p>
",267540,,267540,,2015-09-12 4:58:26,2015-09-12 4:58:26,,,,0,,,
Android,32535983,2,,17041010,2015-09-12 6:36:14,2094,,2,,"<p>The accepted answer was correct at the time. But in recent times things have changed with the availability of the <a href=""https://developers.google.com/android/reference/com/google/android/gms/location/SettingsApi"" rel=""nofollow"">SettingsApi</a> It allows you to check if the location services are available on the device and there is a complete example provided by google on <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java"" rel=""nofollow"">github</a> that shows how to use this API. The sample code will prompt the user to enable location if it's switched off.</p>
",267540,,,,,2015-09-12 6:36:14,,,,0,,,
Android,32540342,2,,32453165,2015-09-12 15:11:29,2095,,2,,"<p>Check the following...</p>

<ul>
<li><p>Set a callback on the response to subscribe and call startResolutionForResult on the Status object if the Status was APP_NOT_OPTED_IN . See <a href=""https://github.com/googlesamples/android-nearby/blob/master/messages/NearbyDevices/app/src/main/java/com/google/android/gms/nearby/messages/samples/nearbydevices/MainFragment.java#L507"" rel=""nofollow"">github example</a></p></li>
<li><p>Make sure you've enabled the Nearby API in the Developer Console for your app. Step 3 <a href=""https://developers.google.com/nearby/messages/android/get-started"" rel=""nofollow"">here</a></p></li>
<li><p>Use Strategy.BLE_ONLY in the call to subscribe</p></li>
<li><p>Finally, if none of these help, try a stand-alone BLE scanning app just to make sure the beacon is actually broadcasting.</p></li>
</ul>

<p>If you want to post a more complete code sample, one of our engineers can take a look</p>

<p>(I work on the Nearby API)</p>
",5302459,,5302459,,2015-10-10 14:22:14,2015-10-10 14:22:14,,,,4,,,
Android,32570433,2,,32570075,2015-09-14 17:25:09,2097,,2,,"<p>Did you check this:<br>
<a href=""https://developer.android.com/ndk/samples/sample_hellojni.html"" rel=""nofollow noreferrer"">https://developer.android.com/ndk/samples/sample_hellojni.html</a>
I basically learned from there.
Or:<br>
1. <a href=""https://github.com/sureshjoshi/android-ndk-swig-example"" rel=""nofollow noreferrer"">https://github.com/sureshjoshi/android-ndk-swig-example</a>. <br>
2. <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk</a>.<br>
A simple search would have gotten you in all these places.
<br>
<strong>EDIT</strong>
Now, once you are done with this and it works well next you call from C/C++:<br>
<a href=""https://stackoverflow.com/questions/5198105/calling-a-java-method-from-c-in-android"">Calling a java method from c++ in Android</a>. The
Snippet that should help you is:<br></p>

<pre><code>#include &lt;string.h&gt;
#include &lt;jni.h&gt;
//other imports

jstring get_package_MainActivity_getJniString( JNIEnv* env, jobject obj){

    jstring jstr = (*env)-&gt;NewStringUTF(env, ""MainActivity class"");
    jclass clazz = (*env)-&gt;FindClass(env, ""com/org/android/ui/activities/MainActivity"");
    jmethodID mCurrentActivityId = (*env)-&gt;GetMethodID(env, clazz, ""getCurrentActivityName"", ""(Ljava/lang/String;)Ljava/lang/String;"");
    jobject result = (*env)-&gt;CallObjectMethod(env, obj, mCurrentActivityId, jstr);

    const char* str = (*env)-&gt;GetStringUTFChars(env,(jstring) result, NULL); // should be released but what a heck, it's a tutorial :)
    printf(""%s\n"", str);

    return (*env)-&gt;NewStringUTF(env, str);
}
</code></pre>
",900246,,-1,,2017-05-23 10:29:54,2015-09-14 19:32:51,,,,1,,,
Android,32578130,2,,32368832,2015-09-15 5:09:34,2097,,1,,"<p>You should study <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic</a> sample. There shows a way to control the flash with</p>

<pre><code>mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
                                    CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);
</code></pre>

<p>I've been studing a way to get all the frames shown in the preview texture to do some image processing, if you find a way please let me know =D.</p>
",2395325,,,,,2015-09-15 5:09:34,,,,0,,,
Android,32583658,2,,32582705,2015-09-15 10:24:57,2097,,3,,"<p>Check this link :</p>

<p><strong>Android RecyclerView Sample</strong>
Sample demonstrating the use of RecyclerView to layout elements with a LinearLayoutManager and with a GridLayoutManager. It also demonstrates how to handle touch events on elements.</p>

<p><a href=""https://github.com/googlesamples/android-RecyclerView"" rel=""nofollow"">link</a></p>
",,user5323868,,,,2015-09-15 10:24:57,,,,0,,,
Android,32603798,2,,32603661,2015-09-16 8:50:22,2098,,41,,"<p>As stated in the <a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"">AndroidTestingBlueprint</a> you can use the <code>android.testInstrumentationRunnerArguments.class</code> property:</p>

<pre><code>./gradlew app:connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.example.android.testing.blueprint.ui.espresso.EspressoTest
</code></pre>
",321354,,,,,2015-09-16 8:50:22,,,,2,,,
Android,32604420,2,,32600076,2015-09-16 9:18:10,2098,,1,,"<p>Take a look at <code>FingerprintManager</code> whic was added in API 23 (Android 6). <a href=""https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html"" rel=""nofollow"">https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html</a></p>

<p>Also there is a demo project located here: <a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow"">https://github.com/googlesamples/android-FingerprintDialog</a></p>
",2642024,,,,,2015-09-16 9:18:10,,,,0,,,
Android,32648758,2,,32648462,2015-09-18 9:38:21,2100,,1,,"<p>The are making use of the<a href=""https://developers.google.com/android/reference/com/google/android/gms/location/SettingsApi"" rel=""nofollow"">SettingsApi</a> It allows you to check if the location services are available on the device and there is a complete example provided by google on <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java"" rel=""nofollow"">github</a> that shows how to use this API. The sample code will prompt the user to enable location if it's switched off. The dialog that pops up when you fire the intent is similar to what you see in Google Maps.</p>
",267540,,,,,2015-09-18 9:38:21,,,,1,,,
Android,32659445,2,,32654087,2015-09-18 19:13:04,2101,,2,,"<p>The issue was that the camera API does not support opening the camera multiple times.  Turning on the flashlight and starting CameraSource both require separate calls to open the camera.  If you try to do both, the one that is requested last will fail.</p>

<p>The good news is that we recently open sourced the CameraSource implementation.  This new version includes an option for turning on the flashlight, which should fix this issue.  See here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java</a></p>
",5231007,,5231007,,2015-09-28 16:42:18,2015-09-28 16:42:18,,,,1,,,
Android,32661823,2,,32655324,2015-09-18 22:15:09,2101,,2,,"<p>Yes, the API doesn't include a GUI component.  However, the sample apps have example GUIs for displaying the camera preview, tracking the barcode, and drawing overlay graphics.</p>

<p>I would guess that the reason that you aren't detecting anything with the sample app is that the vision libraries weren't successfully downloaded to your device.  This will happen if the device is in a ""low storage"" state.  We recently updated the samples to check for this condition and provide feedback to the user.  For example:</p>

<pre><code>    // Check for low storage.  If there is low storage, the native library will not be
    // downloaded, so detection will not become operational.
    IntentFilter lowstorageFilter = new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);
    boolean hasLowStorage = registerReceiver(null, lowstorageFilter) != null;

    if (hasLowStorage) {
        Toast.makeText(this, R.string.low_storage_error, Toast.LENGTH_LONG).show();
        Log.w(TAG, getString(R.string.low_storage_error));
    }
</code></pre>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/photo-demo/app/src/main/java/com/google/android/gms/samples/vision/face/photo/PhotoViewerActivity.java#L91"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/photo-demo/app/src/main/java/com/google/android/gms/samples/vision/face/photo/PhotoViewerActivity.java#L91</a></p>

<p>This is something that we are working on improving.</p>
",5231007,,,,,2015-09-18 22:15:09,,,,1,,,
Android,32661898,2,,32652175,2015-09-18 22:23:01,2101,,2,,"<p>I would guess that the reason that you aren't detecting anything with the sample app is that the vision libraries weren't successfully downloaded to your device. This will happen if the device is in a ""low storage"" state. We recently updated the samples to check for this condition and provide feedback to the user. For example:</p>

<pre><code>// Check for low storage.  If there is low storage, the native library will not be
// downloaded, so detection will not become operational.
IntentFilter lowstorageFilter = new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);
boolean hasLowStorage = registerReceiver(null, lowstorageFilter) != null;

if (hasLowStorage) {
    Toast.makeText(this, R.string.low_storage_error, Toast.LENGTH_LONG).show();
    Log.w(TAG, getString(R.string.low_storage_error));
}
</code></pre>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/photo-demo/app/src/main/java/com/google/android/gms/samples/vision/face/photo/PhotoViewerActivity.java#L91"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/photo-demo/app/src/main/java/com/google/android/gms/samples/vision/face/photo/PhotoViewerActivity.java#L91</a></p>

<p>If you are encountering this, freeing up space on the device should do the trick.</p>
",5231007,,,,,2015-09-18 22:23:01,,,,0,,,
Android,32706988,2,,32706112,2015-09-22 1:29:42,2104,,1,,"<p>Google recently released a new <a href=""https://developers.google.com/vision/?hl=en"" rel=""nofollow"">Android Vision Api</a> that provides barcode functionality.</p>

<p>You can view sample code of the API here: <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow"">https://github.com/googlesamples/android-vision</a></p>
",371693,,,,,2015-09-22 1:29:42,,,,2,,,
Android,32727163,2,,32725367,2015-09-22 21:20:53,2105,,15,,"<p>Edit after clarification of the question; original answer at bottom</p>

<p>Depends on where you're doing your processing.</p>

<p>If you're using RenderScript, you can connect a Surface from a SurfaceView or a TextureView to an Allocation (with <a href=""http://developer.android.com/reference/android/renderscript/Allocation.html#setSurface(android.view.Surface)"">setSurface</a>), and then write your processed output to that Allocation and send it out with Allocation.ioSend().  The <a href=""https://github.com/googlesamples/android-HdrViewfinder"">HDR Viewfinder demo</a> uses this approach.</p>

<p>If you're doing EGL shader-based processing, you can connect a Surface to an EGLSurface with <a href=""http://developer.android.com/reference/javax/microedition/khronos/egl/EGL10.html#eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,%20javax.microedition.khronos.egl.EGLConfig,%20java.lang.Object,%20int[])"">eglCreateWindowSurface</a>, with the Surface as the native_window argument.  Then you can render your final output to that EGLSurface and when you call eglSwapBuffers, the buffer will be sent to the screen.</p>

<p>If you're doing native processing, you can use the NDK <a href=""https://developer.android.com/ndk/reference/native__window_8h.html"">ANativeWindow methods</a> to write to a Surface you pass from Java and <a href=""https://developer.android.com/ndk/reference/native__window__jni_8h.html"">convert</a> to an ANativeWindow.</p>

<p>If you're doing Java-level processing, that's really slow and you probably don't want to.  But can use the new Android M <a href=""http://developer.android.com/reference/android/media/ImageWriter.html"">ImageWriter</a> class, or upload a texture to EGL every frame. </p>

<p>Or as you say, draw to an ImageView every frame, but that'll be slow.</p>

<hr>

<p>Original answer:</p>

<p>If you are capturing JPEG images, you can simply copy the contents of the ByteBuffer from <code>Image.getPlanes()[0].getBuffer()</code> into a <code>byte[]</code>, and then use <code>BitmapFactory.decodeByteArray</code> to convert it to a Bitmap.</p>

<p>If you are capturing YUV_420_888 images, then you need to write your own conversion code from the 3-plane YCbCr 4:2:0 format to something you can display, such as a int[] of RGB values to create a Bitmap from; unfortunately there's not yet a convenient API for this.</p>

<p>If you are capturing RAW_SENSOR images (Bayer-pattern unprocessed sensor data), then you need to do a whole lot of image processing or just save a DNG.</p>
",1344825,,1344825,,2015-09-25 18:54:25,2015-09-25 18:54:25,,,,6,,,
Android,32759692,2,,22967839,2015-09-24 11:02:00,2106,,2,,"<p>I had this error:</p>

<p>"" ...\Application\build\intermediates\exploded-aar\com.google.android.gms\play-services-base\7.3.0\res\drawable-xxhdpi\common_signin_btn_icon_disabled_focus_light.9.png ERROR: Unable to open PNG file "" </p>

<p>Android studio was unable to open the common_signin_btn_icon_disabled_focus_light.9.png file.</p>

<p>To solve this I moved the project folder directory up a level or two to reduce path length. Everything worked perfectly after that.</p>

<p>I used ""D:\the_project_folder"". Worked for me. No more compile errors.</p>

<p>thanks to this link:</p>

<p><a href=""https://github.com/googlesamples/android-XYZTouristAttractions/issues/2"" rel=""nofollow"">https://github.com/googlesamples/android-XYZTouristAttractions/issues/2</a></p>

<p>Cheers!</p>
",5326518,,,,,2015-09-24 11:02:00,,,,1,,,
Android,32798532,2,,32787234,2015-09-26 15:01:14,2109,,23,,"<p>You can grant and revoke permissions using:</p>

<pre><code>adb shell pm grant com.package.myapp android.permission.&lt;PERMISSION&gt;
adb shell pm revoke com.package.myapp android.permission.&lt;PERMISSION&gt;
</code></pre>

<p>To use from Java instrumentation tests call this method from Google samples:
<a href=""https://github.com/googlesamples/android-testing/blob/ed62c450e43f859333b3113d44dd59f75971b529/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java#L94"">https://github.com/googlesamples/android-testing/blob/ed62c450e43f859333b3113d44dd59f75971b529/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java#L94</a></p>
",5250468,,5250468,,2016-08-05 14:20:18,2016-08-05 14:20:18,,,,7,,,
Android,32828161,2,,32051973,2015-09-28 16:57:35,2111,,12,,"<p>An auto focus option is now available in the official API.  See the setAutoFocusEnabled method here: </p>

<p><a href=""https://developers.google.com/android/reference/com/google/android/gms/vision/CameraSource.Builder.html#setAutoFocusEnabled(boolean)"" rel=""noreferrer"">https://developers.google.com/android/reference/com/google/android/gms/vision/CameraSource.Builder.html#setAutoFocusEnabled(boolean)</a></p>

<p>Also, we open sourced the CameraSource class, which has an auto focus method as well.  This one allows you to set a specific focus mode as opposed to the ""continuous video"" mode that the official API defaults to:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""noreferrer"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java</a></p>
",5231007,,5231007,,2015-12-04 16:01:43,2015-12-04 16:01:43,,,,3,,,
Android,32884304,2,,32882917,2015-10-01 9:40:54,2113,,1,,"<p>Ok, Turns out using a custom <code>ViewMatcher</code> will do the trick:</p>

<p>Here the matcher has to match a view which has a parent with id <code>action_bar</code> and is an ImageView.</p>

<pre><code>onView(childOf(withId(android.support.v7.appcompat.R.id.action_bar),
            withClassName(is(ImageButton.class.getName()))))
            .perform(click());
</code></pre>

<p>the method <code>childOf</code> is as follows:</p>

<pre><code>Matcher&lt;View&gt; childOf(Matcher&lt;View&gt; parentMatcher,
        Matcher&lt;View&gt; childMatcher) {
    return new TypeSafeMatcher&lt;View&gt;() {
        @Override
        public void describeTo(Description description) {
             // creation of description left as an exercise
        }

        @Override
        protected boolean matchesSafely(View view) {
            if (view.getParent() instanceof ViewGroup) {
                ViewGroup parent = (ViewGroup) view.getParent();
                return parentMatcher.matches(parent) &amp;&amp; childMatcher
                        .matches(view);
            }
            return false;
        }
    };
}
</code></pre>

<p>The method allows one to use a variety of child <code>ViewMatcher</code>, so you can use custom view matcher if in need.</p>

<h2>Refs:</h2>

<ol>
<li>espresso <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/CustomMatcherSample/app/src/androidTest/java/com/example/android/testing/espresso/CustomMatcherSample/HintMatcher.java"" rel=""nofollow"">custom-matcher sample</a></li>
</ol>
",1523910,,,,,2015-10-01 9:40:54,,,,0,,,
Android,32932868,2,,23970144,2015-10-04 11:19:43,2116,,3,,"<p>This works now in Android Studio. You can use <code>CFlags -I</code> and <code>ldFlags -L</code> when building.</p>

<p>Take a look at this <a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-thirdparty/app/build.gradle"" rel=""nofollow"">good example</a>.</p>
",1454653,,,,,2015-10-04 11:19:43,,,,1,,,
Android,32961245,2,,32736708,2015-10-06 3:31:11,2118,,1,,"<p><em>Although you have done lots of research but my answers to you are as follows:</em>
<strong>1</strong>.</p>

<blockquote>
  <p>Yes,we can but Bluetooth low energy will work similarly as of normal
  bluetooth for chat and so there will be no difference between the two
  as serial data transfer is not properly applicable now for BLE
  devices.</p>
</blockquote>

<p><strong>2</strong>.</p>

<blockquote>
  <p>Yes,it can because Ble is just the hardware ie. Bluetooth v4 while it
  supports normal bluetooth functions.Chat is possible but chat would be
  like normal bluetooth chat.They have their own set of APIs for BLE
  programming. You just need to include their API add-ons into your
  Android apps to access the BLE features but if you don""t then it acts as normal bluetooth devices.</p>
</blockquote>

<p><strong>3</strong>.</p>

<blockquote>
  <p>there is no such good resource available but still you can check out
  normal bluetooth chat by
  google:<a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow"">https://github.com/googlesamples/android-BluetoothChat</a> You can
  use this for normal bluetooth chat and then customize it as per
  bluetooth low energy libraries for android.</p>
</blockquote>

<p>Ble technology is used for ibeacon,smartwatches and others as its connectivity covers longer distance Ble Chat functionality is still a big question for the android developers as google has not provided  sufficient material for it while in iOS they have successfully used AirChat with the help of Bluetooth v4 for Ble kind of chatting.</p>
",5412225,,5412225,,2015-10-06 3:41:51,2015-10-06 3:41:51,,,,4,,,
Android,32987291,2,,32818562,2015-10-07 8:25:22,2119,,1,,"<p>Ideally, you should have had the <code>android:screenOrientation=""landscape""</code> included under the Activity, which tells me you have an outdated sample project in your hands.</p>

<p>Please make sure you are running the latest version of the Sample projects.</p>

<p>Either open the project via</p>

<blockquote>
  <p>File > New > Import Sample > type MediaRecorder</p>
</blockquote>

<p>or </p>

<p><code>git clone https://github.com/googlesamples/android-MediaRecorder.git</code></p>

<p>Just tested the sample code with Android 5.1 (API level 22) and it was working fine both on a tablet and a smartphone.</p>

<p>Please keep <code>android:theme=""@style/AppTheme""</code> under Application and don't change it, as that is not what the sample code provides. Template styles are defined under </p>

<blockquote>
  <p>res > values > template-styles.xml</p>
</blockquote>

<p>and it is defined for both tablet and smartphone.</p>
",2759296,,,,,2015-10-07 8:25:22,,,,1,,,
Android,33002408,2,,32999813,2015-10-07 21:05:52,2120,,1,,"<p>You might take a look at this thread: <a href=""https://github.com/googlesamples/android-vision/issues/23"" rel=""nofollow"">https://github.com/googlesamples/android-vision/issues/23</a></p>
",5231007,,,,,2015-10-07 21:05:52,,,,2,,,
Android,33027993,2,,27887716,2015-10-09 0:21:21,2121,,11,,"<p>You can follow the pattern in Code Sample from Google in link below.
<a href=""https://github.com/googlesamples/android-ActionBarCompat-ShareActionProvider"" rel=""noreferrer"">https://github.com/googlesamples/android-ActionBarCompat-ShareActionProvider</a></p>

<p>The easiest way is to go to your Android Studio => File, Import Sample. Then type in ""Share Action Provider"".</p>

<p><a href=""https://i.stack.imgur.com/ehqKT.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ehqKT.png"" alt=""enter image description here""></a></p>

<p>Below are the code involved in creating Share Action Menu Item with ShareActionProvider with ActionBarCompat, backwards compatible to API v7.</p>

<p>MainActivity.java</p>

<pre><code>// BEGIN_INCLUDE(get_sap)
@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu resource
    getMenuInflater().inflate(R.menu.main_menu, menu);

    // Retrieve the share menu item
    MenuItem shareItem = menu.findItem(R.id.menu_share);

    // Now get the ShareActionProvider from the item
    mShareActionProvider = (ShareActionProvider) MenuItemCompat.getActionProvider(shareItem);

    // Get the ViewPager's current item position and set its ShareIntent.
    int currentViewPagerItem = ((ViewPager) findViewById(R.id.viewpager)).getCurrentItem();
    setShareIntent(currentViewPagerItem);

    return super.onCreateOptionsMenu(menu);
}
// END_INCLUDE(get_sap

private void setShareIntent(int position) {
    // BEGIN_INCLUDE(update_sap)
    if (mShareActionProvider != null) {
        // Get the currently selected item, and retrieve it's share intent
        ContentItem item = mItems.get(position);
        Intent shareIntent = item.getShareIntent(MainActivity.this);

        // Now update the ShareActionProvider with the new share intent
        mShareActionProvider.setShareIntent(shareIntent);
    }
    // END_INCLUDE(update_sap)
}
</code></pre>

<p>main_menu.xml</p>

<pre><code>&lt;menu xmlns:android=""http://schemas.android.com/apk/res/android""
xmlns:support=""http://schemas.android.com/apk/res-auto""&gt;

&lt;!--
  To use ShareActionProvider provided by ActionBarCompat, we reference the class by set the
  support:actionProviderClass attribute with the full class name of ShareActionProvider.
--&gt;
&lt;item
    android:id=""@+id/menu_share""
    android:title=""@string/menu_share""
    support:actionProviderClass=""android.support.v7.widget.ShareActionProvider""
    support:showAsAction=""always"" /&gt;
</code></pre>

<p></p>
",267693,,,,,2015-10-09 0:21:21,,,,2,,,
Android,33054982,2,,32412197,2015-10-10 14:19:26,2123,,12,,"<p><em>You have probably sorted this out already, but in case someone stumbles upon this question in the future, here's how I solved it:</em></p>

<p>As @pm0733464 points out, the default image format coming out of <code>android.hardware.Camera</code> is NV21, and that is the one used by <a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow noreferrer"" title=""CameraSource"">CameraSource</a>.</p>

<p><a href=""https://stackoverflow.com/questions/3338235/bitmapfactory-decodebytearray-is-returning-null"">This</a> stackoverflow answer provides the answer:</p>

<pre><code>YuvImage yuvimage=new YuvImage(byteBuffer, ImageFormat.NV21, w, h, null);
ByteArrayOutputStream baos = new ByteArrayOutputStream();
yuvimage.compressToJpeg(new Rect(0, 0, w, h), 100, baos); // Where 100 is the quality of the generated jpeg
byte[] jpegArray = baos.toByteArray();
Bitmap bitmap = BitmapFactory.decodeByteArray(jpegArray, 0, jpegArray.length);
</code></pre>

<p>Although <code>frame.getGrayscaleImageData()</code> suggests <code>bitmap</code> will be a grayscale version of the original image, this is not the case, in my experience. In fact, the bitmap is identical to the one supplied to the <code>SurfaceHolder</code> natively.</p>
",3614804,,-1,,2017-05-23 12:34:39,2015-10-10 14:19:26,,,,1,,,
Android,33065170,2,,32879356,2015-10-11 12:52:07,2124,,2,,"<p>I had the same problem. The solution from @Mindshifter worked for me, but you can have a look here for more comments (and I've posted a similar solution there too):</p>

<p><a href=""https://github.com/googlesamples/android-vision/issues/23"" rel=""nofollow"">https://github.com/googlesamples/android-vision/issues/23</a></p>
",3598006,,,,,2015-10-11 12:52:07,,,,0,,,
Android,33078679,2,,33078003,2015-10-12 10:18:05,2124,,28,,"<p>Yes permissions have changed on Android M. Permissions are now requested at runtime as opposed to install time previous to Android M.</p>

<p>You can check out the docs <a href=""https://developer.android.com/training/permissions/index.html"" rel=""noreferrer"">here</a></p>

<blockquote>
  <p>This release introduces a new permissions model, where users can now directly manage app permissions at runtime. This model gives users improved visibility and control over permissions, while streamlining the installation and auto-update processes for app developers. Users can grant or revoke permissions individually for installed apps.</p>
  
  <p>On your apps that target Android 6.0 (API level 23) or higher, make sure to check for and request permissions at runtime. To determine if your app has been granted a permission, call the new checkSelfPermission() method. To request a permission, call the new requestPermissions() method. Even if your app is not targeting Android 6.0 (API level 23), you should test your app under the new permissions model.</p>
  
  <p>For details on supporting the new permissions model in your app, see Working with System Permissionss. For tips on how to assess the impact on your app, see Permissions Best Practices.</p>
</blockquote>

<p>To check for permissions you have to check like this, taken from <a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""noreferrer"">github</a></p>

<pre><code>public class MainActivity extends SampleActivityBase
        implements ActivityCompat.OnRequestPermissionsResultCallback {

    public static final String TAG = ""MainActivity"";

    /**
     * Id to identify a camera permission request.
     */
    private static final int REQUEST_CAMERA = 0;

    // Whether the Log Fragment is currently shown.
    private boolean mLogShown;

    private View mLayout;

    /**
     * Called when the 'show camera' button is clicked.
     * Callback is defined in resource layout definition.
     */
    public void showCamera(View view) {
        // Check if the Camera permission is already available.
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
                != PackageManager.PERMISSION_GRANTED) {
            // Camera permission has not been granted.

            requestCameraPermission();

        } else {

            // Camera permissions is already available, show the camera preview.
            showCameraPreview();
        }
    }

    /**
     * Requests the Camera permission.
     * If the permission has been denied previously, a SnackBar will prompt the user to grant the
     * permission, otherwise it is requested directly.
     */
    private void requestCameraPermission() {
        if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                Manifest.permission.CAMERA)) {
            // Provide an additional rationale to the user if the permission was not granted
            // and the user would benefit from additional context for the use of the permission.
            // For example if the user has previously denied the permission.
            Snackbar.make(mLayout, R.string.permission_camera_rationale,
                    Snackbar.LENGTH_INDEFINITE)
                    .setAction(R.string.ok, new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            ActivityCompat.requestPermissions(MainActivity.this,
                                    new String[]{Manifest.permission.CAMERA},
                                    REQUEST_CAMERA);
                        }
                    })
                    .show();
        } else {

            // Camera permission has not been granted yet. Request it directly.
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CAMERA},
                    REQUEST_CAMERA);
        }
    }

    /**
     * Display the {@link CameraPreviewFragment} in the content area if the required Camera
     * permission has been granted.
     */
    private void showCameraPreview() {
        getSupportFragmentManager().beginTransaction()
                .replace(R.id.sample_content_fragment, CameraPreviewFragment.newInstance())
                .addToBackStack(""contacts"")
                .commit();
    }

    /**
     * Callback received when a permissions request has been completed.
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {

        if (requestCode == REQUEST_CAMERA) {

            // Received permission result for camera permission.est."");
            // Check if the only required permission has been granted
            if (grantResults.length == 1 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Camera permission has been granted, preview can be displayed
                Snackbar.make(mLayout, R.string.permision_available_camera,
                        Snackbar.LENGTH_SHORT).show();
            } else {
                Snackbar.make(mLayout, R.string.permissions_not_granted,
                        Snackbar.LENGTH_SHORT).show();

            }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mLayout = findViewById(R.id.sample_main_layout);

        if (savedInstanceState == null) {
            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
            RuntimePermissionsFragment fragment = new RuntimePermissionsFragment();
            transaction.replace(R.id.sample_content_fragment, fragment);
            transaction.commit();
        }
    }
}
</code></pre>
",2819510,,1248858,,2016-06-13 23:56:41,2016-06-13 23:56:41,,,,4,,,
Android,33100153,2,,33099586,2015-10-13 10:20:52,2125,,1,,"<p>Maybe you can take a look at the googlesamples repositories at GitHub.
There is one for android-nearby and iOS-nearby. </p>

<p><a href=""https://github.com/googlesamples?utf8="" rel=""nofollow"">https://github.com/googlesamples?utf8=</a>✓&amp;query=nearby
<a href=""https://github.com/googlesamples/android-nearby/issues"" rel=""nofollow"">https://github.com/googlesamples/android-nearby/issues</a></p>
",2249138,,,,,2015-10-13 10:20:52,,,,0,,,
Android,33114486,2,,33112538,2015-10-13 23:54:38,2126,,1,,"<p>After checking Google's sample application, the icon for starring appears to be pure white: <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/res/drawable-hdpi/ic_star_off.png"" rel=""nofollow"">https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/res/drawable-hdpi/ic_star_off.png</a>.  I have verified that if you make your icon pure white it will automatically be changed to black for use in Auto.  My best guess is that because Google wrote the stuff for Wear first they assumed that everyone's icons would be white already.</p>
",992439,,,,,2015-10-13 23:54:38,,,,0,,,
Android,33184025,2,,33183706,2015-10-17 7:25:31,2129,,2,,"<p>This is a very good tutorial...
<a href=""http://code.tutsplus.com/tutorials/create-a-music-player-on-android-project-setup--mobile-22764"" rel=""nofollow"">http://code.tutsplus.com/tutorials/create-a-music-player-on-android-project-setup--mobile-22764</a></p>

<p>A search an Google and I find this:
<a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""nofollow"">https://github.com/googlesamples/android-UniversalMusicPlayer</a>
That's for download and is very good. </p>
",5364144,,5364144,,2015-10-17 7:52:06,2015-10-17 7:52:06,,,,4,,,
Android,33231923,2,,33110132,2015-10-20 8:42:13,2132,,1,,"<p>Just remove the <code>androidTestCompile 'com.android.support.test:testing-support-lib:0.1'</code> from your <code>build.gradle</code>. Take a look on example <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/BasicSample/app/build.gradle"" rel=""nofollow"">here</a>.</p>
",2980933,,,,,2015-10-20 8:42:13,,,,0,,,
Android,33239221,2,,33236972,2015-10-20 14:20:06,2133,,3,,"<p>Ok, so, first of all, you need to change all of your dependencies of google play services to 8.1.0, also, build.gradle to the newest version, targeted sdk 23, comiled version 23, etc. So, basicaly, check your gradle. After that, you need to change your mGoogleApiClient to : </p>

<pre><code> mGoogleApiClient = new GoogleApiClient.Builder(getActivity()).addConnectionCallbacks(this)
            .addOnConnectionFailedListener(this)
            .addApi(Plus.API)
            .addScope(new Scope(Scopes.PROFILE))
            .addScope(new Scope(Scopes.EMAIL))
            .addScope(new Scope(Scopes.PLUS_LOGIN))
            .addScope(new Scope(Scopes.PLUS_ME))
            .build();
    mGoogleApiClient.connect();
</code></pre>

<p>And finally, you need to include permissions you need for sdk>= 23. To do that, create</p>

<pre><code> private static String ACCOUNT_PERMISSIONS[] = new String[]{
        Manifest.permission.GET_ACCOUNTS
};
</code></pre>

<p>Here is a good tutorial on how to get permissions for sdk >= 23:
<a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""nofollow"">https://github.com/googlesamples/android-RuntimePermissions</a></p>
",4458300,,,,,2015-10-20 14:20:06,,,,0,,,
Android,33254073,2,,33251373,2015-10-21 8:09:50,2133,,116,,"<p>This dialog is created by <a href=""https://developer.android.com/reference/com/google/android/gms/location/LocationSettingsRequest.Builder.html"" rel=""noreferrer"">LocationSettingsRequest.Builder</a> available in the Google Play Services.</p>

<p>You need to add a dependency to your app <code>build.gradle</code>:</p>

<pre><code>compile 'com.google.android.gms:play-services-location:10.0.1'
</code></pre>

<p>Then you can use this minimal example:</p>

<pre><code>private void displayLocationSettingsRequest(Context context) {
    GoogleApiClient googleApiClient = new GoogleApiClient.Builder(context)
            .addApi(LocationServices.API).build();
    googleApiClient.connect();

    LocationRequest locationRequest = LocationRequest.create();
    locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
    locationRequest.setInterval(10000);
    locationRequest.setFastestInterval(10000 / 2);

    LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);
    builder.setAlwaysShow(true);

    PendingResult&lt;LocationSettingsResult&gt; result = LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build());
    result.setResultCallback(new ResultCallback&lt;LocationSettingsResult&gt;() {
        @Override
        public void onResult(LocationSettingsResult result) {
            final Status status = result.getStatus();
            switch (status.getStatusCode()) {
                case LocationSettingsStatusCodes.SUCCESS:
                    Log.i(TAG, ""All location settings are satisfied."");
                    break;
                case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
                    Log.i(TAG, ""Location settings are not satisfied. Show the user a dialog to upgrade location settings "");

                    try {
                        // Show the dialog by calling startResolutionForResult(), and check the result
                        // in onActivityResult().
                        status.startResolutionForResult(MainActivity.this, REQUEST_CHECK_SETTINGS);
                    } catch (IntentSender.SendIntentException e) {
                        Log.i(TAG, ""PendingIntent unable to execute request."");
                    }
                    break;
                case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
                    Log.i(TAG, ""Location settings are inadequate, and cannot be fixed here. Dialog not created."");
                    break;
            }
        }
    });
}
</code></pre>

<p>You can find the complete example <a href=""https://github.com/googlesamples/android-play-location/tree/8163f9f91bbb1ca6ed6470f5458b7c6c7e6f7ef7/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java"" rel=""noreferrer"">here</a>.</p>
",2837959,,2837959,,2017-06-16 10:00:00,2017-06-16 10:00:00,,,,12,,,
Android,33273178,2,,32600204,2015-10-22 3:57:38,2134,,52,,"<p>I forked <a href=""https://github.com/googlesamples/android-topeka/blob/master/app/build.gradle"" rel=""nofollow noreferrer"">android-topeka google sample</a> and updated appcompat version to 23.1.0, same message:</p>

<blockquote>
  <p>Warning:Conflict with dependency
  'com.android.support:support-annotations'. Resolved versions for app
  (23.1.0) and test app (23.0.1) differ.</p>
</blockquote>

<p>I added:</p>

<pre><code>androidTestCompile 'com.android.support:support-annotations:23.1.0'
</code></pre>

<p>Now both resolve to 23.1.0, the warning is gone, and the app and tests still work.</p>

<p>I'm not sure that it's the better solution, so I'm searching for another but found your question. </p>

<p><strong>Update:</strong> Read <a href=""https://stackoverflow.com/a/28641446/1009132"">this good explanation by PaulR</a>.</p>

<p><strong>Update2:</strong> Confirmed, <a href=""https://github.com/googlesamples/android-testing/blob/ba14ef9e925fa17621bf86abe5336dcb9d53e466/runner/AndroidJunitRunnerSample/app/build.gradle#L36"" rel=""nofollow noreferrer"">android-testing google sample</a> does it.</p>

<pre><code>// Testing-only dependencies
// Force usage of support annotations in the test app, since it is internally used by the runner module.
androidTestCompile 'com.android.support:support-annotations:23.0.1'
</code></pre>

<p><strong>Update3</strong>: <a href=""https://stackoverflow.com/a/28999596/1009132"">Another good response by CommonsWare</a>.</p>

<p>Check your specific versions/conflicts/resolutions using:</p>

<pre><code>./gradlew -q yourmodule:dependencies
</code></pre>

<p><a href=""https://i.stack.imgur.com/hgqyV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hgqyV.png"" alt=""enter image description here""></a></p>

<p>Appcompat is 22.1.1 in your case but you are forcing 22.1.0.</p>

<p><strong>Update4:</strong>
Dependency conflict explained at <a href=""https://youtu.be/OOEDKf06WqA?t=5m38s"" rel=""nofollow noreferrer"">The Android Build System (Android Dev Summit 2015)</a>.</p>

<p><a href=""https://i.stack.imgur.com/G8MQZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/G8MQZ.png"" alt=""enter image description here""></a></p>

<p><a href=""http://g.co/androidstudio/app-test-app-conflict"" rel=""nofollow noreferrer"">Resolving conflicts between main and test APK</a></p>

<blockquote>
  <p>When instrumentation tests are run, both the main APK and test APK
  share the same classpath. Gradle build will fail if the main APK and
  the test APK use the same library (e.g. Guava) but in different
  versions. If gradle didn't catch that, your app could behave
  differently during tests and during normal run (including crashing in
  one of the cases).</p>
  
  <p>To make the build succeed, just make sure both APKs use the same
  version. <strong>If the error is about an indirect dependency</strong> (a library you
  didn't mention in your build.gradle), <strong>just add a dependency for the
  newer version to the configuration</strong> (""compile"" or ""androidTestCompile"")
  <strong>that needs it.</strong> You can also use Gradle's resolution strategy
  mechanism. You can inspect the dependency tree by running ./gradlew
  :app:dependencies and ./gradlew :app:androidDependencies.</p>
</blockquote>
",1009132,,-1,,2017-05-23 12:34:10,2015-11-28 19:24:40,,,,0,,,
Android,33339732,2,,33339287,2015-10-26 6:32:20,2138,,1,,"<p><strong>Update</strong>: I think the problem is that you need another repositories{mavenCentral()} section outside the buildscript section. I always use a root script for this and I was not sure. All your script looks weird, read <a href=""http://tools.android.com/tech-docs/new-build-system/user-guide"" rel=""nofollow"">this</a>:</p>

<blockquote>
  <p>buildscript { ... } configures the code driving the build. In this
  case, this declares that it uses the Maven Central repository, and
  that there is a classpath dependency on a Maven artifact. This
  artifact is the library that contains the Android plugin for Gradle in
  version 0.11.1 Note: This only affects the code running the build, not
  the project. <strong>The project itself needs to declare its own repositories
  and dependencies.</strong> This will be covered later.</p>
</blockquote>

<p><strong>Previous response: other possible issues:</strong></p>

<p>Replace </p>

<pre><code>compileSdkVersion ""android-22""
</code></pre>

<p>by</p>

<pre><code>compileSdkVersion 22
</code></pre>

<p>And you need to install and use a higher build tools version 22.0.1+</p>

<blockquote>
  <p>Note: Always use a build tools version whose major revision number is
  <strong>higher or equal</strong> to that of your compilation target and target SDK.</p>
</blockquote>

<p>And  move the dependencies block outside the android block like <a href=""http://developer.android.com/tools/building/configuring-gradle.html"" rel=""nofollow"">here</a>.</p>

<blockquote>
  <p>The dependencies element is <strong>outside and after</strong> the android element.</p>
</blockquote>

<p>Further information about espresso <a href=""https://google.github.io/android-testing-support-library/docs/espresso/setup/index.html"" rel=""nofollow"">here</a>.</p>

<p>I don't know the exact problem sorry, try a <a href=""https://github.com/googlesamples/android-testing"" rel=""nofollow"">working sample</a> first, or wait a better response.</p>
",1009132,,1009132,,2015-10-26 9:01:24,2015-10-26 9:01:24,,,,4,,,
Android,33359656,2,,6186866,2015-10-27 3:50:08,2139,,55,,"<p>You can disable asset compression for certain extensions like so:</p>

<pre><code>android {
    aaptOptions {
        noCompress ""pdf""
    }
}
</code></pre>

<p><a href=""https://github.com/googlesamples/android-PdfRendererBasic"">Source</a></p>
",577062,,,,,2015-10-27 3:50:08,,,,3,,,
Android,33393371,2,,2925054,2015-10-28 14:12:04,2141,,4,,"<p>There is not an implemented MVC architecture, but a set of libraries / examples exists to implement an MVP (model–view–presenter) architecture.</p>

<p>Please, check these links:</p>

<ul>
<li><p><a href=""https://github.com/sockeqwe/mosby"" rel=""nofollow noreferrer"">https://github.com/sockeqwe/mosby</a></p></li>
<li><p><a href=""https://github.com/android10/Android-CleanArchitecture"" rel=""nofollow noreferrer"">https://github.com/android10/Android-CleanArchitecture</a></p></li>
<li><p><a href=""https://github.com/antoniolg/androidmvp"" rel=""nofollow noreferrer"">https://github.com/antoniolg/androidmvp</a></p></li>
</ul>

<p>Google added an example of an Android architecture MVP:</p>

<ul>
<li><a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture</a></li>
</ul>
",767440,,63550,,2017-04-22 0:42:25,2017-04-22 0:42:25,,,,0,,,
Android,33396503,2,,30910254,2015-10-28 16:30:29,2141,,1,,"<p>I believe that's because JUnit4-style test classes are not supposed to extend <code>ActivityInstrumentationTestCase2&lt;BaseActivity&gt;</code>. Simply omit that part and do not extend any class, see e.g. <a href=""https://github.com/googlesamples/android-testing/blob/master/runner/AndroidJunitRunnerSample/app/src/androidTest/java/com/example/android/testing/androidjunitrunnersample/CalculatorTest.java"" rel=""nofollow"">this example</a>.</p>
",1127485,,,,,2015-10-28 16:30:29,,,,0,,,
Android,33411810,2,,31853912,2015-10-29 10:32:46,2141,,2,,"<p>From the application's manifest I can see that you try create a Profile Owner Application, no a Device Owner Application. It is because Device Owner Application's receiver should contain the following intent filter:</p>

<pre><code>&lt;intent-filter&gt;
    &lt;action android:name=""android.app.action.PROFILE_PROVISIONING_COMPLETE""/&gt;
&lt;/intent-filter&gt;
</code></pre>

<p>Not like in yours manifest:</p>

<pre><code>&lt;intent-filter&gt;
    &lt;action android:name=""android.app.action.DEVICE_ADMIN_ENABLED""/&gt;
&lt;/intent-filter&gt;
</code></pre>

<p>Your intent filter is appropriate for Profile Owner App, no a Device Owner App.
Please see <a href=""https://github.com/googlesamples/android-DeviceOwner"" rel=""nofollow"">Android Device Owner Sample</a> source code.</p>

<p>Because <a href=""http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskPackages%28android.content.ComponentName,%20java.lang.String[]%29"" rel=""nofollow"">setLockTaskPackages</a> method is allowed only for Device Owner Application, no a Profile Owner Application, you get an exception.</p>

<p>How do you check against if your application is a Device Owner Application, you should use <a href=""http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceOwnerApp%28java.lang.String%29"" rel=""nofollow"">isDeviceOwnerApp</a> method.</p>
",3204044,,3204044,,2015-10-29 10:49:59,2015-10-29 10:49:59,,,,0,,,
Android,33464380,2,,33214469,2015-11-01 16:25:00,2145,,3,,"<p>I created an issue in the github project for the sample provided by google (link to the issue <a href=""https://github.com/googlesamples/android-ConfirmCredential/issues/4"" rel=""nofollow"">here</a>). The response I got is that I must use the IV that was generated when the value was encrypted. (same as in the solution provided by @Qianqian)</p>

<pre><code>cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(encryptCipher.getIV()));
byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
</code></pre>

<p>I created a sample application that shows how to do this. It is available on github, <a href=""https://github.com/Zlate87/android-fingerprint-example"" rel=""nofollow"">here</a>.</p>

<p>Hope this is useful to someone.</p>
",859225,,,,,2015-11-01 16:25:00,,,,1,,,
Android,33494428,2,,33494270,2015-11-03 8:27:52,2146,,1,,"<p>Here is a good example of what you are looking for.
<a href=""https://github.com/googlesamples/android-ConfirmCredential"" rel=""nofollow"">https://github.com/googlesamples/android-ConfirmCredential</a></p>

<pre><code>private void showAuthenticationScreen() {
    // Create the Confirm Credentials screen. You can customize the title and description. Or
    // we will provide a generic one for you if you leave it null
    Intent intent = mKeyguardManager.createConfirmDeviceCredentialIntent(null, null);
    if (intent != null) {
        startActivityForResult(intent, REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS);
    }
}
</code></pre>

<p>This is the small code for the opening intent for result and getting authentication. But I would suggest try downloading code and have a look at it.</p>

<pre><code>@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    if (requestCode == REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS) {
        // Challenge completed, proceed with using cipher
        if (resultCode == RESULT_OK) {
            if (tryEncrypt()) {
                showPurchaseConfirmation();
            }
        } else {
            // The user canceled or didnâ€™t complete the lock screen
            // operation. Go to error/cancellation flow.
        }
    }
}
</code></pre>
",5092293,,,,,2015-11-03 8:27:52,,,,0,,,
Android,33505644,2,,30919833,2015-11-03 17:36:52,2147,,9,,"<p>Per some <a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/photo-demo/app/src/main/java/com/google/android/gms/samples/vision/face/photo/PhotoViewerActivity.java#L91"">related sample code from google</a> you can take this route:</p>

<pre><code>IntentFilter lowstorageFilter = new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);
boolean hasLowStorage = registerReceiver(null, lowstorageFilter) != null;
</code></pre>

<p>In other words, there is a <code>DeviceStorageMonitorService</code> service that runs at the OS level and detects a low storage situation. From there, it sends a sticky broadcast that any activity or service can check, later. In this example, they registered a null receiver as a way to just test if the sticky broadcast has been sent.</p>
",178433,,,,,2015-11-03 17:36:52,,,,2,,,
Android,33617426,2,,5498051,2015-11-09 20:13:56,2153,,2,,"<p>There is now an google API for that call <a href=""https://developers.google.com/vision/?hl=en"" rel=""nofollow"">Mobile vision</a>.</p>

<p>Code sample:
<a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/barcode-reader"" rel=""nofollow"">https://github.com/googlesamples/android-vision/tree/master/visionSamples/barcode-reader</a></p>
",1245894,,,,,2015-11-09 20:13:56,,,,0,,,
Android,33673004,2,,32699698,2015-11-12 13:51:40,2156,,6,,"<p>Yes, Usage Stats API is the answer. 
Struggled to figure it out initially, but I have finally managed to do so.</p>

<p>The permission required is :</p>

<pre><code>&lt;uses-permission
android:name=""android.permission.PACKAGE_USAGE_STATS""
tools:ignore=""ProtectedPermissions"" /&gt;
</code></pre>

<p>Code to get app usage:</p>

<pre><code> final UsageStatsManager usageStatsManager = (UsageStatsManager) getSystemService(Context.USAGE_STATS_SERVICE);// Context.USAGE_STATS_SERVICE);
            Calendar beginCal = Calendar.getInstance();
            beginCal.set(Calendar.DAY_OF_MONTH, 11);
            beginCal.set(Calendar.MONTH, 10);
            beginCal.set(Calendar.YEAR, 2015);

            Calendar endCal = Calendar.getInstance();
            endCal.set(Calendar.DAY_OF_MONTH, 12);
            endCal.set(Calendar.MONTH, 10);
            endCal.set(Calendar.YEAR, 2015);

final List&lt;UsageStats&gt; queryUsageStats = usageStatsManager.queryUsageStats(UsageStatsManager.INTERVAL_DAILY, beginCal.getTimeInMillis(), endCal.getTimeInMillis());
System.out.println(""results for "" + beginCal.getTime().toGMTString() + "" - "" + endCal.getTime().toGMTString());
for (UsageStats app : queryUsageStats) {
    System.out.println(app.getPackageName() + "" | "" + (float) (app.getTotalTimeInForeground() / 1000));
}
</code></pre>

<p>Open permissions using :</p>

<pre><code>Intent intent = new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS);
startActivity(intent);
</code></pre>

<p>This question helped figure it all out.
Better documentation on the Android website would have helped greatly. </p>

<p>Here are a couple of links that helped me:</p>

<p><a href=""https://github.com/googlesamples/android-AppUsageStatistics"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-AppUsageStatistics</a></p>

<p><a href=""https://stackoverflow.com/questions/26431795/how-to-use-usagestatsmanager"">How to use UsageStatsManager?</a></p>
",4169171,,-1,,2017-05-23 12:31:52,2015-11-12 13:51:40,,,,1,,,
Android,33779582,2,,33779062,2015-11-18 12:03:44,2161,,2,,"<p>We can use <a href=""http://developer.android.com/reference/android/hardware/camera2/CameraManager.html"" rel=""nofollow""><code>CameraManager</code></a> to iterate all the cameras that are available in the system, each with a designated cameraId. Using the cameraId, we can get the properties of the specified camera device. Those properties are represented by class CameraCharacteristics. Things like ""is it front or back camera"", ""output resolutions supported"" can be queried there.</p>

<p>You can get official sample application <a href=""http://developer.android.com/samples/Camera2Basic/index.html"" rel=""nofollow"">here</a></p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow"">This</a> example found in Google Git repo will demo for you checking the permission before launching camera in new Marshmallow using <a href=""http://developer.android.com/reference/android/hardware/camera2/package-summary.html"" rel=""nofollow""><code>Camera2 API</code></a> </p>

<p>Give a look at this <a href=""http://pierrchen.blogspot.com.au/2015/01/android-camera2-api-explained.html"" rel=""nofollow"">article</a> for more about it.</p>
",4694013,,4694013,,2015-11-18 12:16:41,2015-11-18 12:16:41,,,,0,,,
Android,33829124,2,,33826656,2015-11-20 14:27:57,2164,,1,,"<p>There are some open issues with Barcode detection</p>

<ol>
<li><a href=""https://github.com/googlesamples/android-vision/issues/8"" rel=""nofollow noreferrer"">No barcode detected #8</a> 
This issue has a solution here <a href=""https://stackoverflow.com/a/32029162/2691974"">https://stackoverflow.com/a/32029162/2691974</a></li>
<li><a href=""https://github.com/googlesamples/android-vision/issues/31"" rel=""nofollow noreferrer"">No Barcode detection #31</a>
This is still a open issue in github</li>
<li>There are other issues, some of them are due to focus problems, and some formats are not recognised properly.</li>
</ol>
",2691974,,-1,,2017-05-23 12:18:25,2015-11-20 14:27:57,,,,0,,,
Android,33913141,2,,33912631,2015-11-25 9:45:15,2168,,1,,"<p>The test/ folder will contain unit testing code that runs on your system's JVM. This is the same as plain java unit testing, so any classes that don't touch the Android framework would work great here.</p>

<p>The androidTest/ folder will contain instrumentation tests instead - these require a device or emulator to run. Things you'd test with it are Activities, Services, Providers, etc.</p>

<p>For examples on both, you can refer to the documentation:</p>

<ul>
<li><a href=""https://github.com/googlesamples/android-testing"" rel=""nofollow"">https://github.com/googlesamples/android-testing</a></li>
<li><a href=""https://google.github.io/android-testing-support-library/samples/index.html"" rel=""nofollow"">https://google.github.io/android-testing-support-library/samples/index.html</a></li>
</ul>
",643516,,,,,2015-11-25 9:45:15,,,,0,,,
Android,33936515,2,,31943963,2015-11-26 10:41:51,2169,,1,,"<p>As fadden said, Maybe there is a race condition that causes ""setPreviewTexture failed"". Finnaly I find a solution from google camera2 sample code here : <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java</a>.  It uses ""Semaphore"" to solve the problem. </p>
",5168616,,,,,2015-11-26 10:41:51,,,,0,,,
Android,33941782,2,,31543365,2015-11-26 15:06:02,2170,,4,,"<p>Since the android gradle plugin 1.3 it is possible to create separate test modules. Each of those test modules can have its own testInstrumentationRunner.</p>

<p>For a detailed example see the <a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""nofollow"">AndroidTestingBlueprint</a> example project on github.</p>

<p>The solution from @johan-stuyts that got bounty works fine (or at least it did with the android gradle plugin 1.2). But it uses private APIs and creating a separate module is easier and future proof.</p>
",821894,,,,,2015-11-26 15:06:02,,,,2,,,
Android,33992352,2,,33991074,2015-11-30 6:05:10,2173,,2,,"<p>You can read the tutorial <a href=""http://developer.android.com/training/wearables/data-layer/messages.html"" rel=""nofollow"">here</a> for a good introduction and steps that you need to follow to set this up; first, your phone needs to advertise a certain capability that it has (say, it can transcribe voice messages) in an xml file. Then all other nodes on the wear network can query the framework for the nodes(s) that provide that capability and finally, each can send a message to those nodes. A good number of our samples on GitHub have been updated to use CapabilityApi (e.g. <a href=""https://github.com/googlesamples/android-DataLayer"" rel=""nofollow"">android-DataLayer</a> sample) so you can look at them and see how things are set up. Finally, you can use <a href=""https://github.com/googlesamples/android-WearCompanionLibrary"" rel=""nofollow"">WearCompanionLibrary</a> that provides that functionality for you if you want or willing to use a library.</p>
",2765813,,,,,2015-11-30 6:05:10,,,,7,,,
Android,33993778,2,,33993577,2015-11-30 7:52:56,2173,,1,,"<p>You can check this source:
<a href=""https://github.com/googlesamples/android-Camera2Raw"" rel=""nofollow"">Camera2Raw</a></p>
",1082692,,,,,2015-11-30 7:52:56,,,,1,,,
Android,33998245,2,,33998202,2015-11-30 12:04:23,2173,,1,,"<p>Google provides the <a href=""https://developers.google.com/vision/"" rel=""nofollow"">Mobile Vision API</a> that helps with facial processing. You can read more about the facial processing features <a href=""https://developers.google.com/vision/face-detection-concepts"" rel=""nofollow"">here</a>.</p>

<p>If you want a sample application using that API you can look <a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/FaceTracker"" rel=""nofollow"">here</a>.</p>
",3238659,,,,,2015-11-30 12:04:23,,,,0,,,
Android,34023082,2,,33800924,2015-12-01 14:43:00,2175,,2,,"<p>Try the other way around. Do not use espresso-core but just espresso-web. Example:  </p>

<p><a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/WebBasicSample/app/build.gradle"" rel=""nofollow"">Espresso Official Test Kit Blog Example</a></p>
",2953225,,,,,2015-12-01 14:43:00,,,,2,,,
Android,34069687,2,,28165753,2015-12-03 15:22:26,2177,,1,,"<p>This is now possible using <code>com.android.test</code> plugin. Works fine for Java and resources stuff.</p>

<p>An example by Google can be found <a href=""https://github.com/googlesamples/android-testing-templates/blob/master/AndroidTestingBlueprint/module-flavor1-androidTest-only/build.gradle"" rel=""nofollow"">here</a>.</p>

<p>Basically you create a separate module for testing and define which module and flavor should be tested. I've just checked it and it has some issues with working with the IDE, but runs fine with gradle command line.</p>
",1756721,,,,,2015-12-03 15:22:26,,,,0,,,
Android,34112071,2,,34111186,2015-12-05 23:14:50,2179,,1,,"<p>Once you detect the event you are interested in on the wear side, you need to send a message to your phone app (using <a href=""https://developers.google.com/android/reference/com/google/android/gms/wearable/MessageApi"" rel=""nofollow"">MessageApi</a>) and then you need to have an implementation of <a href=""https://developers.google.com/android/reference/com/google/android/gms/wearable/WearableListenerService?hl=en"" rel=""nofollow"">WearableListenerService</a> on your phone app that can capture that message and trigger whatever you are interested in.</p>

<p>To send a message to your phone, you should use the <a href=""http://developer.android.com/training/wearables/data-layer/messages.html"" rel=""nofollow"">CapabilityApi</a>; basically your phone app should declare that it provides, say, ""alarm_capability"" (or whatever you want to call it) and then your wear, upon detecting the appropriate event, can ask the framework for the connected nodes that provide ""alarm_capability"". Framework will return the node corresponding to your phone and then you can simply use the <a href=""https://developers.google.com/android/reference/com/google/android/gms/wearable/MessageApi"" rel=""nofollow"">MessageApi</a> to send a message to that node.</p>

<p>All of this is pretty straightforward to do and there are a number of <a href=""https://github.com/googlesamples"" rel=""nofollow"">samples</a> on our GitHub repo that accomplish similar things (for example, <a href=""https://github.com/googlesamples/android-FindMyPhone"" rel=""nofollow"">FindMyPhone</a> is pretty close to what you want). You can look a those samples and also read bout the APIs and give it a try. An alternate approach is to use a library that simplifies these steps, for example you can use <a href=""https://github.com/googlesamples/android-WearCompanionLibrary"" rel=""nofollow"">WearCompanionLibrary</a>.</p>
",2765813,,,,,2015-12-05 23:14:50,,,,1,,,
Android,34123146,2,,33537889,2015-12-06 21:42:44,2180,,12,,"<p>For starters, I'm using Android Studio 1.5 / gradle 2.8</p>

<p><strong>I fixed this by changing my <code>build.gradle</code> to</strong> </p>

<pre><code> buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                debuggable = true
            }

        }
        debug {
            debuggable = true
            jniDebuggable = true
        }

    }
</code></pre>

<p>So, basically, I just added the lines</p>

<pre><code>ndk {
        debuggable = true
}
</code></pre>

<p>To release, and </p>

<pre><code>debug {
         debuggable = true
         jniDebuggable = true
}
</code></pre>

<p>To the enclosing <code>buildTypes</code></p>

<p><strong>But this syntax varies, based on your gradle version. Look <a href=""https://github.com/googlesamples/android-ndk/issues/42"">Here</a> and <a href=""https://github.com/googlesamples/android-ndk/issues/20"">here</a> for help with other gradle versions</strong></p>
",2869509,,2869509,,2015-12-06 21:49:31,2015-12-06 21:49:31,,,,2,,,
Android,34150980,2,,34000017,2015-12-08 8:16:13,2181,,2,,"<p>First of all, Espresso allows you to use Hamcrest matchers in tests.</p>

<p><a href=""http://www.marcphilipp.de/downloads/posts/2013-01-02-hamcrest-quick-reference/Hamcrest-1.3.pdf"" rel=""nofollow"">Hamcrest 1.3 Quick Reference</a>.</p>

<p>The most useful for catching the programmatically added views are <code>withChild</code>, <code>withParent</code>, <code>hasSibling</code>, and <code>hasDescendant</code>.</p>

<p>To make it more clear, I would give a simple example from my app: </p>

<pre><code>onView(withId(R.id.action_bar_details))
        .check(matches(withChild(withChild(withText(""Details"")))));
</code></pre>

<p>Secondly, for <code>RecyclerView</code> tests in Espresso use <code>onData</code> methods instead <code>onView</code>.</p>

<p><a href=""https://google.github.io/android-testing-support-library/downloads/espresso-cheat-sheet-2.1.0.pdf"" rel=""nofollow"">Espresso  2.1. Espresso Cheat Sheet Master</a></p>

<p>Another example from my app - using <code>onData</code> method</p>

<pre><code>onData(anything()).inAdapterView(withId(R.id.listView)).atPosition(getRandomPosition()).
                onChildView(withId(R.id.item)).check(matches(isDisplayed()));
</code></pre>

<p>Finally, check these great Googles repository for get more examples</p>

<ol>
<li><a href=""https://github.com/googlesamples/android-testing/"" rel=""nofollow"">GoogleSample</a></li>
<li><a href=""https://github.com/googlecodelabs/android-testing/"" rel=""nofollow"">GoogleCodeLabs</a></li>
</ol>
",4730812,,-1,,2016-09-28 12:44:57,2016-09-28 12:44:57,,,,0,,,
Android,34156916,2,,33208014,2015-12-08 13:16:53,2182,,1,,"<blockquote>
  <p>Android Studio display error at ""user"" and ""system"". I don't understand this error what does this mean.</p>
</blockquote>

<p>I guess, you don't have previously declared these variables.</p>

<p>I don't see any logs or whole code of this testing class, so I can only recommend you to check this <a href=""https://github.com/appoll/Espresso21/blob/95fa0f4806053af1ce09ecf9284d0f8af1ac0d80/app/src/androidTest/java/enough/paul/espresso21/ChooserIntent.java"" rel=""nofollow"">example</a></p>

<p>Here you would find all methods which you're looking for in one file.</p>

<p>Also please visit <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso"" rel=""nofollow"">Google Samples - Espresso Testing repository</a></p>
",4730812,,,,,2015-12-08 13:16:53,,,,0,,,
Android,34261832,2,,31076228,2015-12-14 7:36:41,2187,,5,,"<p>I've found an interesting article, which talks about why you should use them both. Take a look at:</p>

<p><a href=""http://qathread.blogspot.com/2015/05/espresso-uiautomator-perfect-tandem.html"" rel=""noreferrer"">http://qathread.blogspot.com/2015/05/espresso-uiautomator-perfect-tandem.html</a></p>

<p>Already <code>Espresso</code> is enough for me, but for some reasons like testing app notifications I would in just a few weeks learn <code>uiautomator</code>.</p>

<p>Spend some time to </p>

<ul>
<li>check Google's examples of using these frameworks:</li>
</ul>

<p><a href=""https://github.com/googlesamples/android-testing/tree/master/ui"" rel=""noreferrer"">https://github.com/googlesamples/android-testing/tree/master/ui</a></p>

<ul>
<li>read a documentation of these frameworks:</li>
</ul>

<p><a href=""http://developer.android.com/training/testing/ui-testing/espresso-testing.html"" rel=""noreferrer"">http://developer.android.com/training/testing/ui-testing/espresso-testing.html</a></p>

<p><a href=""http://developer.android.com/training/testing/ui-testing/uiautomator-testing.html"" rel=""noreferrer"">http://developer.android.com/training/testing/ui-testing/uiautomator-testing.html</a></p>
",4730812,,,,,2015-12-14 7:36:41,,,,0,,,
Android,34290455,2,,24647146,2015-12-15 13:24:36,2189,,1,,"<p>Go through this Google Places Api <a href=""https://github.com/googlesamples/android-play-places/blob/master/PlaceComplete/Application/src/main/java/com/example/google/playservices/placecomplete/MainActivity.java"" rel=""nofollow"">Sample</a> which describes a way of doing so.</p>

<p>It has a method <code>formatPlaceDetails</code> that Format details of the place for display. It does not support HTML tags directly, they need to be encoded first.</p>

<pre><code>private static Spanned formatPlaceDetails(Resources res, CharSequence name, String id,
            CharSequence address, CharSequence phoneNumber, Uri websiteUri) {
        Log.e(TAG, res.getString(R.string.place_details, name, id, address, phoneNumber,
                websiteUri));
        return Html.fromHtml(res.getString(R.string.place_details, name, id, address, phoneNumber,
                websiteUri));

    }
</code></pre>

<p><strong>string.xml</strong></p>

<pre><code>&lt;string name=""place_details""&gt;&amp;lt;b&amp;gt;%1$s&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;i&amp;gt;Place Id: %2$s&amp;lt;/i&amp;gt;&amp;lt;br/&amp;gt;Address: %3$s&amp;lt;br/&amp;gt;Phone: %4$s&amp;lt;br/&amp;gt;Website: %5$s&lt;/string&gt;
</code></pre>
",3140227,,,,,2015-12-15 13:24:36,,,,0,,,
Android,34337226,2,,34336878,2015-12-17 14:39:20,2191,,1,,"<p>I believe you need to set the buffer size to a supported preview size:</p>

<pre><code>textureView.getSurfaceTexture().setDefaultBufferSize(1280,720);
</code></pre>

<p>and then you can scale the TextureView so that it fits your screen, even if the preview size is smaller. The <a href=""https://github.com/googlesamples/android-Camera2Video"" rel=""nofollow"">Camera2Video</a> sample has an example. Specifically look at <code>configureTransform</code> in <a href=""https://github.com/googlesamples/android-Camera2Video/blob/master/Application/src/main/java/com/example/android/camera2video/Camera2VideoFragment.java"" rel=""nofollow"">Camera2VideoFragment</a>:</p>

<pre><code>/**
 * Configures the necessary {@link android.graphics.Matrix} transformation to `mTextureView`.
 * This method should not to be called until the camera preview size is determined in
 * openCamera, or until the size of `mTextureView` is fixed.
 *
 * @param viewWidth  The width of `mTextureView`
 * @param viewHeight The height of `mTextureView`
 */
private void configureTransform(int viewWidth, int viewHeight) {
    Activity activity = getActivity();
    if (null == mTextureView || null == mPreviewSize || null == activity) {
        return;
    }
    int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
    Matrix matrix = new Matrix();
    RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
    RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
    float centerX = viewRect.centerX();
    float centerY = viewRect.centerY();
    if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
        bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
        matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
        float scale = Math.max(
                (float) viewHeight / mPreviewSize.getHeight(),
                (float) viewWidth / mPreviewSize.getWidth());
        matrix.postScale(scale, scale, centerX, centerY);
        matrix.postRotate(90 * (rotation - 2), centerX, centerY);
    }
    mTextureView.setTransform(matrix);
}
</code></pre>
",244745,,244745,,2015-12-17 16:26:22,2015-12-17 16:26:22,,,,11,,,
Android,34338668,2,,34337393,2015-12-17 15:48:02,2191,,1,,"<p>Actions that you add to a notification are for the device that the notification was created on, so if you create a notification on your phone, when you click on it on your watch, the action will be sent back to your phone to be executed.</p>

<p>If you want to open your activity on your watch, you cannot achieve that by sending a notification from your phone in the manner you have done. You have a couple of options: for example you can send a message from your phone to your watch and then have the wear side of your app catch that message and put out a ""local"" notification on the watch; then the actions on that notification are local to your watch and you can open your desired activity via the actions in that notification. If you directly want to open an activity on your watch from your phone (i.e. you don't need a notification to show up on your watch), then you can handle the message that I talked about on your watch and instead of creating a notification there, simply open the desired activity.You may find the <a href=""https://github.com/googlesamples/android-WearCompanionLibrary"" rel=""nofollow"">WearCompanionLibrary</a> useful in handling some of these cases.</p>
",2765813,,,,,2015-12-17 15:48:02,,,,1,,,
Android,34376994,2,,34368276,2015-12-20 0:56:40,2193,,23,,"<p><a href=""https://google.github.io/android-testing-support-library/docs/espresso/setup/index.html"">Set the instrumentation runner</a></p>

<blockquote>
  <p>Add to the same build.gradle file the following line in
  android.defaultConfig: testInstrumentationRunner
  ""android.support.test.runner.AndroidJUnitRunner""</p>
</blockquote>

<pre><code>apply plugin: 'com.android.application'

android {
    ...

    defaultConfig {
        ...

        testInstrumentationRunner ""android.support.test.runner.AndroidJUnitRunner""
    }
}

dependencies {
    // App's dependencies, including test
    compile 'com.android.support:support-annotations:23.0.1'

    ...
}
</code></pre>

<p>I never used Espresso Intents but perhaps you need <a href=""https://google.github.io/android-testing-support-library/docs/espresso/intents/"">this</a> like <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java#L80"">here</a>:</p>

<blockquote>
  <p>Use IntentsTestRule instead of ActivityTestRule when using
  Espresso-Intents. IntentsTestRule makes it easy to use
  Espresso-Intents APIs in functional UI tests. This class is an
  extension of ActivityTestRule, which initializes Espresso-Intents
  before each test annotated with @Test and releases Espresso-Intents
  after each test run. The activity will be terminated after each test
  and this rule can be used in the same way as ActivityTestRule.</p>
</blockquote>
",1009132,,1009132,,2015-12-20 1:05:04,2015-12-20 1:05:04,,,,0,,,
Android,34382895,2,,10311834,2015-12-20 16:03:43,2194,,4,,"<p>As Peter McClennan indicated, Google has an API that works extremely well with the new fused location provider.   A completely worked example is at 
<a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationSettings/app/src/main/java/com/google/android/gms/location/sample/locationsettings/MainActivity.java"" rel=""nofollow"">Google Sample Code at Github</a>  You don't need to code a user dialog to ask them to change settings as it is done automatically with the API.</p>
",5700800,,,,,2015-12-20 16:03:43,,,,1,,,
Android,34389232,2,,34389053,2015-12-21 5:02:38,2194,,1,,"<p>The constructor for BrowseAdapter calls the parent constructor (<a href=""https://github.com/android/platform_frameworks_base/blob/marshmallow-release/core/java/android/widget/ArrayAdapter.java#L154-164"" rel=""nofollow"">see ArrayAdapter.java lines 154-164</a>). The parent constructor creates a list of items (<a href=""https://github.com/android/platform_frameworks_base/blob/marshmallow-release/core/java/android/widget/ArrayAdapter.java#L180"" rel=""nofollow"">see lines 175-182</a>).</p>

<p>Items are added to the adapter which adds them to the list (<a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/ui/MediaBrowserFragment.java#L119-121"" rel=""nofollow"">MediaBrowserFragment lines 119-121</a>). <code>getItem(int position)</code> then returns the item in the list (see <a href=""https://github.com/android/platform_frameworks_base/blob/marshmallow-release/core/java/android/widget/ArrayAdapter.java#L343-345"" rel=""nofollow"">343-345</a>).</p>
",1048340,,1048340,,2015-12-21 8:42:25,2015-12-21 8:42:25,,,,5,,,
Android,34498183,2,,34498147,2015-12-28 17:45:06,2202,,2,,"<pre><code> Runtime Error: java.lang.NullPointerException: Attempt to invoke virtual method 'double android.location.Location.getLatitude()' on a null object reference
</code></pre>

<p>The location is null, it has not been initialised.</p>

<p>Check that location is not null:</p>

<pre><code>if(location!= null){
    double latitude = location.getLatitude();
    double longitude = location.getLongitude();
}
</code></pre>

<p>Also you should be wrapping all your location services code into a try and catch and be checking for null pointer references and connections, GPS providers etc. Have a look here  <a href=""https://github.com/googlesamples/android-play-location/tree/master/BasicLocationSample"" rel=""nofollow"">BasicLocationSample</a>.</p>
",3956566,,3956566,,2015-12-28 17:50:06,2015-12-28 17:50:06,,,,1,,,
Android,34532937,2,,34532451,2015-12-30 16:06:20,2204,,7,,"<p>I'm not very familiar with unit testing or <code>Robolectric</code>, but because at time of writing unit tests by me there was no support for API 23 I used that config:</p>

<pre><code>@RunWith(RobolectricGradleTestRunner.class)
@Config(constants = BuildConfig.class, sdk = 21) //this guy
public class MainActivityTest {

    MainActivity_ activity = Robolectric.setupActivity(MainActivity_.class);

}
</code></pre>

<p>So like you see there's a annotation which you can use to your test classes.</p>

<hr>

<h3>EDIT:</h3>

<p>Sorry that I focused only on <code>Robolectric</code> test framework, not main problem.</p>

<p>For annotating instrumentation tests for specific API I would use:</p>

<p><strong>1. Class with @Before annotation</strong></p>

<p>Create a class with @Before annotation, where it would check the API of tested devices. If wrong, the tests would fail in this method. Use <code>fail();</code> method.</p>

<p><strong>2. Use <code>@SdkSuppress</code> annotation</strong></p>

<blockquote>
  <p>Indicates that a specific test or class requires a minimum API Level to execute.</p>
  
  <p>Test(s) will be skipped when executed on android platforms less than specified level.</p>
  
  <p>From: <a href=""http://developer.android.com/reference/android/support/test/filters/SdkSuppress.html"" rel=""noreferrer"">http://developer.android.com/reference/android/support/test/filters/SdkSuppress.html</a></p>
</blockquote>

<p>So if you would set <code>@SdkSuppress(minSdkVersion=23)</code> it would run only on Android Marshmallow devices and  if @<code>@SdkSuppress(minSdkVersion=20)</code> it would run only on higher 5.0 API devices.</p>

<p>Read also: <a href=""http://www.vogella.com/tutorials/AndroidTesting/article.html"" rel=""noreferrer"">http://www.vogella.com/tutorials/AndroidTesting/article.html</a></p>

<p><strong>3. Create your own annotation like <code>@SdkOnly</code></strong></p>

<p>Maybe this article would be useful: <a href=""http://help.testdroid.com/customer/portal/articles/1256803-using-annotations-in-android-instrumentation-tests"" rel=""noreferrer"">http://help.testdroid.com/customer/portal/articles/1256803-using-annotations-in-android-instrumentation-tests</a> </p>

<p><strong>4. Create suites for your specific instrumentation tests</strong></p>

<p>For this purpose you would use <code>@RunWith()</code> and <code>Suites.SuiteClasses()</code> annotations.</p>

<blockquote>
  <p>To organize the execution of your instrumented unit tests, you can
  group a collection of test classes in a test suite class and run these
  tests together. Test suites can be nested; your test suite can group
  other test suites and run all their component test classes together.</p>
  
  <p>A test suite is contained in a test package, similar to the main
  application package. By convention, the test suite package name
  usually ends with the .suite suffix (for example,
  com.example.android.testing.mysample.suite).</p>
  
  <p>To create a test suite for your unit tests, import the JUnit <a href=""http://junit.sourceforge.net/javadoc/org/junit/runner/RunWith.html"" rel=""noreferrer""><code>RunWith</code></a>
  and <a href=""http://junit.sourceforge.net/javadoc/org/junit/runners/Suite.html"" rel=""noreferrer""><code>Suite</code></a> classes. In your test suite, add the <code>@RunWith(Suite.class)</code>
  and the <code>@Suite.SuitClasses()</code> annotations. In the <code>@Suite.SuiteClasses()</code>
  annotation, list the individual test classes or test suites as
  arguments.</p>
  
  <p>The following example shows how you might implement a test suite
  called <code>UnitTestSuite</code> that groups and runs the
  <code>CalculatorInstrumentationTest</code> and <code>CalculatorAddParameterizedTest</code> test
  classes together.</p>

<pre><code>import com.example.android.testing.mysample.CalculatorAddParameterizedTest;
import com.example.android.testing.mysample.CalculatorInstrumentationTest;
import org.junit.runner.RunWith;
import org.junit.runners.Suite;

// Runs all unit tests.
@RunWith(Suite.class)
@Suite.SuiteClasses({CalculatorInstrumentationTest.class,
        CalculatorAddParameterizedTest.class})
public class UnitTestSuite {}
</code></pre>
  
  <p>From: <a href=""http://developer.android.com/training/testing/unit-testing/instrumented-unit-tests.html"" rel=""noreferrer"">http://developer.android.com/training/testing/unit-testing/instrumented-unit-tests.html</a></p>
</blockquote>

<p><strong>5. Helpful resources</strong></p>

<ul>
<li><a href=""http://www.netmite.com/android/mydroid/development/pdk/docs/instrumentation_testing.html"" rel=""noreferrer"">http://www.netmite.com/android/mydroid/development/pdk/docs/instrumentation_testing.html</a></li>
<li><a href=""https://github.com/googlesamples/android-testing-templates/blob/master/AndroidTestingBlueprint"" rel=""noreferrer"">https://github.com/googlesamples/android-testing-templates/blob/master/AndroidTestingBlueprint</a></li>
</ul>

<p>Hope it help</p>
",4730812,,4730812,,2015-12-30 20:40:14,2015-12-30 20:40:14,,,,6,,,
Android,34535862,2,,31621905,2015-12-30 19:24:13,2204,,2,,"<p>I'm the product manager for Smart Lock at Google. We added some functionality to support this in the 8.3 release of Play Services APIs (November 2015).</p>

<p>In the past the <a href=""https://developers.google.com/identity/smartlock-passwords/android/retrieve-hints"" rel=""nofollow"">""hint"" dialog</a> to allow the user to pick an email address with one tap to sign in or sign up had the title ""Choose an Account"", which, as noted in the question, caused some user confusion. In 8.3, we changed the default text to be ""Sign in with"" and allowed customization by the calling app to ""Sign up with"". Complete customization of the dialog text is not possible since it is rendered by Play Services and must be localized, but in UX research we found that ""Sign up with"" had the same user acceptance and completion as ""Prefill sign up form with"" and other variants but gave the developer more latitude in the scenarios where the dialog could be used. (aside: in testing, we found most users don't read the text at the top of the dialog at all!)</p>

<p>Sample code: build a <code>CredentialPickerConfig</code> with <code>setForNewAccount(true)</code> for account creation and supply this to <code>setHintPickerConfig()</code> when building a <code>HintRequest</code> for the <code>getHintPickerIntent()</code> method added to the <code>Auth.CredentialsApi</code> in Play Services 8.3.</p>

<pre><code>import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.credentials.CredentialPickerConfig;
import com.google.android.gms.auth.api.credentials.HintRequest;

CredentialPickerConfig selectorConfig = new CredentialPickerConfig.Builder()
        .setForNewAccount(true).build();
HintRequest hintRequest = new HintRequest.Builder()
        .setHintPickerConfig(selectorConfig).build();
PendingIntent intent = Auth.CredentialsApi.getHintPickerIntent(apiClient, hintRequest);
try {
    startIntentSenderForResult(intent.getIntentSender(), RESOLVE_HINT, null, 0, 0, 0);
} catch (IntentSender.SendIntentException e) {
    Log.e(TAG, ""Intent failure"", e);
}
</code></pre>

<p>Check out the sample code on Github for details on setting up the <code>apiClient</code> and integrating the rest of the API. Leave a comment if you have questions or feedback.</p>

<p><a href=""https://github.com/googlesamples/android-credentials"" rel=""nofollow"">https://github.com/googlesamples/android-credentials</a></p>
",5001016,,,,,2015-12-30 19:24:13,,,,0,,,
Android,34539716,2,,31838523,2015-12-31 1:15:38,2204,,4,,"<p>The problem is likely that the Google API client is not connected, try calling <code>connect()</code> in the <code>onStart()</code> method of your activity, or if you are using a recent version of Play Services, we added automatic management of the API client to make this easier, really simplifying things and avoiding common problems.</p>

<p>Just call <code>enableAutoManage()</code> when building the <code>GoogleApiClient</code>:</p>

<pre><code>    // ""this"" is a reference to your activity
    mCredentialsApiClient = new GoogleApiClient.Builder(this)
            .addConnectionCallbacks(this)
            .enableAutoManage(this, this)
            .addApi(Auth.CREDENTIALS_API)
            .build();
</code></pre>

<p>Then you can make an API request without having to call <code>mCredentialsApiClient.onConnect()</code> at any point, the Google API client's lifecycle will be managed automatically for you. e.g.</p>

<pre><code>@Override
public void onStart() {
    CredentialRequest request = new CredentialRequest.Builder()
            .setSupportsPasswordLogin(true)
            .build();
    Auth.CredentialsApi.request(mCredentialsApiClient, request).setResultCallback(
            new ResultCallback&lt;CredentialRequestResult&gt;() {
                public void onResult(CredentialRequestResult result) {
                    // result.getStatus(), result.getCredential() ... sign in automatically!
...
</code></pre>

<p>Check out a full sample app at on Github: <a href=""https://github.com/googlesamples/android-credentials/blob/master/credentials-quickstart/app/src/main/java/com/google/example/credentialsbasic/MainActivity.java"" rel=""nofollow"">https://github.com/googlesamples/android-credentials/blob/master/credentials-quickstart/app/src/main/java/com/google/example/credentialsbasic/MainActivity.java</a></p>
",5001016,,5001016,,2016-01-17 2:17:55,2016-01-17 2:17:55,,,,0,,,
Android,34549690,2,,32513379,2015-12-31 17:31:21,2205,,58,,"<p>First step and the one which Ken White rightly suggested &amp; which you may have already covered is the <a href=""https://android.googlesource.com/platform/development/+/master/samples/ApiDemos/src/com/example/android/apis/media/projection/MediaProjectionDemo.java"" rel=""noreferrer"">Example Code</a> provided officially.</p>

<p>I have used their API earlier. I agree screenshot is pretty straight forward. But, screen recording is also under similar lines.</p>

<p>I will answer your questions in 3 sections and will wrap it up with a link. :)</p>

<hr>

<p><strong>1. Start Video Recording</strong></p>

<pre><code>private void startScreenRecord(final Intent intent) {
 if (DEBUG) Log.v(TAG, ""startScreenRecord:sMuxer="" + sMuxer);
 synchronized(sSync) {
  if (sMuxer == null) {
   final int resultCode = intent.getIntExtra(EXTRA_RESULT_CODE, 0);
   // get MediaProjection 
   final MediaProjection projection = mMediaProjectionManager.getMediaProjection(resultCode, intent);
   if (projection != null) {
    final DisplayMetrics metrics = getResources().getDisplayMetrics();
    final int density = metrics.densityDpi;

    if (DEBUG) Log.v(TAG, ""startRecording:"");
    try {
     sMuxer = new MediaMuxerWrapper("".mp4""); // if you record audio only, "".m4a"" is also OK. 
     if (true) {
      // for screen capturing 
      new MediaScreenEncoder(sMuxer, mMediaEncoderListener,
       projection, metrics.widthPixels, metrics.heightPixels, density);
     }
     if (true) {
      // for audio capturing 
      new MediaAudioEncoder(sMuxer, mMediaEncoderListener);
     }
     sMuxer.prepare();
     sMuxer.startRecording();
    } catch (final IOException e) {
     Log.e(TAG, ""startScreenRecord:"", e);
    }
   }
  }
 }
}
</code></pre>

<p><strong>2. Stop Video Recording</strong></p>

<pre><code> private void stopScreenRecord() {
  if (DEBUG) Log.v(TAG, ""stopScreenRecord:sMuxer="" + sMuxer);
  synchronized(sSync) {
   if (sMuxer != null) {
    sMuxer.stopRecording();
    sMuxer = null;
    // you should not wait here 
   }
  }
 }
</code></pre>

<p><strong>2.5. Pause and Resume Video Recording</strong></p>

<pre><code> private void pauseScreenRecord() {
  synchronized(sSync) {
   if (sMuxer != null) {
    sMuxer.pauseRecording();
   }
  }
 }

 private void resumeScreenRecord() {
  synchronized(sSync) {
   if (sMuxer != null) {
    sMuxer.resumeRecording();
   }
  }
 }
</code></pre>

<p>Hope the code helps. Here is the <a href=""http://www.programcreek.com/java-api-examples/index.php?source_dir=ScreenRecordingSample-master/src/com/serenegiant/service/ScreenRecorderService.java"" rel=""noreferrer""><strong>original link</strong></a> to the code that I referred to and from which this implementation(Video recording) is also derived from.</p>

<hr>

<p><strong>3. Take screenshot Instead of Video</strong></p>

<blockquote>
  <p>I think by default its easy to capture the image in bitmap format. You can still go ahead with <a href=""https://github.com/mtsahakis/MediaProjectionDemo"" rel=""noreferrer"">MediaProjectionDemo</a> example to capture screenshot.</p>
</blockquote>

<p><strong>[EDIT] : Code encrypt for screenshot</strong></p>

<p><strong>a. To create virtual display depending on device width / height</strong></p>

<pre><code>mImageReader = ImageReader.newInstance(mWidth, mHeight, PixelFormat.RGBA_8888, 2);
mVirtualDisplay = sMediaProjection.createVirtualDisplay(SCREENCAP_NAME, mWidth, mHeight, mDensity, VIRTUAL_DISPLAY_FLAGS, mImageReader.getSurface(), null, mHandler);
mImageReader.setOnImageAvailableListener(new ImageAvailableListener(), mHandler);
</code></pre>

<p><strong>b. Then start the Screen Capture based on an intent or action-</strong></p>

<pre><code>startActivityForResult(mProjectionManager.createScreenCaptureIntent(), REQUEST_CODE);
</code></pre>

<p>Stop Media projection-</p>

<pre><code>sMediaProjection.stop();
</code></pre>

<p><strong>c. Then convert to image-</strong></p>

<pre><code>//Process the media capture
image = mImageReader.acquireLatestImage();
Image.Plane[] planes = image.getPlanes();
ByteBuffer buffer = planes[0].getBuffer();
int pixelStride = planes[0].getPixelStride();
int rowStride = planes[0].getRowStride();
int rowPadding = rowStride - pixelStride * mWidth;
//Create bitmap
bitmap = Bitmap.createBitmap(mWidth + rowPadding / pixelStride, mHeight, Bitmap.Config.ARGB_8888);
bitmap.copyPixelsFromBuffer(buffer);
//Write Bitmap to file in some path on the phone
fos = new FileOutputStream(STORE_DIRECTORY + ""/myscreen_"" + IMAGES_PRODUCED + "".png"");
bitmap.compress(CompressFormat.PNG, 100, fos);
fos.close();
</code></pre>

<hr>

<p>There are several implementations <strong>(full code) of Media Projection API</strong> available.
Some other links that can help you in your development-</p>

<ol>
<li><p><a href=""http://mattsnider.com/video-recording-with-mediaprojectionmanager/"" rel=""noreferrer"">Video Recording with MediaProjectionManager</a> - website</p></li>
<li><p><strike><a href=""https://github.com/googlesamples/android-ScreenCapture"" rel=""noreferrer"">android-ScreenCapture</a> - github</strike> as per android developer's observations :)</p></li>
<li><p><a href=""https://github.com/chinmoyp/screenrecorder"" rel=""noreferrer"">screenrecorder</a> - github</p></li>
<li><p><a href=""http://www.truiton.com/2015/05/capture-record-android-screen-using-mediaprojection-apis/"" rel=""noreferrer"">Capture and Record Android Screen using MediaProjection APIs</a> - website</p></li>
</ol>

<hr>

<p>Hope it helps :) Happy coding and screen recording!</p>

<p><em>PS: Can you please tell me the Microsoft app you are talking about? I have not used it. Would like to try it :)</em></p>
",3782392,,5670695,,2018-07-27 21:32:57,2018-07-27 21:32:57,,,,24,,,
Android,34572632,2,,34561814,2016-01-03 1:58:27,2207,,4,,"<p>I work on the Smart Lock team at Google, hope this answers your question:</p>

<p>In the case of Google, Facebook, Twitter, or other ""federated"" credentials, the password for these Identity provider accounts is not stored in the credential. The password field on such credentials is empty and the ""credential"" only serves as a pointer as to which identity provider the user used for the given app. The idea is that saving and retrieving such a credential will enable the app to know that the current user has an existing account and should use a particular sign-in method (and could automatically sign the user in by triggering the respective flow, or help customize the UI so the user signs in with the appropriate method when they return).</p>

<p>Note that as of the current version of Play Services (8.4), the API will throw an error if an app attempts to construct and save a credential with both an account type and a password set; third-party apps should not be asking for or storing passwords for identity providers. Only the app's first-party password for the current user used to sign in to the service itself should be stored in the credential via the API, and should not have an account type set in that case.</p>

<p>In the example code of the question, the Google-type credential is used to programmatically trigger a Google sign-in flow (see the <code>Auth.GoogleSignInApi.silentSignIn()</code> call, and the full sample <a href=""https://github.com/googlesamples/android-credentials/blob/master/credentials-signin/app/src/main/java/com/google/example/credentialssignin/MainActivity.java"" rel=""nofollow"">here</a>), i.e. automatically signing the user in with Google as though they had clicked the Google sign-in button, since they had a credential with type ""Google"" stored.</p>

<p>In general, also note that apps can only retrieve credentials that have been saved from the app itself (identified by the package and certificate signature on Android) or in Chrome for an verified and associated website (see <a href=""https://developers.google.com/identity/smartlock-passwords/android/associate-apps-and-sites"" rel=""nofollow"">details</a>). This means that the app may only access data which it stored on behalf of the user (perhaps on another device, the idea being that the Smart Lock API facilitates retrieving authentication details across devices), or a username and password that the user entered for an associated website and opted to save with Google via Chrome's password manager.</p>

<p>Please leave a comment if that answers your question or you need any more information!</p>
",5001016,,,,,2016-01-03 1:58:27,,,,3,,,
Android,34575436,2,,34437767,2016-01-03 10:18:43,2207,,5,,"<p><strong>First of all</strong>, I very much agree that finding some thing w.r.t. cocos2d is pretty tough! :)</p>

<p>Having said that, here are some pointers/information on how you can take this forward.</p>

<p><strong>Android Native Development Kit (NDK)</strong></p>

<p>Android apps are typically written in Java, with its elegant object-oriented design. However, at times, you need to overcome the limitations of Java, such as memory management and performance, by programming directly into Android native interface. Android provides Native Development Kit (NDK) to support native development in C/C++, besides the Android Software Development Kit (Android SDK) which supports Java.</p>

<ul>
<li>An amazing and yet simple article with code examples can be found on <a href=""http://www3.ntu.edu.sg/home/ehchua/programming/android/android_ndk.html"" rel=""nofollow noreferrer"">Android NDK</a></li>
</ul>

<p>Best place to start off with <strong>NDK JNI</strong>(considering you know what they are basically)-</p>

<ul>
<li><p><a href=""http://developer.android.com/ndk/samples/sample_hellojni.html"" rel=""nofollow noreferrer"">Sample: hello-jni</a> is the best place to start off with code at <a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-jni"" rel=""nofollow noreferrer"">Github</a></p></li>
<li><p>Advanced Android: <a href=""http://code.tutsplus.com/tutorials/advanced-android-getting-started-with-the-ndk--mobile-2152"" rel=""nofollow noreferrer"">Getting Started with the NDK</a></p></li>
</ul>

<hr>

<p>It's better to start off by kicking off with some <strong>basic learning of Cocos2D-X</strong>-</p>

<ul>
<li><p>Cocos2D-X Tutorial for iOS and Android: <a href=""http://www.raywenderlich.com/33750/cocos2d-x-tutorial-for-ios-and-android-getting-started"" rel=""nofollow noreferrer"">Getting Started</a></p></li>
<li><p>The Completest Cocos2d-x Tutorial &amp; Guide List - <a href=""https://stackoverflow.com/questions/10711047/the-completest-cocos2d-x-tutorial-guide-list"">Stackoverflow link</a></p></li>
</ul>

<hr>

<p>Some <strong>perfect references for plugin development</strong>-</p>

<ul>
<li><p><a href=""http://cocos2d-x.org/docs/manual/framework/html5/jsb/plugin-x/how-to-use-plugin-x-on-android/en"" rel=""nofollow noreferrer"">How to use plugin-x in android</a></p></li>
<li><p><a href=""http://cocos2d-x.org/docs/manual/framework/html5/jsb/plugin-x/plugin-x-architecture/en"" rel=""nofollow noreferrer"">Plugin-x Architecture</a></p></li>
<li><p><strong><a href=""http://cocos2d-x.org/docs/manual/framework/html5/jsb/plugin-x/how-to-write-your-own-plugin-for-android/en"" rel=""nofollow noreferrer"">How to write your own plugin for android</a></strong></p></li>
<li><p><a href=""http://cocos2d-x.org/docs/manual/framework/html5/jsb/plugin-x/ios-iap/en"" rel=""nofollow noreferrer"">PluginX IOS IAP Integration</a></p></li>
<li><p><strong><a href=""http://www.cocos2d-x.org/wiki/Third_Party_SDK_Integration"" rel=""nofollow noreferrer"">Third Party SDK Integration</a></strong></p></li>
</ul>

<hr>

<p>Earlier there was a way to <a href=""http://www.cocos2d-x.org/wiki/How_to_Integrate_a_3rd_party_SDK_into_Plugin-X#Implementing-the-Plugin"" rel=""nofollow noreferrer"">Integrate 3rd party SDK into Plugin X</a>, but, recently I see they have moved away from this approach and are using <a href=""http://cocos2d-x.org/sdkbox"" rel=""nofollow noreferrer"">SDKBOX</a> which is supposed to simplify the same.</p>

<p>Here is the best and probably only good <a href=""http://www.cocos2d-x.org/programmersguide/J/index.html"" rel=""nofollow noreferrer"">reference</a> that we can get for now from the cocos2d official <a href=""http://www.cocos2d-x.org/programmersguide/"" rel=""nofollow noreferrer"">programmersguide</a>.</p>

<p>""<strong><a href=""http://cocos2d-x.org/sdkbox"" rel=""nofollow noreferrer"">SDKBOX</a></strong> is more like a upgraded version of plugin-x, so in short it's just a plugin it's not something runs on a cloud. the reason it starts is because we want to provide a better plugin integration solution for cocos2d-x, but the fact is plugin-x always gets the low priority compare to other shinning new 3D features, so we decide to change that."" - <a href=""http://discuss.cocos2d-x.org/t/getting-started-with-sdkbox/21387/17"" rel=""nofollow noreferrer"">Cocos2d-x developer said</a>.</p>

<p>But, <strong>SDKBOX</strong> is where they develop plugins for you. I think its something like <strong>npm</strong> for nodejs.</p>

<hr>

<p>Anyway, Some <strong>reference web links</strong> that will help you even more-</p>

<ul>
<li><p><a href=""http://www.multigesture.net/articles/how-to-setup-cocos2d-x-windows-and-android/"" rel=""nofollow noreferrer"">How to setup Cocos2d-x (Windows and Android)</a></p></li>
<li><p><a href=""http://discuss.cocos2d-x.org/t/cocos2d-x-iphone-android-ide-installation-and-setup-under-mac-os/592"" rel=""nofollow noreferrer"">cocos2d-x (iphone-android)/IDE installation and setup under mac os</a> </p></li>
<li><p><a href=""http://www.cocos2d-x.org/wiki/How_to_set_up_the_android_cocos2d-x_development_environment_on_Windows_7"" rel=""nofollow noreferrer"">How to set up the Android Cocos2d-x development environment on Windows 7</a></p></li>
<li><p><a href=""http://www.cocos2d-x.org/wiki/External_Tutorials#External-Tutorials"" rel=""nofollow noreferrer"">External Tutorials</a> - Contains a bunch of helpful articles &amp; tutorials.</p></li>
</ul>

<hr>

<p>**Helpful Examples ** to learn SDK development or support from-</p>

<ul>
<li><p><a href=""http://discuss.cocos2d-x.org/t/integration-with-flurry-analytics-sdk/1861"" rel=""nofollow noreferrer"">Integration with Flurry Analytics SDK</a></p></li>
<li><p><a href=""https://translate.google.com/translate?hl=en&amp;sl=ja&amp;u=https://www.itdevblog.com/cocos2d-x-extension%25E3%2581%25A7google-analytics%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586/&amp;prev=search"" rel=""nofollow noreferrer"">We use Google Analytics with cocos2d-x extension</a></p></li>
<li><p><a href=""https://github.com/Countly/countly-sdk-cocos2d-x"" rel=""nofollow noreferrer"">Countly SDK for Cocos2d-x apps</a></p></li>
<li><p><a href=""https://github.com/cocos2d/cocos2d-x-extensions"" rel=""nofollow noreferrer"">Cocos2d-x Extensions</a> - Github repo</p></li>
<li><p><a href=""https://github.com/dualface/cocos2d-x-extensions"" rel=""nofollow noreferrer"">cocos2d-x-extensions</a> - Another Github repo</p></li>
<li><p><a href=""http://www.iuridium.com/?p=436"" rel=""nofollow noreferrer"">List of Open Source Cocos2d Projects, Extensions and Code Snippets</a> - Old but helpful</p></li>
</ul>

<hr>

<p>**Articles on SDKBOX ** which may help you if you looking for officially hosting your SDK-</p>

<p><a href=""http://en.chukong-inc.com/cocos2d-x-solves-sdk-fatigue-with-new-sdkbox-initiative/"" rel=""nofollow noreferrer"">Cocos2d-x Solves SDK Fatigue with New SDKBOX Initiative</a></p>

<p><a href=""https://www.linkedin.com/pulse/best-way-integrate-sdks-your-mobile-game-mantin-lu"" rel=""nofollow noreferrer"">The Best Way to Integrate SDKs into your Mobile Game</a></p>

<p><strong>Hope it helps! :)</strong></p>

<p><strong>Happy Coding!</strong></p>
",3782392,,-1,,2017-05-23 12:25:40,2016-01-03 10:18:43,,,,5,,,
Android,34600758,2,,34596710,2016-01-04 22:07:29,2209,,2,,"<p>In Play Services 8+, no resolution (confirmation UI) is required to save a Google Sign-In to the user's Google Account using the Smart Lock API (i.e., the credential's type is set to <code>IdentityProviders.GOOGLE</code> and the email address matches one signed in on the device, and the user has not disabled saving in settings). Note that you cannot set both an account type and password on a credential object when saving with the API -- if a user has a password simply store that for authentication purposes.</p>

<p>An API call with a credential of this type should save automatically and be available immediately, so just check that this credential is available when making a <code>Auth.CredentialsApi.request()</code> using a  <code>CredentialRequest</code> built with <code>.setAccountTypes(IdentityProviders.GOOGLE)</code> and that the saved credential is shown on <a href=""https://passwords.google.com"" rel=""nofollow"">passwords.google.com</a> and has ""with Google"" in place of a password.</p>

<p>When retrieving this credential, you can use it to know that you've got a user with an existing account and they signed in with Google previously. You then can customize the auth UI for this returning user, or simply trigger a Google Sign-In flow for the user automatically and give them a returning user experience when the app starts using the <code>Auth.GoogleSignInApi.silentSignIn()</code> method in the latest version of the Google Sign-In library. Here's a full <a href=""https://github.com/googlesamples/android-credentials/blob/master/credentials-signin/app/src/main/java/com/google/example/credentialssignin/MainActivity.java"" rel=""nofollow"">code example</a>.</p>
",5001016,,5001016,,2016-01-15 13:51:41,2016-01-15 13:51:41,,,,5,,,
Android,34601777,2,,29385090,2016-01-04 23:31:42,2209,,1,,"<p>I had this problem and solved it by following the steps in this blog:
<a href=""http://ph0b.com/new-android-studio-ndk-support/"" rel=""nofollow"">http://ph0b.com/new-android-studio-ndk-support/</a></p>

<p>and looking at the source code of this project:
<a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-jni"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master/hello-jni</a></p>

<p>I hope that helps.</p>
",550471,,,,,2016-01-04 23:31:42,,,,0,,,
Android,34601789,2,,34597234,2016-01-04 23:33:14,2209,,2,,"<p>You can check out the <a href=""https://developers.google.com/places/android-api/placepicker"" rel=""nofollow"">PlacePicker API</a> that's native uses the <a href=""https://developers.google.com/places/android-api/"" rel=""nofollow"">Google Places API for Android</a>. For samples, Google provided it in their <a href=""https://github.com/googlesamples/android-play-places"" rel=""nofollow"">googlesamples</a> github repo, you can check those out!</p>
",5637321,,,,,2016-01-04 23:33:14,,,,0,,,
Android,34610668,2,,34608703,2016-01-05 11:30:33,2209,,1,,"<p><code>SupportPlaceAutocompleteFragment</code> requires <strong><em>Google Play Services 8.4</em></strong> and you are using Google Play Services 7.5.0</p>

<p>Use : 
<code>compile 'com.google.android.gms:play-services:8.4.0'</code></p>

<p>or</p>

<p><code>compile 'com.google.android.gms:play-services-maps:8.4.0'
compile 'com.google.android.gms:play-services-location:8.4.0'
compile 'com.google.android.gms:play-services-analytics:8.4.0'
compile 'com.google.android.gms:play-services-gcm:8.4.0'
compile 'com.google.android.gms:play-services-ads:8.4.0'</code></p>

<p>Reference : <a href=""http://googlegeodevelopers.blogspot.in/2015/12/autocomplete-widget-and-updated-place.html"" rel=""nofollow"">New AutoComplete Widget</a>.</p>

<p>Here is <a href=""https://github.com/googlesamples/android-play-places"" rel=""nofollow"">Sample Project</a> for implementing the same.</p>
",3140227,,3140227,,2016-01-05 11:35:52,2016-01-05 11:35:52,,,,0,,,
Android,34619093,2,,20210565,2016-01-05 18:46:41,2210,,2,,"<p>use the fusion API that google developer have developed with fusion of GPS Sensor,Magnetometer,Accelerometer also using Wifi or cell location to calculate or estimate the location. It is also able to give location updates also inside the building accurately.</p>

<pre><code>package com.example.ashis.gpslocation;

import android.app.Activity;
import android.location.Location;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;

import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * Location sample.
 *
 * Demonstrates use of the Location API to retrieve the last known location for a device.
 * This sample uses Google Play services (GoogleApiClient) but does not need to authenticate a user.
 * See https://github.com/googlesamples/android-google-accounts/tree/master/QuickStart if you are
 * also using APIs that need authentication.
 */

public class MainActivity extends Activity implements LocationListener,
        GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener {

    private static final long ONE_MIN = 500;
    private static final long TWO_MIN = 500;
    private static final long FIVE_MIN = 500;
    private static final long POLLING_FREQ = 1000 * 20;
    private static final long FASTEST_UPDATE_FREQ = 1000 * 5;
    private static final float MIN_ACCURACY = 1.0f;
    private static final float MIN_LAST_READ_ACCURACY = 1;

    private LocationRequest mLocationRequest;
    private Location mBestReading;
TextView tv;
    private GoogleApiClient mGoogleApiClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (!servicesAvailable()) {
            finish();
        }

        setContentView(R.layout.activity_main);
tv= (TextView) findViewById(R.id.tv1);
        mLocationRequest = LocationRequest.create();
        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        mLocationRequest.setInterval(POLLING_FREQ);
        mLocationRequest.setFastestInterval(FASTEST_UPDATE_FREQ);

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(LocationServices.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();


        if (mGoogleApiClient != null) {
            mGoogleApiClient.connect();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (mGoogleApiClient != null) {
            mGoogleApiClient.connect();
        }
    }

    @Override
    protected void onPause() {d
        super.onPause();

        if (mGoogleApiClient != null &amp;&amp; mGoogleApiClient.isConnected()) {
            mGoogleApiClient.disconnect();
        }
    }


        tv.setText(location + """");
        // Determine whether new location is better than current best
        // estimate
        if (null == mBestReading || location.getAccuracy() &lt; mBestReading.getAccuracy()) {
            mBestReading = location;


            if (mBestReading.getAccuracy() &lt; MIN_ACCURACY) {
                LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
            }
        }
    }

    @Override
    public void onConnected(Bundle dataBundle) {
        // Get first reading. Get additional location updates if necessary
        if (servicesAvailable()) {

            // Get best last location measurement meeting criteria
            mBestReading = bestLastKnownLocation(MIN_LAST_READ_ACCURACY, FIVE_MIN);

            if (null == mBestReading
                    || mBestReading.getAccuracy() &gt; MIN_LAST_READ_ACCURACY
                    || mBestReading.getTime() &lt; System.currentTimeMillis() - TWO_MIN) {

                LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);

               //Schedule a runnable to unregister location listeners

                    @Override
                    public void run() {
                        LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, MainActivity.this);

                    }

                }, ONE_MIN, TimeUnit.MILLISECONDS);

            }

        }
    }

    @Override
    public void onConnectionSuspended(int i) {

    }


    private Location bestLastKnownLocation(float minAccuracy, long minTime) {
        Location bestResult = null;
        float bestAccuracy = Float.MAX_VALUE;
        long bestTime = Long.MIN_VALUE;

        // Get the best most recent location currently available
        Location mCurrentLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        //tv.setText(mCurrentLocation+"""");
        if (mCurrentLocation != null) {
            float accuracy = mCurrentLocation.getAccuracy();
            long time = mCurrentLocation.getTime();

            if (accuracy &lt; bestAccuracy) {
                bestResult = mCurrentLocation;
                bestAccuracy = accuracy;
                bestTime = time;
            }
        }

        // Return best reading or null
        if (bestAccuracy &gt; minAccuracy || bestTime &lt; minTime) {
            return null;
        }
        else {
            return bestResult;
        }
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {

    }

    private boolean servicesAvailable() {
        int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);

        if (ConnectionResult.SUCCESS == resultCode) {
            return true;
        }
        else {
            GooglePlayServicesUtil.getErrorDialog(resultCode, this, 0).show();
            return false;
        }
    }
}
</code></pre>
",3231608,,,,,2016-01-05 18:46:41,,,,2,,,
Android,34619287,2,,34619227,2016-01-05 18:58:40,2210,,3,,"<p>use the fusion API that google developer have developed with fusion of GPS Sensor,Magnetometer,Accelerometer also using Wifi or cell location to calculate or estimate the location. It is also able to give location updates also inside the building accurately.</p>

<pre><code>package com.example.ashis.gpslocation;

import android.app.Activity;
import android.location.Location;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;

import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * Location sample.
 *
 * Demonstrates use of the Location API to retrieve the last known location for a device.
 * This sample uses Google Play services (GoogleApiClient) but does not need to authenticate a user.
 * See https://github.com/googlesamples/android-google-accounts/tree/master/QuickStart if you are
 * also using APIs that need authentication.
 */

public class MainActivity extends Activity implements LocationListener,
        GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener {

    private static final long ONE_MIN = 500;
    private static final long TWO_MIN = 500;
    private static final long FIVE_MIN = 500;
    private static final long POLLING_FREQ = 1000 * 20;
    private static final long FASTEST_UPDATE_FREQ = 1000 * 5;
    private static final float MIN_ACCURACY = 1.0f;
    private static final float MIN_LAST_READ_ACCURACY = 1;

    private LocationRequest mLocationRequest;
    private Location mBestReading;
TextView tv;
    private GoogleApiClient mGoogleApiClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (!servicesAvailable()) {
            finish();
        }

        setContentView(R.layout.activity_main);
tv= (TextView) findViewById(R.id.tv1);
        mLocationRequest = LocationRequest.create();
        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        mLocationRequest.setInterval(POLLING_FREQ);
        mLocationRequest.setFastestInterval(FASTEST_UPDATE_FREQ);

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(LocationServices.API)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .build();


        if (mGoogleApiClient != null) {
            mGoogleApiClient.connect();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (mGoogleApiClient != null) {
            mGoogleApiClient.connect();
        }
    }

    @Override
    protected void onPause() {d
        super.onPause();

        if (mGoogleApiClient != null &amp;&amp; mGoogleApiClient.isConnected()) {
            mGoogleApiClient.disconnect();
        }
    }


        tv.setText(location + """");
        // Determine whether new location is better than current best
        // estimate
        if (null == mBestReading || location.getAccuracy() &lt; mBestReading.getAccuracy()) {
            mBestReading = location;


            if (mBestReading.getAccuracy() &lt; MIN_ACCURACY) {
                LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
            }
        }
    }

    @Override
    public void onConnected(Bundle dataBundle) {
        // Get first reading. Get additional location updates if necessary
        if (servicesAvailable()) {

            // Get best last location measurement meeting criteria
            mBestReading = bestLastKnownLocation(MIN_LAST_READ_ACCURACY, FIVE_MIN);

            if (null == mBestReading
                    || mBestReading.getAccuracy() &gt; MIN_LAST_READ_ACCURACY
                    || mBestReading.getTime() &lt; System.currentTimeMillis() - TWO_MIN) {

                LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);

               //Schedule a runnable to unregister location listeners

                    @Override
                    public void run() {
                        LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, MainActivity.this);

                    }

                }, ONE_MIN, TimeUnit.MILLISECONDS);

            }

        }
    }

    @Override
    public void onConnectionSuspended(int i) {

    }


    private Location bestLastKnownLocation(float minAccuracy, long minTime) {
        Location bestResult = null;
        float bestAccuracy = Float.MAX_VALUE;
        long bestTime = Long.MIN_VALUE;

        // Get the best most recent location currently available
        Location mCurrentLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        //tv.setText(mCurrentLocation+"""");
        if (mCurrentLocation != null) {
            float accuracy = mCurrentLocation.getAccuracy();
            long time = mCurrentLocation.getTime();

            if (accuracy &lt; bestAccuracy) {
                bestResult = mCurrentLocation;
                bestAccuracy = accuracy;
                bestTime = time;
            }
        }

        // Return best reading or null
        if (bestAccuracy &gt; minAccuracy || bestTime &lt; minTime) {
            return null;
        }
        else {
            return bestResult;
        }
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {

    }

    private boolean servicesAvailable() {
        int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);

        if (ConnectionResult.SUCCESS == resultCode) {
            return true;
        }
        else {
            GooglePlayServicesUtil.getErrorDialog(resultCode, this, 0).show();
            return false;
        }
    }
}
</code></pre>
",3231608,,3231608,,2016-02-01 7:59:36,2016-02-01 7:59:36,,,,0,,,
Android,34630087,2,,34629012,2016-01-06 9:51:46,2210,,2,,"<p>I recommend that you use <code>GoogleApiClient</code> because LocationClient is no longer supported in newer versions of play-services they removed it starting Google Play Services 6.5.87 if I am not mistaken. Here is the link for the <a href=""https://github.com/googlesamples/android-play-location/tree/master/BasicLocationSample"" rel=""nofollow"">example implementation</a>. If you really want to use LocationClient, which I do not recommend, you can use an older version of the <code>play-services</code></p>
",5653411,,,,,2016-01-06 9:51:46,,,,0,,,
Android,34650699,2,,34638651,2016-01-07 8:45:41,2211,,4,,"<p>Thanks @CommonsWare.</p>

<p>I followed your advice using negative margin (top and bottom) and it works.</p>

<p>To do that, I just update <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">AutoFitTextureView</a> the GoogeSamples project <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">android-Camera2Basic</a> this way:</p>

<pre><code>public class AutoFitTextureView extends TextureView {

    //...
    private boolean mWithMargin = false;

    //...

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, widthMeasureSpec);
        int width = MeasureSpec.getSize(widthMeasureSpec);
        int height = MeasureSpec.getSize(heightMeasureSpec);
        int margin = (height - width) / 2;

        if(!mWithMargin) {
            mWithMargin = true;
            ViewGroup.MarginLayoutParams margins = ViewGroup.MarginLayoutParams.class.cast(getLayoutParams());
            margins.topMargin = -margin;
            margins.bottomMargin = -margin;
            margins.leftMargin = 0;
            margins.rightMargin = 0;
            setLayoutParams(margins);
        }

        if (0 == mRatioWidth || 0 == mRatioHeight) {
            setMeasuredDimension(width, height);
        } else {
            if (width &lt; height) {
                setMeasuredDimension(width, width * mRatioHeight / mRatioWidth);
            } else {
                setMeasuredDimension(height * mRatioWidth / mRatioHeight, height);
            }
        }
    }
}
</code></pre>

<p><a href=""https://i.stack.imgur.com/ieZIK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ieZIK.png"" alt=""enter image description here""></a></p>
",1832221,,1832221,,2016-01-07 8:52:00,2016-01-07 8:52:00,,,,2,,,
Android,34651057,2,,25592207,2016-01-07 9:05:56,2211,,4,,"<p>Wearables with speakers are now supported on API 23. From the <a href=""http://developer.android.com/training/wearables/wearable-sounds.html"" rel=""nofollow"">docs</a>, first make sure to check if the device has the required API and hardware:</p>

<pre><code>public boolean canPlayAudio(Context context) {
    PackageManager packageManager = context.getPackageManager();
    AudioManager audioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);

    // Check whether the device has a speaker.
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {
        // Check FEATURE_AUDIO_OUTPUT to guard against false positives.
        if (!packageManager.hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT)) {
            return false;
        }

        AudioDeviceInfo[] devices = audioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS);
        for (AudioDeviceInfo device : devices) {
            if (device.getType() == AudioDeviceInfo.TYPE_BUILTIN_SPEAKER) {
                return true;
            }
        }
    }
    return false;
}
</code></pre>

<p>If the above returns true, you are set to play sounds on the wearable device just like you would on any other device using the <a href=""http://developer.android.com/guide/topics/media/mediaplayer.html"" rel=""nofollow"">MediaPlayer</a>.</p>

<p>For more details, there is also a <a href=""https://github.com/googlesamples/android-WearSpeakerSample"" rel=""nofollow"">sample app</a> available.</p>
",362298,,,,,2016-01-07 9:05:56,,,,0,,,
Android,34657139,2,,34636389,2016-01-07 14:05:20,2212,,4,,"<p>Yes, those are the correct dimensions.</p>

<pre><code>apduServiceBanner should be 260x96 dp. In pixels, that works out to...
  - drawable-xxhdpi: 780x288 px
  - drawable-xhdpi:  520x192 px
  - drawable-hdpi:   390x144 px
  - drawable-mdpi:   260x96  px
</code></pre>

<p>Reference: <a href=""https://github.com/googlesamples/android-CardEmulation/blob/a432dae2a40e64a3253c0d88e7d8e5d7655d34b6/Application/src/main/res/xml/aid_list.xml"" rel=""nofollow"">Android Card Emulation Reference Application</a></p>
",509081,,,,,2016-01-07 14:05:20,,,,0,,,
Android,34703914,2,,34702809,2016-01-10 9:28:38,2214,,1,,"<p>Yes, it is doable:</p>

<ol>
<li>Send a message to your watch (using MessageApi)</li>
<li>Have a WearableListenerService in your app on the watch so your application on the watch can capture the message even if it is not running</li>
<li>In that service, start the desired activity.</li>
</ol>

<p>You can, alternatively, use <a href=""https://github.com/googlesamples/android-WearCompanionLibrary"" rel=""nofollow"">WearCompanionLibrary</a> that does all of this for you in a simple API.</p>
",2765813,,,,,2016-01-10 9:28:38,,,,7,,,
Android,34761243,2,,34760940,2016-01-13 8:01:00,2217,,32,,"<p>Here’s a guide to test Smart Lock for Passwords functionality in an app. If you have a website, <a href=""https://developers.google.com/identity/smartlock-passwords/android/associate-apps-and-sites"" rel=""noreferrer"">associate your app and site</a> to test those cases. Also check out the <a href=""https://developers.google.com/identity/smartlock-passwords/android/overview"" rel=""noreferrer"">developer integration guide</a>.</p>

<p>Check what's saved for the current Google Account at <a href=""https://passwords.google.com"" rel=""noreferrer"">passwords.google.com</a>. Entries are shown under the website domain or Android package/app name, delete any entries to start over.</p>

<ol>
<li><p><strong>Auto sign-in</strong> when app starts and a single saved entry exists. This is the recommended UX pattern to seamlessly transition between devices and help users complete transactions and pick up their experience where they left off last time. Sign-In UI should be disabled or hidden until the API call is complete, and do not call the API if you already have a signed-in user.</p></li>
<li><p><strong>Sign-up</strong> with a password in the app, check for a <a href=""https://developers.google.com/identity/smartlock-passwords/android/retrieve-hints"" rel=""noreferrer"">hints dialog</a> to help fill the sign-up form fields such as name and email, and check for a save prompt, select ""Save password"".</p></li>
<li><p><strong>Auto sign-in</strong> after reinstalling app (or clearing app data). Show prompt for multiple credentials if something was already saved or auto sign-in is disabled.</p></li>
<li><p><strong>Regular sign-in</strong> after deleting any saved passwords at <a href=""https://passwords.google.com"" rel=""noreferrer"">passwords.google.com</a>, save the existing account credentials when prompted.</p></li>
<li><p><strong>Sign-out</strong> and app should call <a href=""https://developers.google.com/android/reference/com/google/android/gms/auth/api/credentials/CredentialsApi.html#disableAutoSignIn(com.google.android.gms.common.api.GoogleApiClient)"" rel=""noreferrer""><code>disableAutoSignIn</code></a>. When user returns to the sign-in activity / UI, call the API and to help sign back in or switch between accounts easily (app should resolve an intent to show a picker dialog), without automatically signing the user back in.</p></li>
<li><p><strong>Password update</strong> in the app should save the change (app should just call
<a href=""https://developers.google.com/android/reference/com/google/android/gms/auth/api/credentials/CredentialsApi.html#save(com.google.android.gms.common.api.GoogleApiClient,%20com.google.android.gms.auth.api.credentials.Credential)"" rel=""noreferrer"">save API</a>), but UI won't be needed for password updates). Check <a href=""https://passwords.google.com"" rel=""noreferrer"">passwords.google.com</a> for the updated password.</p></li>
<li><p><strong>Multiple accounts</strong> after sign-up for a different second account on the web, reinstall app and see if both saved entries are offered for sign-in via a picker dialog.</p></li>
<li><p><strong>Wrong stored password</strong>: You can save a wrong password in Chrome by running the following in the console on your login domain: <code>navigator.credentials.store(new PasswordCredential({id: 'user@example.com', password: 'wrongpassword'}))</code>. Then test retrieving this in the app, which could either prompt user to correct the password and save the new one, or delete an invalid credential so user doesn't get stuck in this state.</p></li>
<li><p><strong>Web auto-fill</strong> when visiting the <strong>https</strong> website in Chrome, check that passwords saved on Android are available to fill in the website password field (they should also should show in chrome://settings/passwords).</p></li>
<li><p><strong>IDP sign-in</strong> after deleting saved password entries, sign in/up to the app with Facebook etc, and may prompt to ""Save account"". Reinstall to see auto sign-in UX (i.e., the app may automatically ""click"" the appropriate button for the user or customize their sign-in screen to the returning user). The same for Google Sign-In, but <a href=""https://stackoverflow.com/questions/34596710/cant-save-identityproviders-google-credentials-with-smartlock/34600758#34600758"">no save prompt is shown</a>, will save automatically to the appropriate Google account, see <a href=""https://github.com/googlesamples/android-credentials/blob/master/credentials-signin/app/src/main/java/com/google/example/credentialssignin/MainActivity.java"" rel=""noreferrer"">example use</a> of <code>silentSignIn</code>.</p></li>
</ol>

<p>Keep in mind that if you tap the ""Never"" button on a save dialog, it will add the app to the <em>Never save</em> list in <em>Settings > Google > Smart Lock for Passwords</em> for all accounts on the device and the save prompt will not be shown again (API error message ""The current app is blacklisted""). You will need to remove the app from the <em>Never save</em> list for all accounts on the device to see the save prompt again.</p>

<p>Also note that Android credentials are affiliated to the signature and package of the app in which they were saved, in case you sign your app with multiple debug or release keystores during development. </p>
",5001016,,5001016,,2017-06-10 3:11:14,2017-06-10 3:11:14,,,,0,,,
Android,34801349,2,,34800860,2016-01-14 22:56:59,2219,,8,,"<p>The problem here is that <code>PlaceAutocompleteFragment</code> didn't exist in version 8.3 of Google Play Services.</p>

<p>This isn't documented very well, but you can see on <a href=""http://googlegeodevelopers.blogspot.com/2015/12/autocomplete-widget-and-updated-place.html"" rel=""nofollow noreferrer"">this blog</a> that <code>PlaceAutocompleteFragment</code> was ""announced"" in December 2015.</p>

<p>You can also see <a href=""https://github.com/googlesamples/android-play-places/blob/master/PlaceCompleteFragment/Application/build.gradle#l23"" rel=""nofollow noreferrer"">in the PlaceCompleteFragment Google code samples on GitHub</a> that they are using version 8.4 of GooglePlayServices.</p>

<p>I also had this problem, and updating Google Play Services is what made it work.</p>

<p>So, update Google Play Services in the SDK Manager, and then modify the build.gradle like so, and it should work:</p>

<pre><code>compile 'com.google.android.gms:play-services-maps:8.4.0'
compile 'com.google.android.gms:play-services-location:8.4.0'
</code></pre>

<p><strong>Update</strong></p>

<p>In newer versions of Google Play Services, they have broken out the Google Places API, so you need to include it in addition to Maps and Location:</p>

<pre><code>compile 'com.google.android.gms:play-services-maps:11.0.2'
compile 'com.google.android.gms:play-services-location:11.0.2'
compile 'com.google.android.gms:play-services-places:11.0.2'
</code></pre>
",4409409,,4409409,,2017-07-14 19:19:09,2017-07-14 19:19:09,,,,4,,,
Android,34834625,2,,31924627,2016-01-17 2:57:49,2221,,11,,"<p>Double-check if the error message returned by the API is ""The current app is blacklisted"", which will be triggered when ""Never"" has been selected at some point in the past on the save dialog (details in the accepted answer: need to check for all accounts on the device).</p>

<p>And in general if you don't see the save dialog when testing, here are things to check:</p>

<ul>
<li><p>try a real device (Android 4+) and not an emulator, ensure that the device is running the latest version of Google Play Services (8+) and has an active internet connection</p></li>
<li><p>verify that the device has at least one Google Account and that the account is in good state (doesn't require password re-entry and meets any corp policy requirements), for example, check that an email push notification for the account is successfully received by the device</p></li>
<li><p>in the <em>Google Setting</em> app > <em>Smart Lock for Passwords</em> (pre-Marshmallow) or <em>Settings > Google > Smart Lock for Passwords</em> (Marshmallow), ensure that at least once account on the device is shown with the Smart Lock for Passwords feature enabled and is not shown as disabled by <a href=""https://support.google.com/chrome/answer/1181035?hl=en"" rel=""nofollow noreferrer"">passphrase encryption</a>, see <a href=""https://stackoverflow.com/questions/33907279/smart-lock-for-passwords-not-working-on-certain-phones-error-message-no-eligib"">related question</a></p></li>
<li><p>in the same <em>Smart Lock for Passwords</em> settings activity, also check that app is not on the ""Never save"" list for any account on the device (as noted in the accepted answer). There is an account selector dropdown at the top of the settings activity UI.</p></li>
<li><p>check that the <code>Auth.CredentialsApi.save()</code> callback is being called, and the <code>CredentialRequestResult</code> <code>getStatus().getStatusCode()</code> is <code>RESOLUTION_REQUIRED</code> and you've called <code>startResolutionForResult()</code>. <a href=""https://github.com/googlesamples/android-credentials/blob/master/credentials-quickstart/app/src/main/java/com/google/example/credentialsbasic/MainActivity.java"" rel=""nofollow noreferrer"">Sample app</a></p></li>
<li><p>note that the Activity from which you <code>startResolutionForResult()</code> must not <code>finish()</code> before the dialog is shown and user interaction is complete, calling <code>onActivityResult()</code></p></li>
<li><p>also note that calling <code>Auth.CredentialsApi.save()</code> with a credential that has an email identifier matching a Google Account on the device and an account type set in place of a password, the save will succeed without resolution required. Similar for an update to an existing password credential with matching identifier. Check <a href=""https://passwords.google.com"" rel=""nofollow noreferrer"">passwords.google.com</a> for the Google Accounts on your device to see what credentials are currently saved </p></li>
</ul>

<p>If none of these work, try adding a new Google Account to the device, and try another app with Smart Lock integration, such creating and saving an email-based account for the <a href=""https://play.google.com/store/apps/details?id=com.nytimes.android"" rel=""nofollow noreferrer"">NYTimes</a> app on your device and determine whether it is a device/account-specific issue or a problem with your app implementation, and feel free to leave a comment with details.  </p>

<p>For a full guide to testing Smart Lock API integration in an app, check out <a href=""https://stackoverflow.com/a/34761243/5001016"">this answer</a>.</p>
",5001016,,-1,,2017-05-23 10:31:14,2016-01-21 14:11:50,,,,1,,,
Android,34902758,2,,34902230,2016-01-20 14:29:17,2225,,1,,"<p>Check out this <a href=""https://developers.google.com/fit/android/history#read_data"" rel=""nofollow"">official documentation</a> from Google on how to read the data from Fit:</p>

<pre><code>// Setting a start and end date using a range of 1 week before this moment.
Calendar cal = Calendar.getInstance();
Date now = new Date();
cal.setTime(now);
long endTime = cal.getTimeInMillis();
cal.add(Calendar.WEEK_OF_YEAR, -1);
long startTime = cal.getTimeInMillis();

java.text.DateFormat dateFormat = getDateInstance();
Log.i(TAG, ""Range Start: "" + dateFormat.format(startTime));
Log.i(TAG, ""Range End: "" + dateFormat.format(endTime));

DataReadRequest readRequest = new DataReadRequest.Builder()
        // The data request can specify multiple data types to return, effectively
        // combining multiple data queries into one call.
        // In this example, it's very unlikely that the request is for several hundred
        // datapoints each consisting of a few steps and a timestamp.  The more likely
        // scenario is wanting to see how many steps were walked per day, for 7 days.
        .aggregate(DataType.TYPE_STEP_COUNT_DELTA, DataType.AGGREGATE_STEP_COUNT_DELTA)
        // Analogous to a ""Group By"" in SQL, defines how data should be aggregated.
        // bucketByTime allows for a time span, whereas bucketBySession would allow
        // bucketing by ""sessions"", which would need to be defined in code.
        .bucketByTime(1, TimeUnit.DAYS)
        .setTimeRange(startTime, endTime, TimeUnit.MILLISECONDS)
        .build();
</code></pre>

<p><strong>History API Sample app on GitHub:</strong></p>

<p>Check the sample project on GitHub <a href=""https://github.com/googlesamples/android-fit/tree/master/BasicHistoryApi"" rel=""nofollow"">here</a>.</p>

<p>Direct link to <code>MainActivity.java</code> (in the above sample project) containing the required code: <a href=""https://github.com/googlesamples/android-fit/blob/master/BasicHistoryApi/app/src/main/java/com/google/android/gms/fit/samples/basichistoryapi/MainActivity.java"" rel=""nofollow"">Link</a></p>
",1957401,,1957401,,2016-01-20 15:42:22,2016-01-20 15:42:22,,,,4,,,
Android,34928261,2,,34925543,2016-01-21 15:52:02,2226,,3,,"<p>You cannot open an activity on a wear device using a notification that was created on a phone; all the actions/intents refer to the originator of the notification (i.e. phone if phone created the notification). You need to do a bit of work to create the effect that you want; basically need to have a wear app as well and instead of creating a notification on the phone for wear, send a message, from your phone to the wear device and have teh wear app on your wear device capture that message and create a notification on the wear device. Then that notification can open an activity (since it was originated on your wear device). As a sample app, take a look at the <a href=""https://github.com/googlesamples/android-SynchronizedNotifications"" rel=""nofollow"">SynchronizedNotifications</a> that does this.</p>
",2765813,,,,,2016-01-21 15:52:02,,,,0,,,
Android,35004160,2,,20367402,2016-01-25 23:03:55,2230,,3,,"<p><strong>Official example</strong></p>

<p>In Android SDK 23 under <code>samples/android-23/sensors/BatchStepSensor</code>, run with:</p>

<pre><code>./gradlew clean
./gradlew assembleDebug
./gradlew installDebug
</code></pre>

<p>Then turn on the app, enable one of the step sensors, and walk around with your phone to see the counter increment. </p>

<p>Source at: <a href=""https://github.com/googlesamples/android-BatchStepSensor"" rel=""nofollow"">https://github.com/googlesamples/android-BatchStepSensor</a></p>
",895245,,895245,,2016-08-23 7:21:59,2016-08-23 7:21:59,,,,0,,,
Android,35059265,2,,35058192,2016-01-28 10:46:19,2232,,1,,"<p>Since this Library uses Android Vision , Why don't you try to implement you own code using the android-vision project as a sample , it will you a lot more control and flexibility also the sample is fairly easy to understand and directly from google. </p>

<p>You can find the Overview <a href=""https://developers.google.com/vision/barcodes-overview"" rel=""nofollow"">here</a></p>

<p>and the sample project on github <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow"">here</a></p>

<p>I tried Running the Barcodereader sample and it works perfectly(for QR as well as barcodes) , MainActivity and the BarcodeCaptureActivity is mainly what you'll need edit for your custom implementation.</p>
",4175607,,4407266,,2016-01-28 11:08:54,2016-01-28 11:08:54,,,,0,,,
Android,35078237,2,,35078121,2016-01-29 6:29:55,2233,,1,,"<p>Yes it can be possible, but is not so easy. First you need to read documentation </p>

<p><a href=""http://developer.android.com/guide/topics/connectivity/bluetooth.html"" rel=""nofollow"">Android bluetooth</a></p>

<p>and later try find some example which will resemble your needs.</p>

<p><a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow"">Example : bluetooth chat</a></p>

<p>Comment : I did communication android with special hardware (I think FTDI Chip), but with Xamarin .NET. Some things will be the same. Mostly it is done so that the UI, creating communication and data transfer are in a separate Thread. In reading thread you have endless cycle in which the reading bytes from the input stream and save it into temp buffer (impeding receipt and you will not lose bytes). Later moves to MainBufferu and work with them.</p>

<p><strong>UPDATE</strong></p>

<p>You have to read the documentation and explore example. I can not describe everything here. I can roughly describe the lifecycle of how I dealt with itself:
When you have paired the device (<strong>you get BluetoothDevice</strong>) start ConnectThread which opens RfcommSocket and try Connect on it. If it is OK, than start ConnectedThread where you have endless cycle of reading data from InputStream. In cycle You put your data into a temp buffer and once in a while  moved data into MainBuffer where do you take them for processing. If you want send data via Bluetooth, you will just write to the OutputStream in ConnectedThread.</p>
",4069108,,4069108,,2016-02-11 7:11:14,2016-02-11 7:11:14,,,,0,,,
Android,35078512,2,,22084307,2016-01-29 6:50:40,2233,,4,,"<p>Answer Juanjo outdated! Better to use <a href=""http://developer.android.com/intl/ru/reference/android/support/v4/media/session/MediaSessionCompat.html"" rel=""nofollow noreferrer"">MediaSessionCompat</a> which include in support library. Thank <a href=""https://stackoverflow.com/users/1676363/ianhanniballake"">@ianhlake</a> for the good 2 video:</p>

<ol>
<li><a href=""https://www.youtube.com/watch?v=FBC1FgWe5X4"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=FBC1FgWe5X4</a></li>
<li><a href=""https://www.youtube.com/watch?v=XQwe30cZffg"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=XQwe30cZffg</a></li>
</ol>

<p>Also take a look at an example <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""nofollow noreferrer"">Android Music Player Sample</a></p>
",1517126,,-1,,2017-05-23 12:08:57,2016-01-29 6:50:40,,,,2,,,
Android,35138735,2,,35121089,2016-02-01 19:32:39,2237,,5,,"<p>This code sample includes showing a graphic outline over the barcode:</p>

<p><a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader"" rel=""nofollow"">https://github.com/googlesamples/android-vision/tree/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader</a></p>

<p>The association from the detector to the graphics is made like this:</p>

<pre><code>    mGraphicOverlay = (GraphicOverlay&lt;BarcodeGraphic&gt;) findViewById(R.id.graphicOverlay);

    // A barcode detector is created to track barcodes.  An associated multi-processor instance
    // is set to receive the barcode detection results, track the barcodes, and maintain
    // graphics for each barcode on screen.  The factory is used by the multi-processor to
    // create a separate tracker instance for each barcode.
    BarcodeDetector barcodeDetector = new BarcodeDetector.Builder(context).build();
    BarcodeTrackerFactory barcodeFactory = new BarcodeTrackerFactory(mGraphicOverlay);
    barcodeDetector.setProcessor(
            new MultiProcessor.Builder&lt;&gt;(barcodeFactory).build());
</code></pre>

<p>GraphicOverlay is included with the code sample above.  This utility makes it easy to add graphic objects that are rendered on top of the camera preview.  See the code here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/GraphicOverlay.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/GraphicOverlay.java</a></p>

<p>In this example, the barcode factory manages the creation of a graphics object that draws a rectangle and label for a detected barcode.  See the BarcodeGraphic class defined here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/BarcodeGraphic.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/BarcodeGraphic.java</a></p>
",5231007,,5231007,,2016-02-02 15:36:21,2016-02-02 15:36:21,,,,2,,,
Android,35180197,2,,35029175,2016-02-03 14:49:34,2239,,3,,"<blockquote>
  <p>That demo requires compiling with Google Play Services 8.1. I'm
  guessing that you compiled with Google Play Services 7.8.</p>
  
  <p>This was the result of a bug fix that occurred between the two
  versions. The issue is that using direct byte buffers with the
  CameraSource class will result in a pixel shift of the images sent to
  the detector (e.g., the position reported for the barcode may be
  shifted to the left several pixels). In 8.1 we added support for
  indirect byte buffers to address this, but the 7.8 library doesn't
  have that ability.</p>
  
  <p>Long story short: Compile with 8.1 if you can. If you can't, you'll
  need to change to direct byte buffers as suggested above, and
  positions reported back will be off by several pixels.</p>
</blockquote>

<p>Source: <a href=""https://github.com/googlesamples/android-vision/issues/33"" rel=""nofollow"">https://github.com/googlesamples/android-vision/issues/33</a></p>
",2757470,,,,,2016-02-03 14:49:34,,,,0,,,
Android,35192809,2,,35190080,2016-02-04 4:57:39,2239,,1,,"<blockquote>
  <p>in Android 6.0, you can use Intent same as previous version of android
  OS which open default storage explorer with recent files you can also
  change its to <strong><em>show external storage</em></strong> using option menu there is
  also navigation drawer for more options like photos,image,videos,Audio
  filters etc. below is code</p>
</blockquote>

<pre><code>public void openFileEx() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType(""*/*"");
        startActivityForResult(intent, 15);
    }
</code></pre>

<hr>

<p><strong><em>but you have to ask for permission of <code>android.permission.READ_EXTERNAL_STORAGE</code> in android 6.0 Marshmallow for read file from external storage like below</em></strong></p>

<pre><code>if (Build.VERSION.SDK_INT &lt; 23) {
                    openFileEx();
                } else {
                    if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE)
                            != PackageManager.PERMISSION_GRANTED) {
                        requestContactsPermissions();
                    } else {
                        openFileEx();
                    }
                }
</code></pre>

<hr>

<pre><code>public void requestContactsPermissions() {
        if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                Manifest.permission.READ_EXTERNAL_STORAGE)) {
            Log.i(""PERMISIOM"",
                    ""Displaying contacts permission rationale to provide additional context."");
            ActivityCompat.requestPermissions(MainActivity.this,
                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                    11);
        } else {
            // Contact permissions have not been granted yet. Request them directly.
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 11);
        }
    }
</code></pre>

<hr>

<p><em>you can also check for more permission using above code, Here is sample of <a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""nofollow"">android-RuntimePermissions</a> on Github.</em> </p>
",1168654,,,,,2016-02-04 4:57:39,,,,0,,,
Android,35211304,2,,35113210,2016-02-04 20:47:03,2240,,4,,"<p>I'm not quite sure, but here are some suggestions of things to try:</p>

<p>There is an open source version of CameraSource here that you can use and modify as needed in your app:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java</a></p>

<p>This has a couple of surface instance variables, mDummySurfaceView and mDummySurfaceTexture, that are used in working with the camera preview in the case that there is no display for the preview.  These get set up here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java#L346"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java#L346</a></p>

<p>I'm guessing that in your app these dummy surfaces are somehow interfering with your video.  You might see if your app could use an alternate strategy for working with the camera that doesn't require these dummy surfaces.</p>

<p>You could also start the camera source with a specific SurfaceHolder that you supply, as is supplied here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java#L370"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java#L370</a></p>

<p>You might try experimenting with creating alternative surfaces, and see if there's a way to avoid interference with your video.</p>

<p>If none of that works, you could also try writing camera controlling code yourself, similar to what CameraSource provides, but using the newer ""camera2"" API (we shipped CameraSource using the ""camera1"" API because at the time, this API had a little bit better backward compatibility with older cameras, but this has been improving with camera2).  If you do this, you can take a similar approach to passing preview images to a detector, as is done here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java#L1191"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java#L1191</a></p>
",5231007,,,,,2016-02-04 20:47:03,,,,1,,,
Android,35273916,2,,35188948,2016-02-08 16:00:51,2244,,1,,"<p>We have no plans to expose the underlying camera in the official API.  But there's an open source version of this class that you can use and modify:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java</a></p>
",5231007,,,,,2016-02-08 16:00:51,,,,0,,,
Android,35289982,2,,32711975,2016-02-09 10:45:59,2244,,23,,"<h2>Android Camera2 api : Pinch Zoom In/Out</h2>

<p>Use this sample code for Camera2Basic from google developers. <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></p>

<p>Now declare two class variables –</p>

<pre><code>public float finger_spacing = 0;
public int zoom_level = 1;
</code></pre>

<p>and update the given onTouch() method.</p>

<pre><code>public boolean onTouch(View v, MotionEvent event) {
    try {
        Activity activity = getActivity();
        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
        CameraCharacteristics characteristics = manager.getCameraCharacteristics(mCameraId);
        float maxzoom = (characteristics.get(CameraCharacteristics.SCALER_AVAILABLE_MAX_DIGITAL_ZOOM))*10;

        Rect m = characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
        int action = event.getAction();
        float current_finger_spacing;

        if (event.getPointerCount() &gt; 1) {
            // Multi touch logic
            current_finger_spacing = getFingerSpacing(event);
            if(finger_spacing != 0){
                if(current_finger_spacing &gt; finger_spacing &amp;&amp; maxzoom &gt; zoom_level){
                    zoom_level++;
                } else if (current_finger_spacing &lt; finger_spacing &amp;&amp; zoom_level &gt; 1){
                    zoom_level--;
                }
                int minW = (int) (m.width() / maxzoom);
                int minH = (int) (m.height() / maxzoom);
                int difW = m.width() - minW;
                int difH = m.height() - minH;
                int cropW = difW /100 *(int)zoom_level;
                int cropH = difH /100 *(int)zoom_level;
                cropW -= cropW &amp; 3;
                cropH -= cropH &amp; 3;
                Rect zoom = new Rect(cropW, cropH, m.width() - cropW, m.height() - cropH);
                mPreviewRequestBuilder.set(CaptureRequest.SCALER_CROP_REGION, zoom);
            }
            finger_spacing = current_finger_spacing;
        } else{
            if (action == MotionEvent.ACTION_UP) {
                //single touch logic
            }
        }

        try {
            mCaptureSession
                .setRepeatingRequest(mPreviewRequestBuilder.build(), mCaptureCallback, null);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
    } catch (CameraAccessException e) {
        throw new RuntimeException(""can not access camera."", e);
    }
    return true;
}


//Determine the space between the first two fingers
@SuppressWarnings(""deprecation"")
private float getFingerSpacing(MotionEvent event) {
    float x = event.getX(0) - event.getX(1);
    float y = event.getY(0) - event.getY(1);
    return (float) Math.sqrt(x * x + y * y);
}
</code></pre>
",4976689,,2433309,,2017-09-14 18:33:26,2017-09-14 18:33:26,,,,8,,,
Android,35370982,2,,35368974,2016-02-12 19:45:45,2248,,3,,"<p>Check out the many Android NDK samples developed by Google. You can find them <a href=""https://github.com/googlesamples/android-ndk/tree/388a1c0f387b72e768d49476da9628547502b5e2"" rel=""nofollow"">here</a>.</p>

<p>The <a href=""https://github.com/googlesamples/android-ndk/tree/388a1c0f387b72e768d49476da9628547502b5e2/hello-gl2"" rel=""nofollow"">hello-gl2</a> example is a good place to start.</p>

<p><a href=""https://github.com/googlesamples/android-ndk/blob/388a1c0f387b72e768d49476da9628547502b5e2/hello-gl2/app/src/main/jni/gl_code.cpp"" rel=""nofollow"">gl_code.cpp</a> shows you how to create JNI code which can be called from Java. Pay particular attention to this part of the code, which defines two methods and makes them visible to the Java layer:</p>

<pre><code>extern ""C"" {
  JNIEXPORT void JNICALL Java_com_android_gl2jni_GL2JNILib_init(JNIEnv * env,
    jobject obj,  jint width, jint height);
  JNIEXPORT void JNICALL Java_com_android_gl2jni_GL2JNILib_step(JNIEnv * env, 
    jobject obj);
};

JNIEXPORT void JNICALL Java_com_android_gl2jni_GL2JNILib_init(JNIEnv * env, jobject obj,  jint width, jint height)
{
  setupGraphics(width, height);
}

JNIEXPORT void JNICALL Java_com_android_gl2jni_GL2JNILib_step(JNIEnv * env, jobject obj)
{
  renderFrame();
}
</code></pre>

<p><a href=""https://github.com/googlesamples/android-ndk/blob/388a1c0f387b72e768d49476da9628547502b5e2/hello-gl2/app/src/main/java/com/android/gl2jni/GL2JNILib.java"" rel=""nofollow"">GL2JNILib.java</a> shows you how to call the methods defined in gl_code.cpp from Java. </p>

<pre><code>public class GL2JNILib {

  static {
    System.loadLibrary(""gl2jni"");
   }

  /**
   * @param width the current view width
   * @param height the current view height
   */
   public static native void init(int width, int height);
   public static native void step();
}
</code></pre>

<p><strong>UPDATE:</strong></p>

<p>To build a C++ module which relies on the live555 library, you'll need to add the following section to Android.mk:</p>

<pre><code>include $(CLEAR_VARS)
LOCAL_MODULE := your_module
LOCAL_SRC_FILES := your_module_file.cpp
LOCAL_SHARED_LIBRARIES := live555
include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>See this documentation for reference:</p>

<ul>
<li><a href=""http://developer.android.com/ndk/guides/android_mk.html"" rel=""nofollow"">Android.mk (LOCAL_SHARED_LIBRARIES)</a></li>
<li><a href=""http://developer.android.com/ndk/guides/prebuilts.html"" rel=""nofollow"">Using prebuilt libraries (syntax is the same for downstream modules)</a></li>
</ul>
",2201317,,2201317,,2016-02-18 3:07:07,2016-02-18 3:07:07,,,,1,,,
Android,35446475,2,,4062357,2016-02-17 1:47:52,2252,,7,,"<p>First of all, technically mkdirs() returning false doesn't mean that it failed, it just meant that it didn't make the directories.
If the directories already exist then mkdirs() will continue to return false.</p>

<p>Secondly, in Android 6, not only do you need:</p>

<pre><code>&lt;uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""/&gt;
</code></pre>

<p>You also need some equivalent of:</p>

<pre><code>ContextCompat.checkSelfPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
</code></pre>

<p>For more info on checking permissions, see:<br>
<a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""noreferrer"">https://github.com/googlesamples/android-RuntimePermissions</a></p>
",252308,,,,,2016-02-17 1:47:52,,,,1,,,
Android,35523650,2,,35523627,2016-02-20 13:04:42,2256,,2,,"<blockquote>
  <p>Why do I get this error?</p>
</blockquote>

<p>Presumably, the layout that inflated into <code>view</code> has a <code>TextureView</code>, not an <code>AutoFitTextureView</code>.</p>

<blockquote>
  <p>And why does it work fine in Google's Sample App?</p>
</blockquote>

<p>Because Google's sample app's <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/res/layout/fragment_camera2_basic.xml"" rel=""nofollow"">layout</a> has an <code>AutoFitTextureView</code>.</p>
",115145,,,,,2016-02-20 13:04:42,,,,1,,,
Android,35553445,2,,32834746,2016-02-22 12:17:20,2257,,2,,"<p>If the ""onSurfaceTextureSizeChanged(SurfaceTexture texture, int width, int height)"" is fired, call the following method:</p>

<pre><code>/**
     * Configures the necessary {@link android.graphics.Matrix} transformation to `mTextureView`.
     * This method should be called after the camera preview size is determined in
     * setUpCameraOutputs and also the size of `mTextureView` is fixed.
     *
     * @param viewWidth  The width of `mTextureView`
     * @param viewHeight The height of `mTextureView`
     */
    private void configureTransform(int viewWidth, int viewHeight) {
        Activity activity = getActivity();
        if (null == mTextureView || null == mPreviewSize || null == activity) {
            return;
        }
        int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
        Matrix matrix = new Matrix();
        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
        RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
        float centerX = viewRect.centerX();
        float centerY = viewRect.centerY();
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
            float scale = Math.max(
                    (float) viewHeight / mPreviewSize.getHeight(),
                    (float) viewWidth / mPreviewSize.getWidth());
            matrix.postScale(scale, scale, centerX, centerY);
            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180, centerX, centerY);
        }
        mTextureView.setTransform(matrix);
    }
</code></pre>

<p>For more info, have a look to the following file:
<a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java</a></p>
",4291264,,,,,2016-02-22 12:17:20,,,,4,,,
Android,35563448,2,,25818668,2016-02-22 20:43:59,2258,,1,,"<p>FFmpeg has removed support for libstagefright at <a href=""https://github.com/FFmpeg/FFmpeg/commit/72673ad7eae2d4f685f3c0a895558502bfe07c8e"" rel=""nofollow"">https://github.com/FFmpeg/FFmpeg/commit/72673ad7eae2d4f685f3c0a895558502bfe07c8e</a> (included in <code>n3.0</code>). Commit message:</p>

<pre><code>avcodec: Remove libstagefright

It serves absolutely no purpose other than to confuse potentional
Android developers about how to use hardware acceleration properly
on the the platform. The stagefright ""API"" is not public, and the
MediaCodec API is the proper way to do this.

Furthermore, stagefright support in avcodec needs a series of
magic incantations and version-specific stuff, such that
using it actually provides downsides compared just using the actual
Android frameworks properly, in that it is a lot more work and confusion
to get it even running. It also leads to a lot of misinformation, like
these sorts of comments (in [1]) that are absolutely incorrect.

[1] http://stackoverflow.com/a/29362353/3115956
</code></pre>

<p>so maybe it is not possible anymore.</p>

<p>You may have better chances with <a href=""https://github.com/googlesamples/android-ndk/tree/3cd41e1f5280443665ca98463c7a76e80bf0b96c/native-codec"" rel=""nofollow""><code>AMediaCodec</code></a> and <a href=""https://github.com/googlesamples/android-ndk/tree/3cd41e1f5280443665ca98463c7a76e80bf0b96c/native-media"" rel=""nofollow"">OpenMAX</a>.</p>
",895245,,895245,,2016-02-25 13:24:13,2016-02-25 13:24:13,,,,1,,,
Android,35565047,2,,35559165,2016-02-22 22:17:33,2258,,1,,"<p><strong>Phone side:</strong>
I assume you already are communicating with the wear device via GoogleApiClient (Wearable.API). If you are, you can use the MessengeApi to send a custom message across to your Wear app. (Just remember to add capabilites for both.) Easy directions are <a href=""http://developer.android.com/training/wearables/data-layer/messages.html#SendMessage"" rel=""nofollow"">here</a>.</p>

<p><strong>Wear side:</strong>
Just implement the MessageListener interface in your main activity. When the message comes in via onMessageReceived(), you can call finish(). Easy directions are <a href=""http://developer.android.com/training/wearables/data-layer/messages.html#ReceiveMessage"" rel=""nofollow"">here</a>.</p>

<p>Finally, there is a Google Android Wear <a href=""https://github.com/googlesamples/android-DataLayer"" rel=""nofollow"">sample</a> for the DataLayer. This covers sending Messages with other stuff if you want to dig into it.</p>
",1631197,,,,,2016-02-22 22:17:33,,,,0,,,
Android,35567500,2,,35549225,2016-02-23 2:06:42,2258,,1,,"<p>Depending whether user has credentials stored for the calling app, the result status code of a <code>CredentialsApi.request()</code> call will vary. Check out the <a href=""https://developers.google.com/identity/smartlock-passwords/android/overview"" rel=""nofollow"">API overview</a> for details, but a quick summary:</p>

<p>When a user has multiple stored credentials (possibly stored in one or more Google accounts on the device), the <code>RESOLUTION_REQUIRED</code> result is returned and can be resolved with a dialog showing the multiple saved credentials, allowing the user to pick one. <a href=""https://developers.google.com/identity/smartlock-passwords/android/retrieve-credentials#handle_multiple_saved_credentials"" rel=""nofollow"">Details</a></p>

<p>When no stored credentials are available, the <code>SIGN_IN_REQUIRED</code> result is returned and can be resolved with a dialog showing a list of email addresses (for email address auto-fill, along with name or picture if available). This does not require a device permission (very useful on Android M, which would otherwise require a runtime GET_ACCOUNTS prompt), and helps the user fill a sign-in or sign-up form easily. <a href=""https://developers.google.com/identity/smartlock-passwords/android/retrieve-hints"" rel=""nofollow"">Details</a></p>

<pre><code>Auth.CredentialsApi.request(apiClient, request).setResultCallback(
        new ResultCallback&lt;CredentialRequestResult&gt;() {
            public void onResult(CredentialRequestResult result) {
                Status status = result.getStatus();
                if (status.isSuccess()) {
                    // Successfully read credential without any user interaction, this
                    // means there was only a single credential and user has auto
                    // sign-in enabled.
                    processRetrievedCredential(result.getCredential(), false);
                } else if (status.getStatusCode() == CommonStatusCodes.RESOLUTION_REQUIRED) {
                    // This is the case where the user has multiple saved
                    // credentials and needs to pick one
                    resolveResult(status, RC_READ);
                } else if (status.getStatusCode() == CommonStatusCodes.SIGN_IN_REQUIRED) {
                    // User has no saved credentials, but a dialog to select email
                    // address (a ""hint"") is available (optional)
                    resolveResult(status, RC_HINT);
                }
            }
        });
</code></pre>

<p>For both results <code>hasResolution()</code> returns <code>true</code>, because both can be resolved, though the result is different, which is unfortunately confusing. We'll update documentation to better explain.</p>

<p>In either scenario, the user's selection will be returned in <code>onActivityResult()</code>, but the ""hints"" will only have the identifier (email address) set and no password.</p>

<pre><code>public void onActivityResult(int requestCode, int resultCode, Intent data) {
...
    if (resultCode == RESULT_OK) {
        Credential result = data.getParcelableExtra(Credential.EXTRA_KEY);
        if (requestCode == RC_HINT) {
            String email = result.getId(); // for auto-fill
        } else if (requestCode == RC_READ) {
            String email = result.getId(); // for auto sign-in
            String password = result.getPassword(); // only for saved credentials
</code></pre>

<p>The reason the email-only dialog is returned in a <code>CredentialsApi.request()</code> is to save an additional API call to fetch the email ""hint"" selector dialog described in the details above, in the case that an app would otherwise need to make the API calls sequentially. However, this is optional since for many app's UX it makes more sense to retrieve credentials at app start for auto sign-in, then request the email selector dialog separately later when user starts sign in or sign up, as illustrated in the <a href=""https://github.com/googlesamples/android-credentials/blob/master/credentials-quickstart/app/src/main/java/com/google/example/credentialsbasic/MainActivity.java"" rel=""nofollow"">sample code</a>.</p>
",5001016,,,,,2016-02-23 2:06:42,,,,2,,,
Android,35584260,2,,35582760,2016-02-23 17:30:09,2259,,1,,"<p>I found a nifty little trick, used in the <a href=""https://github.com/googlesamples/android-AsymmetricFingerprintDialog"" rel=""nofollow"">AsymmetricFingerprintDialog</a> sample application, though I do not know if I fully understand how it works. The sample uses the first iteration of Dagger, but a quick test showed that it works with Dagger 2 as well.</p>

<p>For each <code>Fragment</code> I added an empty constructor with an <code>@Inject</code> annotation, then used an <code>@Inject</code> annotation to get an instance of the <code>Fragment</code> in my <code>Activity</code>.</p>

<pre><code>public class MainActivity extends AppCompatActivity {

    @Inject MyFragment mFragment;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        MyApplication.getComponent().inject(this);
        getSupportFragmentManager().beginTransaction
                .replace(R.id.fragment_container, mFragment).commit();
        ...
    }
}
</code></pre>

<hr>

<pre><code>public class MyFragment extends Fragment {

    @Inject MyDependency mDependency;

    @Inject
    public MyFragment() {}

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
        mDependency.doSomething();
        ...
    }
}
</code></pre>

<p>This allows me to call <code>MyApplication.getComponent().inject(this)</code> only in each <code>Activity</code>, and the dependencies will be injected to the <code>Fragment</code> classes as well. In this way, I only need an <code>inject</code> method for each <code>Activity</code>, and not each <code>Fragment</code>.</p>

<pre><code>@Singleton @Component(modules = {AppModule.class})
public interface AppComponent {

    void inject(MainActivity activity);
}
</code></pre>

<p>I am curious as to how this works though. From what I can see it has nothing to do with Dagger, instead it seems to use the <code>@Inject</code> annotation for its intended purpose? Though I am new to Dagger as well as JSR-330, so I am unsure.</p>

<hr>

<p><strong>Edit:</strong> This method only works with <code>setRetainInstanceState(true)</code>, or if you save and restore the instance yourself. </p>
",5115932,,5115932,,2016-02-23 19:57:49,2016-02-23 19:57:49,,,,2,,,
Android,35648069,2,,2779002,2016-02-26 9:35:19,2261,,12,,"<p>All older answers' methods are deprecated by Google (supposedly because of troubles like this), since API 21 you need to <a href=""https://developer.android.com/reference/android/hardware/Camera.html"" rel=""noreferrer"">use</a> the Camera 2 API:</p>

<blockquote>
  <p>This class was deprecated in API level 21. We recommend using the new
  android.hardware.camera2 API for new applications.</p>
</blockquote>

<p>In <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraManager.html"" rel=""noreferrer"">the newer API</a> you have <strong>almost complete power</strong> over the Android device camera and documentation explicitly advice to</p>

<pre><code>String[] getCameraIdList()
</code></pre>

<p>and then use obtained CameraId to open the camera:</p>

<pre><code>void openCamera(String cameraId, CameraDevice.StateCallback callback, Handler handler)
</code></pre>

<p><strong>99% of the frontal cameras have id = ""1"", and the back camera id = ""0""</strong>
according to this:</p>

<blockquote>
  <p>Non-removable cameras use integers starting at 0 for their
  identifiers, while removable cameras have a unique identifier for each
  individual device, even if they are the same model.</p>
</blockquote>

<p><strong>However</strong>, this means if device situation is rare like just 1-frontal -camera tablet you need to count how many <strong>embedded</strong> cameras you have, and place the order of the camera by its importance (""0""). So CAMERA_FACING_FRONT == 1 CAMERA_FACING_BACK == 0, which implies that the back camera is more <strong>important</strong> than frontal.</p>

<p>I don't know about a <strong>uniform</strong> method to identify the frontal camera on all Android devices. Simply said, the Android OS inside the device can't really find out which camera is exactly where for some reasons: maybe the only camera hardcoded id is an integer representing its importance or maybe on some devices whichever side you turn will be .. ""back"".</p>

<p><strong>Documentation</strong>: <a href=""https://developer.android.com/reference/android/hardware/camera2/package-summary.html"" rel=""noreferrer"">https://developer.android.com/reference/android/hardware/camera2/package-summary.html</a></p>

<p><strong>Explicit Examples</strong>: <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></p>

<hr>

<p><strong>For the older API</strong> (it is not recommended, because it will not work on modern phones newer Android version and transfer is a pain-in-the-arse). Just use the same <em>Integer</em> CameraID  (1) to open frontal camera like in <a href=""https://stackoverflow.com/a/4767832/5059838"">this answer</a>:</p>

<pre><code>cam = Camera.open(1);
</code></pre>

<hr>

<p>If you trust <strong><a href=""http://docs.opencv.org/2.4/doc/tutorials/introduction/android_binary_package/dev_with_OCV_on_Android.html#dev-with-ocv-on-android"" rel=""noreferrer"">OpenCV</a></strong> to do the camera part:</p>

<p>Inside</p>

<pre><code>    &lt;org.opencv.android.JavaCameraView
    ../&gt;
</code></pre>

<p>use the following for the frontal camera:</p>

<pre><code>        opencv:camera_id=""1""
</code></pre>
",5059838,,-1,,2017-05-23 11:55:09,2017-05-20 12:27:02,,,,0,,,
Android,35678286,2,,35678157,2016-02-28 3:16:14,2263,,1,,"<p>You can view Android Navigation Drawer Sample by Google:
<a href=""https://github.com/googlesamples/android-NavigationDrawer"" rel=""nofollow"">https://github.com/googlesamples/android-NavigationDrawer</a></p>
",5652770,,,,,2016-02-28 3:16:14,,,,0,,,
Android,35733401,2,,35727102,2016-03-01 21:00:55,2266,,2,,"<p>The <a href=""https://developers.google.com/android/reference/com/google/android/gms/wearable/CapabilityApi"" rel=""nofollow"">CapabilityApi</a> should work. There are two ways to get a list of connected nodes based on capability including a callback for changes:</p>

<ol>
<li>Callback for Node changes: <a href=""https://developers.google.com/android/reference/com/google/android/gms/wearable/CapabilityApi.CapabilityListener"" rel=""nofollow"">CapabilityApi.CapabilityListener</a></li>
<li>Requesting current Nodes: <a href=""https://developers.google.com/android/reference/com/google/android/gms/wearable/CapabilityApi.html#getCapability(com.google.android.gms.common.api.GoogleApiClient,%20java.lang.String,%20int)"" rel=""nofollow"">Wearable.CapabilityApi.getCapability()</a></li>
</ol>

<p><strong>More details:</strong></p>

<p>Below is a snippet from Google's <a href=""https://github.com/googlesamples/android-RuntimePermissionsWear"" rel=""nofollow"">RuntimePermissionsWear</a> sample's <a href=""https://github.com/googlesamples/android-RuntimePermissionsWear/blob/master/Wearable/src/main/java/com/example/android/wearable/runtimepermissions/MainWearActivity.java"" rel=""nofollow"">MainWearActivity.java</a> file. In the <strong>onConnected()</strong> method, it sets up a listener for changes in the nodes and requests a list of current nodes (covers both scenarios).</p>

<p>Please note, this sample uses a custom capability (both for phone and wear), so you might change that part. If you are using a custom capability, it must be declared in the <strong>wear.xml</strong> file. (<a href=""https://github.com/googlesamples/android-RuntimePermissionsWear/blob/master/Application/src/main/res/values/wear.xml"" rel=""nofollow"">Here</a> is the one from the phone for the sample in case you are curious.)</p>

<pre><code>    // Set up listeners for capability and message changes.
    Wearable.CapabilityApi.addCapabilityListener(
            mGoogleApiClient,
            this,
            Constants.CAPABILITY_PHONE_APP); // custom capability
    ...

    // Initial check of capabilities to find the phone.
    PendingResult&lt;CapabilityApi.GetCapabilityResult&gt; pendingResult =
            Wearable.CapabilityApi.getCapability(
                    mGoogleApiClient,
                    Constants.CAPABILITY_PHONE_APP, // custom capability
                    CapabilityApi.FILTER_REACHABLE);

    pendingResult.setResultCallback(new ResultCallback&lt;CapabilityApi.GetCapabilityResult&gt;() {
        @Override
        public void onResult(CapabilityApi.GetCapabilityResult getCapabilityResult) {

            if (getCapabilityResult.getStatus().isSuccess()) {
                CapabilityInfo capabilityInfo = getCapabilityResult.getCapability();
                // Realistically, there is only on phone node with this capability, but you should check for multiple nodes to be safe (if wearable, many more possibilities)
                mPhoneNodeId = pickBestNodeId(capabilityInfo.getNodes());

            } else {
                Log.d(TAG, ""Failed CapabilityApi result: ""
                        + getCapabilityResult.getStatus());
            }
        }
    });
</code></pre>
",1631197,,1631197,,2016-03-01 21:22:56,2016-03-01 21:22:56,,,,4,,,
Android,35748076,2,,33671697,2016-03-02 13:05:44,2267,,1,,"<p><em>I also searching for not C++ but javascript in Android Studio. 
I found this sample.</em></p>

<p>Teapot
Teapot is an Android C++ sample that draws a Teapot mesh using GLES 2.0 API and NativeActivity.</p>

<p>This sample uses the new Gradle Experimental Android plugin with C++ support.</p>

<p>Pre-requisites</p>

<p>Android Studio 1.3+ with NDK bundle.
<a href=""https://github.com/googlesamples/android-ndk/tree/master/Teapot"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master/Teapot</a></p>
",6007907,,,,,2016-03-02 13:05:44,,,,1,,,
Android,35768627,2,,35768279,2016-03-03 9:51:23,2267,,2,,"<p>You need to create a camera instance and link it to your detector (which already is linked to your processor)</p>

<pre><code>mCameraSource = new CameraSource.Builder(context, barcodeDetector)
                   .setFacing(CameraSource.CAMERA_FACING_BACK)
                   .setRequestedFps(15.0f)
                   .build();
</code></pre>

<p>To link the camera to your SurfaceView and start it use code like this (when the SurfaceView is availble) </p>

<pre><code>mCameraSource.start(mSurfaceView.getHolder());
</code></pre>

<p>You have a working example provided <a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/barcode-reader"" rel=""nofollow"">here</a> by Google.</p>

<p>For TextureView  use manual detection</p>

<pre><code>public void onSurfaceTextureUpdated(SurfaceTexture surface) {
          // Invoked every time there's a new Camera preview frame
           mTextureView.getBitmap(bitmap);
           Frame frame = new Frame.Builder().setBitmap(bitmap).build();
           SparseArray&lt;Barcode&gt; barcodes = barcodeDetector.detect(frame);
      }
</code></pre>
",5763690,,5763690,,2016-03-03 10:21:49,2016-03-03 10:21:49,,,,5,,,
Android,35859087,2,,35858981,2016-03-08 4:39:13,2272,,2,,"<p>Read through <a href=""http://developer.android.com/training/permissions/requesting.html"" rel=""nofollow"">Runtime permissions - Android M</a> and <a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""nofollow"">its reference project</a>.</p>

<p>Permissions flow has changed requiring the permissions to be asked at runtime, preferably, as and when required. With the same.. permissions have also been categorised into <a href=""http://developer.android.com/guide/topics/security/permissions.html#normal-dangerous"" rel=""nofollow"">Normal and Dangerous</a> which will also lead to permission groups.  </p>
",2450263,,,,,2016-03-08 4:39:13,,,,0,,,
Android,35874521,2,,35869383,2016-03-08 17:55:05,2273,,7,,"<p>As mentioned in the <a href=""https://medium.com/google-developers/mediabrowserservicecompat-and-the-modern-media-playback-app-7959a5196d90#70fe"" rel=""noreferrer"">MediaBrowserService and the modern media playback app blog</a>:</p>

<blockquote>
  <p>this wraps the API for <a href=""http://developer.android.com/guide/components/bound-services.html"" rel=""noreferrer"">bound services</a>, which makes sense since we’re trying to connect to a Service.</p>
</blockquote>

<p>The lifecycle of a bound service is tied directly to who binds to the service:</p>

<blockquote>
  <p>When the last client unbinds from the service, the system destroys the service (unless the service was also started by startService()).</p>
</blockquote>

<p>In your case, the service will no longer have anyone bound to it between onDestroy() and onCreate().</p>

<p>The example of <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/MusicService.java"" rel=""noreferrer"">Universal Android Music Player's MusicService</a> is to:</p>

<ul>
<li>Call startService(new Intent(this, MediaPlaybackService.class) when playback begins</li>
<li>Call stopSelf() when playback is stopped</li>
</ul>

<p>This ensures that changes in the bound clients do not cause the Service to be destroyed mid-playback.</p>
",1676363,,,,,2016-03-08 17:55:05,,,,1,,,
Android,35876587,2,,35875775,2016-03-08 19:41:47,2273,,1,,"<p>You'll need to rebuild the library for Android. For that, you need the Android NDK. The <a href=""http://developer.android.com/ndk/guides/index.html"" rel=""nofollow"">Getting Started</a> page has links to much of the documentation you'll need to set this up. If you get stuck, try looking at the <a href=""https://github.com/googlesamples/android-ndk/tree/android-mk"" rel=""nofollow"">NDK samples</a>. The <a href=""https://github.com/googlesamples/android-ndk/tree/android-mk/hello-jni"" rel=""nofollow"">hello-jni</a> example is particularly useful when you're new to the NDK. </p>

<p>There is new support coming out for C++ development in Android Studio, but right now much of the build system is experimental. If you're interested in using the experimental support, you should refer to the <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow"">NDK samples here</a> instead.</p>
",2201317,,,,,2016-03-08 19:41:47,,,,0,,,
Android,35913469,2,,6391870,2016-03-10 10:12:52,2274,,2,,"<h2>UPDATE android-N (march-2016)</h2>

<p>Please visit <a href=""http://developer.android.com/intl/in/preview/features/notification-updates.html"" rel=""nofollow"">Notifications Updates</a> link for more details.</p>

<ul>
<li>Direct Reply</li>
<li>Bundled Notifications</li>
<li>Custom Views</li>
</ul>

<blockquote>
  <p>Android N also allows you to bundle similar notifications to appear as
  a single notification. To make this possible, Android N uses the
  existing <code>NotificationCompat.Builder.setGroup()</code> method. Users can
  expand each of the notifications, and perform actions such as reply
  and dismiss on each of the notifications, individually from the
  notification shade.</p>
  
  <p>This is a pre-existing sample which shows a simple service that sends
  notifications using NotificationCompat. Each unread conversation from
  a user is sent as a distinct notification.</p>
  
  <p>This sample has been updated to take advantage of new notification
  features available in Android N.</p>
</blockquote>

<p><a href=""https://github.com/googlesamples/android-ActiveNotifications"" rel=""nofollow"">sample code</a>.</p>
",2826147,,3165447,,2016-08-13 9:17:50,2016-08-13 9:17:50,,,,1,,,
Android,35923622,2,,35923621,2016-03-10 17:44:56,2275,,3,,"<p>Based on <a href=""https://github.com/googlesamples/android-MultiWindowPlayground/blob/master/Application/build.gradle"" rel=""nofollow"">one of the sample apps</a>, I am now using:</p>

<ul>
<li>Gradle 2.10</li>
<li><code>'com.android.tools.build:gradle:2.1.0-alpha1'</code> for the Android Plugin for Gradle (goes in your top-level <code>build.gradle</code> file)</li>
<li><code>buildToolsVersion ""24.0.0 rc1""</code></li>
</ul>

<p>This seems to be holding up, including with Android Studio 1.5.1.</p>

<p><strong>UPDATE</strong>: Now that N Developer Preview 4 has been released, we can start using <code>24</code> in place of <code>""N""</code> and <code>""android-N""</code>:</p>

<pre><code>android {
    compileSdkVersion 24
    buildToolsVersion ""24.0.0""

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 24
    }
}
</code></pre>
",115145,,115145,,2016-06-15 23:57:03,2016-06-15 23:57:03,,,,0,,,
Android,35949911,2,,35944723,2016-03-11 21:06:42,2276,,27,,"<pre><code>@Test
public void clickOnYourNavigationItem_ShowsYourScreen() {
    // Open Drawer to click on navigation.
    onView(withId(R.id.drawer_layout))
        .check(matches(isClosed(Gravity.LEFT))) // Left Drawer should be closed.
        .perform(DrawerActions.open()); // Open Drawer

    // Start the screen of your activity.
    onView(withId(R.id.nav_view))
        .perform(NavigationViewActions.navigateTo(R.id.your_navigation_menu_item));

    // Check that you Activity was opened.
    String expectedNoStatisticsText = InstrumentationRegistry.getTargetContext()
        .getString(R.string.no_item_available);
    onView(withId(R.id.no_statistics)).check(matches(withText(expectedNoStatisticsText)));
}
</code></pre>

<p>This does exactly what you are looking for.</p>

<p>Other examples are available <a href=""https://github.com/googlesamples/android-testing"" rel=""noreferrer"">here</a> or <a href=""https://github.com/operando/NavigationViewActionsSample"" rel=""noreferrer"">here</a></p>
",1584654,,6248491,,2017-10-25 9:38:39,2017-10-25 9:38:39,,,,2,,,
Android,35990784,2,,35972523,2016-03-14 14:51:37,2279,,2,,"<p>Check out the face tracker sample code, which is similar.  It also handles getting camera permissions and activity pause/resume:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/FaceTrackerActivity.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/FaceTrackerActivity.java</a></p>

<p>What problems are you encountering?</p>

<p>Note that the ""prominentFaceOnly"" option will only detect faces that appear relatively large in the camera preview (i.e., face is around 35% or more of the width of the preview image). </p>
",5231007,,,,,2016-03-14 14:51:37,,,,0,,,
Android,36001337,2,,33479004,2016-03-15 1:52:34,2279,,1,,"<p>use the formula below to get device rotation.</p>

<pre><code>private int getOrientation(int rotation) {
    return (ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
}
</code></pre>

<p>SensorOrientation is a field assigned from </p>

<pre><code>characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION) 
</code></pre>

<p>Solution suggested by google engineer: yaraki</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic/issues/24"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic/issues/24</a></p>
",5399875,,,,,2016-03-15 1:52:34,,,,1,,,
Android,36008757,2,,35892170,2016-03-15 10:34:11,2279,,1,,"<p>You could stub the intent like the <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsAdvancedSample/app/src/androidTest/java/com/example/android/testing/espresso/intents/AdvancedSample/ImageViewerActivityTest.java"" rel=""nofollow"">official samples</a> demonstrated with the ACTION_IMAGE_CAPTURE intent:</p>

<pre><code>@Before
public void stubCameraIntent() {
    ActivityResult result = createImageCaptureActivityResultStub();

    // Stub the Intent.
    intending(hasAction(MediaStore.ACTION_IMAGE_CAPTURE)).respondWith(result);
}
</code></pre>

<p>In your case that could be something like this:</p>

<pre><code>@Before
public void stubNextIntent() {
    intended(hasComponent(NextActivity.class.getName()));
}
</code></pre>

<p><a href=""http://collectiveidea.com/blog/archives/2015/06/11/testing-for-android-intents-using-espresso/"" rel=""nofollow"">this tutorial</a> might be interesting for you</p>
",1531708,,,,,2016-03-15 10:34:11,,,,0,,,
Android,36069730,2,,30653287,2016-03-17 19:16:03,2282,,6,,"<p>The Android sample app HdrViewfinderDemo uses RenderScript to process YUV data from camera2.</p>

<p><a href=""https://github.com/googlesamples/android-HdrViewfinder"" rel=""noreferrer"">https://github.com/googlesamples/android-HdrViewfinder</a></p>

<p>Specifically, the <a href=""https://github.com/googlesamples/android-HdrViewfinder/blob/master/Application/src/main/java/com/example/android/hdrviewfinder/ViewfinderProcessor.java"" rel=""noreferrer"">ViewfinderProcessor</a> sets up the Allocations, and <a href=""https://github.com/googlesamples/android-HdrViewfinder/blob/master/Application/src/main/rs/hdr_merge.rs"" rel=""noreferrer"">hdr_merge.rs</a> reads from them.</p>
",1344825,,,,,2016-03-17 19:16:03,,,,0,,,
Android,36098551,2,,36098550,2016-03-19 6:15:03,2283,,5,,"<p>From the <a href=""https://developer.android.com/guide/topics/ui/multi-window.html#running"" rel=""nofollow noreferrer"">Android Developer link</a> .</p>

<p>To make changes in UI or separate layout which should be used on Multiple-window activate.</p>

<p>We can check if activity is in Multiple-window by following way</p>

<ul>
<li><strong><em>From activity <code>Activity.isInMultiWindowMode()</code> Call to find out if the activity is in multi-window mode.</em></strong></li>
</ul>

<p>eg. To check in Activity if its multiple window than header(or any view should have Red background color if its not in multiple window thn it should be Green background color) </p>

<pre><code>headerView.setBackgroundColor(inMultiWindow()?Color.RED:Color.GREEN);
</code></pre>

<p>using <code>inMultiWindow()</code> replacing <strong>Fragment</strong> is also possible</p>

<ul>
<li><strong><em>To get Callback on Multiple-Window Activation.</em></strong></li>
</ul>

<p>From Activity <code>onMultiWindowChanged</code> method is available to handle runtime changes on this method callback.System will give callback on this method whenever the activity goes into or out of multi-window mode with <code>boolean</code> value.With the help of <a href=""https://github.com/googlesamples/android-MultiWindowPlayground/blob/master/Application/src/main/java/com/android/multiwindowplayground/activities/LoggingActivity.java"" rel=""nofollow noreferrer"">sample link</a> &amp; android developer link</p>

<pre><code>@Override
public void onMultiWindowChanged(boolean inMultiWindow) {
    super.onMultiWindowChanged(inMultiWindow);
    headerView.setBackgroundColor(inMultiWindow ? Color.RED : Color.GREEN);
    // here we can change entire fragment also.
    //If multiple window in than seperate and for multiple window out different

}
</code></pre>

<p>Will keep updating if I get anything else.</p>
",1140237,,1140237,,2017-09-29 5:59:33,2017-09-29 5:59:33,,,,1,,,
Android,36115055,2,,33748760,2016-03-20 14:36:56,2285,,5,,"<p>I just figured out using the <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">Camera2 Basic sample</a> that it is relatively easy to get the Face array from Camera2 preview after you set the capture session correctly.</p>

<p>In the setUpCameraOutputs method of the Camera2 Basic sample add the following check:</p>

<pre><code>int[] FD =characteristics.get(CameraCharacteristics.STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES);
int maxFD=characteristics.get(CameraCharacteristics.STATISTICS_INFO_MAX_FACE_COUNT);

if (FD.length&gt;0) {
    List&lt;Integer&gt; fdList = new ArrayList&lt;&gt;();
    for (int FaceD : FD
            ) {
        fdList.add(FaceD);
        Log.d(TAG, ""setUpCameraOutputs: FD type:"" + Integer.toString(FaceD));
    }
    Log.d(TAG, ""setUpCameraOutputs: FD count"" + Integer.toString(maxFD));

    if (maxFD &gt; 0) {
        mFaceDetectSupported = true;
        mFaceDetectMode = Collections.max(fdList);
    }
}
</code></pre>

<p>Then in the createCameraPreviewSession() method that creates the capture session add the following call for face detection method:</p>

<pre><code>@Override
public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
    // The camera is already closed
    if (null == mCameraDevice) {
        return;
    }
    // When the session is ready, we start displaying the preview. ...
    // Flash is automatically enabled when necessary.
    setAutoFlash(mPreviewRequestBuilder);

    //&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;HERE&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                                   
    //Face detection setup
    setFaceDetect(mPreviewRequestBuilder,mFaceDetectMode);...
</code></pre>

<p>Where the setFaceDetect(mPreviewRequestBuilder,mFaceDetectMode); code can be like this:</p>

<pre><code>private void setFaceDetect(CaptureRequest.Builder requestBuilder , int faceDetectMode){
    if (mFaceDetectSupported){
        requestBuilder.set(CaptureRequest.STATISTICS_FACE_DETECT_MODE,faceDetectMode);
    }

}
</code></pre>

<p>Face detection can be done in CameraCaptureSession.CaptureCallback by adding just few lines of code:</p>

<pre><code> private CameraCaptureSession.CaptureCallback mCaptureCallback
        = new CameraCaptureSession.CaptureCallback() {

private void process(CaptureResult result) {
    switch (mState) {
        case STATE_PREVIEW: {
            // We have nothing to do when the camera preview is working normally.
            //But we can for example detect faces 
            Face face[]=result.get(CaptureResult.STATISTICS_FACES);
            if (face.length&gt;0 ){
                Log.d(TAG, ""face detected "" + Integer.toString(face.length));
                takePicture();
            }

            break;
        }
</code></pre>

<p>I tested this change of the code and it works (I capture selfie once my face is detected... You can look into  more options of the Face class here:
<a href=""http://developer.android.com/reference/android/hardware/camera2/params/Face.html"" rel=""noreferrer"">Face</a></p>
",5662760,,1743880,,2016-03-20 14:52:38,2016-03-20 14:52:38,,,,1,,,
Android,36122110,2,,36109777,2016-03-21 2:13:32,2285,,3,,"<p>You can use <a href=""http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits"" rel=""nofollow noreferrer"">APK splits</a> to build smaller versions of your app that target individual device <a href=""https://developer.android.com/ndk/guides/abis.html"" rel=""nofollow noreferrer"">architectures</a>. For an example of this, see the <a href=""https://github.com/googlesamples/android-ndk/blob/f011fd156579d678a4c6d7a7c6534509a5f41c2b/san-angeles/app/build.gradle#L37"" rel=""nofollow noreferrer"">San Angeles demo project</a>.</p>

<p>You can get a further reduction by removing the libpngt.so/libjpgt.so files if your app doesn't need them.</p>

<p>Using ProGuard may help too.</p>
",667810,,667810,,2017-02-02 17:03:28,2017-02-02 17:03:28,,,,4,,,
Android,36152632,2,,36152512,2016-03-22 11:01:16,2286,,2,,"<p><strong>Problem</strong></p>

<pre><code>The location obtained may be null if the last know location could not be found due to various reasons. Read about it in the docs [here][2]
</code></pre>

<p><strong>Reason/How i debugged it</strong></p>

<ol>
<li><p><code>getFromLocation</code> does not throws a nullpointer according to documentation hence the problem is in your location object.</p>

<p><a href=""http://developer.android.com/reference/android/location/Geocoder.html#getFromLocation(double,%20double,%20int)"" rel=""nofollow"">Read here about this method</a></p></li>
</ol>

<p><strong>Remedy</strong></p>

<pre><code>Location location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
</code></pre>

<p>Check if the location obtained in the above step is NOT NULL and then proceed with the geocoder.</p>

<p><strong>Code snippet</strong></p>

<pre><code>...
else if (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
    Location location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
    if(location == null) {
       log.d(""TAG"", ""The location could not be found"");
       return; 
    }
    //else, proceed with geocoding.
    Geocoder geocoder = new Geocoder(this, Locale.getDefault());
</code></pre>

<p><strong>Fetching the location - An example</strong></p>

<p><a href=""http://developer.android.com/training/location/retrieve-current.html"" rel=""nofollow"">Read here</a></p>

<p><strong>Complete code</strong></p>

<p><a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow"">View it here</a></p>
",1270865,,1270865,,2016-03-22 11:53:43,2016-03-22 11:53:43,,,,10,,,
Android,36157334,2,,36156839,2016-03-22 14:36:29,2287,,1,,"<p>From google examples:</p>

<p><a href=""https://github.com/googlesamples/android-AppUsageStatistics"" rel=""nofollow"">https://github.com/googlesamples/android-AppUsageStatistics</a></p>

<pre><code>public List&lt;UsageStats&gt; getUsageStatistics(int intervalType) {
        // Get the app statistics since one year ago from the current time.
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.YEAR, -1);

        List&lt;UsageStats&gt; queryUsageStats = mUsageStatsManager
                .queryUsageStats(intervalType, cal.getTimeInMillis(),
                        System.currentTimeMillis());

        if (queryUsageStats.size() == 0) {
            Log.i(TAG, ""The user may not allow the access to apps usage. "");
            Toast.makeText(getActivity(),
                    getString(R.string.explanation_access_to_appusage_is_not_enabled),
                    Toast.LENGTH_LONG).show();
            mOpenUsageSettingButton.setVisibility(View.VISIBLE);
            mOpenUsageSettingButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));
                }
            });
        }
        return queryUsageStats;
    }
</code></pre>

<p>And them you can use this:</p>

<p><a href=""http://developer.android.com/intl/es/reference/android/app/usage/UsageStats.html#getLastTimeUsed()"" rel=""nofollow"">http://developer.android.com/intl/es/reference/android/app/usage/UsageStats.html#getLastTimeUsed()</a></p>

<pre><code>if( mUsageStats.getPackageName().equals(""YOUR PACKAGE NAME"")){
    mUsageStats.getLastTimeUsed();
}
</code></pre>
",5902927,,5902927,,2016-03-22 14:38:30,2016-03-22 14:38:30,,,,4,,,
Android,36173086,2,,29695720,2016-03-23 8:28:15,2287,,2,,"<p>Began from Android 5.0, you can use <strong><a href=""http://developer.android.com/reference/android/app/KeyguardManager.html#createConfirmDeviceCredentialIntent(java.lang.CharSequence,%20java.lang.CharSequence)"" rel=""nofollow"">KeyguardManager.createConfirmDeviceCredentialIntent()</a></strong></p>

<p>This method will create an Intent, which can be used to start system authentication(pin/pattern/password).</p>

<p>For more information, refer <a href=""http://developer.android.com/about/versions/marshmallow/android-6.0.html#confirm-credential"" rel=""nofollow"">doc</a> and <a href=""https://github.com/googlesamples/android-ConfirmCredential"" rel=""nofollow"">Confirm Credential sample</a>.</p>
",1093344,,,,,2016-03-23 8:28:15,,,,0,,,
Android,36173661,2,,27107033,2016-03-23 8:58:46,2287,,2,,"<p>Began from Android 5.0, you can use <a href=""http://developer.android.com/reference/android/app/KeyguardManager.html#createConfirmDeviceCredentialIntent(java.lang.CharSequence,%20java.lang.CharSequence)"" rel=""nofollow"">KeyguardManager.createConfirmDeviceCredentialIntent()</a></p>

<p>This method will create an Intent, which can be used to start system authentication (pin / pattern / password).</p>

<p>For more information, refer <a href=""http://developer.android.com/about/versions/marshmallow/android-6.0.html#Confirm-credential"" rel=""nofollow"">doc</a> and <a href=""https://github.com/googlesamples/android-ConfirmCredential"" rel=""nofollow"">Confirm Credential sample</a>.</p>
",1093344,,,,,2016-03-23 8:58:46,,,,0,,,
Android,36186335,2,,36184874,2016-03-23 18:46:36,2288,,6,,"<p>You can handle this by maintaining some state between the activity starting and stopping.</p>

<p>See use of the <code>mIsResolving</code> variable in this <a href=""https://github.com/googlesamples/android-credentials/blob/master/credentials-quickstart/app/src/main/java/com/google/example/credentialsbasic/MainActivity.java"" rel=""nofollow"">sample code</a>. Simply save whether there is a pending dialog already when <code>onSaveInstanceState()</code> is called and restore in <code>onCreate()</code>, and guard against calling the API again if so, clearing the state once <code>onActivityResult()</code> is received for the intent.</p>

<pre><code>private void resolveResult(Status status, int requestCode) {
    // We don't want to fire multiple resolutions at once since that can result
    // in stacked dialogs after rotation or another similar event.
    if (mIsResolving) {
        Log.w(TAG, ""resolveResult: already resolving."");
        return;
    }
    if (status.hasResolution()) {
        try {
            status.startResolutionForResult(MainActivity.this, requestCode);
            mIsResolving = true;
...

@Override
protected void onCreate(Bundle savedInstanceState) {
...
    if (savedInstanceState != null) {
        mIsResolving = savedInstanceState.getBoolean(KEY_IS_RESOLVING);
    }
...

@Override
protected void onSaveInstanceState(Bundle outState) {
...
    outState.putBoolean(KEY_IS_RESOLVING, mIsResolving);
...

@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
    switch (requestCode) {
...
            mIsResolving = false;
...
</code></pre>

<p>This is a common pitfall for many apps, so we'll look into whether we can support this state in Play Services layer, but for now, using the boolean for the activity is the current and general recommendation for maintaining resolution state.</p>
",5001016,,5001016,,2016-03-25 1:15:23,2016-03-25 1:15:23,,,,0,,,
Android,36228003,2,,32471255,2016-03-25 21:04:42,2290,,3,,"<p>The above answers work around gradle's prior insufficient NDK integration. This answer illustrates new gradle integration with the NDK.</p>

<p>Take a look at this proposed <a href=""https://github.com/googlesamples/android-ndk/pull/116"" rel=""nofollow noreferrer"">sample</a> written against gradle 2.9 and the android plugin 0.6.0-alpha1. In constrast to how the question is posed, this answer contains a separate project for the library. This functionality can be explored to allow gradle to build that library before it is used by the app project. The other answers rely on the presumption that the library had already been built.</p>

<p>The :secondlib <code>com.android.model.application</code> builds libsecondlib.so (loaded in Java code with System.loadLibrary(""secondlib""). The name 'secondlib' is poorly named. I like to think of it as a .so ""wrapper"" for all other native libraries linked for use by the app.</p>

<p>That shared library is statically linked against firstlib.a as built by the :firstlib <code>com.android.model.native</code>.</p>

<p>The headers are exported from the :firstlib to any dependent projects (:secondlib in this example) as per the <code>exportedHeaders</code> clause. This way dependent projects know how to link against the .so/.a. This replaces the CFlags+=""-I/path/to/headers"" syntax in a prior answer.</p>

<p>:secondlib links against :firstlib statically as per the following clause:</p>

<pre><code>android.sources {
    main {
         jni {
             dependencies {
                 project "":firstlib"" buildType ""debug"" linkage ""static""
             }
         }
         // TODO(proppy): show jniLibs dependencies on .so
    }
}
</code></pre>

<p>As shown by the comment, the example is incomplete. The finishing syntax is shown in the 'NDK Dependencies' section of the <a href=""http://tools.android.com/tech-docs/new-build-system/gradle-experimental"" rel=""nofollow noreferrer"">experimental android plugin documentation</a>. Within that document the syntax for how to statically link instead of dynamically link should be clear.</p>

<p>There are currently some shortcomings (e.g. the buildType of the dependency shown above is by default 'debug' and not the current buildType being built).</p>

<p>EDIT: Here is a work-in-progress sample of the new dependencies syntax in app/build.gradle pulled out of one of my projects:</p>

<pre><code>  android.sources {
    main {
      jni {
        //for exportedHeaders
        dependencies { project "":libfoo"" linkage ""shared"" }
      }
      jniLibs {
        //Where the swig wrapped library .so is. I use swig to create code to interface with libfoo.so within :app
        source { srcDirs 'libs' }
        //for file in $(model.repositories.libs.libfoo)
        dependencies { library ""libfoo"" }
      }
    }
  }

  repositories {
    libs(PrebuiltLibraries) {
      libevdev {
        //headers already available from our libfoo project via exportedHeaders
        //headers.srcDir ""../libfoo/src/main/jni/""
        binaries.withType(SharedLibraryBinary) {
          sharedLibraryFile = file(""../libfoo/build/intermediates/binaries/debug/lib/${targetPlatform.getName()}/libfoo.so"")
        }
      }
    }
  }
</code></pre>
",1185900,,1185900,,2016-11-25 19:46:35,2016-11-25 19:46:35,,,,3,,,
Android,36285719,2,,36283971,2016-03-29 13:27:32,2294,,1,,"<p>You need to modify your build.gradle to specify what C++ library to link to.</p>

<pre><code>android.ndk {
    moduleName = ""hello-jni""
    stl        = ""stlport_static""
}
</code></pre>

<p>See some examples of build.gradle files using the experimental NDK support <a href=""https://github.com/googlesamples/android-ndk/blob/229cbe86238d401bb06166b8dfadec8198532589/hello-thirdparty/app/build.gradle"" rel=""nofollow"">here (hello-thirdparty)</a> and <a href=""https://github.com/googlesamples/android-ndk/blob/0f60ab4b8567a895f80de047f2819fc386e2fd80/endless-tunnel/app/build.gradle"" rel=""nofollow"">here (endless-tunnel)</a>.</p>
",2201317,,,,,2016-03-29 13:27:32,,,,0,,,
Android,36337019,2,,31226658,2016-03-31 14:58:08,2296,,8,,"<p>Google resolve this issue with an example posted on the google-sample github projet.</p>

<p>Create a view that extends the original SwipeRefreshLayout :</p>

<pre><code>/*
 * Copyright 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.swiperefreshmultipleviews;

import android.content.Context;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.SwipeRefreshLayout;
import android.util.AttributeSet;
import android.view.View;
import android.widget.AbsListView;

/**
 * A descendant of {@link android.support.v4.widget.SwipeRefreshLayout} which supports multiple
 * child views triggering a refresh gesture. You set the views which can trigger the gesture via
 * {@link #setSwipeableChildren(int...)}, providing it the child ids.
 */
public class MultiSwipeRefreshLayout extends SwipeRefreshLayout {

    private View[] mSwipeableChildren;

    public MultiSwipeRefreshLayout(Context context) {
        super(context);
    }

    public MultiSwipeRefreshLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    /**
     * Set the children which can trigger a refresh by swiping down when they are visible. These
     * views need to be a descendant of this view.
     */
    public void setSwipeableChildren(final int... ids) {
        assert ids != null;

        // Iterate through the ids and find the Views
        mSwipeableChildren = new View[ids.length];
        for (int i = 0; i &lt; ids.length; i++) {
            mSwipeableChildren[i] = findViewById(ids[i]);
        }
    }

    // BEGIN_INCLUDE(can_child_scroll_up)
    /**
     * This method controls when the swipe-to-refresh gesture is triggered. By returning false here
     * we are signifying that the view is in a state where a refresh gesture can start.
     *
     * &lt;p&gt;As {@link android.support.v4.widget.SwipeRefreshLayout} only supports one direct child by
     * default, we need to manually iterate through our swipeable children to see if any are in a
     * state to trigger the gesture. If so we return false to start the gesture.
     */
    @Override
    public boolean canChildScrollUp() {
        if (mSwipeableChildren != null &amp;&amp; mSwipeableChildren.length &gt; 0) {
            // Iterate through the scrollable children and check if any of them can not scroll up
            for (View view : mSwipeableChildren) {
                if (view != null &amp;&amp; view.isShown() &amp;&amp; !canViewScrollUp(view)) {
                    // If the view is shown, and can not scroll upwards, return false and start the
                    // gesture.
                    return false;
                }
            }
        }
        return true;
    }
    // END_INCLUDE(can_child_scroll_up)

    // BEGIN_INCLUDE(can_view_scroll_up)
    /**
     * Utility method to check whether a {@link View} can scroll up from it's current position.
     * Handles platform version differences, providing backwards compatible functionality where
     * needed.
     */
    private static boolean canViewScrollUp(View view) {
        if (android.os.Build.VERSION.SDK_INT &gt;= 14) {
            // For ICS and above we can call canScrollVertically() to determine this
            return ViewCompat.canScrollVertically(view, -1);
        } else {
            if (view instanceof AbsListView) {
                // Pre-ICS we need to manually check the first visible item and the child view's top
                // value
                final AbsListView listView = (AbsListView) view;
                return listView.getChildCount() &gt; 0 &amp;&amp;
                        (listView.getFirstVisiblePosition() &gt; 0
                                || listView.getChildAt(0).getTop() &lt; listView.getPaddingTop());
            } else {
                // For all other view types we just check the getScrollY() value
                return view.getScrollY() &gt; 0;
            }
        }
    }
    // END_INCLUDE(can_view_scroll_up)
}
</code></pre>

<p>Use this view in your xml layout :</p>

<pre><code>&lt;com.example.android.swiperefreshmultipleviews.MultiSwipeRefreshLayout
      xmlns:android=""http://schemas.android.com/apk/res/android""
      android:id=""@+id/swiperefresh""
      android:layout_width=""match_parent""
      android:layout_height=""match_parent""&gt;

    &lt;!-- your code --&gt;

&lt;/com.example.android.swiperefreshmultipleviews.MultiSwipeRefreshLayout&gt;
</code></pre>

<p>And in your activity or fragment, you can use this component with :</p>

<pre><code>mSwipeRefreshLayout = (MultiSwipeRefreshLayout) view.findViewById(R.id.swiperefresh);
mSwipeRefreshLayout.setSwipeableChildren(android.R.id.list, android.R.id.empty);
</code></pre>

<p>android.R.id.list and android.R.id.empty is the ids for your list or recycler view. The view work perfectly with two list with same ids.</p>

<p>You can see real example at the <a href=""https://github.com/googlesamples/android-SwipeRefreshMultipleViews"" rel=""noreferrer"">google-sample github project</a>.</p>
",3095612,,,,,2016-03-31 14:58:08,,,,0,,,
Android,36338233,2,,36311874,2016-03-31 15:56:34,2296,,1,,"<p>Im working with BLE A&amp;D , to obatin the iformation i use:</p>

<blockquote>
  <p>To find UUID</p>
</blockquote>

<pre><code>  @SuppressLint(""NewApi"")
private void displayGattServicesService(List&lt;BluetoothGattService&gt; gattServices) {
    //  salida.append(""Buscando servicio"");
    if (gattServices == null)
        return;
    for (BluetoothGattService gattService : gattServices) {

        String uuid = gattService.getUuid().toString();

        List&lt;BluetoothGattCharacteristic&gt; gattCharacteristics = gattService
                .getCharacteristics();
        if (uuid.equals(""00001810-0000-1000-8000-00805f9b34fb"")) {
            //  salida.append(""Ecnontro"");
            for (BluetoothGattCharacteristic gattCharacteristic : gattCharacteristics) {
                String uuid1 = gattCharacteristic.getUuid().toString();
                if (uuid1.equals(""00002a35-0000-1000-8000-00805f9b34fb"")) {
                    //     salida.append(""Envio caracterisitca"");
                    mensaje(getResources().getString(R.string.Espere_res));
                    mBluetoothLeService.setCharacteristicNotification(
                            gattCharacteristic, true);
                }
            }
        }
    }
}
</code></pre>

<blockquote>
  <p>To set UUID</p>
</blockquote>

<pre><code>BluetoothLeService.ACTION_GATT_SERVICES_DISCOVERED.equals(action)) {

            // Show all the supported services and characteristics on the user interface.
            displayGattServicesService(mBluetoothLeService.getSupportedGattServices());
</code></pre>

<blockquote>
  <p>Use BleGatt Example <a href=""https://github.com/googlesamples/android-BluetoothLeGatt"" rel=""nofollow"">https://github.com/googlesamples/android-BluetoothLeGatt</a></p>
</blockquote>
",5248230,,,,,2016-03-31 15:56:34,,,,0,,,
Android,36368806,2,,36365391,2016-04-02 3:24:31,2297,,1,,"<p>You will need the static imports.</p>

<p>The official Google sample code uses static imports. Static imports are standard practice for fluent APIs.</p>

<p><a href=""https://github.com/googlesamples/android-testing-templates/blob/master/AndroidTestingBlueprint/app/src/androidTest/java/com/example/android/testing/blueprint/ui/espresso/EspressoTest.java"" rel=""nofollow"">Sample Espresso Test</a></p>
",1686989,,,,,2016-04-02 3:24:31,,,,0,,,
Android,36401156,2,,36396391,2016-04-04 11:18:38,2299,,1,,"<p>I tried your source code, It is working Fine.</p>

<p>You can also refer Source :   </p>

<p><a href=""http://developer.android.com/training/location/receive-location-updates.html#updates"" rel=""nofollow"">Location - developer.android.com</a></p>

<p><a href=""http://developer.android.com/training/location/receive-location-updates.html#updates"" rel=""nofollow"">LocationUpdates - developer.android.com</a></p>

<p><a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationUpdates/app/src/main/java/com/google/android/gms/location/sample/locationupdates/MainActivity.java"" rel=""nofollow"">Sample of location update from developer.android.com</a></p>

<p><a href=""https://github.com/googlesamples/android-play-location/blob/master/BasicLocationSample/app/src/main/java/com/google/android/gms/location/sample/basiclocationsample/MainActivity.java"" rel=""nofollow"">BasicLocationSample from developer.android.com</a></p>
",5993438,,5993438,,2016-04-04 11:27:43,2016-04-04 11:27:43,,,,0,,,
Android,36496055,2,,36495011,2016-04-08 9:25:22,2303,,2,,"<p>@komal It always take time to get the Location , depending upon the provider and the place . GPS take signal from min 3 satellite and do   uses trilateration  , so depending upon the signal strength and ur location it could take time . Even Google Map app take upto 10 sec to get Lat/Lng sometime. You should use <a href=""http://developer.android.com/training/location/receive-location-updates.html"" rel=""nofollow"">FusedLocationProvider</a> from Google Play services  </p>

<p>Try this demo <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates"" rel=""nofollow"">https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates</a></p>
",907664,,,,,2016-04-08 9:25:22,,,,2,,,
Android,36542843,2,,36444252,2016-04-11 7:52:41,2306,,3,,"<p>Based on this sample <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">android-Camera2Basic</a></p>

<p>I've applied some change and this is result:</p>

<p><strong>Camera2BasicFragmentFront.java</strong> </p>

<p><a href=""http://pastebin.com/Krsgyd6L"" rel=""nofollow"">Source</a></p>

<p><strong>Camera2BasicFragment.java</strong></p>

<p><a href=""http://pastebin.com/Q8LMeCQR"" rel=""nofollow"">Source</a></p>

<p><strong>AutoFitTextureView.java</strong></p>

<p><a href=""http://pastebin.com/38j7vzqb"" rel=""nofollow"">Source</a></p>

<p><strong>fragment_camera2_basic.xml</strong> (Make sure to replace com.YourPackage.AutoFitTextureView)</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;&lt;!--
 Copyright 2014 The Android Open Source Project
 Licensed under the Apache License, Version 2.0 (the ""License"");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an ""AS IS"" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;

    &lt;com.YourPackage.AutoFitTextureView
        android:id=""@+id/texture""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentStart=""true""
        android:layout_alignParentTop=""true"" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p><strong>activity_main.xml</strong></p>

<pre><code>&lt;RelativeLayout android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
&lt;FrameLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/container""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"" &gt;
&lt;/FrameLayout&gt;
&lt;FrameLayout
android:id=""@+id/containerFront""
android:layout_width=""200dp""
android:layout_height=""200dp"" /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>Than in MainActivity.java:</p>

<pre><code>public class MainActivity extends AppCompatActivity{
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        if (null == savedInstanceState) {
            getFragmentManager().beginTransaction()
                    .replace(R.id.container, Camera2BasicFragment.newInstance())
                    .commit();
            getFragmentManager().beginTransaction()
                    .replace(R.id.containerFront, Camera2BasicFragmentFront.newInstance())
                    .commit();
        }
    }
}
</code></pre>

<p>And use this permission to <strong>Manifest.xml</strong></p>

<pre><code>&lt;uses-permission android:name=""android.permission.CAMERA"" /&gt;
&lt;uses-feature android:name=""android.hardware.camera"" /&gt;
&lt;uses-feature android:name=""android.hardware.camera.autofocus"" /&gt;
</code></pre>

<p>That's all enjoy!</p>

<p>P.S
Java classes also contain method to save photo!</p>
",4529790,,,,,2016-04-11 7:52:41,,,,2,,,
Android,36652360,2,,36567079,2016-04-15 16:26:58,2311,,1,,"<p>I took reference from third party google sample <a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-thirdparty"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master/hello-thirdparty</a> which is basically for <strong>static lib(.a)</strong> and this is how I resolved my problem with gradle experimental plugin: </p>

<p>My build.gradle file:</p>

<pre><code>apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = ""23.0.2""

        defaultConfig.with {
            applicationId = ""com.example.spartan.hello""
            minSdkVersion.apiLevel = 18
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = ""1.0""
        }
    }
    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-android.txt'))
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            libavcodec {
                headers.srcDir ""/home/spartan/AndroidStudioProjects/Hello/app/src/main/jni/include""
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file(""/home/spartan/AndroidStudioProjects/Hello/app/src/main/jniLibs/${targetPlatform.getName()}/libavcodec-57.so"")
                }
            }                

        }
    }

    android.ndk {
        moduleName = ""tutorial01""

        def jniPath = ""/home/spartan/AndroidStudioProjects/Hello/app/src/main/jniLibs""
        cppFlags.add(""-I${file(jniPath)}"".toString())
        file(jniPath).eachDirRecurse { dir -&gt;
            cppFlags.add(""-I${file(dir)}"".toString())
        }
        ldLibs.addAll([""log"", ""android"",""jnigraphics""])
        stl = ""gnustl_shared""
    }


    android.sources {
        main {
            jni {
                dependencies {
                    library ""libavcodec"" linkage ""shared""
                }
            }
        }
    }

    android.productFlavors {
        create (""armv7"") {
            ndk.abiFilters.add(""armeabi-v7a"")
        }
    }

    android.sources {
        main {
            jni {
                source {
                    srcDirs = ['src/main/none']
                }

            }

        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
}
</code></pre>

<p>In my case I copied <strong>.so</strong> in <strong>jniLibs</strong> and include folder of <strong>.h</strong> files in <strong>jni</strong> folder and there is no need to add -l in android.ndk because I already added in <strong>headers.srcDir</strong>(I just added here to mention).</p>

<p>So here I competently replaced my <strong>Android.mk</strong> with  <strong>repositories</strong> and its really simple.</p>
",3863689,,,,,2016-04-15 16:26:58,,,,0,,,
Android,36726368,2,,36698770,2016-04-19 18:16:42,2315,,17,,"<p>Seems that your jenkins user can't see android adb therefore build fails. Add adb to the system path or point it's exact location.</p>

<p>As to running specific tests via gradle command below is an example:</p>

<p><code>./gradlew app:connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.example.android.testing.blueprint.ui.espresso.EspressoTest#testMethodName</code></p>

<p>Taken from <a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""noreferrer"">here</a> with my slight modification. Your <code>connectedAndroidtest</code> command can vary depending on the test flavour existence.</p>
",2980933,,2980933,,2016-04-20 15:26:29,2016-04-20 15:26:29,,,,10,,,
Android,36747600,2,,36652675,2016-04-20 14:52:30,2316,,5,,"<h2>When this error happens and why?</h2>

<p><strong>Ans:</strong> When loading Android keys and storing public key from Keystore, this error may happen if the state is locked or uninitialized.</p>

<h2>Error generating portion code is given below:</h2>

<pre><code>@NonNull
    public static AndroidKeyStorePublicKey loadAndroidKeyStorePublicKeyFromKeystore(
            @NonNull KeyStore keyStore, @NonNull String privateKeyAlias)
            throws UnrecoverableKeyException {
        KeyCharacteristics keyCharacteristics = new KeyCharacteristics();
        int errorCode = keyStore.getKeyCharacteristics(privateKeyAlias, null,
                null, keyCharacteristics);
        if (errorCode != KeyStore.NO_ERROR) {
            throw (UnrecoverableKeyException) new UnrecoverableKeyException(
                    ""Failed to obtain information about private key"")
                    .initCause(KeyStore.getKeyStoreException(errorCode)); // this exception is generated
        }
        ......
        ......
        ......
    }
</code></pre>

<p>KeyStore has 10 response code. They are</p>

<pre><code>// ResponseCodes
NO_ERROR = 1;
LOCKED = 2;
UNINITIALIZED = 3;
SYSTEM_ERROR = 4;
PROTOCOL_ERROR = 5;
PERMISSION_DENIED = 6;
KEY_NOT_FOUND = 7;
VALUE_CORRUPTED = 8;
UNDEFINED_ACTION = 9;
WRONG_PASSWORD = 10;
</code></pre>

<blockquote>
  <p>KeyStore has 3 states. They are UNLOCKED, LOCKED, UNINITIALIZED</p>
  
  <p>NO_ERROR is only happened when the state is UNLOCKED. For your
  upgrading case the state is LOCKED or UNINITIALIZED for first time, so
  the error is happened only once.</p>
</blockquote>

<h2>State Checking code is given below:</h2>

<pre><code>public State state() {
    execute('t');
    switch (mError) {
    case NO_ERROR:
        return State.UNLOCKED;
    case LOCKED:
        return State.LOCKED;
    case UNINITIALIZED:
        return State.UNINITIALIZED;
    default:
        throw new AssertionError(mError);
    }
}
</code></pre>

<p>Resource Link:</p>

<ol>
<li><a href=""https://android.googlesource.com/platform/frameworks/base/+/android-6.0.0_r25/keystore/java/android/security/keystore/AndroidKeyStoreProvider.java"" rel=""nofollow noreferrer"">AndroidKeyStoreProvider java class</a> </li>
<li><a href=""https://github.com/nelenkov/android-keystore/blob/master/src/org/nick/androidkeystore/android/security/KeyStore.java"" rel=""nofollow noreferrer"">KeyStore java class</a></li>
</ol>

<hr>

<h2>UPDATE:</h2>

<p>From your error log, it is now clear that</p>

<pre><code>W/System.err﹕ Caused by: android.security.KeyStoreException: Invalid key blob
</code></pre>

<p>this is the main issue which is caused when user tries to UNLOCK from LOCK/UNINITIALIZED. It is by default defined as 30 secs for timing. <strong>This problem is it's API related implementation issue.</strong></p>

<pre><code>/**
 * If the user has unlocked the device Within the last this number of seconds,
 * it can be considered as an authenticator.
 */
private static final int AUTHENTICATION_DURATION_SECONDS = 30;
</code></pre>

<p>For encryption/decryption some data with the generated key only works if the user has just authenticated via device credentials. The error occurs from</p>

<pre><code>// Try encrypting something, it will only work if the user authenticated within
// the last AUTHENTICATION_DURATION_SECONDS seconds.
cipher.init(Cipher.ENCRYPT_MODE, secretKey); // error is generated from here.
</code></pre>

<p>Actual error is thrown from here. Your error is generated from <code>InvalidKeyException</code>.</p>

<h2>Solution:</h2>

<p>You have to remove the <code>InvalidKeyException</code> class from the catch argument. This will still allow you to check for <code>InvalidKeyException</code>. After checking you have to try for second time with code so that the problem is not shown in eye but doing 2 times checking it may solve your issue. I have not tested the code but should be like below:</p>

<pre><code>try {
....
KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) this.keyStore.getEntry(""alias"", null);
....
} catch (final Exception e) {
    e.printStackTrace();
    if (e instanceof InvalidKeyException) { // bypass InvalidKeyException
        .......
        // You can again call the method and make a counter for deadlock situation or implement your own code according to your situation
        if (retry) {
            keyStore.deleteEntry(keyName);
            return getCypher(keyName, false);
        } else {
            throw e;
        }
    }
}
</code></pre>

<h2>Resource Link:</h2>

<ol>
<li><a href=""https://github.com/googlesamples/android-ConfirmCredential/blob/master/Application/src/main/java/com/example/android/confirmcredential/MainActivity.java#L128"" rel=""nofollow noreferrer"">MainActivity.java</a> </li>
<li><a href=""https://stackoverflow.com/questions/36488219/android-security-keystoreexception-invalid-key-blob"">android.security.KeyStoreException: Invalid key blob</a></li>
</ol>
",2293534,,-1,,2017-05-23 12:26:00,2016-04-24 17:31:46,,,,12,,,
Android,36780820,2,,36774586,2016-04-21 21:29:13,2317,,7,,"<p>You have to stub all external intents to be able to proceed with your test cases. Put this peace of code in your test class:</p>

<pre><code>@Before
public void stubAllExternalIntents() {
    // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before
    // every test run. In this case all external Intents will be blocked.
    intending(not(isInternal())).respondWith(new ActivityResult(Activity.RESULT_OK, null));
}
</code></pre>

<p>More here - <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java"" rel=""noreferrer"">IntentsBasicSample</a>.</p>
",2980933,,,,,2016-04-21 21:29:13,,,,3,,,
Android,36809263,2,,36808622,2016-04-23 9:57:04,2318,,5,,"<p>Forget all you've read or done. Use Google's <a href=""https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi"" rel=""noreferrer"">FusedLocationProviderApi</a>.</p>

<p>It is the simplest way to listen for location updates.</p>

<p>You don't have to deal with which location provider(network, gps etc) is enabled. You only need the location updates, so get them easily with <code>FusedLocationProviderApi</code></p>

<p>It is described <a href=""http://developer.android.com/training/location/receive-location-updates.html"" rel=""noreferrer"">here</a>. You can implement it into your app with few lines and in few minutes. </p>

<p><a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates"" rel=""noreferrer"">Here</a> is the sample.</p>

<p><strong>Note:</strong> You'll need below dependency:</p>

<pre><code>compile 'com.google.android.gms:play-services:8.1.0'
</code></pre>
",1460509,,,,,2016-04-23 9:57:04,,,,0,,,
Android,36822181,2,,36820668,2016-04-24 10:55:36,2319,,7,,"<p>Unfortunately you can't request the <code>PACKAGE_USAGE_STATS</code> at runtime like you do with a dangerous permission. The user need to manually grant the permission through the Settings application as explained in the <code>UsageStatsManager</code> <a href=""http://developer.android.com/reference/android/app/usage/UsageStatsManager.html"" rel=""noreferrer"">documentation</a>:</p>

<blockquote>
  <p>This API requires the permission
  android.permission.PACKAGE_USAGE_STATS, which is a system-level
  permission and will not be granted to third-party apps. However,
  declaring the permission implies intention to use the API and the user
  of the device can grant permission through the Settings application.</p>
</blockquote>

<p>You can directly open the <code>Apps with usage access</code> activity with this code:</p>

<pre><code>startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));
</code></pre>

<p><a href=""https://github.com/googlesamples/android-AppUsageStatistics"" rel=""noreferrer"">Here</a> you can find an example of a basic app that shows how to use App usage statistics API.</p>
",2837959,,,,,2016-04-24 10:55:36,,,,1,,,
Android,36844647,2,,36841521,2016-04-25 15:17:42,2321,,1,,"<p>Your build.gradle disables the built-in call to ndk-build here:</p>

<pre><code>jni.srcDirs = []
</code></pre>

<p>Are you sure the library is actually being built? If you do not see HelloJNI.so under the 'jniLibs' or 'libs' directory, you are not actually building any native code.</p>

<p>You don't really need the Android.mk file for a project this simple, but if you want to go this route ph0b has a <a href=""http://ph0b.com/android-studio-gradle-and-ndk-integration/"" rel=""nofollow"">great tutorial</a> on using Android.mk with gradle. You would need to add a call to ndk-build from your build.gradle with something like this snippet from ph0b's tutorial:</p>

<pre><code>// call regular ndk-build(.cmd) script from app directory
task ndkBuild(type: Exec) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'ndk-build.cmd', '-C', file('src/main').absolutePath
    } else {
        commandLine 'ndk-build', '-C', file('src/main').absolutePath
    }
}
</code></pre>

<p>If you choose to go with the experimental gradle support, the <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow"">NDK samples</a> document how to build and use native code with build.gradle. The <a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-jni/app/build.gradle"" rel=""nofollow"">build.gradle file from hello-jni</a> is a good place to start.</p>
",2201317,,,,,2016-04-25 15:17:42,,,,1,,,
Android,36915009,2,,36912209,2016-04-28 12:40:37,2324,,33,,"<p>Yes it's an anti-mvp-pattern. Based on <a href=""http://martinfowler.com/eaaDev/PassiveScreen.html"" rel=""noreferrer"">passive view</a> in MVP, you lost your testability, because you don't have to deal with the android framework in your presenter.</p>

<p>So it's better to manage the navigation of the app from the View Layer.</p>

<pre><code>class MyPresenter {
    MyPresenter.View view;

    void backButtonClicked() {
        view.navigateToHomeScreen();
    }

    public interface View {
        void navigateToHomeScreen();
    }
}

class MyActivity extends Activity implements MyPresenter.View {
    @Override
    void navigateToHomeScreen() {
        startActivity(...)
    }

    @OnClick(R.id.my_button)
    void onClick() {
        presenter.backButtonClicked();
    }
} 
</code></pre>

<p>Also another advantage of this way is that it will be easy to replace activity with a fragment or a view.</p>

<p><strong>Edit 1:</strong></p>

<p><a href=""https://stackoverflow.com/a/41300286/3682067"">Morgwai</a> said this way will break separation of concern and single responsibility, but you cannot have single responsibility every where. Sometime you need to violate it. Here is an example from Google for MVP:</p>

<p><a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvp/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/taskdetail/TaskDetailPresenter.java#L96"" rel=""noreferrer""><code>TaskDetailPresenter</code></a> calls <a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvp/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/taskdetail/TaskDetailFragment.java#L164"" rel=""noreferrer""><code>ShowEditTask</code></a> which is responsible to open a new <code>Activity</code> inside <code>TaskDetailFragment</code>.</p>

<p>But also you can use <a href=""https://en.wikipedia.org/wiki/Command_pattern"" rel=""noreferrer"">CommandPattern</a> which is a better approach</p>

<pre><code>interface NavigationCommand {
    void navigate();
}
</code></pre>

<p>So, Presenter will use it when it needs.</p>
",3682067,,-1,,2017-05-23 12:26:21,2016-12-23 11:24:54,,,,3,,,
Android,37007997,2,,36999647,2016-05-03 15:15:35,2329,,44,,"<p>You need to customize your adapter. I had implemented this functionality in my project. You can follow this. </p>

<blockquote>
  <p>activity_search.xml</p>
</blockquote>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/parent""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:background=""@color/white""&gt;

    &lt;RelativeLayout
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        &gt;
        &lt;LinearLayout
            android:id=""@+id/search_layout""
            android:layout_width=""match_parent""
            android:layout_height=""50dp""
            android:gravity=""center_vertical""
            android:layout_alignParentTop=""true""
            android:background=""@drawable/searchbar_bg""
            android:layout_marginLeft=""@dimen/activity_margin_10""
            android:layout_marginRight=""@dimen/activity_margin_10""
            android:layout_marginTop=""@dimen/activity_margin_10""
            android:orientation=""vertical""&gt;

                &lt;RelativeLayout
                    android:layout_width=""match_parent""
                    android:layout_height=""match_parent""&gt;
                    &lt;EditText
                        android:id=""@+id/search_et""
                        android:layout_width=""match_parent""
                        android:layout_height=""match_parent""
                        android:hint=""Search""
                        android:singleLine=""true""
                        android:layout_toLeftOf=""@+id/clear""
                        android:imeOptions=""actionSearch""
                        android:background=""@null""
                        android:drawableLeft=""@drawable/ic_action_search""
                        android:drawablePadding=""@dimen/activity_margin_10""
                        android:paddingLeft=""@dimen/activity_margin_10""
                        android:paddingRight=""@dimen/activity_margin_10""/&gt;
                    &lt;ImageView
                        android:id=""@+id/clear""
                        android:layout_width=""wrap_content""
                        android:layout_height=""wrap_content""
                        android:src=""@drawable/ic_clear""
                        android:layout_alignParentRight=""true""
                        android:layout_gravity=""right|center_vertical""
                        android:padding=""@dimen/activity_margin_16""
                        android:visibility=""gone""/&gt;
                &lt;/RelativeLayout&gt;


        &lt;/LinearLayout&gt;


        &lt;android.support.v7.widget.RecyclerView
            android:id=""@+id/list_search""
            android:layout_width=""match_parent""
            android:layout_height=""match_parent""
            android:layout_below=""@+id/search_layout""
            android:layout_above=""@+id/powered_by_google""
            android:background=""@color/white""
            android:layout_marginTop=""@dimen/activity_margin_10""/&gt;

        &lt;ImageView
            android:id=""@+id/powered_by_google""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_centerHorizontal=""true""
            android:layout_alignParentBottom=""true""
            android:padding=""@dimen/activity_margin_10""
            android:layout_marginBottom=""@dimen/activity_margin_10""
            android:src=""@drawable/powered_by_google_light""/&gt;
    &lt;/RelativeLayout&gt;
&lt;/LinearLayout&gt;
</code></pre>

<blockquote>
  <p>SearchActivity.java</p>
</blockquote>

<pre><code>package com.android.dezi.views.rider.Activities;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.android.dezi.BaseActivity;
import com.android.dezi.R;
import com.android.dezi.adapters.PlaceAutocompleteAdapter;
import com.android.dezi.adapters.PlaceAutocompleteAdapter.PlaceAutoCompleteInterface;
import com.android.dezi.adapters.PlaceSavedAdapter;
import com.android.dezi.adapters.PlaceSavedAdapter.SavedPlaceListener;
import com.android.dezi.beans.SavedAddress;
import com.android.dezi.views.rider.Fragments.SearchFragment;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.location.places.Place;
import com.google.android.gms.location.places.PlaceBuffer;
import com.google.android.gms.location.places.Places;
import com.google.android.gms.location.places.ui.PlaceAutocomplete;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by anuj.sharma on 4/6/2016.
 */
public class SearchActivity extends BaseActivity implements PlaceAutoCompleteInterface, GoogleApiClient.OnConnectionFailedListener,
        GoogleApiClient.ConnectionCallbacks,OnClickListener,SavedPlaceListener {
    Context mContext;
    GoogleApiClient mGoogleApiClient;

    LinearLayout mParent;
    private RecyclerView mRecyclerView;
    LinearLayoutManager llm;
    PlaceAutocompleteAdapter mAdapter;
    List&lt;SavedAddress&gt; mSavedAddressList;
    PlaceSavedAdapter mSavedAdapter;
    private static final LatLngBounds BOUNDS_INDIA = new LatLngBounds(
            new LatLng(-0, 0), new LatLng(0, 0));

    EditText mSearchEdittext;
    ImageView mClear;

    @Override
    public void onStart() {
        mGoogleApiClient.connect();
        super.onStart();

    }

    @Override
    public void onStop() {
        mGoogleApiClient.disconnect();
        super.onStop();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_search);
        mContext = SearchActivity.this;

        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this, 0 /* clientId */, this)
                .addApi(Places.GEO_DATA_API)
                .build();

        initViews();
    }

    /*
   Initialize Views
    */
    private void initViews(){
        mRecyclerView = (RecyclerView)findViewById(R.id.list_search);
        mRecyclerView.setHasFixedSize(true);
        llm = new LinearLayoutManager(mContext);
        mRecyclerView.setLayoutManager(llm);

        mSearchEdittext = (EditText)findViewById(R.id.search_et);
        mClear = (ImageView)findViewById(R.id.clear);
        mClear.setOnClickListener(this);

        mAdapter = new PlaceAutocompleteAdapter(this, R.layout.view_placesearch,
                mGoogleApiClient, BOUNDS_INDIA, null);
        mRecyclerView.setAdapter(mAdapter);

        mSearchEdittext.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (count &gt; 0) {
                    mClear.setVisibility(View.VISIBLE);
                    if (mAdapter != null) {
                        mRecyclerView.setAdapter(mAdapter);
                    }
                } else {
                    mClear.setVisibility(View.GONE);
                    if (mSavedAdapter != null &amp;&amp; mSavedAddressList.size() &gt; 0) {
                        mRecyclerView.setAdapter(mSavedAdapter);
                    }
                }
                if (!s.toString().equals("""") &amp;&amp; mGoogleApiClient.isConnected()) {
                    mAdapter.getFilter().filter(s.toString());
                } else if (!mGoogleApiClient.isConnected()) {
//                    Toast.makeText(getApplicationContext(), Constants.API_NOT_CONNECTED, Toast.LENGTH_SHORT).show();
                    Log.e("""", ""NOT CONNECTED"");
                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

    }

    @Override
    public void onClick(View v) {
        if(v == mClear){
            mSearchEdittext.setText("""");
            if(mAdapter!=null){
                mAdapter.clearList();
            }

        }
    }



    @Override
    public void onConnected(Bundle bundle) {

    }

    @Override
    public void onConnectionSuspended(int i) {

    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {

    }

    @Override
    public void onPlaceClick(ArrayList&lt;PlaceAutocompleteAdapter.PlaceAutocomplete&gt; mResultList, int position) {
        if(mResultList!=null){
            try {
                final String placeId = String.valueOf(mResultList.get(position).placeId);
                        /*
                             Issue a request to the Places Geo Data API to retrieve a Place object with additional details about the place.
                         */

                PendingResult&lt;PlaceBuffer&gt; placeResult = Places.GeoDataApi
                        .getPlaceById(mGoogleApiClient, placeId);
                placeResult.setResultCallback(new ResultCallback&lt;PlaceBuffer&gt;() {
                    @Override
                    public void onResult(PlaceBuffer places) {
                        if(places.getCount()==1){
                            //Do the things here on Click.....
                            Intent data = new Intent();
                            data.putExtra(""lat"",String.valueOf(places.get(0).getLatLng().latitude));
                            data.putExtra(""lng"", String.valueOf(places.get(0).getLatLng().longitude));
                            setResult(SearchActivity.RESULT_OK, data);
                            finish();
                        }else {
                            Toast.makeText(getApplicationContext(),""something went wrong"",Toast.LENGTH_SHORT).show();
                        }
                    }
                });
            }
            catch (Exception e){

            }

        }
    }

    @Override
    public void onSavedPlaceClick(List&lt;SavedAddress&gt; mResponse, int position) {
        if(mResponse!=null){
            try {
                Intent data = new Intent();
                data.putExtra(""lat"",String.valueOf(mResponse.get(position).getLatitude()));
                data.putExtra(""lng"", String.valueOf(mResponse.get(position).getLongitude()));
                setResult(SearchActivity.RESULT_OK, data);
                finish();
            }
            catch (Exception e){

            }

        }
    }
}
</code></pre>

<blockquote>
  <p>PlaceAutocompleteAdapter.java</p>
</blockquote>

<p>This is customized adapter. All important part is inside this.</p>

<pre><code>package com.android.dezi.adapters;

import android.content.Context;
import android.graphics.Typeface;
import android.support.v7.widget.RecyclerView;
import android.text.style.CharacterStyle;
import android.text.style.StyleSpan;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.dezi.R;
import com.android.dezi.beans.TripHistoryBean;
import com.android.dezi.views.rider.Fragments.SearchFragment;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.data.DataBufferUtils;
import com.google.android.gms.location.places.AutocompleteFilter;
import com.google.android.gms.location.places.AutocompletePrediction;
import com.google.android.gms.location.places.AutocompletePredictionBuffer;
import com.google.android.gms.location.places.Places;
import com.google.android.gms.maps.model.LatLngBounds;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Created by anuj.sharma on 4/6/2016.
 */
public class PlaceAutocompleteAdapter extends RecyclerView.Adapter&lt;PlaceAutocompleteAdapter.PlaceViewHolder&gt; implements Filterable{

    public interface PlaceAutoCompleteInterface{
        public void onPlaceClick(ArrayList&lt;PlaceAutocomplete&gt; mResultList, int position);
    }

    Context mContext;
    PlaceAutoCompleteInterface mListener;
    private static final String TAG = ""PlaceAutocompleteAdapter"";
    private static final CharacterStyle STYLE_BOLD = new StyleSpan(Typeface.BOLD);
    ArrayList&lt;PlaceAutocomplete&gt; mResultList;

    private GoogleApiClient mGoogleApiClient;

    private LatLngBounds mBounds;

    private int layout;

    private AutocompleteFilter mPlaceFilter;


    public PlaceAutocompleteAdapter(Context context, int resource, GoogleApiClient googleApiClient,
                                    LatLngBounds bounds, AutocompleteFilter filter){
        this.mContext = context;
        layout = resource;
        mGoogleApiClient = googleApiClient;
        mBounds = bounds;
        mPlaceFilter = filter;
        this.mListener = (PlaceAutoCompleteInterface)mContext;
    }

    /*
    Clear List items
     */
    public void clearList(){
        if(mResultList!=null &amp;&amp; mResultList.size()&gt;0){
            mResultList.clear();
        }
    }


    /**
     * Sets the bounds for all subsequent queries.
     */
    public void setBounds(LatLngBounds bounds) {
        mBounds = bounds;
    }

    @Override
    public Filter getFilter() {
        Filter filter = new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults results = new FilterResults();
                // Skip the autocomplete query if no constraints are given.
                if (constraint != null) {
                    // Query the autocomplete API for the (constraint) search string.
                    mResultList = getAutocomplete(constraint);
                    if (mResultList != null) {
                        // The API successfully returned results.
                        results.values = mResultList;
                        results.count = mResultList.size();
                    }
                }
                return results;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                if (results != null &amp;&amp; results.count &gt; 0) {
                    // The API returned at least one result, update the data.
                    notifyDataSetChanged();
                } else {
                    // The API did not return any results, invalidate the data set.
                    //notifyDataSetInvalidated();
                }
            }
        };
        return filter;
    }

    private ArrayList&lt;PlaceAutocomplete&gt; getAutocomplete(CharSequence constraint) {
        if (mGoogleApiClient.isConnected()) {
            Log.i("""", ""Starting autocomplete query for: "" + constraint);

            // Submit the query to the autocomplete API and retrieve a PendingResult that will
            // contain the results when the query completes.
            PendingResult&lt;AutocompletePredictionBuffer&gt; results =
                    Places.GeoDataApi
                            .getAutocompletePredictions(mGoogleApiClient, constraint.toString(),
                                    mBounds, mPlaceFilter);

            // This method should have been called off the main UI thread. Block and wait for at most 60s
            // for a result from the API.
            AutocompletePredictionBuffer autocompletePredictions = results
                    .await(60, TimeUnit.SECONDS);

            // Confirm that the query completed successfully, otherwise return null
            final Status status = autocompletePredictions.getStatus();
            if (!status.isSuccess()) {
//                Toast.makeText(mContext, ""Error contacting API: "" + status.toString(),
//                        Toast.LENGTH_SHORT).show();
                Log.e("""", ""Error getting autocomplete prediction API call: "" + status.toString());
                autocompletePredictions.release();
                return null;
            }

            Log.i("""", ""Query completed. Received "" + autocompletePredictions.getCount()
                    + "" predictions."");

            // Copy the results into our own data structure, because we can't hold onto the buffer.
            // AutocompletePrediction objects encapsulate the API response (place ID and description).

            Iterator&lt;AutocompletePrediction&gt; iterator = autocompletePredictions.iterator();
            ArrayList resultList = new ArrayList&lt;&gt;(autocompletePredictions.getCount());
            while (iterator.hasNext()) {
                AutocompletePrediction prediction = iterator.next();
                // Get the details of this prediction and copy it into a new PlaceAutocomplete object.
                resultList.add(new PlaceAutocomplete(prediction.getPlaceId(),
                        prediction.getDescription()));
            }

            // Release the buffer now that all data has been copied.
            autocompletePredictions.release();

            return resultList;
        }
        Log.e("""", ""Google API client is not connected for autocomplete query."");
        return null;
    }

    @Override
    public PlaceViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
        LayoutInflater layoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View convertView = layoutInflater.inflate(layout, viewGroup, false);
        PlaceViewHolder mPredictionHolder = new PlaceViewHolder(convertView);
        return mPredictionHolder;
    }


    @Override
    public void onBindViewHolder(PlaceViewHolder mPredictionHolder, final int i) {
        mPredictionHolder.mAddress.setText(mResultList.get(i).description);

        mPredictionHolder.mParentLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mListener.onPlaceClick(mResultList,i);
            }
        });

    }

    @Override
    public int getItemCount() {
        if(mResultList != null)
            return mResultList.size();
        else
            return 0;
    }

    public PlaceAutocomplete getItem(int position) {
        return mResultList.get(position);
    }

    /*
    View Holder For Trip History
     */
    public class PlaceViewHolder extends RecyclerView.ViewHolder {
        //        CardView mCardView;
        public RelativeLayout mParentLayout;
        public TextView mAddress;

        public PlaceViewHolder(View itemView) {
            super(itemView);
            mParentLayout = (RelativeLayout)itemView.findViewById(R.id.predictedRow);
            mAddress = (TextView)itemView.findViewById(R.id.address);
        }

    }

    /**
     * Holder for Places Geo Data Autocomplete API results.
     */
    public class PlaceAutocomplete {

        public CharSequence placeId;
        public CharSequence description;

        PlaceAutocomplete(CharSequence placeId, CharSequence description) {
            this.placeId = placeId;
            this.description = description;
        }

        @Override
        public String toString() {
            return description.toString();
        }
    }
}
</code></pre>

<blockquote>
  <p>view_placesearch.xml</p>
</blockquote>

<p>Customized view that you want to show in your adapter</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/predictedRow""
    android:layout_width=""match_parent""
    android:layout_height=""65dp""
    android:layout_marginLeft=""10dp""
    android:layout_marginRight=""10dp""
    android:layout_centerVertical=""true""
    android:gravity=""center_vertical""&gt;

    &lt;ImageView
        android:id=""@+id/image""
        android:layout_width=""22dp""
        android:layout_height=""22dp""
        android:src=""@drawable/ic_action_navigate""
        android:layout_marginLeft=""10dp""
        android:layout_marginTop=""20dp""
        /&gt;

    &lt;TextView
        android:id=""@+id/address""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:textColor=""#000""
        android:textSize=""15sp""
        android:layout_toRightOf=""@+id/image""
        android:layout_centerVertical=""true""
        android:layout_marginLeft=""20dp""
        android:layout_marginRight=""20dp""
        /&gt;
&lt;View
    android:layout_width=""match_parent""
    android:layout_height=""1dp""
    android:background=""@color/light_gray""
    android:layout_alignParentBottom=""true""/&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>Hope it will help you too.</p>

<p><strong>Note:</strong>
Do not forget to add API key in your <code>manifest</code> file. </p>

<p><strong>Output will be like:</strong></p>

<p><a href=""https://i.stack.imgur.com/tikr2.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/tikr2.png"" alt=""enter image description here""></a></p>

<p>I found some Useful links that can also help you.</p>

<p><strong><a href=""https://github.com/googlesamples/android-play-places"" rel=""noreferrer"">1. Android Plat Places using custom Adapter</a></strong></p>
",2022000,,2022000,,2016-05-05 9:34:10,2016-05-05 9:34:10,,,,15,,,
Android,37008540,2,,37007994,2016-05-03 15:40:12,2329,,10,,"<p>I dont think Presenter is a good place. Presenter should ask the new data from the model, like getData(). Presenter should not know whether its from local database or from server. So checking the internet connection at the Presenter will not be a good idea. </p>

<p>If you use the Repository pattern, the Presenter will ask the model/repository to get the data. The model will send the local data to the presenter first. Parallely, it will send server request(if there is network connection) to download new data, and send the new data to the Presenter.</p>

<p>So I think, the network check must be at the Repository/ model. You could have Util class which implements the actual network check code. And call that method from repository, like <code>AppUtil.isNetworkConnectionAvailable();</code></p>

<p>For more info, refer: <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""noreferrer"">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a></p>
",4586742,,,,,2016-05-03 15:40:12,,,,6,,,
Android,37060486,2,,37053016,2016-05-05 21:22:58,2331,,8,,"<p>You will indeed need Android for Work in order to use Airwatch to configure your application. </p>

<p>You should ensure you are using a device that supports AfW. All  devices with Android 6.0+ support work profiles, as well as many devices with Android 5.0+. Some recommended devices can be found <a href=""https://www.google.com/work/android/features/devices.html"">here</a></p>

<p>Once you have done so, you should create a new Profile in the Airwatch console that ensure that they will create a work profile on your device. Go to Devices >> Profiles >> List View and Click on ""Add"" >> ""Add Profile"" and choose ""Android"" >> ""Android for Work""</p>

<p>This should allow you to create an AfW policy that will apply to any assigned groups. Any apps you push to these devices can be configured using the App Restrictions framework by editing an application, going to the ""Deployment"" tab and enabling ""Send Application Configuration"". You should be able to set the key value pairs from there.</p>

<p>All that being said, if you are testing from a development perspective, you are much better off testing with TestDPC, an open source testing tool Google makes available in Google Play (just search for ""TestDPC"") and on <a href=""https://github.com/googlesamples/android-testdpc"">Github</a></p>

<p>There is a user guide on github, but it is very easy to use for creating work profiles, setting app configurations using app restrictions and more.</p>

<p>I would use Airwatch once you are ready to do production testing, but TestDPC is a much better tool while you are still developing.</p>
",5732134,,,,,2016-05-05 21:22:58,,,,7,,,
Android,37115194,2,,29006960,2016-05-09 11:55:25,2334,,4,,"<p>I found <a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow"">this in google samples</a> which demonstrates how you can use registered fingerprints in your app to authenticate the user before proceeding some actions such as purchasing an item.</p>

<blockquote>
  <p>First you need to create a symmetric key in the Android Key Store using <a href=""https://developer.android.com/reference/javax/crypto/KeyGenerator.html"" rel=""nofollow"">KeyGenerator</a> which can be only be used after the user has authenticated with fingerprint and pass a <a href=""https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html"" rel=""nofollow"">KeyGenParameterSpec</a>.</p>
  
  <p>By setting <a href=""https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html#setUserAuthenticationRequired%28boolean%29"" rel=""nofollow"">KeyGenParameterSpec.Builder.setUserAuthenticationRequired</a>
  to true, you can permit the use of the key only after the user
  authenticate it including when authenticated with the user's
  fingerprint.</p>
  
  <p>Then start listening to a fingerprint on the fingerprint sensor by
  calling <a href=""https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html#authenticate%28android.hardware.fingerprint.FingerprintManager.CryptoObject,%20android.os.CancellationSignal,%20int,%20android.hardware.fingerprint.FingerprintManager.AuthenticationCallback,%20android.os.Handler%29"" rel=""nofollow"">FingerprintManager.authenticate</a> with a <a href=""https://developer.android.com/reference/javax/crypto/Cipher.html"" rel=""nofollow"">Cipher</a> initialized with
  the symmetric key created. Or alternatively you can fall back to
  server-side verified password as an authenticator.</p>
  
  <p>Once the fingerprint (or password) is verified, the
  <a href=""https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.AuthenticationCallback.html#onAuthenticationSucceeded%28android.hardware.fingerprint.FingerprintManager.AuthenticationResult%29"" rel=""nofollow"">FingerprintManager.AuthenticationCallback#onAuthenticationSucceeded()</a>
  callback is called.</p>
</blockquote>

<p>It requires SDK V23. AFAIK its not useful for Samsung S5 but it might help others to use this feature.</p>
",2101822,,,,,2016-05-09 11:55:25,,,,2,,,
Android,37153867,2,,26884956,2016-05-11 5:37:27,2336,,22,,"<p>It is possible without System permissions from <a href=""https://github.com/android/platform_frameworks_base/blob/marshmallow-release/services/core/java/com/android/server/pm/PackageInstallerSession.java"" rel=""noreferrer"">Android M onwards</a>.</p>

<pre><code>if ((mPm.checkUidPermission(android.Manifest.permission.INSTALL_PACKAGES, installerUid)
        == PackageManager.PERMISSION_GRANTED)
        || (installerUid == Process.ROOT_UID)
        || mIsInstallerDeviceOwner) {
    mPermissionsAccepted = true;
} else {
    mPermissionsAccepted = false;
}
</code></pre>

<hr>

<p><strong>Silent install and uninstall of apps by Device Owner:</strong></p>

<p>A Device Owner can now silently install and uninstall applications using the PackageInstaller APIs, independent of Google Play for Work.</p>

<p><a href=""https://github.com/android/platform_frameworks_base/blob/marshmallow-release/services/core/java/com/android/server/pm/PackageInstallerSession.java"" rel=""noreferrer"">More in this link.</a></p>

<hr>

<p>This is possible from Android 6.0 and up.</p>

<ul>
<li>Make your app the Device owner.</li>
</ul>

<p>Once your app gets the Device owner permission, we can install, uninstall and update silently without any user intervention.</p>

<pre><code>public static boolean installPackage(Context context, InputStream in, String packageName)
        throws IOException {
    PackageInstaller packageInstaller = context.getPackageManager().getPackageInstaller();
    PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(
            PackageInstaller.SessionParams.MODE_FULL_INSTALL);
    params.setAppPackageName(packageName);
    // set params
    int sessionId = packageInstaller.createSession(params);
    PackageInstaller.Session session = packageInstaller.openSession(sessionId);
    OutputStream out = session.openWrite(""COSU"", 0, -1);
    byte[] buffer = new byte[65536];
    int c;
    while ((c = in.read(buffer)) != -1) {
        out.write(buffer, 0, c);
    }
    session.fsync(out);
    in.close();
    out.close();

    session.commit(createIntentSender(context, sessionId));
    return true;
}



private static IntentSender createIntentSender(Context context, int sessionId) {
        PendingIntent pendingIntent = PendingIntent.getBroadcast(
                context,
                sessionId,
                new Intent(ACTION_INSTALL_COMPLETE),
                0);
        return pendingIntent.getIntentSender();
    }
</code></pre>

<p>Uninstall:</p>

<pre><code>String appPackage = ""com.your.app.package"";
Intent intent = new Intent(getActivity(), getActivity().getClass());
PendingIntent sender = PendingIntent.getActivity(getActivity(), 0, intent, 0);
PackageInstaller mPackageInstaller = getActivity().getPackageManager().getPackageInstaller();
mPackageInstaller.uninstall(appPackage, sender.getIntentSender());
</code></pre>

<p><a href=""https://github.com/googlesamples/android-testdpc/blob/5b8297e9d51983a774ba3391e28a6aa35ca3f062/app/src/main/java/com/afwsamples/testdpc/cosu/CosuUtils.java"" rel=""noreferrer"">Git repo here</a>.</p>
",2219600,,2219600,,2017-01-17 15:52:45,2017-01-17 15:52:45,,,,31,,,
Android,37251196,2,,32473158,2016-05-16 9:57:11,2341,,9,,"<p>This is possible from Android 6.0 and up.</p>

<ul>
<li>Make your app the Device owner.</li>
</ul>

<p>Once your app gets the Device owner permission, we can install, uninstall and update silently without any user intervention.</p>

<pre><code>public static boolean installPackage(Context context, InputStream in, String packageName)
        throws IOException {
    PackageInstaller packageInstaller = context.getPackageManager().getPackageInstaller();
    PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(
            PackageInstaller.SessionParams.MODE_FULL_INSTALL);
    params.setAppPackageName(packageName);
    // set params
    int sessionId = packageInstaller.createSession(params);
    PackageInstaller.Session session = packageInstaller.openSession(sessionId);
    OutputStream out = session.openWrite(""COSU"", 0, -1);
    byte[] buffer = new byte[65536];
    int c;
    while ((c = in.read(buffer)) != -1) {
        out.write(buffer, 0, c);
    }
    session.fsync(out);
    in.close();
    out.close();

    session.commit(createIntentSender(context, sessionId));
    return true;
}


private static IntentSender createIntentSender(Context context, int sessionId) {
        PendingIntent pendingIntent = PendingIntent.getBroadcast(
                context,
                sessionId,
                new Intent(ACTION_INSTALL_COMPLETE),
                0);
        return pendingIntent.getIntentSender();
    }
</code></pre>

<p>Uninstall:</p>

<pre><code>String appPackage = ""com.your.app.package"";
Intent intent = new Intent(getActivity(), getActivity().getClass());
PendingIntent sender = PendingIntent.getActivity(getActivity(), 0, intent, 0);
PackageInstaller mPackageInstaller = getActivity().getPackageManager().getPackageInstaller();
mPackageInstaller.uninstall(appPackage, sender.getIntentSender());
</code></pre>

<p>Complete device owner demo app in this <a href=""https://github.com/googlesamples/android-testdpc/blob/5b8297e9d51983a774ba3391e28a6aa35ca3f062/app/src/main/java/com/afwsamples/testdpc/cosu/CosuUtils.java"" rel=""noreferrer"">repo</a>.</p>
",2219600,,2219600,,2017-01-17 15:54:28,2017-01-17 15:54:28,,,,11,,,
Android,37334135,2,,36083022,2016-05-19 21:16:17,2345,,3,,"<p>Device Owner does not have system app permissions. </p>

<p>On Marshmallow a Device Owner can call <code>PackageInstaller</code> and silently install apps.</p>

<p>The TestDPC basically shows all the features you can implement:
<a href=""https://github.com/googlesamples/android-testdpc"" rel=""nofollow"">https://github.com/googlesamples/android-testdpc</a></p>

<p>For some more interesting info:
<a href=""https://florent-dupont.blogspot.ca/2015/02/10-things-to-know-about-device-owner.html"" rel=""nofollow"">https://florent-dupont.blogspot.ca/2015/02/10-things-to-know-about-device-owner.html</a></p>
",1060712,,,,,2016-05-19 21:16:17,,,,1,,,
Android,37374829,2,,32099530,2016-05-22 13:13:27,2348,,9,,"<p>Google has confirmed a bug that they will fix soon, which prevents you in some cases to use this library of barcode/face-detection (link <a href=""https://developers.google.com/android/guides/releases#may_2016_-_v90""><strong>here</strong></a>) :</p>

<blockquote>
  <ul>
  <li>A service required by Mobile Vision is now disabled due to a serious bug in that service. This will prevent users who have not
  already used face or barcode detection from using those features. We
  do not recommend adding new Mobile Vision features to your app until
  this issue is fixed.</li>
  <li>For apps that already use Mobile Vision features, check FaceDetector.isOperational() or BarcodeDetector.isOperational() to
  confirm detector readiness before using the face or barcode detector.</li>
  </ul>
</blockquote>

<p>It's also written in some issues reported on Google's github sample repo:</p>

<p><a href=""https://github.com/googlesamples/android-vision/issues"">https://github.com/googlesamples/android-vision/issues</a></p>

<p>Example (<a href=""https://github.com/googlesamples/android-vision/issues/95#issuecomment-220163073""><strong>here</strong></a>) :</p>

<blockquote>
  <p>There is a known issue with the new version of GMSCore (v9) that was
  just released today.</p>
</blockquote>
",878126,,,,,2016-05-22 13:13:27,,,,1,,,
Android,37385501,2,,37377384,2016-05-23 7:54:10,2348,,1,,"<p>Based from this <a href=""https://groups.google.com/forum/#!topic/android-ndk/W5FTSeIA9QM"" rel=""nofollow noreferrer"">forum</a>, maybe it was because you're trying to release the back buffer after it had been released due to async issues. You can also look into this <a href=""https://github.com/googlesamples/android-Camera2Video/issues/2"" rel=""nofollow noreferrer"">issue</a>:</p>

<blockquote>
  <p>I think what’s happening here is that when MediaRecorder is reset, it kills the surface while the background thread is still trying to draw captured images onto it. I’m suspecting this based on the EGL error codes 0x300b and 0x300d (EGL_BAD_NATIVE_WINDOW and EGL_BAD_SURFACE, respectively).</p>
</blockquote>

<p>Closing the camera before resetting the recorder and reopening it afterwards works around the issue.</p>

<p>Check these related so questions:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/8914454/mediarecorder-stop-hanging-with-android-4-0-ics"">MediaRecorder.stop() hanging with Android 4.0 (ICS)</a></li>
<li><a href=""https://stackoverflow.com/questions/18202911/mediarecorder-stop-timed-out-waiting-for-incoming-camera-video-frames"">mediarecorder.stop() -&gt; timed out waiting for incoming camera video frames</a></li>
</ul>
",5832311,,-1,,2017-05-23 11:58:41,2016-05-23 7:54:10,,,,1,,,
Android,37388669,2,,37206416,2016-05-23 10:33:00,2348,,1,,"<p>Two solutions:  </p>

<p>1) download ndk-r12 from <a href=""https://github.com/android-ndk/ndk/wiki"" rel=""nofollow"">https://github.com/android-ndk/ndk/wiki</a>, scroll down to ""current beta release"", and point your android studio to use that version from native-audio/local.properties file  </p>

<p>2) use your current ndk as-is, but comment out the following from native-audio/app/build.gradle<br>
toolchain = 'clang'<br>
then it will use gcc to build</p>

<p>Thanks to ggfan for <a href=""https://github.com/googlesamples/android-ndk/issues/202#issuecomment-219350419"" rel=""nofollow"">answering this question in github</a></p>
",4180271,,,,,2016-05-23 10:33:00,,,,0,,,
Android,37434713,2,,37027885,2016-05-25 10:42:23,2350,,4,,"<p>Yes, i'm also waste a lot of time in this because in the Google Tutorial on <a href=""https://developer.android.com/training/in-app-billing/preparing-iab-app.html"" rel=""nofollow"">https://developer.android.com/training/in-app-billing/preparing-iab-app.html</a> the sample is old and buggy. If you want a right sample you have to download TrivialDrive from github <a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive"" rel=""nofollow"">https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive</a> that has right corrections.</p>

<p>From TrivialDrive MainActivity:</p>

<pre><code>try {
         mHelper.launchPurchaseFlow(this, mSelectedSubscriptionPeriod, IabHelper.ITEM_TYPE_SUBS,oldSkus, RC_REQUEST, mPurchaseFinishedListener, payload);
     } catch (IabAsyncInProgressException e) {
            complain(""Error launching purchase flow. Another async operation in progress."");
            setWaitScreen(false);
     }
</code></pre>

<p>and this is the onDestroy()</p>

<pre><code>    @Override
    public void onDestroy() {
    super.onDestroy();

    // very important:
    Log.d(TAG, ""Destroying helper."");
    if (mHelper != null) {
        mHelper.disposeWhenFinished();
        mHelper = null;
    }
}
</code></pre>

<p>i've implemented this without error! ;)</p>
",5409965,,,,,2016-05-25 10:42:23,,,,0,,,
Android,37435200,2,,37434494,2016-05-25 11:03:55,2350,,2,,"<p>There might be edge cases where that approach would fail, but I don't have a perfect answer to your question why.</p>

<p>In contrast, I have a proper approach on how to implement a version that will most certainly work:</p>

<p>Looking at the <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">Google API demos for the Camera 2</a>, I found some sample code that should be helpful to you to make sure it will fit all screen sized correctly:</p>

<pre><code>/**
 * Given {@code choices} of {@code Size}s supported by a camera, choose the smallest one that
 * is at least as large as the respective texture view size, and that is at most as large as the
 * respective max size, and whose aspect ratio matches with the specified value. If such size
 * doesn't exist, choose the largest one that is at most as large as the respective max size,
 * and whose aspect ratio matches with the specified value.
 *
 * @param choices           The list of sizes that the camera supports for the intended output
 *                          class
 * @param textureViewWidth  The width of the texture view relative to sensor coordinate
 * @param textureViewHeight The height of the texture view relative to sensor coordinate
 * @param maxWidth          The maximum width that can be chosen
 * @param maxHeight         The maximum height that can be chosen
 * @param aspectRatio       The aspect ratio
 * @return The optimal {@code Size}, or an arbitrary one if none were big enough
 */
private static Size chooseOptimalSize(Size[] choices, int textureViewWidth,
        int textureViewHeight, int maxWidth, int maxHeight, Size aspectRatio) {

    // Collect the supported resolutions that are at least as big as the preview Surface
    List&lt;Size&gt; bigEnough = new ArrayList&lt;&gt;();
    // Collect the supported resolutions that are smaller than the preview Surface
    List&lt;Size&gt; notBigEnough = new ArrayList&lt;&gt;();
    int w = aspectRatio.getWidth();
    int h = aspectRatio.getHeight();
    for (Size option : choices) {
        if (option.getWidth() &lt;= maxWidth &amp;&amp; option.getHeight() &lt;= maxHeight &amp;&amp;
                option.getHeight() == option.getWidth() * h / w) {
            if (option.getWidth() &gt;= textureViewWidth &amp;&amp;
                option.getHeight() &gt;= textureViewHeight) {
                bigEnough.add(option);
            } else {
                notBigEnough.add(option);
            }
        }
    }

    // Pick the smallest of those big enough. If there is no one big enough, pick the
    // largest of those not big enough.
    if (bigEnough.size() &gt; 0) {
        return Collections.min(bigEnough, new CompareSizesByArea());
    } else if (notBigEnough.size() &gt; 0) {
        return Collections.max(notBigEnough, new CompareSizesByArea());
    } else {
        Log.e(TAG, ""Couldn't find any suitable preview size"");
        return choices[0];
    }
}
</code></pre>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java#L384"" rel=""nofollow"">Source</a></p>

<p>Also you should take a look at the whole <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow"">Camera2BasicFragment.java</a> and <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/AutoFitTextureView.java"" rel=""nofollow"">AutoFitTextureView.java</a> classes for proper implementation.</p>
",2759296,,,,,2016-05-25 11:03:55,,,,2,,,
Android,37441172,2,,34198994,2016-05-25 15:11:17,2351,,2,,"<p>If you used the Google Camera2Basic Sample App - <a href=""https://github.com/googlesamples/android-Camera2Basic/issues/42"" rel=""nofollow noreferrer"">issue #42</a> seems to describe the problem. The solution is to review your use of <code>onResume</code> method in your <code>Fragment</code> - and call <code>closeCamera()</code> before you call <code>openCamera()</code> in the <code>onResume()</code>.  Seems to fix the problem in my testing of <code>Camera2Basic</code>.</p>
",2588732,,2219237,,2017-01-04 7:43:18,2017-01-04 7:43:18,,,,0,,,
Android,37487128,2,,37221590,2016-05-27 15:21:53,2353,,6,,"<p>Prefix the file path with <code>/</code>.</p>

<p>Basically, you'd do something like this:</p>

<pre><code>File helloBleprintJson = new File(
        getClass().getResource(""/helloBlueprint.json"").getPath());
</code></pre>

<p>Above snippet is taken from <a href=""https://github.com/googlesamples/android-testing-templates/blob/master/AndroidTestingBlueprint/app/src/test/java/com/example/android/testing/blueprint/LocalUnitTest.java#L67"" rel=""noreferrer"">here</a>.</p>
",786136,,1276636,,2017-04-19 7:55:36,2017-04-19 7:55:36,,,,1,,,
Android,37504598,2,,37461396,2016-05-28 23:14:26,2354,,2,,"<p>If you already have a service that extends <a href=""https://developer.android.com/reference/android/service/media/MediaBrowserService.html"" rel=""nofollow""><code>MediaBrowserService</code></a>, you can retrieve any metadata in <a href=""https://developer.android.com/reference/android/service/media/MediaBrowserService.html#onLoadChildren(java.lang.String,%20android.service.media.MediaBrowserService.Result%3Cjava.util.List%3Candroid.media.browse.MediaBrowser.MediaItem%3E%3E)"" rel=""nofollow""><code>onLoadChildren</code></a>.</p>

<p>In your onLoadChildren you should use <a href=""https://developer.android.com/reference/android/media/MediaMetadata.html"" rel=""nofollow""><code>MediaMetadata</code></a>:</p>

<blockquote>
  <p>Contains metadata about an item, such as the title, artist, etc.</p>
</blockquote>

<p>From which you can retrieve things like artist, title, etc, using <a href=""https://developer.android.com/reference/android/media/MediaDescription.html"" rel=""nofollow""><code>MediaDescription</code></a>:</p>

<blockquote>
  <p>A simple set of metadata for a media item suitable for display.</p>
</blockquote>

<pre><code>@Override
public void onLoadChildren(final String parentMediaId, final Result&lt;List&lt;MediaItem&gt;&gt; result) {
  for (MediaMetadata track : mMusicProvider.getMusicsByGenre(genre)) {
      // once you have an instance of MediaMetadata, you can retrieve any data you want:
      MediaDescription simpleData = track.getDescription();
      // or retrieving with a key from its info Bundle:
      // android.media.metadata.MEDIA_ID
      // android.media.metadata.TRACK_NUMBER
      // android.media.metadata.ALBUM
      // android.media.metadata.GENRE
      // android.media.metadata.TITLE
      // android.media.metadata.ARTIST
      // android.media.metadata.NUM_TRACKS
      // android.media.metadata.DURATION
      // android.media.metadata.ALBUM_ART_URI
      track.getString( ... );
  }
}
</code></pre>

<h2>You can see a clearer implementation of this in <a href=""https://github.com/googlesamples/android-MediaBrowserService"" rel=""nofollow"">this sample</a>.</h2>
",2819864,,,,,2016-05-28 23:14:26,,,,1,,,
Android,37531657,2,,33282945,2016-05-30 18:19:55,2356,,1,,"<p>As <a href=""https://stackoverflow.com/a/35312689/2655063"">Saurabh7474 has responded</a>, to check the version of Android and use setTorchMode API it's very correct.</p>

<p>Although you can also use params.setFlashMode (...) in marshmallow using</p>

<pre><code>mCamera.setPreviewTexture (new SurfaceTexture (100))
</code></pre>

<p>after Camera.open (...) and before calling mCamera.startPreview();</p>

<pre><code>try {
                Log.i(TAG, ""getCamera"");
                int requestedCameraId = getIdForRequestedCamera(mFacing);
                if (requestedCameraId == -1) {
                    throw new RuntimeException(""Could not find requested camera."");
                }
                mCamera = Camera.open(requestedCameraId);
                mCamera.setPreviewTexture(new SurfaceTexture(DUMMY_TEXTURE_NAME));
                params = mCamera.getParameters();
            } catch (RuntimeException e) {
                Log.e(""Failed to Open. Error:"", e.getMessage());
            } catch (IOException e) {
                Log.e(""Failed to Open. can't setPreviewTexture:"", e.getMessage());
            }
</code></pre>

<p>then when you want, you can use</p>

<pre><code>        mParams.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
        camera.setParameters(mParams);
</code></pre>

<p>My answer is based on CameraSource examples of Vision API that uses params.setFlashMode (...) and works in Api 23 and above.
If you decide to inspect CameraSource, the key method that has solved the same problem is ""start ()"", in the line 312 ...</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java</a></p>

<p>The reason you can find here
<a href=""https://stackoverflow.com/a/33333046/4114846"">https://stackoverflow.com/a/33333046/4114846</a></p>
",4114846,,-1,,2017-05-23 12:25:16,2016-08-24 5:10:28,,,,0,,,
Android,37685381,2,,37371844,2016-06-07 17:13:26,2364,,2,,"<p>As @Vietnt134 have already answered, Android Mobile Vision is temporarily disabled. </p>

<p>You can follow this topic to know if something knew came up:
<a href=""https://github.com/googlesamples/android-vision/issues/98"" rel=""nofollow"">https://github.com/googlesamples/android-vision/issues/98</a> </p>

<p>People are pretty mad with Google about this. I hope they solve this quickly.</p>
",2300034,,,,,2016-06-07 17:13:26,,,,0,,,
Android,37705106,2,,37692655,2016-06-08 14:18:37,2365,,1,,"<p>There is an android prebuilt port of Opencv 3.0. 
<a href=""http://opencv.org/downloads.html"" rel=""nofollow"">http://opencv.org/downloads.html</a></p>

<p>Most of work in opencv is programmed on C++.</p>

<p>There are examples Java, such as face Detector in  (Quite simple) . I am not sure if there is mouth and eye detector.</p>

<p>Besides you can use your code, to program android application through JNI.</p>

<p>At the beginning (JNI) is quite complicated, but is the most elegant way to get maximum performance of the applications. Besides, you will be almost sure that the opencv desktop features are on android.</p>

<p>check this links: 
<a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-jni"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master/hello-jni</a></p>

<p><a href=""https://developer.android.com/ndk/samples/sample_hellojni.html?hl=es"" rel=""nofollow"">https://developer.android.com/ndk/samples/sample_hellojni.html?hl=es</a>
Hope this references helps. </p>

<p>Cheers.</p>
",2995941,,,,,2016-06-08 14:18:37,,,,0,,,
Android,37751276,2,,37501805,2016-06-10 14:52:26,2367,,1,,"<p>Unfortunately Android doesn't appear to have low level Classic Bluetooth APIs which would allow you to do broadcast type behavior. This makes some sense as Android is intended to go into a power limited devices and active radios use energy. If you are required to use Classic Bluetooth (3.x) and Android to handle sending or receiving broadcast type behavior you'll probably need to write a custom ROM.</p>

<p>However there is specification called Bluetooth Low Energy (4.x) allows for less energy consumption but slower/less data throughput. Specifically the Advertising mode. Android devices which are scanning can pick up the short advertised data packet broadcasted by a device called a 'beacon'. Protocols which use this mode are Apple's iBeacon and Google's Eddystone.</p>

<p>Look here for sample apps involving Advertisements:</p>

<ul>
<li><a href=""https://github.com/googlesamples/android-BluetoothAdvertisements"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BluetoothAdvertisements</a></li>
<li><a href=""https://github.com/devunwired/accessory-samples/blob/master/bluetoothadvertiser"" rel=""nofollow noreferrer"">https://github.com/devunwired/accessory-samples/blob/master/bluetoothadvertiser</a></li>
</ul>

<p>Also note that Android devices don't always support BLE Peripheral Mode which is what you will need for your Android device to act like beacon.</p>

<p>Related link:
<a href=""https://stackoverflow.com/questions/19602913/can-an-android-device-act-as-an-ibeacon"">Can an Android device act as an iBeacon?</a></p>

<p>And a nice list of what devices have been tested:
<a href=""http://altbeacon.github.io/android-beacon-library/beacon-transmitter-devices.html"" rel=""nofollow noreferrer"">http://altbeacon.github.io/android-beacon-library/beacon-transmitter-devices.html</a></p>

<p>So in your case you should still be able to use your Sony Xperia Z3 as a Scanner, but will have to buy/build a beacon for testing.</p>
",295004,,-1,,2017-05-23 12:16:16,2016-06-13 13:27:31,,,,0,,,
Android,37787525,2,,37786796,2016-06-13 10:35:59,2369,,22,,"<p>I remember when I was first reading about <code>RecyclerView</code>s - I agree it can be a little confusing at first. Hopefully, this explanation will help you understand it better.</p>

<hr>

<h1>RecyclerView basics</h1>

<h2>1. Adding the <code>RecyclerView</code></h2>

<p>First you need to add your <code>RecyclerView</code> to your XML layout. I'm assuming you know how to do this. You also declare it in your Java code:</p>

<pre><code>RecyclerView recyclerView = (RecyclerView) findViewById(R.id.your_recycler_view);
</code></pre>

<h2>2. Creating the <code>Adapter</code> and understanding <code>ViewHolder</code></h2>

<p>Next, you need to create an <strong><code>Adapter</code></strong> for it. This is a class that implements <code>RecyclerView.Adapter&lt;YourAdapter.YourViewHolder&gt;</code>. I will explain what this means in a minute.</p>

<p>I believe it helps to look at an example of an <code>Adapter</code> to understand how it works (e.g. <a href=""https://github.com/FarbodSalamat-Zadeh/FlashcardsApp/blob/master/app/src/main/java/com/satsumasoftware/flashcards/ui/adapter/CoursesAdapter.java"" rel=""noreferrer"">one I created</a> for an open-source app). I would also highly recommend looking through a set of Java files I have made as an example on Gist on GitHub: </p>

<p><a href=""https://gist.github.com/FarbodSalamat-Zadeh/7646564f48ee708c1582c013e1de4f07"" rel=""noreferrer"">https://gist.github.com/FarbodSalamat-Zadeh/7646564f48ee708c1582c013e1de4f07</a></p>

<p>I will be referencing the example files from the link above in this explanation so you can follow along.</p>

<p>You can see that the <code>Adapter</code> class contains an inner class, which is your <code>ViewHolder</code>. Therefore, it needs to extend <code>RecyclerView.ViewHolder</code>.</p>

<p>Inside this <code>ViewHolder</code>, you declare the variables for the layouts that will be used for each list item in your <code>RecyclerView</code>. In the constructor for your <code>ViewHolder</code>, you assign these variables. I'm referring to this part of the code (I'm giving my example below):</p>

<pre><code>    ExampleViewHolder(View itemView) {
        super(itemView);
        text1 = (TextView) itemView.findViewById(R.id.text1);
        text2 = (TextView) itemView.findViewById(R.id.text2);
    }
</code></pre>

<p>That's all you need for your <code>ViewHolder</code> (the inner class in your <code>Adapter</code>).</p>

<h2>3. Understanding the <code>Adapter</code></h2>

<p>Like most Java objects, you will need to have a constructor some private variables in your <code>Adapter</code> class. Here are mine:</p>

<pre><code>private ArrayList&lt;CustomClass&gt; mCustomObjects;

public ExampleAdapter(ArrayList&lt;CustomClass&gt; arrayList) {
    mCustomObjects = arrayList;
}
</code></pre>

<p>You will need to have your <code>ArrayList&lt;CustomClass&gt;</code> as a constructor parameter so you can pass the list so your <code>Adapter</code> can use it.</p>

<p>If you look at the rest of the <code>Adapter</code> class, it contains some methods which it overrides from what it extends. Let's have a quick look at what these are:</p>

<ul>
<li><code>getItemCount()</code> returns the size of your list.</li>
<li><code>onCreateViewHolder(...)</code> is used to inflate the layout for your list item.</li>
<li><code>onBindViewHolder(...)</code> configures your layouts for the list item (e.g. setting text to a <code>TextView</code>)</li>
</ul>

<p>For most cases, <code>getItemCount()</code> will just return the <code>size()</code> of your <code>ArrayList&lt;CustomClass&gt;</code>.</p>

<p>The <code>onCreateViewHolder(...)</code> method generally stays the same too:</p>

<pre><code>@Override
public ExampleViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    View view = LayoutInflater.from(parent.getContext()).inflate(android.R.layout.simple_list_item_2, parent, false);
    return new ExampleViewHolder(view);
}
</code></pre>

<p>You can see that I am inflating the layout that I will use as my list item (<code>android.R.layout.simple_list_item_2</code>). This layout is built in to Android so I don't need to create it - of course, your can use whatever layout you wish and then modify your <code>Adapter</code> for widgets that you may be using. The return type of this method will match whatever you named your <code>ViewHolder</code> inner class.</p>

<p>Now, the interesting bit is in <code>onBindViewHolder(...)</code>. You configure your layouts here, so it is completely up to you what you want to do. Here's a template you could use:</p>

<pre><code>@Override
public void onBindViewHolder(ExampleViewHolder holder, int position) {
    CustomClass object = mCustomObjects.get(position);

    String firstText = object.getFirstText()
    String secondText = object.getSecondText()

    holder.text1.setText(firstText);
    holder.text2.setText(secondText);
}
</code></pre>

<p>Basically, you access your <code>ViewHolder</code> variables (for the widgets in your list item layout) by doing <code>holder.myWidget</code>. The <code>holder</code> part is coming from the parameter, which is your <code>ViewHolder</code> we talked about earlier, and <code>myWidget</code> would be the name of the <code>View</code> variable from that.</p>

<p>In the example above, the <code>object</code> has a <code>getFirstText()</code> method, and the <code>ViewHolder</code> contains a <code>TextView</code> (<code>text1</code>), so I am setting the text.</p>

<p>There is also one more method - <code>onAttachedToRecyclerView(...)</code>. You can use this for more complex things, but at a basic level, it is usually this:</p>

<pre><code>@Override
public void onAttachedToRecyclerView(RecyclerView recyclerView) {
    super.onAttachedToRecyclerView(recyclerView);
}
</code></pre>

<h2>4. Configuring <code>RecyclerView</code></h2>

<p>Remember at the beginning, when we declared and assigned our <code>RecyclerView</code>?:</p>

<pre><code>RecyclerView recyclerView = (RecyclerView) findViewById(R.id.your_recycler_view);
</code></pre>

<p>Now we are going to configure it.</p>

<p>You start by setting a ""layout manager"". This determines how each list item will be displayed on screen. The common ones are <code>LinearLayoutManager</code> and <code>GridLayoutManager</code>. The former puts your list items into a standard list (nothing special really, but it is very useful), and the latter organises your list items into a grid type of layout.</p>

<p>In our example, we're going to use a <code>LinearLayoutManager</code>. To set this on the <code>RecyclerView</code>, we do this:</p>

<pre><code>recyclerView.setLayoutManager(new LinearLayoutManager(this));
</code></pre>

<p>That's all.</p>

<p>And all we have to do next is to set the <code>Adapter</code> class we created and customised earlier to your <code>RecyclerView</code>:</p>

<pre><code>ExampleAdapter adapter = new ExampleAdapter(yourCustomArrayList);
recyclerView.setAdapter(adapter);
</code></pre>

<p>In the above, I'm assuming your <code>adapter</code> only has one parameter, but this will depend on how you configured it earlier.</p>

<h2>5. Using your <code>RecyclerView</code></h2>

<p>The steps above should give you a working <code>RecyclerView</code>. If you get stuck, you can look at how I added one into my app <a href=""https://github.com/FarbodSalamat-Zadeh/FlashcardsApp/blob/master/app/src/main/java/com/satsumasoftware/flashcards/ui/adapter/CoursesAdapter.java"" rel=""noreferrer"">here</a>.</p>

<p>You can also look through the <a href=""https://www.github.com/googlesamples/android-RecyclerView"" rel=""noreferrer"">Google samples for the <code>RecyclerView</code> implementation</a>.</p>

<p>I hope all of this gave you a clear idea about how <code>RecyclerView</code> works.</p>

<hr>

<h1>Adding a click listener</h1>

<p>You may want to add a click listener so that you are not using the <code>RecyclerView</code> just for displaying items.</p>

<p>To do this, your inner <code>ViewHolder</code> class needs to implement <code>View.OnClickListener</code>. This is because you will set an <code>OnClickListener</code> to the <code>itemView</code> parameter of the <code>ViewHolder</code>'s constructor. Let me show you what I mean:</p>

<pre><code>public class ExampleClickViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {

    TextView text1, text2;

    ExampleClickViewHolder(View itemView) {
        super(itemView);

        // we do this because we want to check when an item has been clicked:
        itemView.setOnClickListener(this);

        // now, like before, we assign our View variables
        title = (TextView) itemView.findViewById(R.id.text1);
        subtitle = (TextView) itemView.findViewById(R.id.text2);
    }

    @Override
    public void onClick(View v) {
        // The user may not set a click listener for list items, in which case our listener
        // will be null, so we need to check for this
        if (mOnEntryClickListener != null) {
            mOnEntryClickListener.onEntryClick(v, getLayoutPosition());
        }
    }
}
</code></pre>

<p>The only other things you need to add are a custom interface for your <code>Adapter</code> and a setter method:</p>

<pre><code>private OnEntryClickListener mOnEntryClickListener;

public interface OnEntryClickListener {
    void onEntryClick(View view, int position);
}

public void setOnEntryClickListener(OnEntryClickListener onEntryClickListener) {
    mOnEntryClickListener = onEntryClickListener;
}
</code></pre>

<p>So your new, click-supporting <code>Adapter</code> is complete.</p>

<p>Now, let's use it...</p>

<pre><code>    ExampleClickAdapter clickAdapter = new ExampleClickAdapter(yourObjects);
    clickAdapter.setOnEntryClickListener(new ExampleClickAdapter.OnEntryClickListener() {
        @Override
        public void onEntryClick(View view, int position) {
            // stuff that will happen when a list item is clicked
        }
    });
    recyclerView.setAdapter(clickAdapter);
</code></pre>

<p>It's basically how you would set up a normal <code>Adapter</code>, except that you use your setter method that you created to control what you will do when your user clicks a particular list item.</p>

<hr>

<p>To reiterate, you can look through a set of examples I made on this Gist on GitHub:</p>

<p><a href=""https://gist.github.com/FarbodSalamat-Zadeh/7646564f48ee708c1582c013e1de4f07"" rel=""noreferrer"">https://gist.github.com/FarbodSalamat-Zadeh/7646564f48ee708c1582c013e1de4f07</a> </p>
",4230345,,4230345,,2016-06-15 21:49:44,2016-06-15 21:49:44,,,,2,,,
Android,37849990,2,,32286201,2016-06-16 4:36:55,2372,,4,,"<p>it would be possible with android studio 2.2, mainly the android plugin for gradle makes it possible. you could look at some examples in:
<a href=""https://github.com/googlesamples/android-ndk/tree/master-cmake"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master-cmake</a></p>

<p>android studio directly reads-in your cmake scripts -- there is nothing like desktop systems that generate project files for their native IDEs ( Visual Studio or XCode ); so you might have to modify your existing cmake files to eventually make it to work for android studio.</p>

<p>as long as you build to the correct APK, command line or IDE does not matter too much. If you intend to ship source code, having your project ready with an IDE would be attractive.</p>
",4496512,,,,,2016-06-16 4:36:55,,,,0,,,
Android,37850202,2,,37780921,2016-06-16 5:00:01,2372,,6,,"<p>May you add more info for:
""but it doesn't seem to want to pull any third-party dependencies over.""?</p>

<p>this one:<br>
<a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-libs"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/master/hello-libs</a>
has static and shared 3rd party libs, you may try it.</p>

<p>For the shared dependent lib, you will need to pack them into APK, that is done inside gradle, cmake will not do it.<br>
The above example shows that, basically they need to be copied into your app/src/main/jniLibs too so they will be packed into apk, and pushed to your android phone/tablet. At runtime they could be loaded.<br>
I have tried to put a group of libraries into one directory, and use     </p>

<ul>
<li>link_directories(...)</li>
</ul>

<p>then just put the lib names directly into        </p>

<ul>
<li>target_link_libraries(...)</li>
</ul>

<p>also works. Make sure you have the right libs for the ABIs you intend to support for your app [looks like you are just building for one ABI].</p>
",4496512,,4714742,,2018-07-18 15:41:45,2018-07-18 15:41:45,,,,5,,,
Android,37871654,2,,33776795,2016-06-17 1:14:49,2373,,1,,"<p><a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-libs"" rel=""nofollow"">Hello-libs</a> is the one that might be helpful too: it builds 2 libs and use them in the app. The building libs and using libs could be de-coupled; for usage, look at the app/build.gradle</p>

<p>the sample are for shared lib; follow the comment above gperf for static lib in that build.gradle [do not put static lib into jniLibs folder, no need], it will work.</p>

<p>CMake + android studio is similar and simpler [they are in master-cmake branch]</p>
",4496512,,,,,2016-06-17 1:14:49,,,,0,,,
Android,37905903,2,,37905811,2016-06-19 9:48:33,2375,,1,,"<p>This question is discussed many times. As I know, you can't do it automatically from Android 4.0.3. If you are using Android 2+, did you add following line to AndroidManifest.</p>

<pre><code>&lt;uses-permission android:name=""android.permission.ACCESS_FINE_LOCATION"" /&gt;
</code></pre>

<p>There is a different approach. That is use Google Settings API. </p>

<pre><code>com.google.android.gms:play-services:8.1.0
</code></pre>

<p>Check <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationSettings"" rel=""nofollow noreferrer"">Google Samples</a></p>

<p>Check <a href=""https://stackoverflow.com/questions/4721449/how-can-i-enable-or-disable-the-gps-programmatically-on-android"">this</a> question as well.</p>
",982677,,-1,,2017-05-23 12:31:49,2016-06-19 9:48:33,,,,0,,,
Android,37973389,2,,4777935,2016-06-22 16:16:25,2379,,1,,"<p>Install the SDK and NDK like this: <a href=""https://askubuntu.com/a/732010/52975"">https://askubuntu.com/a/732010/52975</a></p>

<p>Plug in your device via USB and run:</p>

<pre><code>git clone https://github.com/googlesamples/android-ndk
cd android-ndk
git checkout a5fdebebdb27ea29cb8a96e08e1ed8c796fa52db
cd hello-jni
./gradlew clean
./gradlew assembleDebug
./gradlew installAllDebug
</code></pre>

<p>Now the app should be installed in your device.</p>

<p><code>hello-jni</code> is the simplest C example, and there are also C++ examples like <code>Teapot</code>.</p>

<p>Those examples use Gradle, and there are Ant <code>Android.mk</code> examples under the branch <a href=""https://github.com/googlesamples/android-ndk/tree/android-mk"" rel=""nofollow noreferrer"">android-mk</a>. You can build those with:</p>

<pre><code> ndk-build
 android update project -p . -t android-23
 ant clean
 ant debug
 ant installd
</code></pre>

<p>Tested on Ubuntu 16.04, Android 5.1.1.</p>
",895245,,-1,,2017-04-13 12:22:42,2016-06-22 17:05:57,,,,0,,,
Android,38043651,2,,35937530,2016-06-26 22:07:17,2383,,1,,"<pre><code>model {
    android {
       compileSdkVersion 24
       buildToolsVersion ""24.0.0""
</code></pre>

<p>on my <code>build.gradle</code> now makes the build work on the Android SDK 24 preview 4, tested on the Vulkan examples: <a href=""https://github.com/googlesamples/android-vulkan-tutorials/pull/12"" rel=""nofollow"">https://github.com/googlesamples/android-vulkan-tutorials/pull/12</a></p>

<p>The API for this preview seems to be final, so I think this is what code should look like after the release.</p>
",895245,,,,,2016-06-26 22:07:17,,,,0,,,
Android,38045379,2,,37869418,2016-06-27 3:15:18,2383,,69,,"<p>I had the same problem and solved it by using <code>IntentsTestRule</code> instead of <code>ActivityTestRule</code>. <code>IntentsTestRule</code> is a subclass of <code>ActivityTestRule</code>. Set up your <code>@Rule</code> which creates the activity like so:</p>

<pre><code>@Rule
public IntentsTestRule&lt;MyActivity&gt; mActivity = new IntentsTestRule&lt;MyActivity&gt;(MyActivity.class) {
    @Override
    protected Intent getActivityIntent() {
        ...
    }
};
</code></pre>

<blockquote>
  <p>See the following project for more information:
  <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample"" rel=""noreferrer"">https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample</a></p>
</blockquote>
",3527343,,638162,,2018-10-31 6:19:44,2018-10-31 6:19:44,,,,2,,,
Android,38074131,2,,38072991,2016-06-28 10:48:35,2384,,8,,"<blockquote>
  <p>When GPS is off and I set priority to HIGH, does that mean that GPS will be automatically turned on, or not? </p>
</blockquote>

<p>No, it will not be turned on automatically. But if you use SettingsApi, will prompt a dialog to user and gives information that GPS is must be turned on. If user accepts it, the gps will be active automatically. Check the <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationSettings"" rel=""nofollow noreferrer"">SettingsApi</a> </p>

<blockquote>
  <p>How can I know what Fused provider is using (is it a GPS or a network provider)</p>
</blockquote>

<p>If you use fused provider api with SettingsApi properly. It will make adequate the required settings for current location request.</p>

<blockquote>
  <p>Is Fused provider really the best choice for android location? Are there any negative points about it?</p>
</blockquote>

<p>In my opinion, before fused provider you must deal with directly providers(Gps, network) But fused just asks you, ""how accurate locations you wanna receive ?""</p>
",1281180,,848677,,2017-08-20 19:03:33,2017-08-20 19:03:33,,,,2,,,
Android,38074852,2,,38074779,2016-06-28 11:22:04,2384,,1,,"<p>You need to ask for Runtime permissions from Android 6.</p>

<p>See : 
1. <a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-RuntimePermissions</a></p>

<ol start=""2"">
<li><p><a href=""https://developer.android.com/training/permissions/requesting.html"" rel=""nofollow noreferrer"">https://developer.android.com/training/permissions/requesting.html</a></p></li>
<li><p><a href=""https://stackoverflow.com/questions/30549561/how-to-check-grants-permissions-at-run-time"">How to check Grants Permissions at Run-Time?</a></p></li>
</ol>
",4035628,,-1,,2017-05-23 12:22:40,2016-06-28 11:22:04,,,,2,,,
Android,38143046,2,,38142784,2016-07-01 10:27:02,2387,,2,,"<p>First of all: Don't reinvent the wheel and use successful libraries for API / database handling. This will save you tons of (debugging) time. Have a look at the <a href=""http://android-arsenal.com/"" rel=""nofollow"">Android Arsenal</a> for the libraries fitting your needs. For a clean architecture have a look at <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow"">these samples</a>.</p>
",321106,,,,,2016-07-01 10:27:02,,,,0,,,
Android,38179087,2,,38160643,2016-07-04 7:29:47,2390,,14,,"<p>You can't get fingerprint template or image from android Fingerprint API.
Fingerprint data are stored in a secure place by android system and are not accessible.</p>

<p>But you can ask the system to authenticate the user.</p>

<p>Here <a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""noreferrer"">sample code</a></p>

<p>The doc, in section <a href=""https://developer.android.com/about/versions/marshmallow/android-6.0.html"" rel=""noreferrer"">Fingerprint Authentication</a> </p>
",4559849,,,,,2016-07-04 7:29:47,,,,2,,,
Android,38193974,2,,38163091,2016-07-05 1:21:50,2391,,1,,"<p>You can very easily turn a <code>PendingResult</code> from <code>getPlaceById</code> into a <code>PlaceBuffer</code>.  You simply call the <code>await()</code> method:</p>

<pre><code>PendingResult&lt;PlaceBuffer&gt; result = Places.GeoDataApi.getPlaceById(
        mGoogleApiClient, placeId);
PlaceBuffer placeBuffer = result.await();
</code></pre>

<p>(You could of course do that in one line if you prefer.)</p>

<p>There are examples of calling <code>GeoDataApi.getPlaceByID</code> and <code>PendingResult&lt;PlaceBuffer&gt;.await</code> in <a href=""https://github.com/googlesamples/android-play-places"" rel=""nofollow"">https://github.com/googlesamples/android-play-places</a>.</p>
",806600,,,,,2016-07-05 1:21:50,,,,3,,,
Android,38225916,2,,38225563,2016-07-06 14:00:19,2393,,1,,"<p>This is a feature called <strong>GeoFencing</strong>.</p>

<p>Check the link for sample:</p>

<p><a href=""https://github.com/googlesamples/android-Geofencing"" rel=""nofollow"">https://github.com/googlesamples/android-Geofencing</a></p>

<p>Check google docs and guides for more info:</p>

<p><a href=""https://developers.google.com/android/reference/com/google/android/gms/location/Geofence"" rel=""nofollow"">https://developers.google.com/android/reference/com/google/android/gms/location/Geofence</a></p>

<p><a href=""https://developer.android.com/training/location/geofencing.html"" rel=""nofollow"">https://developer.android.com/training/location/geofencing.html</a></p>
",3582305,,,,,2016-07-06 14:00:19,,,,0,,,
Android,38245477,2,,38245342,2016-07-07 12:27:35,2394,,3,,"<p>It is possible to do this if the device has a functioning fingerprint scanner. Look at this example provided by Google.</p>

<p><a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow"">https://github.com/googlesamples/android-FingerprintDialog</a></p>

<p>It was literally one of the first Google answers. Apart from that, please work on keeping the question in proper English.</p>
",4961317,,,,,2016-07-07 12:27:35,,,,0,,,
Android,38268627,2,,37767511,2016-07-08 14:03:10,2395,,7,,"<p>My team encountered a similar problem when we were developing a plugin based on the Camera2 API, but it only affected a Samsung Galaxy S7 (we also have an S6 for testing that didn't exhibit this behaviour).</p>

<p>The issue appeared to be caused by a bug in Samsung's camera firmware and was triggered when the device came out of Deep Sleep (the ultra-low power mode in Android 6.0 Marshmallow). After resuming from Deep Sleep, the first frame of any video captured and encoded using the Camera2 MediaRecorder has an extraordinarily long frame duration - sometimes as long as or longer than the total duration of the video itself.</p>

<p>Consequently, when playing back, the first frame is displayed for this long duration while audio continues to play. Once the first frame has finished displaying, the rest of the frames play back as normal.</p>

<p>We found other people with a similar problem <a href=""https://github.com/googlesamples/android-Camera2Video/issues/24"">discussing the issue on GitHub</a></p>

<blockquote>
  <p>The issue is a deep sleep problem on some devices running Marshmallow. It appears to be CPU related as an S7 on Verizon doesn't have the issue, but an S7 on AT&amp;T does have the issue. I've seen this on an S6 Verizon phone when it updated to Marshmallow.</p>
  
  <p>In order to replicate, reboot a device while connected to USB. Run the sample. All should be ok. Then, disconnect the device, let it go into deep sleep (screen off, no movement for 5? minutes), and try again. The issue will appear once the device has gone into deep sleep.</p>
</blockquote>

<p>We ended up using <a href=""https://github.com/googlesamples/android-Camera2Video/issues/24#issuecomment-223698486"">cybaker's proposed workaround</a>; that is, when the video file is created, inspect the duration of the first frame of the video. If it appears to be incorrect, re-encode the video with sensible frame durations:</p>

<pre class=""lang-java prettyprint-override""><code>DataSource channel = new FileDataSourceImpl(rawFile);
IsoFile isoFile = new IsoFile(channel);

List&lt;TrackBox&gt; trackBoxes = isoFile.getMovieBox().getBoxes(TrackBox.class);
boolean sampleError = false;
for (TrackBox trackBox : trackBoxes) {
    TimeToSampleBox.Entry firstEntry = trackBox.getMediaBox().getMediaInformationBox().getSampleTableBox().getTimeToSampleBox().getEntries().get(0);

    // Detect if first sample is a problem and fix it in isoFile
    // This is a hack. The audio deltas are 1024 for my files, and video deltas about 3000
    // 10000 seems sufficient since for 30 fps the normal delta is about 3000
    if(firstEntry.getDelta() &gt; 10000) {
        sampleError = true;
        firstEntry.setDelta(3000);
    }
}

if(sampleError) {
    Movie movie = new Movie();
    for (TrackBox trackBox : trackBoxes) {
            movie.addTrack(new Mp4TrackImpl(channel.toString() + ""["" + trackBox.getTrackHeaderBox().getTrackId() + ""]"" , trackBox));
    }
    movie.setMatrix(isoFile.getMovieBox().getMovieHeaderBox().getMatrix());
    Container out = new DefaultMp4Builder().build(movie);

    //delete file first!
    FileChannel fc = new RandomAccessFile(rawFile.getName(), ""rw"").getChannel();
    out.writeContainer(fc);
    fc.close();
    Log.d(TAG, ""Finished correcting raw video"");
}
</code></pre>

<p>Hope this points you in the right direction!</p>
",4538608,,4538608,,2016-07-08 15:20:03,2016-07-08 15:20:03,,,,3,,,
Android,38300203,2,,38292746,2016-07-11 6:11:25,2397,,1,,"<p>There's a sample in the Google Mobile Vision API GitHub samples that illustrates how to draw eyeball graphics based on the position of the eyes: <a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/googly-eyes"" rel=""nofollow"">https://github.com/googlesamples/android-vision/tree/master/visionSamples/googly-eyes</a> </p>

<p>In order to overlay an image instead of drawing primitives (as the sample does), you could load the image into a Bitmap</p>

<pre><code>InputStream inputStream = contentResolver.openInputStream(imageUri);
Bitmap mBitmap = BitmapFactory.decodeStream(inputStream, null, options); 
</code></pre>

<p>Then draw it to the canvas at the desired location using <code>canvas.drawBitmap</code></p>

<pre><code>canvas.drawBitmap(mBitmap, eyePosition.x, eyePosition.y, mPaint);
</code></pre>

<p>If you were married to an ImageView, you could load the image into it and then update that position directly when the tracker updates</p>

<pre><code>imageView.setX(mPosition.x);
imageView.setY(mPosition.y);
postInvalidate();
</code></pre>

<p>Make sure those set calls happen on the thread that created the View, or they'll throw an exception.</p>
",1663826,,,,,2016-07-11 6:11:25,,,,5,,,
Android,38305042,2,,33642991,2016-07-11 10:48:55,2397,,1,,"<p>Have you tried camera2basic from github?</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></p>

<p>I have tried to study camera2 from there and from android developer android.hardware.camera2 reference. But it is soo confusing. I am using android studio 2, gradle 2.8, and nexus lg 5x android 6.</p>

<p>I copied the source codes to my project, check all errors on the IDE and found no error. After I tried it on my nexus, I always get the same errors on every line which calls CameraDevice class. It says null pointer on that class.</p>

<p>Then, I found this question here <a href=""https://stackoverflow.com/questions/28599958/android-camera2-sample"">Android Camera2 Sample</a>
and it turns out the guy asking have already tried it with the method:</p>

<ol>
<li>File > New > Import Sample..</li>
<li>Pick the Camera2Basic sample. </li>
<li>Update your gradle to version 2.10 
HOW? </li>
<li>File > Project Structure... > on left tab click project > gradle </li>
<li>Change the Gradle version to 2.10</li>
</ol>

<p>Then I run the code to my Nexus 5X Android 6 and it runs really well. It has camera preview, It will ask permissions at first, It can save picture to storage, etc..</p>
",5068236,,-1,,2017-05-23 11:53:09,2016-07-11 10:48:55,,,,0,,,
Android,38316071,2,,38315245,2016-07-11 20:55:12,2398,,1,,"<p>If I am not mistaken, you are referring to this method <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/IabHelper.java#L216"" rel=""nofollow"">startSetup</a> that accepts a <code>final OnIabSetupFinishedListener</code> and supposedly sets up the billing.</p>

<p>What you seem to be confused about, is this rather syntactically obscure feature of Java called the <strong>anonymous inner class</strong>. </p>

<p>Let me attempt to answer your question to make it easier:</p>

<blockquote>
  <p>Is it a method that does not immediately return a result?</p>
</blockquote>

<p>Yes, sort of (it of course does not return anything for it is a <code>void</code> method). It, simply speaking, is a method that accepts an instance of the interface <code>OnIabSetupFinishedListener</code> and does some of its job <em>asynchronously</em> as stated in the Javadoc and returns nothing:</p>

<blockquote>
  <p>This will start up the setup process asynchronously.</p>
</blockquote>

<p>Thus, this method is similar to what any other <code>void</code> Java method looks like. The only additional implementation information is that some kind of communication is set up between the <code>listener</code> you pass to this method and some other objects. </p>

<p>But that communication is going to happen <em>at a later point in time</em>, <strong>not</strong> <em>at the time you call this method</em>, <code>startSetup</code>. Thus, what is important is the <em>call site</em>, i.e. how you are going to <em>call</em> this method in your own app. This, hopefully, happens at the time of setting up your app and you need to get it quickly running and hence this method provides a <em>callback</em> mechanism and returns as soon as possible in a synchronous manner without unnecessary delay. This means your calling thread can make progress and the listener you passed to this method can be utilized later in some other thread when an appropriate event occurs.</p>

<p>The confusion also comes in part because of the way anonymous inner classes are typically coded. Thus, your <em>call site</em> may look like the <a href=""https://developer.android.com/training/in-app-billing/preparing-iab-app.html"" rel=""nofollow"">following</a>:</p>

<pre><code>mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {
   public void onIabSetupFinished(IabResult result) {
      if (!result.isSuccess()) {
         // Oh noes, there was a problem.
         Log.d(TAG, ""Problem setting up In-app Billing: "" + result);
      }
         // Hooray, IAB is fully set up!
   }
});
</code></pre>

<p>Here, you are providing an anonymous implementation of the interface <code>OnIabSetupFinishedListener</code> directly at the call site (without actually creating a separate class implementing that interface, using the construct like <code>class MyListener implements OnIabSetupFinishedListener</code>).</p>
",437506,,437506,,2016-07-11 21:07:34,2016-07-11 21:07:34,,,,0,,,
Android,38360843,2,,38360478,2016-07-13 20:09:16,2400,,30,,"<p>OnClick should call a <code>Presenter</code> method. You should do your business in presenter and if you need to update the ui you should define a method in your <code>View</code> and call it from presenter.</p>

<p>You need a method for your <code>View</code> ex:</p>

<pre><code>public void showCounterCount(final int totalClicks){
     counterTextView.setText(""Total clicks so far: ""+totalClicks);
}
</code></pre>

<p>Also you need a method and a variable in your <code>Presenter</code>:</p>

<pre><code>int totalClicks = 0;

public void onCounterButtonClicked(){
    totalClicks++;
    mView.showCounterCount(totalClicks);
}
</code></pre>

<p>And refactor your code like this:</p>

<pre><code>counterButton.setOnClickListener(new View.OnClickListener() {
    public void onClick(View v) {
      mPresenter.onCounterButtonClicked();
    }
  });
</code></pre>

<p>For more complex and clean architecture you can do your use case business in interactors. (In your example incrementing a counter value is a use-case for your application)</p>

<p>You can define an interactor and increment your counter value there. </p>

<p>CounterInteractor:</p>

<pre><code>public CounterInteractor{
   public int incrementCounter(int currentCounter){
       return currentCounter+1;
   }
}
</code></pre>

<p>And refactor your presenter like below:</p>

<pre><code>int totalClicks = 0;
CounterInteractor mCounterInteractor = new CounterInteractor();

public void onCounterButtonClicked(){
    totalClicks = mCounterInteractor.incrementCounter(totalClicks);
    mView.showCounterCount(totalClicks);
}
</code></pre>

<p>With this approach you separate your business logic totally from presenters and re use your use-case concepts without duplicating code in presenters. This is more clean approach.</p>

<p>You can also check this git repo for different MVP Approaches.
<a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/"">https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/</a></p>

<p>Good luck.</p>

<p>Edit:</p>

<p>Here's my lightweight wikipedia client project source:
<a href=""https://github.com/savepopulation/wikilight"">https://github.com/savepopulation/wikilight</a></p>

<p>I'm trying to implement <code>MVP</code>. (MVP + Dagger2 + RxJava)</p>
",1559852,,1559852,,2016-09-02 6:44:43,2016-09-02 6:44:43,,,,7,,,
Android,38363398,2,,38325383,2016-07-13 23:39:21,2400,,2,,"<p>Are you sure your GPS is turned on? You can try going through this sample project by Google <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationUpdates/app/src/main/java/com/google/android/gms/location/sample/locationupdates/MainActivity.java"" rel=""nofollow"">Google</a> on GitHub. In this project they have also provided code for checking if Location services are enabled. If they are not, user will be given a message so they can activate their location services.</p>

<pre><code>/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.mapdemo;

import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.widget.Toast;

/**
 * This demo shows how GMS Location can be used to check for changes to the users location.  The
 * ""My Location"" button uses GMS Location to set the blue dot representing the users location.
 * Permission for {@link android.Manifest.permission#ACCESS_FINE_LOCATION} is requested at run
 * time. If the permission has not been granted, the Activity is finished with an error message.
 */
public class MyLocationDemoActivity extends AppCompatActivity
        implements
        OnMyLocationButtonClickListener,
        OnMapReadyCallback,
        ActivityCompat.OnRequestPermissionsResultCallback {

    /**
     * Request code for location permission request.
     *
     * @see #onRequestPermissionsResult(int, String[], int[])
     */
    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;

    /**
     * Flag indicating whether a requested permission has been denied after returning in
     * {@link #onRequestPermissionsResult(int, String[], int[])}.
     */
    private boolean mPermissionDenied = false;

    private GoogleMap mMap;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.my_location_demo);

        SupportMapFragment mapFragment =
                (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }

    @Override
    public void onMapReady(GoogleMap map) {
        mMap = map;

        mMap.setOnMyLocationButtonClickListener(this);
        enableMyLocation();
    }

    /**
     * Enables the My Location layer if the fine location permission has been granted.
     */
    private void enableMyLocation() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {
            // Permission to access the location is missing.
            PermissionUtils.requestPermission(this, LOCATION_PERMISSION_REQUEST_CODE,
                    Manifest.permission.ACCESS_FINE_LOCATION, true);
        } else if (mMap != null) {
            // Access to the location has been granted to the app.
            mMap.setMyLocationEnabled(true);
        }
    }

    @Override
    public boolean onMyLocationButtonClick() {
        Toast.makeText(this, ""MyLocation button clicked"", Toast.LENGTH_SHORT).show();
        // Return false so that we don't consume the event and the default behavior still occurs
        // (the camera animates to the user's current position).
        return false;
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        if (requestCode != LOCATION_PERMISSION_REQUEST_CODE) {
            return;
        }

        if (PermissionUtils.isPermissionGranted(permissions, grantResults,
                Manifest.permission.ACCESS_FINE_LOCATION)) {
            // Enable the my location layer if the permission has been granted.
            enableMyLocation();
        } else {
            // Display the missing permission error dialog when the fragments resume.
            mPermissionDenied = true;
        }
    }

    @Override
    protected void onResumeFragments() {
        super.onResumeFragments();
        if (mPermissionDenied) {
            // Permission was not granted, display error dialog.
            showMissingPermissionError();
            mPermissionDenied = false;
        }
    }

    /**
     * Displays a dialog with error message explaining that the location permission is missing.
     */
    private void showMissingPermissionError() {
        PermissionUtils.PermissionDeniedDialog
                .newInstance(true).show(getSupportFragmentManager(), ""dialog"");
    }

}
</code></pre>
",985213,,,,,2016-07-13 23:39:21,,,,0,,,
Android,38406167,2,,38130035,2016-07-15 23:10:12,2402,,13,,"<p>The easiest way to cancel an in-app purchase is to consume it. If you use the Google provided <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/IabHelper.java"">IabHelper</a> you can just call consumeAsync and pass in the Purchase. I maintain a function to consume all the app's in-app products; this is essentially a billing reset function for testing.</p>
",1943229,,,,,2016-07-15 23:10:12,,,,6,,,
Android,38429299,2,,38427019,2016-07-18 5:41:40,2404,,1,,"<p>they samples appear to be now held on github. <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow"">https://github.com/googlesamples/android-ndk</a></p>
",4839316,,,,,2016-07-18 5:41:40,,,,0,,,
Android,38429638,2,,38427019,2016-07-18 6:11:04,2404,,3,,"<p>from NDK changelog:</p>

<blockquote>
  <p>Android NDK, Revision 11 (March 2016)</p>
  
  <p>The samples are no longer included in the NDK package. They are instead available on <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow"">GitHub</a>.</p>
</blockquote>
",4758618,,3115956,,2016-07-18 6:52:57,2016-07-18 6:52:57,,,,0,,,
Android,38482606,2,,38482427,2016-07-20 13:25:09,2407,,2,,"<p>You can use this library</p>

<ol>
<li><a href=""http://openframeworks.cc/"" rel=""nofollow"">OpenFrameworks for Android</a></li>
<li><a href=""http://openimaj.org/"" rel=""nofollow"">OpenIMAJ</a></li>
<li><a href=""https://developers.google.com/vision/"" rel=""nofollow"">Google Android Vision API</a></li>
</ol>

<p>I would recommend OpenFrameworks, install open frameworks for android studio <a href=""http://openframeworks.cc/setup/android-studio/"" rel=""nofollow"">http://openframeworks.cc/setup/android-studio/</a>  and openframeworks android examples <a href=""https://github.com/openframeworks/openFrameworks/tree/master/examples/android"" rel=""nofollow"">https://github.com/openframeworks/openFrameworks/tree/master/examples/android</a> </p>

<p>or you can use Microsoft Cognitive services, new alternative for computer vision, ocr, ai etc.</p>

<p><a href=""https://www.microsoft.com/cognitive-services/en-us/computer-vision-api"" rel=""nofollow"">https://www.microsoft.com/cognitive-services/en-us/computer-vision-api</a> , android examples <a href=""https://github.com/Microsoft/ProjectOxford-ClientSDK/tree/master/Vision/Android"" rel=""nofollow"">https://github.com/Microsoft/ProjectOxford-ClientSDK/tree/master/Vision/Android</a></p>

<p>Android vision api examples <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow"">https://github.com/googlesamples/android-vision</a></p>
",2647294,,2647294,,2016-07-21 5:53:19,2016-07-21 5:53:19,,,,0,,,
Android,38537827,2,,31173476,2016-07-23 3:23:58,2409,,5,,"<ol>
<li>First for example of camera2 api android there is an open source google sample code. <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></li>
<li>Second for Part where you want to draw a rectangle(touch to focus) follow these steps -

<ul>
<li>Create a custom class extending to SurfaceView. </li>
<li>call onTouchListener method in this custom class to detect finger coordinates and draw your rectangle using paint class in android.
-add this custom class above your TextureView that is displaying preview from camera2.</li>
<li>turn the custom view transparent.</li>
<li>finally when you touch at some point on device screen then onTouchListener will be called which will draw on the canvas of custom view you added above you camera preview. </li>
<li>finally clear your canvas so you dont keep adding rectangles to customview since you need one rect at one point of time. </li>
<li>also if not touched for some time the rectangle should disappear. do this using a handler from custom view.</li>
</ul></li>
</ol>

<p>I am giving you here a tested code to do this. i hope it helps you. BEST OF LUCK.</p>

<pre><code> private class CustomView extends SurfaceView {

    private final Paint paint;
    private final SurfaceHolder mHolder;
    private final Context context;

    public CustomView(Camera2BasicFragment context) {
        super(context.getActivity().getBaseContext());
        mHolder = getHolder();
        mHolder.setFormat(PixelFormat.TRANSPARENT);
        this.context = context.getActivity().getBaseContext();
        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        paint.setColor(Color.WHITE);
        paint.setStyle(Paint.Style.STROKE);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            invalidate();
            if (mHolder.getSurface().isValid()) {
                final Canvas canvas = mHolder.lockCanvas();
                Log.d(""touch"", ""touchRecieved by camera"");
                if (canvas != null) {
                    Log.d(""touch"", ""touchRecieved CANVAS STILL Not Null"");
                    canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
                    canvas.drawColor(Color.TRANSPARENT);
                    canvas.drawCircle(event.getX(), event.getY(), 100, paint);
                    mHolder.unlockCanvasAndPost(canvas);
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            Canvas canvas1 = mHolder.lockCanvas();
                            if(canvas1 !=null){
                                canvas1.drawColor(0, PorterDuff.Mode.CLEAR);
                                mHolder.unlockCanvasAndPost(canvas1);
                            }

                        }
                    }, 1000);

                }
                mHolder.unlockCanvasAndPost(canvas);


            }
        }


        return false;
    }
}
</code></pre>
",6456853,,,,,2016-07-23 3:23:58,,,,2,,,
Android,38641032,2,,38556827,2016-07-28 15:43:30,2415,,2,,"<p>I got this message when I tried to grok MVP + Dagger example from this <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/todoapp"" rel=""nofollow"">googlesample</a></p>

<p>After a while I renamed a file <a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvp-dagger/todoapp/app/src/mock/java/com/example/android/architecture/blueprints/todoapp/data/FakeTasksRemoteDataSource.java"" rel=""nofollow"">FakeTasksRemoteDataSource.java</a> in my project and Verify Apps fell silent.</p>

<p>So, I think you need to check the file names (and variables) for ""stop words"", like ""fake"" etc.</p>
",3260226,,3260226,,2016-07-28 17:56:21,2016-07-28 17:56:21,,,,3,,,
Android,38648310,2,,37643801,2016-07-28 23:29:00,2415,,2,,"<p>From my experience it has to do with file that you are passing to the PdfRenderer.
If you are able to open that same file with other app/library from exactly same directory that you are saving that means you should be able to open it with PdfRenderer.</p>

<p>Official issue here <a href=""https://github.com/googlesamples/android-PdfRendererBasic/issues/1"" rel=""nofollow"">https://github.com/googlesamples/android-PdfRendererBasic/issues/1</a> was closed, and original reporter hasn't reopened it. </p>

<p>Can you try exactly same sample with your own PDF file? If it doesn't work, than there is a bug with library, and I would suggest you to reopen that issue with file that doesn't work. Also feel free to try other files with your solution(very simple files).</p>
",464328,,,,,2016-07-28 23:29:00,,,,0,,,
Android,38651904,2,,38642622,2016-07-29 6:28:20,2415,,2,,"<p>You must update your IabHelper files with last SDK from:</p>

<p><a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util"" rel=""nofollow"">https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util</a></p>

<p>When you overwrite old files, Eclipse or Android Studio will display errors and you have to fix them, for example add try catch, or add one parameter to queryInventory function.</p>

<p>Remember update package name in new files if you changed it.</p>

<p><strong>EDIT:</strong> Also finally I need update google_play_services.jar lib included in my project. After update this notification alert has hidden. I was using an older google play service lib. Now I am using rev 28 version.</p>
",3793100,,3793100,,2016-08-03 15:42:35,2016-08-03 15:42:35,,,,2,,,
Android,38688531,2,,38685903,2016-07-31 21:25:11,2418,,4,,"<p>You can check full sample code here: <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java"" rel=""nofollow"">https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java</a></p>

<p>Should work with next imports:</p>

<pre><code>import static android.support.test.espresso.intent.Intents.intended;
import static android.support.test.espresso.intent.matcher.BundleMatchers.hasEntry;
import static android.support.test.espresso.intent.matcher.IntentMatchers.hasAction;
import static android.support.test.espresso.intent.matcher.IntentMatchers.hasCategories;
import static android.support.test.espresso.intent.matcher.IntentMatchers.hasData;
import static android.support.test.espresso.intent.matcher.IntentMatchers.hasExtras;
import static android.support.test.espresso.intent.matcher.IntentMatchers.toPackage;
import static android.support.test.espresso.intent.matcher.UriMatchers.hasHost;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.core.AllOf.allOf;
</code></pre>
",624706,,,,,2016-07-31 21:25:11,,,,0,,,
Android,38698234,2,,38696068,2016-08-01 11:54:54,2418,,2,,"<p>There are two ways to solve this issue. </p>

<p>1) One could update the value of <code>targetSdkVersion</code> to lower than 23 in a file ""build.gradle"". Thanks to <strong>Beyka</strong>.</p>

<p>2) Since Android 6.0 ""dangerous"" permissions should not only be included in the manifest file, but also asked for confirmation while App is running (Requesting Permissions at Run Time). Location provider should be asked only after getting runtime permission from the user. Thanks to <strong>Prerak Sola</strong>.</p>

<p>These are great resources and examples how to do that:</p>

<ul>
<li><a href=""https://developer.android.com/training/permissions/requesting.html"" rel=""nofollow"">https://developer.android.com/training/permissions/requesting.html</a></li>
<li><a href=""https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java"" rel=""nofollow"">https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java</a></li>
</ul>
",755640,,755640,,2016-08-02 4:57:11,2016-08-02 4:57:11,,,,0,,,
Android,38712636,2,,38712410,2016-08-02 5:50:11,2419,,1,,"<p>You have to make Custom Camera. As If you use Intent for Camera then you will get a full screen by default. You cannot use it. You want something like facebook uses in Messenger. Try this. This camera is in a Fragment. Replace the Fragment where required. Divide device height of surface view and fragment view.</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic</a></p>
",4476671,,4476671,,2016-08-02 6:42:14,2016-08-02 6:42:14,,,,1,,,
Android,38715419,2,,29915035,2016-08-02 8:29:20,2419,,1,,"<p>You just have to update the 'aidl' file from the official gitHub, and clean-build the project:</p>

<p><a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl"" rel=""nofollow"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl</a></p>

<p>You'll be happy forever after.</p>
",1371730,,,,,2016-08-02 8:29:20,,,,0,,,
Android,38934377,2,,38916553,2016-08-13 15:44:17,2431,,1,,"<p>As far as I understand you use <a href=""https://github.com/googlesamples/android-play-billing"" rel=""nofollow"">TrivialDrive</a> example, check how premium purchase is implemented (find usages <code>mIsPremium</code>).</p>

<pre><code>// Do we have the premium upgrade
Purchase premiumPurchase = inventory.getPurchase(SKU_PREMIUM);
mIsPremium = (premiumPurchase != null &amp;&amp; verifyDeveloperPayload(premiumPurchase));
</code></pre>

<p>Disable ads by this variable.</p>
",5766983,,,,,2016-08-13 15:44:17,,,,2,,,
Android,38951166,2,,36341822,2016-08-15 7:44:05,2432,,2,,"<p>Update Android Studio to 2.2 resolved the problem.</p>

<p>""There are other choices now like the the ndk with cmake which doesn't require the experimental plugin <a href=""https://github.com/googlesamples/android-ndk/tree/master-cmake/hello-jni"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master-cmake/hello-jni</a> .""</p>

<p><a href=""https://github.com/realm/realm-java/issues/2539"" rel=""nofollow"">found here</a></p>
",1870830,,,,,2016-08-15 7:44:05,,,,0,,,
Android,38971588,2,,38959881,2016-08-16 9:45:38,2433,,1,,"<p>Use Google Fit to <a href=""https://developers.google.com/fit/android/releases"" rel=""nofollow"">track sleep data</a>.</p>

<blockquote>
  <p>Developers can now read and write granular sleep data. This includes
  light sleep, deep sleep, REM, and awake activities. These granular
  activity types have been added to the FitnessActivities enumerated
  type.</p>
</blockquote>

<p>-To insert sleep data, create a session of type FitnessActivities.SLEEP.</p>

<p>To detect granularity in your session, insert activity segments of types:</p>

<p>-FitnessActivities.SLEEP_LIGHT</p>

<p>-FitnessActivities.SLEEP_DEEP</p>

<p>-FitnessActivities.SLEEP_REM</p>

<p>-FitnessActivities.SLEEP_AWAKE</p>

<p>You can also check the Android Wear sample for Google Fit in this <a href=""https://github.com/googlesamples/android-WatchFace"" rel=""nofollow"">github repo</a>.</p>
",6143482,,,,,2016-08-16 9:45:38,,,,0,,,
Android,39008816,2,,38958876,2016-08-18 1:56:46,2435,,23,,"<p>It seems you already have imported the opencv module, now, open your CMakeList.txt and add the follow lines:</p>

<pre><code>set(CMAKE_VERBOSE_MAKEFILE on)

add_library(lib_opencv SHARED IMPORTED)

set_target_properties(lib_opencv PROPERTIES IMPORTED_LOCATION
path-to-your-project/MyApplication/app/src/main/jniLibs/${ANDROID_ABI}/libopencv_java3.so)


include_directories(path-to-opencv-directory/OpenCV-android-sdk/sdk/native/jni/include)

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=gnu++11"")
</code></pre>

<p>and edit the:</p>

<pre><code>target_link_libraries( # Specifies the target library.
                   native-lib
                   lib_opencv
                   # Links the target library to the log library
                   # included in the NDK.
                   $\{log-lib} )
</code></pre>

<p>to include your lib_opencv that you have created. To finish, you add the follow line:  </p>

<pre><code>abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'mips64'
</code></pre>

<p>in your module app, like this:</p>

<pre><code>externalNativeBuild {

    cmake {
        cppFlags ""-std=c++11 -frtti -fexceptions""
        abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'mips64'
    }
}
</code></pre>

<p>and below of buildTypes you add:</p>

<pre><code>sourceSets {
    main {
        jniLibs.srcDirs = ['path to your application /MyApplication/app/src/main/jniLibs/']
    }
}
</code></pre>

<p>For more details, you can see this: <a href=""https://github.com/googlesamples/android-ndk/tree/master/cmake/hello-libs"" rel=""noreferrer"">https://github.com/googlesamples/android-ndk/tree/master/cmake/hello-libs</a></p>
",6401599,,192373,,2018-03-27 11:58:26,2018-03-27 11:58:26,,,,6,,,
Android,39034002,2,,39033804,2016-08-19 8:02:58,2436,,1,,"<p>Android has Bluetooth support, but it only allow to send ot receive data from stream. There is a very good sample project from Google: <a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow"">https://github.com/googlesamples/android-BluetoothChat</a> . The only drawback of this sample is that it use Handler to nitify about Bluetooth events. I changed it a bit so it use another Thread and from it calls methods of interface you set, take a look at project: <a href=""https://github.com/AlexShutov/LEDLights"" rel=""nofollow"">https://github.com/AlexShutov/LEDLights</a> . This is ordinary Bluetooth, not BLE, hope it will help</p>
",6175778,,,,,2016-08-19 8:02:58,,,,0,,,
Android,39054918,2,,39044494,2016-08-20 13:56:07,2438,,5,,"<p>this is the solution for your problem. In this <a href=""https://github.com/googlesamples/android-Camera2Video/blob/master/Application/src/main/java/com/example/android/camera2video/Camera2VideoFragment.java#L236"" rel=""nofollow noreferrer"">line</a> the aspect ratio is set to 3/4. I changed <em>chooseVideSize</em> method to pick video size with hd resolution for <em>MediaRecorder</em>.</p>

<pre><code>    private static Size chooseVideoSize(Size[] choices) {
        for (Size size : choices) {
            // Note that it will pick only HD video size, you should create more robust solution depending on screen size and available video sizes
            if (1920 == size.getWidth() &amp;&amp; 1080 == size.getHeight()) {
                return size;
            }
        }
        Log.e(TAG, ""Couldn't find any suitable video size"");
        return choices[choices.length - 1];
    }
</code></pre>

<p>Then I corrected <a href=""https://github.com/googlesamples/android-Camera2Video/blob/master/Application/src/main/java/com/example/android/camera2video/Camera2VideoFragment.java#L255"" rel=""nofollow noreferrer"">this method</a> to pick preview size accordingly to video size aspect ratio and below is result.</p>

<pre><code>private static Size chooseOptimalSize(Size[] choices, int width, int height, Size aspectRatio) {
    // Collect the supported resolutions that are at least as big as the preview Surface
    List&lt;Size&gt; bigEnough = new ArrayList&lt;Size&gt;();
    int w = aspectRatio.getWidth();
    int h = aspectRatio.getHeight();
    double ratio = (double) h / w;
    for (Size option : choices) {
        double optionRatio = (double) option.getHeight() / option.getWidth();
        if (ratio == optionRatio) {
            bigEnough.add(option);
        }
    }

    // Pick the smallest of those, assuming we found any
    if (bigEnough.size() &gt; 0) {
        return Collections.min(bigEnough, new CompareSizesByArea());
    } else {
        Log.e(TAG, ""Couldn't find any suitable preview size"");
        return choices[1];
    }
}
</code></pre>

<p>I hope it will help you!</p>
",5963700,,5963700,,2018-04-03 12:23:20,2018-04-03 12:23:20,,,,7,,,
Android,39064930,2,,39022845,2016-08-21 13:50:03,2439,,14,,"<p>What you need to do is introduce new variables:</p>

<pre><code>public static final String CAMERA_FRONT = ""1"";
public static final String CAMERA_BACK = ""0"";

private String cameraId = CAMERA_BACK;
</code></pre>

<p>remove <em>cameraId</em> <a href=""https://github.com/googlesamples/android-Camera2Video/blob/master/Application/src/main/java/com/example/android/camera2video/Camera2VideoFragment.java#L431"" rel=""noreferrer"">local variable</a> from <em>openCamera</em> method.</p>

<pre><code>public void switchCamera() {
    if (cameraId.equals(CAMERA_FRONT)) {
        cameraId = CAMERA_BACK;
        closeCamera();
        reopenCamera();
        switchCameraButton.setImageResource(R.drawable.ic_camera_front);

    } else if (cameraId.equals(CAMERA_BACK)) {
        cameraId = CAMERA_FRONT;
        closeCamera();
        reopenCamera();
        switchCameraButton.setImageResource(R.drawable.ic_camera_back);
    }
}

public void reopenCamera() {
    if (mTextureView.isAvailable()) {
        openCamera(mTextureView.getWidth(), mTextureView.getHeight());
    } else {
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
    }
}
</code></pre>
",5963700,,,,,2016-08-21 13:50:03,,,,4,,,
Android,39065950,2,,38695149,2016-08-21 15:39:52,2439,,12,,"<p>Create these variables:</p>

<pre><code>    public static final String CAMERA_FRONT = ""1"";
    public static final String CAMERA_BACK = ""0"";

    private String cameraId = CAMERA_BACK;
    private boolean isFlashSupported;
    private boolean isTorchOn;
</code></pre>

<p>then add these methods:</p>

<pre><code>public void switchFlash() {
    try {
        if (cameraId.equals(CAMERA_BACK)) {
            if (isFlashSupported) {
                if (isTorchOn) {
                    mPreviewBuilder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_OFF);
                    mPreviewSession.setRepeatingRequest(mPreviewBuilder.build(), null, null);
                    flashButton.setImageResource(R.drawable.ic_flash_off);
                    isTorchOn = false;
                } else {
                    mPreviewBuilder.set(CaptureRequest.FLASH_MODE, CaptureRequest.FLASH_MODE_TORCH);
                    mPreviewSession.setRepeatingRequest(mPreviewBuilder.build(), null, null);
                    flashButton.setImageResource(R.drawable.ic_flash_on);
                    isTorchOn = true;
                }
            }
        }
    } catch (CameraAccessException e) {
        e.printStackTrace();
    }
}

public void setupFlashButton() {
    if (cameraId.equals(CAMERA_BACK) &amp;&amp; isFlashSupported) {
        flashButton.setVisibility(View.VISIBLE);

        if (isTorchOn) {
            flashButton.setImageResource(R.drawable.ic_flash_off);
        } else {
            flashButton.setImageResource(R.drawable.ic_flash_on);
        }

    } else {
        flashButton.setVisibility(View.GONE);
    }
}
</code></pre>

<p>after this <a href=""https://github.com/googlesamples/android-Camera2Video/blob/master/Application/src/main/java/com/example/android/camera2video/Camera2VideoFragment.java#L450"" rel=""noreferrer"">line</a> add this code:</p>

<pre><code>Boolean available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);
isFlashSupported = available == null ? false : available;

setupFlashButton();
</code></pre>

<p>at the end call <em>switchFlash()</em> in your desired click listener.</p>

<p><strong>et voilà!</strong></p>

<p>PS. This might be helpful - <a href=""https://stackoverflow.com/questions/39022845/android-camera2-api-switch-back-front-cameras/39064930#39064930"">front/back camera switcher</a></p>
",5963700,,-1,,2017-05-23 11:53:52,2016-08-21 15:39:52,,,,3,,,
Android,39080706,2,,39080538,2016-08-22 13:20:47,2440,,1,,"<p>There's a Sample app provided by Google, please see the Sample <a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""nofollow"">here on Github</a>.</p>

<p>Spacifically see the code of <a href=""https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java"" rel=""nofollow"">MainActivity</a> for how to check for multiple permissions.</p>

<p>Hope it helps!</p>
",1791546,,,,,2016-08-22 13:20:47,,,,0,,,
Android,39258515,2,,39250754,2016-08-31 20:31:53,2449,,9,,"<blockquote>
  <p>Whether it is possible to trace which the Activity opened after
  pressing the button?</p>
</blockquote>

<p>Check <code>espresso-intents</code> library: </p>

<h2>Configuration</h2>

<p>Add to your <code>app/build.gradle</code> these lines:</p>

<pre><code>androidTestCompile 'com.android.support.test:runner:0.5'
androidTestCompile 'com.android.support.test:rules:0.5'
androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
</code></pre>

<blockquote>
  <p>NOTICE: <code>espresso-intents</code> won't run without <code>espresso-core</code>, <code>runner</code> or <code>rules</code> libs.</p>
</blockquote>

<p>You may also need to change <code>ActivityTestRule&lt;&gt;</code> to <code>IntentsTestRule</code> as it is described here:</p>

<blockquote>
  <h3>IntentsTestRule</h3>
  
  <p>Use IntentsTestRule instead of ActivityTestRule when using
  Espresso-Intents. IntentsTestRule makes it easy to use
  Espresso-Intents APIs in functional UI tests. This class is an
  extension of ActivityTestRule, which initializes Espresso-Intents
  before each test annotated with @Test and releases Espresso-Intents
  after each test run. The activity will be terminated after each test
  and this rule can be used in the same way as ActivityTestRule.</p>
  
  <p>From:
  <a href=""https://google.github.io/android-testing-support-library/docs/espresso/intents/"" rel=""noreferrer"">https://google.github.io/android-testing-support-library/docs/espresso/intents/</a></p>
</blockquote>

Example code (click on button to launch new activity)

<p>Here's a solution using <code>espresso-intents</code> for similar problem:</p>

<blockquote>
  <p>An example test with intent stubbing:</p>

<pre><code>@Test
 public void testActivityResultIsHandledProperly() {
   // Build a result to return when a particular activity is launched.
   Intent resultData = new Intent();
   String phoneNumber = ""123-345-6789"";
   resultData.putExtra(""phone"", phoneNumber);
   ActivityResult result = new ActivityResult(Activity.RESULT_OK, resultData);

   // Set up result stubbing when an intent sent to ""contacts"" is seen.
   intending(toPackage(""com.android.contacts"")).respondWith(result));

   // User action that results in ""contacts"" activity being launched.
   // Launching activity expects phoneNumber to be returned and displays it on the screen.
   user.clickOnView(system.getView(R.id.pickButton));

   // Assert that data we set up above is shown.
   assertTrue(user.waitForText(phoneNumber));
 }
</code></pre>
  
  <p>From:
  <a href=""https://developer.android.com/reference/android/support/test/espresso/intent/Intents.html"" rel=""noreferrer"">https://developer.android.com/reference/android/support/test/espresso/intent/Intents.html</a></p>
</blockquote>

<p>Additional resources:</p>

<ul>
<li><p><a href=""https://developer.android.com/reference/android/support/test/espresso/intent/Intents.html"" rel=""noreferrer"">[Android Developers] Espresso Intents Reference</a></p></li>
<li><p><a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample"" rel=""noreferrer"">[Github || Google Samples] Basic sample for Espresso Intents</a></p></li>
<li><p><a href=""https://github.com/barend/android-espresso-intent-sample"" rel=""noreferrer"">[Github] Android Espresso Intent Sample</a></p></li>
<li><p><a href=""http://collectiveidea.com/blog/archives/2015/06/11/testing-for-android-intents-using-espresso/"" rel=""noreferrer"">Testing for Android Intents using Espresso</a></p></li>
<li><p><a href=""https://gist.github.com/vgonda/1b2520619052cc5bf9b8"" rel=""noreferrer"">[Gist] Example of how to use espresso-intents in Android tests</a> - source code for link above</p></li>
</ul>
",4730812,,,,,2016-08-31 20:31:53,,,,0,,,
Android,39277253,2,,37859211,2016-09-01 17:05:57,2450,,3,,"<p>You have to do it yourself. See the example here:</p>

<p><a href=""https://github.com/googlesamples/android-FingerprintDialog/blob/master/Application/src/main/java/com/example/android/fingerprintdialog/FingerprintAuthenticationDialogFragment.java"" rel=""nofollow"">https://github.com/googlesamples/android-FingerprintDialog/blob/master/Application/src/main/java/com/example/android/fingerprintdialog/FingerprintAuthenticationDialogFragment.java</a></p>

<p>In the onError() method it will call the goToBackup method, which will change the dialog to a password dialog.</p>

<p>I'm not sure how Samsung did it and what was your intention, but the current Android Fingerprint API cannot fallback to any other device authentication, so you have to use your own fall back (see the second bullet):</p>

<p><a href=""https://developer.android.com/training/articles/keystore.html#UserAuthentication"" rel=""nofollow"">https://developer.android.com/training/articles/keystore.html#UserAuthentication</a></p>
",1067763,,,,,2016-09-01 17:05:57,,,,0,,,
Android,39277257,2,,39277072,2016-09-01 17:06:06,2450,,1,,"<p>They do indeed use <code>MediaPlayer</code> as seen in the <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/playback/LocalPlayback.java"" rel=""nofollow"">LocalPlayback class</a></p>
",1676363,,,,,2016-09-01 17:06:06,,,,1,,,
Android,39291659,2,,39248529,2016-09-02 11:46:13,2450,,1,,"<p>Add espresso-web to your test project (see <a href=""https://google.github.io/android-testing-support-library/docs/espresso/web/"" rel=""nofollow"">https://google.github.io/android-testing-support-library/docs/espresso/web/</a> and follow the instructions to make sure JavaScript is enabled on your WebView):</p>

<pre><code>androidTestCompile 'com.android.support.test.espresso:espresso-web:2.2.2'
</code></pre>

<p>Then one way you can perform actions on the radio buttons is using a CSS selector like so:</p>

<pre><code>onWebView()
  .withElement(findElement(Locator.CSS_SELECTOR, ""input[value=\""City B\""]""))
  .perform(webClick());
</code></pre>

<p>If your radio buttons had unique IDs (like they should have), you can also select by ID:</p>

<pre><code>.withElement(findElement(Locator.ID, ""Location2""))
</code></pre>

<p>See this <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso/WebBasicSample"" rel=""nofollow"">https://github.com/googlesamples/android-testing/tree/master/ui/espresso/WebBasicSample</a> sample project where you can see the full working set up and easily try out different HTML code and selectors.</p>
",3527343,,,,,2016-09-02 11:46:13,,,,2,,,
Android,39297160,2,,39287810,2016-09-02 16:38:04,2451,,1,,"<blockquote>
  <p>I have already turned off the animation as already mentioned over
  <a href=""https://google.github.io/android-testing-support-library/docs/espresso/setup/index.html"" rel=""nofollow"">https://google.github.io/android-testing-support-library/docs/espresso/setup/index.html</a></p>
</blockquote>

<p>This problem occurs not because of turned of animations, but because of <code>Espresso</code> framework character: <code>Espresso</code> depends on your actual application context.</p>

<blockquote>
  <p>Espresso for Android is perfect and fast test automation framework,
  but it has one important limitation - you are allowed to operate only
  inside your app under test context. </p>
  
  <p>That means that it is not possible to automate tests for such app
  features like:</p>
  
  <ul>
  <li>application push notifications </li>
  <li>contact synchronization </li>
  <li>navigating from another app to your app under test,</li>
  </ul>
  
  <p>since you have to deal with other apps from the mobile device -
  Notification Bar, Contacts or People app, etc.</p>
  
  <p>From: <a href=""http://qathread.blogspot.com/2015/05/espresso-uiautomator-perfect-tandem.html"" rel=""nofollow"">http://qathread.blogspot.com/2015/05/espresso-uiautomator-perfect-tandem.html</a></p>
</blockquote>

<p>It means that <code>Espresso</code> tests are based on UI thread and waiting when the main thread is idle().</p>

<blockquote>
  <p>Perhaps the main thread has not gone idle within a reasonable amount of time? There could be an animation or something constantly repainting the screen. Or the activity is doing network calls on creation? See the threaddump logs. For your reference the last time the event queue was idle before your activity launch request was 1472804618974 and now the last time the queue went idle was: 1472804618974. If these numbers are the same your activity might be hogging the event queue.</p>
</blockquote>

<p>This means that your main thread is actually  busy and Espresso can't perform any new actions, it's waiting for free idling resources to run.</p>

<p>To solve this problem you have these options:</p>

<ul>
<li><p>write your own custom <code>Espresso IdlingResource</code> to say Espresso when he can perform action, in other words: <code>IdlingResource</code> tells Espresso when the main thread is idle and ready to take a new actions.</p></li>
<li><p>exclude <code>appcompat</code> and <code>support-v4</code> from <code>espresso</code> libs : <a href=""https://github.com/googlesamples/android-testing/issues/56"" rel=""nofollow"">https://github.com/googlesamples/android-testing/issues/56</a></p></li>
<li><p>I suppose that you're running <code>Camera</code> using an Android <code>Intent</code>, so it isn't included in your actual app context, it's not displayed on your apps activity/fragment. If it is true, try to use <a href=""https://google.github.io/android-testing-support-library/docs/uiautomator/index.html"" rel=""nofollow""><code>UiAutomator</code></a> along with <a href=""https://google.github.io/android-testing-support-library/docs/espresso/index.html"" rel=""nofollow""><code>Espresso</code></a> framework. Read: <a href=""http://qathread.blogspot.com/2015/05/espresso-uiautomator-perfect-tandem.html"" rel=""nofollow"">http://qathread.blogspot.com/2015/05/espresso-uiautomator-perfect-tandem.html</a></p></li>
<li>instead of <code>Espresso</code> try to use <code>Robotium</code>, <code>Appium</code> or another instrumentation framework without this limitation.</li>
</ul>

<p>Already, I'm using along <code>Espresso</code>, <code>Robotium</code> and <code>UiAutomator</code>, so don't be afraid to work with mix of them.</p>

<p>Hope it help</p>
",4730812,,,,,2016-09-02 16:38:04,,,,0,,,
Android,39334949,2,,39203674,2016-09-05 16:59:10,2454,,2,,"<p>Once your managed product is purchased and you do not use consume, a user owns it forever. So at startup check owned products and draw UI accordingly. A very good <a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive"" rel=""nofollow"">example</a>.</p>
",5766983,,,,,2016-09-05 16:59:10,,,,0,,,
Android,39423732,2,,39423351,2016-09-10 7:29:06,2458,,12,,"<p><strong>java</strong></p>

<pre><code>    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
    Uri photoUri = Uri.fromFile(getOutputPhotoFile());
    intent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
    intent.putExtra(""android.intent.extras.CAMERA_FACING"", 1);
    startActivityForResult(intent, CAMERA_PHOTO_REQUEST_CODE);
</code></pre>

<p><strong>Other/Alternate Solution</strong></p>

<pre><code>private Camera openFrontFacingCameraGingerbread() {
    int cameraCount = 0;
    Camera cam = null;
    Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
    cameraCount = Camera.getNumberOfCameras();
    for (int camIdx = 0; camIdx &lt; cameraCount; camIdx++) {
        Camera.getCameraInfo(camIdx, cameraInfo);
        if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
            try {
                cam = Camera.open(camIdx);
            } catch (RuntimeException e) {
                Log.e(TAG, ""Camera failed to open: "" + e.toString());
            }
        }
    }

    return cam;
}
</code></pre>

<p>add these permissions in the <code>AndroidManifest.xml</code> file</p>

<pre><code>&lt;uses-permission android:name=""android.permission.CAMERA"" /&gt;
&lt;uses-feature android:name=""android.hardware.camera"" android:required=""false"" /&gt;
&lt;uses-feature android:name=""android.hardware.camera.front"" android:required=""false"" /&gt;
</code></pre>

<blockquote>
  <p><strong>only available in Gingerbread(2.3) and Up Android Version.</strong></p>
</blockquote>

<p>otherwise you can also check these example</p>

<p><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer""><strong>1. android-Camera2Basic</strong></a></p>

<p><a href=""https://examples.javacodegeeks.com/android/core/hardware/camera-hardware/android-camera-example/"" rel=""noreferrer""><strong>2. Camera Example 2</strong></a></p>

<p><a href=""http://www.vogella.com/tutorials/AndroidCamera/article.html"" rel=""noreferrer""><strong>3. Vogella example</strong></a></p>

<p>hope it helps you..</p>
",6617272,,6617272,,2016-09-10 8:53:17,2016-09-10 8:53:17,,,,2,,,
Android,39439030,2,,33922670,2016-09-11 17:57:08,2460,,11,,"<p>I branched form <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">google's Camera2Basic example</a> and changed it to use <code>CaptureRequest.CONTROL_AF_MODE_AUTO</code> instead of <code>CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE</code></p>

<p>You can take the project from git and test it - <a href=""https://github.com/pinhassi/android-Camera2Basic"" rel=""noreferrer"">https://github.com/pinhassi/android-Camera2Basic</a></p>

<p>Or just add this to <code>Camera2BasicFragment</code>:</p>

<pre><code>private static final long LOCK_FOCUS_DELAY_ON_FOCUSED = 5000;
private static final long LOCK_FOCUS_DELAY_ON_UNFOCUSED = 1000;

private Integer mLastAfState = null;
private Handler mUiHandler = new Handler(); // UI handler
private Runnable mLockAutoFocusRunnable = new Runnable() {

    @Override
    public void run() {
        lockAutoFocus();
    }
};


public void lockAutoFocus() {
    try {
        // This is how to tell the camera to lock focus.
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER, CameraMetadata.CONTROL_AF_TRIGGER_START);
        CaptureRequest captureRequest = mPreviewRequestBuilder.build();
        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER, null); // prevent CONTROL_AF_TRIGGER_START from calling over and over again
        mCaptureSession.capture(captureRequest, mCaptureCallback, mBackgroundHandler);
    } catch (CameraAccessException e) {
        e.printStackTrace();
    }
}


/**
 *
 * @return
 */
private float getMinimumFocusDistance() {
    if (mCameraId == null)
        return 0;

    Float minimumLens = null;
    try {
        CameraManager manager = (CameraManager) getActivity().getSystemService(Context.CAMERA_SERVICE);
        CameraCharacteristics c = manager.getCameraCharacteristics(mCameraId);
        minimumLens = c.get(CameraCharacteristics.LENS_INFO_MINIMUM_FOCUS_DISTANCE);
    } catch (Exception e) {
        Log.e(TAG, ""isHardwareLevelSupported Error"", e);
    }
    if (minimumLens != null)
        return minimumLens;
    return 0;
}

/**
 *
 * @return
 */
private boolean isAutoFocusSupported() {
    return  isHardwareLevelSupported(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY) || getMinimumFocusDistance() &gt; 0;
}

// Returns true if the device supports the required hardware level, or better.
@TargetApi(Build.VERSION_CODES.LOLLIPOP)
private boolean isHardwareLevelSupported(int requiredLevel) {
    boolean res = false;
    if (mCameraId == null)
        return res;
    try {
        CameraManager manager = (CameraManager) getActivity().getSystemService(Context.CAMERA_SERVICE);
        CameraCharacteristics cameraCharacteristics = manager.getCameraCharacteristics(mCameraId);

        int deviceLevel = cameraCharacteristics.get(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL);
        switch (deviceLevel) {
            case CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_3:
                Log.d(TAG, ""Camera support level: INFO_SUPPORTED_HARDWARE_LEVEL_3"");
                break;
            case CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_FULL:
                Log.d(TAG, ""Camera support level: INFO_SUPPORTED_HARDWARE_LEVEL_FULL"");
                break;
            case CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY:
                Log.d(TAG, ""Camera support level: INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY"");
                break;
            case CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED:
                Log.d(TAG, ""Camera support level: INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED"");
                break;
            default:
                Log.d(TAG, ""Unknown INFO_SUPPORTED_HARDWARE_LEVEL: "" + deviceLevel);
                break;
        }


        if (deviceLevel == CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY) {
            res = requiredLevel == deviceLevel;
        } else {
            // deviceLevel is not LEGACY, can use numerical sort
            res = requiredLevel &lt;= deviceLevel;
        }

    } catch (Exception e) {
        Log.e(TAG, ""isHardwareLevelSupported Error"", e);
    }
    return res;
}
</code></pre>

<p>Then, add to <code>STATE_PREVIEW</code> block:</p>

<pre><code>        case STATE_PREVIEW: {

            // We have nothing to do when the camera preview is working normally.
            // TODO: handle auto focus
            Integer afState = result.get(CaptureResult.CONTROL_AF_STATE);
            if (afState != null &amp;&amp; !afState.equals(mLastAfState)) {
                switch (afState) {
                    case CaptureResult.CONTROL_AF_STATE_INACTIVE:
                        Log.d(TAG, ""CaptureResult.CONTROL_AF_STATE_INACTIVE"");
                        lockAutoFocus();
                        break;
                    case CaptureResult.CONTROL_AF_STATE_ACTIVE_SCAN:
                        Log.d(TAG, ""CaptureResult.CONTROL_AF_STATE_ACTIVE_SCAN"");
                        break;
                    case CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED:
                        Log.d(TAG, ""CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED"");
                        mUiHandler.removeCallbacks(mLockAutoFocusRunnable);
                        mUiHandler.postDelayed(mLockAutoFocusRunnable, LOCK_FOCUS_DELAY_ON_FOCUSED);
                        break;
                    case CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED:
                        mUiHandler.removeCallbacks(mLockAutoFocusRunnable);
                        mUiHandler.postDelayed(mLockAutoFocusRunnable, LOCK_FOCUS_DELAY_ON_UNFOCUSED);
                        Log.d(TAG, ""CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED"");
                        break;
                    case CaptureResult.CONTROL_AF_STATE_PASSIVE_UNFOCUSED:
                        mUiHandler.removeCallbacks(mLockAutoFocusRunnable);
                        //mUiHandler.postDelayed(mLockAutoFocusRunnable, LOCK_FOCUS_DELAY_ON_UNFOCUSED);
                        Log.d(TAG, ""CaptureResult.CONTROL_AF_STATE_PASSIVE_UNFOCUSED"");
                        break;
                    case CaptureResult.CONTROL_AF_STATE_PASSIVE_SCAN:
                        Log.d(TAG, ""CaptureResult.CONTROL_AF_STATE_PASSIVE_SCAN"");
                        break;
                    case CaptureResult.CONTROL_AF_STATE_PASSIVE_FOCUSED:
                        mUiHandler.removeCallbacks(mLockAutoFocusRunnable);
                        //mUiHandler.postDelayed(mLockAutoFocusRunnable, LOCK_FOCUS_DELAY_ON_FOCUSED);
                        Log.d(TAG, ""CaptureResult.CONTROL_AF_STATE_PASSIVE_FOCUSED"");
                        break;
                }
            }
            mLastAfState = afState;
            break;
        }
</code></pre>

<p>And replace all occurrences of:</p>

<pre><code>mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                                            CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
</code></pre>

<p>With:</p>

<pre><code>if (isAutoFocusSupported())
                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                                        CaptureRequest.CONTROL_AF_MODE_AUTO);
                            else
                                mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
</code></pre>
",475472,,,,,2016-09-11 17:57:08,,,,4,,,
Android,39458286,2,,39439437,2016-09-12 20:25:23,2461,,1,,"<p>You can control the size of the preview widget.
Change this line <a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/ocr-reader/app/src/main/res/layout/ocr_capture.xml#L12"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/ocr-reader/app/src/main/res/layout/ocr_capture.xml#L12</a> to whatever you want.</p>

<p>This is the Android documentation about the possible values you can use for <code>layout_width</code> and <code>layout_height</code> properties <a href=""https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html"" rel=""nofollow"">https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html</a></p>
",1750600,,,,,2016-09-12 20:25:23,,,,4,,,
Android,39469923,2,,39469763,2016-09-13 12:18:35,2461,,2,,"<p>You can create refer to google's <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow"">android-architecture</a> .According to me you should create three different presenter for your each view and then bind them.you should check <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow"">this part</a> of sample,which has very basic design</p>
",3833705,,,,,2016-09-13 12:18:35,,,,0,,,
Android,39470182,2,,39469763,2016-09-13 12:31:26,2462,,1,,"<p>What we did for a complex activity (30+ screens) was to divide each screen into View and Presenter components, where View battles with Android Views, and Presenter works out the logic (pulling and preparing data from controllers, network or local storage). But yeah, <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow"" title=""Architecture samples"">Google samples</a> contain information about pretty much everything you'll need to start. Either way you should spend more time designing and thinking about the structure rather than actually implementing it. Good luck :)</p>
",2102748,,,,,2016-09-13 12:31:26,,,,3,,,
Android,39480018,2,,39480017,2016-09-13 22:38:29,2462,,2,,"<p>Here is the code you need:</p>

<pre><code>ComponentName componentName =
  new ComponentName(getApplicationContext(), MyService.class);
</code></pre>

<p>I actually wrote a sample that demonstrates how to do this on GitHub <a href=""https://github.com/googlesamples/android-WatchFace"" rel=""nofollow"">here</a>.</p>

<p>The class the does the work is <a href=""http://%20https://github.com/googlesamples/android-WatchFace/blob/master/Wearable/src/main/java/com/example/android/wearable/watchface/provider/UpdateComplicationDataService.java"" rel=""nofollow"">UpdateComplicationDataService.java class</a>.</p>

<p>Here is the full code excerpt if interested:</p>

<pre><code>ComponentName componentName =
  new ComponentName(getApplicationContext(), MyService.class);

ProviderUpdateRequester providerUpdateRequester = 
  new ProviderUpdateRequester(getApplicationContext(), componentName);

// This method only updates the specific complication id, you could
// update all with providerUpdateRequester.requestUpdateAll().
providerUpdateRequester.requestUpdate(complicationId);
</code></pre>
",1631197,,1631197,,2016-10-10 18:12:13,2016-10-10 18:12:13,,,,0,,,
Android,39485923,2,,39467278,2016-09-14 8:34:24,2462,,2,,"<blockquote>
  <p>Starting in 2.2, Android Studio on 64 bit OS, supports building C/C++
  via CMake and ndk-build through stable gradle.</p>
  
  <p>In both cases, Gradle is configured to point at the external build
  system.  It interrogates the external build system to determine a list
  of all C/C++ sources that are being built in the project and uses this
  list to populate the Studio project, enabling editing and debugging
  inside Studio while still using the external build system to compile
  and link the C/C++ sources.</p>
  
  <p>There is a set of maintained CMake NDK samples
  <a href=""https://github.com/googlesamples/android-ndk/tree/master-cmake"" rel=""nofollow noreferrer"">here</a>.</p>
</blockquote>

<p>ref: <a href=""http://tools.android.com/tech-docs/external-c-builds"" rel=""nofollow noreferrer"">http://tools.android.com/tech-docs/external-c-builds</a></p>

<p>See: <a href=""https://stackoverflow.com/questions/19207721/build-android-ndk-project-with-cmake"">Build Android NDK project with Cmake</a></p>
",,user6169399,-1,user6169399,2017-05-23 10:29:18,2016-09-14 8:39:35,,,,2,,,
Android,39544518,2,,8209858,2016-09-17 8:12:06,2465,,9,,"<p>way too late for the party here but i will still add my $0.02, Google has released a free sample called universal music player with which you can learn to stream music across all android platforms(auto, watch,mobile,tv..) it uses service to play music in the background, do check it out very helpful. here's the link to the project<br>
<a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""noreferrer"">https://github.com/googlesamples/android-UniversalMusicPlayer</a></p>
",3114032,,,,,2016-09-17 8:12:06,,,,0,,,
Android,39615406,2,,35362813,2016-09-21 11:32:11,2469,,1,,"<p>Had to integrate Unity and PayPal in the same app; Unity worked alright but when I added the PayPal SDK, I could no longer communicate to it and the app crashed.</p>

<p>Following shawn's answer, I came across <a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-jni/app/build.gradle"" rel=""nofollow"">this gradle</a>, and tried adding the productFlavors. My gradle ended up looking like this:</p>

<pre><code>productFlavors {
    arm7 {
        // in the future, ndk.abiFilter might also work
        ndk {
            abiFilter 'armeabi-v7a'
        }
    }
    all {
        ndk {
            abiFilters 'mips', 'mips64', 'x86', 'x86_64'
        }
    }
}
</code></pre>

<p>Because the other flavors didn't work on all devices.</p>
",2819864,,,,,2016-09-21 11:32:11,,,,0,,,
Android,39635140,2,,39620739,2016-09-22 9:24:58,2470,,2,,"<p>As Gerry pointed out, the latest changes to the audio-echo sample project (<a href=""https://github.com/googlesamples/android-ndk/pull/298"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/pull/298</a>) include changes that worked for me. I added this to the bottom of my CMakeLists.txt file. </p>

<pre><code># Android Studio CMake does not pack stl shared libraries, so app needs to pack
# the right shared lib into APK. The following code find right stl type and copy
# the needed shared lib into app's app/src/main/jniLibs, android studio assembles
# it into the final APK
# Helper function to retrieve shared stl path and name in NDK
# stl_path: the path to the NDK's shared lib path; empty if not using shared stl
function(get_stl_info stl_path stl_name)
   # assume app not uses shared stl lib
   set(${stl_path} """" PARENT_SCOPE)
   if(NOT ${ANDROID_STL} MATCHES ""_shared"")
       return()
   endif()

   # using shared lib, config lib name and path
   if(""${ANDROID_STL}"" MATCHES ""c\\\+\\\+_"")
       # app uses c++_shared for stl type
       set(stlPath ""llvm-libc++/libs/${ANDROID_ABI}"")
       set(stlName ""libc++_shared.so"")
   elseif(${ANDROID_STL} MATCHES ""gnustl_"")
       set(stlPath ""gnu-libstdc++/4.9/libs/${ANDROID_ABI}"")
       set(stlName ""libgnustl_shared.so"")
   else()
       # this sample not supporting other stl types
       message(FATAL_ERROR ""Not Suppored STL type: ${ANDROID_STL}"")
       return()
   endif()

   set(${stl_path} ${ANDROID_NDK}/sources/cxx-stl/${stlPath} PARENT_SCOPE)
   set(${stl_name} ${stlName} PARENT_SCOPE)
endfunction()

# force copying needed shared stl lib into ${project}/app/src/main/jniLibs
# so it will be packed into APK
get_stl_info(ndk_stl_path  ndk_stl_name)
if(NOT ${ndk_stl_path} STREQUAL """")
    set(jniLibs_dir ""${CMAKE_CURRENT_SOURCE_DIR}/../jniLibs"")
    add_custom_command(TARGET mylibrary PRE_BUILD
                   COMMAND ""${CMAKE_COMMAND}"" -E
                   copy ${ndk_stl_path}/${ndk_stl_name}
                   ""${jniLibs_dir}/${ANDROID_ABI}/${ndk_stl_name}""
                   COMMENT ""Copying Shared library to the packing directory"")
endif()
</code></pre>

<p>I guess it's a workaround that we'll be able to do without some day... Note you have to change the line <code>add_custom_command(TARGET mylibrary PRE_BUILD</code> and replace <code>mylibrary</code> with your target name.</p>
",1602875,,,,,2016-09-22 9:24:58,,,,0,,,
Android,39675899,2,,39671277,2016-09-24 11:37:41,2472,,2,,"<p>Since you are running the app on Android 6.0, implementing Runtime permission is mandatory for <code>WRITE_EXTERNAL_STORAGE</code>. This is the reason behind the crash.</p>

<p>Here are few links that get you started with implementing Runtime Permissions <a href=""https://developer.android.com/training/permissions/index.html"" rel=""nofollow"">https://developer.android.com/training/permissions/index.html</a>
<a href=""https://github.com/googlesamples/android-RuntimePermissions"" rel=""nofollow"">https://github.com/googlesamples/android-RuntimePermissions</a>
<a href=""http://www.androidwarriors.com/2016/05/runtime-permissions-android-m-example.html"" rel=""nofollow"">http://www.androidwarriors.com/2016/05/runtime-permissions-android-m-example.html</a></p>
",4402462,,,,,2016-09-24 11:37:41,,,,4,,,
Android,39677931,2,,39576566,2016-09-24 15:18:58,2473,,2,,"<p>I would suggest you to check out <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow"">Android Architecture Blueprints</a> repository. It is provided by Google, you have example of MVP and MVVM architecture implementations with/without Dagger2 and RxJava. You can also check out <a href=""http://hannesdorfmann.com/mosby/mvp/"" rel=""nofollow"">Mosby</a> library. If you are beginner it is IMO better to learn on some proven implementation than overenginer your solution.</p>
",3734457,,3734457,,2016-09-24 15:37:41,2016-09-24 15:37:41,,,,0,,,
Android,39683992,2,,39672385,2016-09-25 6:13:30,2473,,1,,"<p>To work with in app-billing you have to use <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl#L113"" rel=""nofollow"">IInAppBillingService</a>. First link is about this service API. The second link (training section) explains example with wrapper around IInAppBillingService, so <a href=""https://github.com/googlesamples/android-play-billing/blob/e19a6b4783313d51eff5111d4359ca75e1b3ec50/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/IabHelper.java#L432"" rel=""nofollow"">underneath</a> it also uses <code>getBuyIntent()</code>.</p>
",5766983,,,,,2016-09-25 6:13:30,,,,0,,,
Android,39747033,2,,39558525,2016-09-28 12:07:57,2476,,1,,"<p>You MUST NOT use Bluetooth - related stuff inside Activity (see SOLID) principles. Activity is just a UI. You should create separate Service, which will be running independently from UI in background and managing all Bluetooth - related action. From your Activity bind to that Service in onResume() method and unbind from it in onPause() method. You can get bt- control interface from ServiceConnection, passed by Service during binding.
There is a great Bluetooth example from Google - <a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow"">https://github.com/googlesamples/android-BluetoothChat</a> . The only drawback - it uses Handler for passing messages. I've modified it slightely - now there is another thread, receiving all state messages and calling callback. Feel free to use this code: 
<a href=""https://github.com/AlexShutov/LEDLights"" rel=""nofollow"">https://github.com/AlexShutov/LEDLights</a></p>
",6175778,,,,,2016-09-28 12:07:57,,,,0,,,
Android,39761861,2,,39753777,2016-09-29 5:10:25,2477,,1,,"<p>If you are trying to convert YUV from camera to Bitmap, here is something you can try:</p>

<pre><code>// import android.renderscript.*
// RenderScript mRS;
// ScriptIntrinsicYuvToRGB mYuvToRGB;
// Allocation yuvPreviewAlloc;
// Allocation rgbOutputAlloc;

// Create RenderScript context, ScriptIntrinsicYuvToRGB and Allocations and keep reusing them.
if (NotInitialized) {
    mRS = RenderScript.create(this).
    mYuvToRGB = ScriptIntrinsicYuvToRGB.create(mRS, Element.YUV(mRS));    

    // Create a RS Allocation to hold NV21 data.
    Type.Builder tYuv = new Type.Builder(mRS, Element.YUV(mRS));
    tYuv.setX(width).setY(height).setYuvFormat(android.graphics.ImageFormat.NV21);
    yuvPreviewAlloc = Allocation.createTyped(mRS, tYuv.create(), Allocation.USAGE_SCRIPT | Allocation.USAGE_IO_INPUT);

    // Create a RS Allocation to hold RGBA data.
    Type.Builder tRgb = new Type.Builder(mRS, Element.RGBA_8888(mRS));
    tRgb.setX(width).tRgb(height);
    rgbOutputAlloc = Allocation.createTyped(mRS, tRgb.create(), Allocation.USAGE_SCRIPT);

    // Set input of ScriptIntrinsicYuvToRGB
    mYuvToRGB.setInput(yuvPreviewAlloc);
}

// Use rsPreviewSurface as one of the output surface from Camera API.
// You can refer to https://github.com/googlesamples/android-HdrViewfinder/blob/master/Application/src/main/java/com/example/android/hdrviewfinder/HdrViewfinderActivity.java#L504
Surface rsPreviewSurface = yuvPreviewAlloc.getSurface();
...

// Whenever a new frame is available
// Update the yuv Allocation with a new Camera buffer without any copy.
// You can refer to https://github.com/googlesamples/android-HdrViewfinder/blob/master/Application/src/main/java/com/example/android/hdrviewfinder/ViewfinderProcessor.java#L109
yuvPreviewAlloc.ioReceive();
// The actual Yuv to Rgb conversion.
mYuvToRGB.forEach(rgbOutputAlloc);

// Copy the rgb Allocation to a Bitmap.
rgbOutputAlloc.copyTo(mBitmap);

// continue processing mBitmap.
...
</code></pre>
",5116284,,5116284,,2016-09-29 17:31:54,2016-09-29 17:31:54,,,,3,,,
Android,39794428,2,,39597354,2016-09-30 14:55:50,2479,,1,,"<p>It looks like you're talking about the sample app, the source for which you can find here. Notice the TODO on line 335 (in onTap) -- unfortunately, the sample code just returns a random barcode result:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/BarcodeCaptureActivity.java"" rel=""nofollow"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/BarcodeCaptureActivity.java</a></p>

<p>Try modifying the sample to select the barcode whose bounding rectangle contains the tap point.</p>
",6905314,,,,,2016-09-30 14:55:50,,,,3,,,
Android,39847389,2,,39839817,2016-10-04 8:15:59,2482,,4,,"<p>Here is my fully working solution.  By including the CameraSource.java class <a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow"">found here</a> in my project.  I am able to scan the qr code and I can toggle the camera torch on and off.</p>

<pre><code>public class fragment_qrscan extends myFragment {

    SurfaceView cameraPreview;
    private CameraSource mCameraSource;
    private Button btnLight;
    boolean lightOn = false;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

        View view = inflater.inflate(R.layout.fragment_qrscan, container, false);

        cameraPreview = (SurfaceView) view.findViewById(R.id.camera_preview);
        btnLight = (Button) view.findViewById(R.id.btnLight);

        btnLight.setOnClickListener(
                new View.OnClickListener() {
                    public void onClick(View v) {
                        btnLightClicked();
                    }
                }
        );

        createCameraSource(true, false);

        return view;
    }

    private void btnLightClicked() {

       if (!lightOn) {
            mCameraSource.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
           lightOn = true;

       }
        else {
           mCameraSource.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
           lightOn = false;
       }
    }

    @SuppressLint(""InlinedApi"")
    private void createCameraSource(boolean autoFocus, boolean useFlash) {
        Context context = getActivity().getApplicationContext();
        BarcodeDetector barcodeDetector = new BarcodeDetector.Builder(context).build();
        CameraSource.Builder builder = new CameraSource.Builder(getActivity().getApplicationContext(), barcodeDetector)
                .setFacing(CameraSource.CAMERA_FACING_BACK)
                .setRequestedPreviewSize(1600, 1024)
                .setRequestedFps(15.0f);
        // make sure that auto focus is an available option
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            builder = builder.setFocusMode(
                    autoFocus ? Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE : null);
        }

        mCameraSource = builder
                .setFlashMode(useFlash ? Camera.Parameters.FLASH_MODE_TORCH : null)
                .build();

    cameraPreview.getHolder().addCallback(new SurfaceHolder.Callback() {
        @Override
        public void surfaceCreated(SurfaceHolder holder) {
            try {
                if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.CAMERA}, 1);
                }

                mCameraSource.start(cameraPreview.getHolder());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        @Override
        public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {

        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {

            mCameraSource.stop();
        }
    });

    barcodeDetector.setProcessor(new Detector.Processor&lt;Barcode&gt;() {
        @Override
        public void release() {

        }

        @Override
        public void receiveDetections(Detector.Detections&lt;Barcode&gt; detections) {

            final SparseArray&lt;Barcode&gt; barcodes = detections.getDetectedItems();
            if (barcodes.size() &gt;0) {
                Log.i(""myStuff"",String.valueOf(barcodes.valueAt(0).displayValue));
            }
        }
    });

    }
}
</code></pre>

<p>I am sure there is a cleaner solution but for now this code works perfectly and with auto focus set to true is is really cool how fast and easy it is to scan the qr code.  Even from 3 feet away the code is detected instantly.  </p>
",5818043,,,,,2016-10-04 8:15:59,,,,4,,,
Android,39890164,2,,39889579,2016-10-06 7:35:21,2484,,1,,"<p>Vinay. I'm working on a similar android- arduino project - smart LED controller. There is very good example from Google on how to use Bluetooth connectivity - <a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow"">https://github.com/googlesamples/android-BluetoothChat</a> . I've been following this example to get things going. There is my project - <a href=""https://github.com/AlexShutov/LEDLights"" rel=""nofollow"">https://github.com/AlexShutov/LEDLights</a> . Feel free to use code from there. Notice, that you have to connect to HC-05 from you phone (not accept connection from HC-05). </p>
",6175778,,,,,2016-10-06 7:35:21,,,,1,,,
Android,39995221,2,,39994548,2016-10-12 9:32:41,2490,,2,,"<p>You could refer <a href=""https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi"" rel=""nofollow"">Fused Location API</a> and it's high accuracy option. The documentation <a href=""https://developer.android.com/training/location/change-location-settings.html"" rel=""nofollow"">says</a>,</p>

<blockquote>
  <p>PRIORITY_HIGH_ACCURACY - Use this setting to request the most precise location possible. With this setting, the location services are more likely to use GPS to determine the location.</p>
</blockquote>

<p>Now i'v also tested (indoor, near balcony) on old device (Samsung Galaxy S3). I'm receiving location updates between 5m and 15m accuracy. The tested code from, <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationUpdates/app/src/main/java/com/google/android/gms/location/sample/locationupdates/MainActivity.java"" rel=""nofollow"">googlesamples/android-play-location</a></p>
",1281180,,,,,2016-10-12 9:32:41,,,,0,,,
Android,40010960,2,,40009781,2016-10-13 1:42:02,2491,,2,,"<p>app/build.gradle's default has higher priority over Application.mk; use    </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>android {
    defaultConfig {
      ndk {
            abiFilters 'armeabi', 'armeabi-v7a' // more could be added
      }
  }
}</code></pre>
</div>
</div>
</p>

<p>as in <a href=""https://github.com/googlesamples/android-ndk/blob/master/teapots/classic-teapot/build.gradle"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/blob/master/teapots/classic-teapot/build.gradle</a>.</p>
",4496512,,,,,2016-10-13 1:42:02,,,,1,,,
Android,40014071,2,,39260293,2016-10-13 6:45:59,2491,,2,,"<p>Yeah, this is because Android Studio IDE need get the files to display in IDE before compile: expose different behavior between command line and IDE build.  In <a href=""https://github.com/googlesamples/android-ndk/blob/master/webp/view/build.gradle"" rel=""nofollow"">here</a> I hack to download the needed repo earlier than anything else, so Android Studio will not complain. But it is not pretty... and long android studio start up time...</p>
",4496512,,,,,2016-10-13 6:45:59,,,,0,,,
Android,40067513,2,,39745851,2016-10-16 6:25:12,2494,,1,,"<p>The shared lib currently need to packed into apk manually, one way is to route jniLibs to your shared lib directory. Hope later version could pack it automatically. One example is here,<a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-libs"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master/hello-libs</a>, it imports one shared lib, one static lib; shared lib is packed to APK  with script in app/build.gradle:jniLibs.srcDirs = ['../distribution/gperf/lib']</p>
",4496512,,,,,2016-10-16 6:25:12,,,,0,,,
Android,40067582,2,,39202936,2016-10-16 6:35:10,2494,,2,,"<p>For now, you could also put your shared libs into directory, and configure jniLibs to point to that directory, that will pack it. One sample is here: <a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-libs"" rel=""nofollow"">https://github.com/googlesamples/android-ndk/tree/master/hello-libs</a>, follow gperf see if that helps. This way app not depending on the generated build folders. When android studio added packing libs, the jniLibs workaround is not necessary anymore</p>
",4496512,,,,,2016-10-16 6:35:10,,,,0,,,
Android,40168632,2,,40162157,2016-10-21 4:50:22,2499,,7,,"<p>currently need to pack it by the app. it could be something like:</p>

<pre><code>    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = ['point/to/your/shared-lib']
       }
    }
</code></pre>

<p>one example is: <a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-libs/app/build.gradle"" rel=""noreferrer"">https://github.com/googlesamples/android-ndk/blob/master/hello-libs/app/build.gradle</a>
If your shared lib [yours is inside project path] is close to your project, put relative path of your shared-lib to your CMakeLists.txt would work.</p>

<p>Some background discussion at the bottom of this bug might help:
<a href=""https://code.google.com/p/android/issues/detail?id=214664&amp;can=8&amp;q=vulkan&amp;colspec=ID%20Status%20Priority%20Owner%20Summary%20Stars%20Reporter%20Opened"" rel=""noreferrer"">https://code.google.com/p/android/issues/detail?id=214664&amp;can=8&amp;q=vulkan&amp;colspec=ID%20Status%20Priority%20Owner%20Summary%20Stars%20Reporter%20Opened</a></p>
",4496512,,,,,2016-10-21 4:50:22,,,,3,,,
Android,40235769,2,,40235371,2016-10-25 9:05:22,2503,,2,,"<p>Taken from <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/MusicService.java"" rel=""nofollow"">MusicPlayer.java</a>: </p>

<blockquote>
  <p>This class provides a MediaBrowser through a service. It exposes the
  media library to a browsing client, through the onGetRoot and
  onLoadChildren methods</p>
</blockquote>

<p><strong>onGetRoot(..)</strong>: Returns the root id if the client package has permission to access media information (Returns null if the client is not allowed). <a href=""https://developer.android.com/reference/android/service/media/MediaBrowserService.html#onGetRoot(java.lang.String,%20int,%20android.os.Bundle)"" rel=""nofollow"">Source</a></p>

<p><strong>onLoadChildren</strong>: Returns a list of children of a media item. <a href=""https://developer.android.com/reference/android/service/media/MediaBrowserService.html#onLoadChildren(java.lang.String,%20android.service.media.MediaBrowserService.Result%3Cjava.util.List%3Candroid.media.browse.MediaBrowser.MediaItem%3E%3E)"" rel=""nofollow"">Source</a></p>

<p>To get a idea of the implementation of both check the implementation in <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/MusicService.java"" rel=""nofollow"">MusicPlayer.java</a></p>
",5183341,,,,,2016-10-25 9:05:22,,,,0,,,
Android,40258418,2,,40258004,2016-10-26 9:24:03,2504,,1,,"<p>Try <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow"">this</a> sample project from Google (or just <a href=""https://developer.android.com/samples/Camera2Basic/src/com.example.android.camera2basic/Camera2BasicFragment.html"" rel=""nofollow"">Camera2BasicFragment</a>). In general You should request focus, than determine ""focus lock"" state in <code>CameraCaptureSession.CaptureCallback</code> than capture image and finally request for unlock focus.</p>
",6950238,,,,,2016-10-26 9:24:03,,,,2,,,
Android,40329727,2,,40329700,2016-10-30 13:40:29,2509,,4,,"<p>Looking at <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/AndroidManifest.xml"" rel=""nofollow"">https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/AndroidManifest.xml</a> I'm pretty sure <code>&lt;uses-feature android:name=""android.hardware.camera2"" /&gt;</code> is not really a thing. Try changing it to <code>&lt;uses-feature android:name=""android.hardware.camera"" /&gt;</code> or remove it.</p>
",1074080,,,,,2016-10-30 13:40:29,,,,2,,,
Android,40369378,2,,40352748,2016-11-01 22:05:47,2511,,1,,"<p>Found a much better sample project that doesn't display that strange Samsung popup: <a href=""https://github.com/googlesamples/android-FingerprintDialog/issues"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-FingerprintDialog/issues</a></p>

<p>And yes, fingerprint auth on android really is a PITA.</p>
",2593123,,,,,2016-11-01 22:05:47,,,,0,,,
Android,40381117,2,,38402829,2016-11-02 13:25:03,2512,,1,,"<p>Checkthis one <a href=""https://github.com/googlesamples/android-ndk/tree/master/audio-echo"" rel=""nofollow noreferrer"">google example </a></p>

<p>Usage :</p>

<blockquote>
  <p>App will capture audio from android devices and playback on the same
  device; the <strong>playback on speaker will be captured immediately</strong></p>
</blockquote>

<p>*</p>
",1850903,,1850903,,2016-11-02 13:30:06,2016-11-02 13:30:06,,,,1,,,
Android,40399886,2,,40398903,2016-11-03 11:04:02,2512,,1,,"<p>Google demo of Camera2 Api. It will help you.
Link : <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></p>
",5720915,,,,,2016-11-03 11:04:02,,,,0,,,
Android,40425249,2,,40387715,2016-11-04 14:31:49,2514,,3,,"<p>From my understanding you saving your prefs to the normal user locked storage and trying to move it from there to the device locked storage at boot time. That won't work since at boot time the user storage is locked. 
You need to save your shared prefs directly to the device storage context and use the migration procedure only in the upgrade from the older devices case.</p>

<p>See this <a href=""https://github.com/googlesamples/android-DirectBoot/blob/737ab9a214debbf3c940360b834077ccc3035ff3/Application/src/main/java/com/example/android/directboot/alarms/AlarmStorage.java"" rel=""nofollow noreferrer"">google example</a> for a correct handling of direct boot.</p>
",6809537,,,,,2016-11-04 14:31:49,,,,1,,,
Android,40470788,2,,40470695,2016-11-07 17:14:14,2517,,1,,"<p>Google has published <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">a collection of samples</a> to discuss and showcase different architectural tools and patterns for Android apps.</p>

<p>To begin, very usefull to you to understand <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">how this one works</a>. And adapt to your sample.</p>

<p>[...] This sample is the base for many of the variants. It showcases a simple implementation of the Model-View-Presenter pattern with no architectural frameworks. It uses manual dependency injection to provide a repository with local and remote data sources. Asynchronous tasks are handled with callbacks [...]</p>

<p><a href=""https://i.stack.imgur.com/VjxHm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VjxHm.png"" alt=""enter image description here""></a></p>
",5581663,,,,,2016-11-07 17:14:14,,,,2,,,
Android,40477880,2,,40373138,2016-11-08 2:13:46,2517,,3,,"<p>You can update the Android Studio to 2.2.2, and use the menu File-> Link C ++ Project with Gradle.
The official ndk samples can be found <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow noreferrer"">here</a>!</p>
",5008255,,,,,2016-11-08 2:13:46,,,,1,,,
Android,40482678,2,,40482556,2016-11-08 8:58:59,2517,,4,,"<p>You could just put the file into your assets folder in the source code, and then do this:</p>

<pre><code>WebView webView = (WebView)findViewById(R.id.webView1);
webview.loadUrl(""file:///android_assets/file.html"");
</code></pre>

<p><strong>For display PDF:</strong></p>

<p>Since API Level 21 (Lollipop) Android provides a PdfRenderer class:</p>

<pre><code>// create a new renderer
PdfRenderer renderer = new PdfRenderer(getSeekableFileDescriptor());

// let us just render all pages
final int pageCount = renderer.getPageCount();
for (int i = 0; i &lt; pageCount; i++) {
  Page page = renderer.openPage(i);

  // say we render for showing on the screen
  page.render(mBitmap, null, null, Page.RENDER_MODE_FOR_DISPLAY);

  // do stuff with the bitmap

  // close the page
  page.close();
}

// close the renderer
renderer.close();
</code></pre>

<p>This sample demonstrates <a href=""https://github.com/googlesamples/android-PdfRendererBasic"" rel=""nofollow noreferrer"">how to display PDF document on screen using the PdfRenderer introduced in Android 5.0 Lollipop.</a></p>

<p>For older APIs, checkout <a href=""https://github.com/barteksc/AndroidPdfViewer"" rel=""nofollow noreferrer"">AndroidPdfViewer library</a>, works on API 11 and higher:</p>

<pre><code>pdfView.fromUri(Uri)
or
pdfView.fromFile(File)
or
pdfView.fromAsset(String)
    .pages(0, 2, 1, 3, 3, 3) // all pages are displayed by default
    .enableSwipe(true)
    .swipeHorizontal(false)
    .enableDoubletap(true)
    .defaultPage(0)
    .onDraw(onDrawListener)
    .onLoad(onLoadCompleteListener)
    .onPageChange(onPageChangeListener)
    .onPageScroll(onPageScrollListener)
    .onError(onErrorListener)
    .enableAnnotationRendering(false)
    .password(null)
    .scrollHandle(null)
    .load();
</code></pre>
",983391,,983391,,2016-11-08 9:28:51,2016-11-08 9:28:51,,,,8,,,
Android,40591302,2,,40591099,2016-11-14 14:39:45,2524,,1,,"<p>You can iterate over all sizeq and try to minimize the difference of area between theses sizes and your preview size.</p>

<p>you can check <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java#L511-L518"" rel=""nofollow noreferrer"">this</a></p>
",6325994,,,,,2016-11-14 14:39:45,,,,2,,,
Android,40591400,2,,40590695,2016-11-14 14:44:06,2524,,1,,"<p>If your <code>targetSdkVersion</code> is <code>&gt;22</code>, try requesting runtime permission &amp; request location update from <code>onRequestPermissionsResult</code>.</p>

<p>For runtime permission click <a href=""https://developer.android.com/training/permissions/requesting.html"" rel=""nofollow noreferrer"">Here</a>!</p>

<p>Also your code will only work if location services is enable in device setting.
Since you are neither checking location services status nor requesting to enable it.</p>

<p>Try using <code>FusedLocationProviderApi</code> you don't have to use intent, check <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates"" rel=""nofollow noreferrer"">Here</a>!</p>
",3524134,,3524134,,2016-11-14 15:29:17,2016-11-14 15:29:17,,,,0,,,
Android,40602582,2,,26462811,2016-11-15 5:22:05,2524,,1,,"<p>I was going through the solutions available on web to take screenshot, So I found some really helpful which I would like to share here:</p>

<p>1) Here is the <a href=""https://github.com/mtsahakis/MediaProjectionDemo"" rel=""nofollow noreferrer"">MediaProjectionAPIDemo</a> available on github</p>

<p>2) Here is another <a href=""https://github.com/googlesamples/android-ScreenCapture"" rel=""nofollow noreferrer"">Project</a> using MediaProjectionAPI available on github</p>

<p>3) Another <a href=""https://github.com/openstf/minicap"" rel=""nofollow noreferrer"">solution</a> which require NDK to stream real time Screen Capture </p>

<p>4) And at last, <a href=""https://code.google.com/archive/p/android-screenshot-library/wikis/UserGuide.wiki"" rel=""nofollow noreferrer"">here</a> is Android Screenshot library </p>

<p>Hope it will help you to take off :-)</p>
",345138,,,,,2016-11-15 5:22:05,,,,0,,,
Android,40660898,2,,2904507,2016-11-17 17:03:36,2527,,1,,"<p>check this example it's used in google translate to get text from image it's use google services</p>

<p><a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/ocr-codelab"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision/tree/master/visionSamples/ocr-codelab</a></p>
",3806350,,,,,2016-11-17 17:03:36,,,,0,,,
Android,40786663,2,,31864043,2016-11-24 12:39:11,2534,,1,,"<p>I've recently implemented something similar. To achieve this, I set up an Android JNI project with OpenCV and use the OpenCV camera reading capability to store the frames. A pointer to the frame data can then be passed to the CCV Image wrapper for use with the CCV library functions. CCV has minimal dependencies and the easiest way to get up and running is to include the source code of the modules you require in your JNI directory of the project.</p>

<p>To set up a project with OpenCV you can follow <a href=""http://docs.opencv.org/2.4/doc/tutorials/introduction/android_binary_package/dev_with_OCV_on_Android.html"" rel=""nofollow noreferrer"">this tutorial.</a> The OpenCV SDK has a sample project for a simple camera reader. The Android GitHub page contains a sample HelloJNI project <a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-jni"" rel=""nofollow noreferrer"">here</a> which shows how to set up your Android project with both Java and C/C++ using JNI. The CCV source can then be added to the C/C++ source directory so that your C/C++ functions have access to the library.</p>

<p>Once you have the project set up with OpenCV libraries and JNI functionality, it is a matter of saving the frame data with OpenCV and passing a pointer of it to the C code. Store each frame as a <code>Mat</code> object, the <code>Mat</code> object can then be passed to your C/C++ code like this: (Note this is only an extract showing the key code segments required)</p>

<pre><code>package your.namespace.here;

import org.opencv.core.Core;
import org.opencv.core.Mat;

public class MainActivity{

    // Store frames in this object for later processing
    Mat frame;

    static {
        // Load the c file name with JNI bindings, e.g. here we load test.c
        System.loadLibrary(""test"");
    }

    // Declare the JNI function wrapper
    public native int ccvTest( long input, long output);

    // OpenCV methods here to store the frame, see 
    // OpenCV4Android - tutorial-1-camerapreview for full 
    // code description.
    //...

    // This function to be called after each frame is stored.
    // output can then be converted to Bitmap and displayed in ImageView
    // or used for further processing with OpenCV.
    public Mat processFrame(){
        Mat output = new Mat();
        ccvTest(frame.getNativeObjAddr(), output.getNativeObjAddr());
        return output;
    }
}
</code></pre>

<p>Using the HelloJNI template, a sample C file (for this example we call it test.c) with a call to one of the CCV library functions would look like this:</p>

<pre><code>#include &lt;string.h&gt;
#include &lt;jni.h&gt;

#ifdef __cplusplus
extern ""C"" {
#endif
// ccv files to include should be compiled using c compiler
#include ""ccv/lib/ccv.h""
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern ""C"" {
#endif

JNIEXPORT void JNICALL
Java_your_namespace_here_MainActivity_ccvTest( JNIEnv* env,
                                              jobject thiz,
                                              jlong input, jlong output)
{

    Mat* in_p  = (Mat*)input;
    Mat* out_p  = (Mat*)output;
    Mat &amp;rgb = *in_p;
    ccv_dense_matrix_t* image = 0;

    // Pass the Mat data to the CCV Image wrapper
    ccv_read(rgb.data, &amp;image, CCV_IO_BGR_RAW | CCV_IO_ANY_RAW |     CCV_IO_GRAY, rgb.rows, rgb.cols, rgb.step[0]);

    // Now the Mat is in ccv image format, you can pass
    // the image pointer to any ccv function you like.

    //
    // Put your calls to CCV library here..
    //

}
#ifdef __cplusplus
}
#endif
</code></pre>

<p>The tree structure of the project may look similar to this, with all of the ccv source in the jni/ccv folder:</p>

<p><a href=""https://i.stack.imgur.com/nqmVW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nqmVW.png"" alt=""enter image description here""></a></p>

<p>This set up is useful as it allows you to hook into the functionality of both OpenCV and CCV. Hope this helps.</p>
",1897312,,1897312,,2016-11-24 12:44:49,2016-11-24 12:44:49,,,,0,,,
Android,40849410,2,,40849143,2016-11-28 16:45:53,2538,,1,,"<p>Please see the ReadMe of the project, specifically to <a href=""https://github.com/googlesamples/android-architecture#opening-a-sample-in-android-studio"" rel=""nofollow noreferrer"">this section</a> (Opening a sample in Android Studio).</p>

<p>Since they don't have any project on master branch you need to checkout a different branch (see this <a href=""https://github.com/googlesamples/android-architecture/wiki/Samples-at-a-glance"" rel=""nofollow noreferrer"">link</a>).</p>

<p>Hope this helps!!</p>
",6621592,,,,,2016-11-28 16:45:53,,,,1,,,
Android,40897662,2,,40896558,2016-11-30 20:33:38,2540,,1,,"<p>What are you are looking for is <a href=""https://source.android.com/devices/sensors/batching.html"" rel=""nofollow noreferrer"">Sensor Batching</a>.</p>

<blockquote>
  <p>That allows you to get continuous sensor data even without keeping the device awake. It basically stores the sensor events in a hw based queue right in the chip itself and only sends them to your app (service,..) at predefined intervals in batches. This allows you to do a 24/7 monitoring without draining the battery significantly. Please note that only supported chipsets can do that (you can find details in Android docs), in case of older phones you need to fallback to the hideous wakelock keeping method in order to get your data. <a href=""https://stackoverflow.com/a/30390540/6817568"">Source</a></p>
</blockquote>

<p>Also <a href=""https://github.com/googlesamples/android-BatchStepSensor"" rel=""nofollow noreferrer"">there</a> is example how to use BatchStepSensor</p>
",6817568,,-1,,2017-05-23 12:34:14,2016-11-30 20:33:38,,,,0,,,
Android,41002563,2,,40972081,2016-12-06 18:43:14,2546,,1,,"<p>How are you drawing the output from your SurfaceTexture to begin with? Are you just using the TextureView class, or do you have an actual GLSurfaceView or similar and a set of OpenGL ES drawing calls to draw the preview with?</p>

<p>If you're using TextureView, then there's nothing you can do - it takes care of the drawing and you can't inject yourself in the middle.</p>

<p>With a GLSurfaceView, you're basically writing your own OpenGL program, which can do all sorts of image processing via fragment shaders and the like. But you'll need to learn the basics of OpenGL programming for that, or at least find a sample that sets up all the boilerplate.</p>

<p>If you're using camera2, you could also consider using RenderScript for your processing.  The official Google sample app, <a href=""https://github.com/googlesamples/android-HdrViewfinder"" rel=""nofollow noreferrer"">HdrViewfinder</a>, uses RS to do real-time processing on preview.</p>
",1344825,,,,,2016-12-06 18:43:14,,,,0,,,
Android,41032503,2,,41032145,2016-12-08 5:40:18,2547,,2,,"<p>If you look at the contents of the <code>music.json</code>, the <code>source</code> and <code>image</code> paths are relative paths, stored in the <code>http://storage.googleapis.com/automotive-media</code> directory.</p>

<p>In your case, there is no <code>https://api.myjson.com/bins/Jazz_In_Paris.mp3</code>, so any attempt to play that track will obviously fail. As seen in <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/39fa286313639b5ce069e755c18762aaa1f59ea9/mobile/src/main/java/com/example/android/uamp/model/RemoteJSONSource.java#L93"" rel=""nofollow noreferrer"">the source code</a>, the relative source and image name logic is only used when the values do not start with <code>http</code>.</p>

<p>You can temporarily prefix all of the sources and images with <code>http://storage.googleapis.com/automotive-media/</code> to reuse the existing values until you host your own content.</p>
",1676363,,,,,2016-12-08 5:40:18,,,,8,,,
Android,41052300,2,,32652402,2016-12-09 2:44:25,2548,,7,,"<p><a href=""https://github.com/googlesamples/android-architecture"" rel=""noreferrer"">Google examples</a> do it as follows</p>

<pre><code>import static com.google.common.base.Preconditions.checkNotNull;

...

public void doStuff(@NonNull String sParm){
     this.sParm= checkNotNull(s, ""sParm cannot be null!"");
}
</code></pre>
",1989579,,,,,2016-12-09 2:44:25,,,,0,,,
Android,41077311,2,,41077125,2016-12-10 15:48:49,2550,,4,,"<p>The <a href=""https://developer.android.com/reference/android/app/usage/package-summary.html"" rel=""nofollow noreferrer"">App usage statistics API</a> allows app developers to collect statistics related to usage of the applications. This API provides more detailed usage information than the <strong>deprecated</strong> <code>getRecentTasks(</code>) method.</p>

<p>To use this API, you must first declare the <code>android.permission.PACKAGE_USAGE_STATS</code> permission in your manifest. The user must also enable access for this app through <code>Settings &gt; Security &gt; Apps with usage access</code>.</p>

<p>To collect the statistics of the app usage, you need to first get the instance of <a href=""https://developer.android.com/reference/android/app/usage/UsageStatsManager.html"" rel=""nofollow noreferrer"">UsageStatsManager</a> by the following code:</p>

<pre><code>mUsageStatsManager = (UsageStatsManager) getActivity()
       .getSystemService(Context.USAGE_STATS_SERVICE);
</code></pre>

<p>Then you can retrieve the statistics of the app usage by the following method:</p>

<pre><code>Calendar cal = Calendar.getInstance();
cal.add(Calendar.YEAR, -1);
List&lt;UsageStats&gt; queryUsageStats = mUsageStatsManager
        .queryUsageStats(UsageStatsManager.INTERVAL_DAILY, cal.getTimeInMillis(),
                System.currentTimeMillis());
</code></pre>

<p>The first argument of the <code>queryUsageStats()</code> is used for the time interval by which the stats are aggregated. The second and the third arguments are used for specifying the beginning and the end of the range of the stats to include in the results.</p>

<p>Here is a <a href=""https://github.com/googlesamples/android-AppUsageStatistics"" rel=""nofollow noreferrer"">basic app code on GitHub</a> showing how to use App usage statistics API to let users collect statistics related to usage of the applications.</p>

<p><strong>Note:</strong> <code>android.app.usage</code> required <strong>API level 21</strong> or above.</p>
",983391,,983391,,2016-12-10 16:12:17,2016-12-10 16:12:17,,,,1,,,
Android,41114107,2,,40931966,2016-12-13 5:09:32,2552,,1,,"<p>I agree with you.
But I think you should try with JobScheduler once.
You will find official documentation 
<a href=""https://developer.android.com/reference/android/app/job/JobScheduler.html"" rel=""nofollow noreferrer"">https://developer.android.com/reference/android/app/job/JobScheduler.html</a>
Best example I find
<a href=""https://github.com/googlesamples/android-JobScheduler"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-JobScheduler</a>
I don't have test it.according to me you have to try this.</p>

<p><strong><em>EDIT</em></strong></p>

<p>If you want to run your application in doze mode in 6.0 or later, you have to white list your application
check out</p>

<p><a href=""https://www.bignerdranch.com/blog/diving-into-doze-mode-for-developers/"" rel=""nofollow noreferrer"">https://www.bignerdranch.com/blog/diving-into-doze-mode-for-developers/</a></p>

<p><a href=""https://developer.android.com/training/monitoring-device-state/doze-standby.html"" rel=""nofollow noreferrer"">https://developer.android.com/training/monitoring-device-state/doze-standby.html</a></p>

<p>Imtiyaz</p>
",2294560,,2294560,,2016-12-13 10:17:39,2016-12-13 10:17:39,,,,3,,,
Android,41222110,2,,41221284,2016-12-19 11:58:33,2558,,1,,"<p>you may try to change <code>onMeasure</code> method inside your AutofitTextureView class</p>

<pre><code>public class AutoFitTextureView extends TextureView {

    int maxwidth = 0;
    int maxheight = 0;
    private int mRatioWidth = 0;
    private int mRatioHeight = 0;
    private Size previewSize;

    public AutoFitTextureView(Context context) {
        this(context, null);
    }

    public AutoFitTextureView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public AutoFitTextureView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    public void setAspectRatio(int width, int height, int maxwidth, int maxheight, Size preview) {
        if (width &lt; 0 || height &lt; 0) {
            throw new IllegalArgumentException(""Size cannot be negative."");
        }
        mRatioWidth = width;
        mRatioHeight = height;
        this.maxwidth = maxwidth;
        this.maxheight = maxheight;
        this.previewSize = preview;
        enterTheMatrix();
        requestLayout();
    }



    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        int width = MeasureSpec.getSize(widthMeasureSpec);
        int height = MeasureSpec.getSize(heightMeasureSpec);
        boolean isFullBleed = true;
        if (0 == mRatioWidth || 0 == mRatioHeight) {
            setMeasuredDimension(width, height);
        } else {
            setMeasuredDimension(height * mRatioWidth / mRatioHeight,height);
         }

    }


    private void adjustAspectRatio(int previewWidth,
                                   int previewHeight,
                                   int rotation) {
        Matrix txform = new Matrix();
        int viewWidth = getWidth();
        int viewHeight = getHeight();
        RectF rectView = new RectF(0, 0, viewWidth, viewHeight);
        float viewCenterX = rectView.centerX();
        float viewCenterY = rectView.centerY();
        RectF rectPreview = new RectF(0, 0, previewHeight, previewWidth);
        float previewCenterX = rectPreview.centerX();
        float previewCenterY = rectPreview.centerY();

        if (Surface.ROTATION_90 == rotation ||
                Surface.ROTATION_270 == rotation) {
            rectPreview.offset(viewCenterX - previewCenterX,
                    viewCenterY - previewCenterY);

            txform.setRectToRect(rectView, rectPreview,
                    Matrix.ScaleToFit.FILL);

            float scale = Math.max((float) viewHeight / previewHeight,
                    (float) viewWidth / previewWidth);

            txform.postScale(scale, scale, viewCenterX, viewCenterY);
            txform.postRotate(90 * (rotation - 2), viewCenterX,
                    viewCenterY);
        } else {
            if (Surface.ROTATION_180 == rotation) {
                txform.postRotate(180, viewCenterX, viewCenterY);
            }
        }

        if (LollipopCamera.type == 1) {
            txform.postScale(-1, 1, viewCenterX, viewCenterY);
        }

        setTransform(txform);
    }

    private void enterTheMatrix() {
        if (previewSize != null) {
            adjustAspectRatio(mRatioWidth,
                    mRatioHeight,
                    ((Activity) getContext()).getWindowManager().getDefaultDisplay().getRotation());
        }
    }
}
</code></pre>

<p>this is before applying above method
<a href=""https://i.stack.imgur.com/6PgUb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6PgUb.png"" alt=""enter image description here""></a>
<br /><br /> and this is after applying above method 
<a href=""https://i.stack.imgur.com/CM9z5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CM9z5.png"" alt=""enter image description here""></a>
<br /><a href=""https://github.com/googlesamples/android-Camera2Video"" rel=""nofollow noreferrer"">Camera2Video google sample</a></p>

<p>and i also removed thse two lines in the <code>fragment_camera2_video.xml</code></p>

<pre><code> android:layout_below=""@id/texture""
    android:background=""#4285f4""
</code></pre>

<p>I am calling setAspectRation from my camera Fragment as follows</p>

<pre><code>  mPreviewSize = chooseOptimalSize(map.getOutputSizes(ImageFormat.JPEG),
                        rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
                        maxPreviewHeight, largest);

                // We fit the aspect ratio of TextureView to the size of preview we picked.
                int orientation = getResources().getConfiguration().orientation;
                if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    mTextureView.setAspectRatio(
                            mPreviewSize.getWidth(), mPreviewSize.getHeight(), universal_width, universal_height, largest);
                } else {
                    mTextureView.setAspectRatio(
                            mPreviewSize.getHeight(), mPreviewSize.getWidth(), universal_width, universal_height, largest);
                }
</code></pre>
",5794116,,5794116,,2017-07-14 6:39:12,2017-07-14 6:39:12,,,,8,,,
Android,41280295,2,,26884956,2016-12-22 9:55:01,2561,,4,,"<p>The install method @amalBit provided did not work for me. It's strange since this is how it is implemented in the <a href=""https://github.com/googlesamples/android-testdpc/blob/master/app/src/main/java/com/afwsamples/testdpc/cosu/CosuUtils.java"" rel=""nofollow noreferrer"">Google Sample</a>.</p>

<p>This <a href=""https://stackoverflow.com/a/32687988/2110483"">answer</a> helped me to find a solution. I had to change some parts of the code. Here is my implementation:</p>

<pre><code>public static void installPackage(Context context, InputStream inputStream)
        throws IOException {
    PackageInstaller packageInstaller = context.getPackageManager().getPackageInstaller();
    int sessionId = packageInstaller.createSession(new PackageInstaller
            .SessionParams(PackageInstaller.SessionParams.MODE_FULL_INSTALL));
    PackageInstaller.Session session = packageInstaller.openSession(sessionId);

    long sizeBytes = 0;

    OutputStream out = null;
    out = session.openWrite(""my_app_session"", 0, sizeBytes);

    int total = 0;
    byte[] buffer = new byte[65536];
    int c;
    while ((c = inputStream.read(buffer)) != -1) {
        total += c;
        out.write(buffer, 0, c);
    }
    session.fsync(out);
    inputStream.close();
    out.close();

    // fake intent
    IntentSender statusReceiver = null;
    Intent intent = new Intent(context, SomeActivity.class);
    PendingIntent pendingIntent = PendingIntent.getBroadcast(context,
            1337111117, intent, PendingIntent.FLAG_UPDATE_CURRENT);

    session.commit(pendingIntent.getIntentSender());
    session.close();
}
</code></pre>

<p>This method can be called like this:</p>

<pre><code>        InputStream inputStream = getActivity().getAssets().open(""my_awesome_app.apk"");
        InstallationHelper.installPackage(getActivity(), inputStream);
</code></pre>
",2110483,,-1,,2017-05-23 12:10:30,2016-12-22 9:55:01,,,,0,,,
Android,41284080,2,,41283917,2016-12-22 13:15:51,2562,,2,,"<p>You need to update your google play service of device.</p>

<p>You can see this <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/issues/97"" rel=""nofollow noreferrer"">Bug report</a> which already has been addressed</p>

<p>and possibility you will have to update your <code>gcm</code> dependency then appropriate modifications of code will also required mean the deprecated methods will be needed to replaced with new one in the project for e.g <code>GoogleApiAvailability</code> to register token etc so also make sure you are using the latest <code>gcm</code> dependency in your project</p>
",4936904,,4936904,,2016-12-22 13:20:57,2016-12-22 13:20:57,,,,0,,,
Android,41298218,2,,41291297,2016-12-23 8:58:45,2562,,8,,"<p>There is some confusion about the role of Components and Modules in Dagger 2 in an Android app. </p>

<ol>
<li><p><strong>Components</strong> are for grouping similar lifecycles together. </p></li>
<li><p><strong>Modules</strong> can be organized along functional lines and for testing (as per the <a href=""https://google.github.io/dagger/testing.html"" rel=""nofollow noreferrer"">official instructions for testing</a>). </p></li>
</ol>

<p>Some of the best examples of this are in the <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Google Android Architecture Blueprints Github repo</a>. If you examine the source code there, you can see there is one single app-scoped Component (with a lifecycle of the duration of the whole app) and then separate Activity-scoped Components for the Activity and Fragment corresponding to a given functionality in a project. The Activity-scoped Components will, of course, have a lifecycle that corresponds to their respective Activity.</p>

<p>Let's move to your own particular use case.  While one activity-scoped component that can inject all the dependencies for Activity A, B, and C may be acceptable for the simple example in the question, the situation will quickly become more complicated if requirements change and Activity A suddenly needs a new dependency with a complicated object graph. You'll then have to create a new Module for the new dependency which will only be useful for one of the three injection sites in your Component. This will, in turn, make things more difficult for testing if you are using a mock Component to test Activity B and Activity C. </p>

<p>Hence, I would argue that from the start it is better to maintain one Component per Activity. Activity-scoped components are cheap and easy to maintain so it is not an issue to err on the side of caution and start with one activity-scoped component per activity.</p>

<p>For the example you have specified, I would create an app-scoped component:  </p>

<pre><code>@Component( modules = { SharedPreferencesModule.class } )
@PerApp
interface AppComponent {

    SharedPreferences sharedPreferences(Application app);

}
</code></pre>

<p>You can have your Activity components become dependent components of the app component. That way they will not have to be concerned with <code>SharedPreferences</code> since this is bound in the app-component and exposed to dependents:</p>

<pre><code>@Component( dependencies = { AppComponent.class }, modules = { AdapterAModule.class } )
@PerActivityA
interface ActivityAComponent {

}
</code></pre>

<p>Note that this is the style encouraged by the <a href=""https://google.github.io/dagger/android"" rel=""nofollow noreferrer""><code>dagger.android</code></a> package using <code>@ContributesAndroidInjector</code>:</p>

<pre><code>@PerActivityA
@ContributesAndroidInjector(modules = {ActivityAModule.class})
abstract YourActivity contributeYourActivityInjector();
</code></pre>
",5241933,,5241933,,2018-07-10 9:25:18,2018-07-10 9:25:18,,,,3,,,
Android,41395944,2,,41287535,2016-12-30 12:01:41,2569,,2,,"<p>A Good example goes here so check it out, worth reading as this includes more than 1 way to include MVP architecture.
<a href=""https://github.com/googlesamples/android-architecture/blob/master/README.md"" rel=""nofollow noreferrer"">MVP Google Samples</a></p>
",4517450,,,,,2016-12-30 12:01:41,,,,1,,,
Android,41409103,2,,41112281,2016-12-31 14:26:02,2571,,1,,"<p>There looks to be at least 2 different issues right now affecting <code>PdfRenderer</code> behaviour.</p>

<p>First one is related to bug in v2.2 of gradle plugin (<a href=""https://code.google.com/p/android/issues/detail?id=224273"" rel=""nofollow noreferrer"">https://code.google.com/p/android/issues/detail?id=224273</a>) that affects treatment of following gradle config that's required to ensure pdf is not compressed (as mentioned in <a href=""https://github.com/googlesamples/android-PdfRendererBasic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-PdfRendererBasic</a>).  This is required as <code>PdfRenderer</code> needs a <code>ParcelFileDescriptor</code> that is seekable (so file cannot be compressed). You can reproduce this issue with google's <code>PdfRendererBasic</code> sample by using 2.2 version of gradle plugin.  A fix for this is to revert to v2.1.2 of plugin. </p>

<pre><code>android {
    aaptOptions {
        noCompress ""pdf""
    }
}
</code></pre>

<p>The other issue doesn't seem to be occurring in <code>PdfRendererBasic</code> sample but is in other apps (including mine!) and seems to be related to packaging of apk (<a href=""https://stackoverflow.com/questions/35345596/android-studio-pdfrendererbasic-unable-to-replace-sample-pdf"">Android Studio - PDFRendererBasic - Unable to replace sample.pdf?</a> contains detailed discussion on issue).  </p>

<p>One suggestion in last linked SO article was to read from <code>raw</code> folder instead....however this didn't work for me for some reason.  What I had to do in the end was ready pdf from SD card using something like following</p>

<pre><code>    String pdfPath = Environment.getExternalStorageDirectory() + ""/sample.pdf"";
    mFileDescriptor = ParcelFileDescriptor.open(new File(pdfPath), ParcelFileDescriptor.MODE_READ_ONLY);

    // This is the PdfRenderer we use to render the PDF.
    mPdfRenderer = new PdfRenderer(mFileDescriptor);
</code></pre>
",793861,,-1,,2017-05-23 12:18:09,2016-12-31 14:26:02,,,,0,,,
Android,41413853,2,,41385783,2017-01-01 6:47:31,2571,,1,,"<blockquote>
  <p>passing context to the presenter beats the purpose of using Google Dagger</p>
</blockquote>

<p>If Android apps had a single entry point (like a <code>main(String [] args)</code> method) then it would be possible and desirable to inject all dependencies, including Context, using Dagger alone. In other words, you wouldn't have to have this system where a Dagger Component is initialized with a Context as a parameter. If this was the case then passing a Context to the presenter would, in some way, beat the purpose of using Dagger 2.</p>

<p>However, the instances of Application and Activity that constitute an app are not able to be instantiated directly. Although some of these classes may have public constructors, you cannot obtain a fully-functional instance through instantiation. Instead, these classes are instantiated are supplied with a Context and other dependencies (such as a FragmentManager) by the system.  </p>

<p>Likewise, having the Context from the Application or Activity as a dependency for the repository/data or model is not a preventable violation separation of concerns between model and view.</p>

<blockquote>
  <p>I would like to know if this is the correct way of implementing MVP using Google Dagger 2</p>
</blockquote>

<p>For this I think you will have to compare what you have done with other sample MVP projects. Here is the <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">official one from Google</a></p>

<p>Also, you will have to decide if you have really fulfilled the three salient features of <a href=""https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter"" rel=""nofollow noreferrer"">MVP</a>:</p>

<blockquote>
  <ol>
  <li>The model is an interface defining the data to be displayed or otherwise acted upon in the user interface.</li>
  <li>The presenter acts upon the model and the view. It retrieves data from repositories (the model), and formats it for display in the view.</li>
  <li>The view is a passive interface that displays data (the model) and routes user commands (events) to the presenter to act upon that data.</li>
  </ol>
</blockquote>

<p>Rather than worrying about whether you have the 'correct solution' for MVP in Android, I think the most important thing is for you yourself to be able to understand and justify how your app fulfills the criteria of MVP and achieves separation of concerns within in the constraints of the Android architecture.</p>
",5241933,,5241933,,2017-01-01 10:23:53,2017-01-01 10:23:53,,,,0,,,
Android,41467938,2,,41467418,2017-01-04 15:50:59,2575,,2,,"<p>Call <code>Purchase#isAutoRenewing</code> method. If this method is missing, you may need to update your reference IAB files: </p>

<pre><code>    if (purchase != null &amp;&amp; purchase.getPurchaseState() == 0) {
        // User is subscribed
        Log.d(TAG, ""Subscribed."");
        if (purchase.isAutoRenewing()){
            return true;
        }
</code></pre>

<p><a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/Purchase.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/Purchase.java</a></p>
",794088,,,,,2017-01-04 15:50:59,,,,0,,,
Android,41561262,2,,41462665,2017-01-10 4:43:07,2580,,2,,"<p>You need to implement your own <code>VideoRecorder</code> so that you can modify as per your own requirement.</p>

<p>set video resolution,</p>

<pre><code>mVideoRecorder.setVideoSize(720, 480);
</code></pre>

<p>set Max Duration,</p>

<pre><code>mVideoRecorder.setMaxDuration(30000);
</code></pre>

<p>Try this</p>

<p><code>videorecord.xml</code></p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""fill_parent""
    android:layout_height=""fill_parent""
    android:orientation=""vertical""&gt;

    &lt;VideoView
    android:id=""@+id/videoRecorder""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p><code>VideoRecorderExample.java</code></p>

<pre><code>import android.app.Activity;
import android.hardware.Camera;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.widget.VideoView;


public class VideoRecorderExample extends Activity implements
    SurfaceHolder.Callback {
    public static final String IS_FRONT_CAMERA = ""FRONT_CAMERA"";
    private static final String TAG = VideoRecorderExample.class.getSimpleName();
    private Boolean mRecording = false;
    private Boolean isFrontCamera = false;
    private VideoView mVideoView = null;
    private MediaRecorder mVideoRecorder = null;
    private Camera mCamera;

    @Override
    public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.videorecord);
    mVideoView = (VideoView) findViewById(R.id.videoRecorder);

    isFrontCamera = getIntent().getExtras().getBoolean(IS_FRONT_CAMERA, true);

    final SurfaceHolder holder = mVideoView.getHolder();
    holder.addCallback(this);
    holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
    try {
        startRecording(holder);
    } catch (Exception e) {
        Log.e(TAG, e.toString());
        e.printStackTrace();
    }
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width,
                           int height) {
    Log.e(TAG, ""W x H = "" + width + ""x"" + height);
    }

    private void stopRecording() throws Exception {
    mRecording = false;
    if (mVideoRecorder != null) {
        mVideoRecorder.stop();
        mVideoRecorder.release();
        mVideoRecorder = null;
    }
    if (mCamera != null) {
        mCamera.reconnect();
        mCamera.stopPreview();
        mCamera.release();
        mCamera = null;
    }
    }

    @Override
    protected void onDestroy() {
    try {
        stopRecording();
    } catch (Exception e) {
        Log.e(TAG, e.toString());
        e.printStackTrace();
    }
    super.onDestroy();

    }

    private void startRecording(SurfaceHolder holder) throws Exception {
    if (mVideoRecorder != null) {
        mVideoRecorder.stop();
        mVideoRecorder.release();
        mVideoRecorder = null;
    }
    if (mCamera != null) {
        mCamera.reconnect();
        mCamera.stopPreview();
        mCamera.release();
        mCamera = null;
    }

    String uniqueOutFile = Environment.getExternalStorageDirectory().toString() + ""/"" + System.currentTimeMillis() + "".3gp"";

    try {
        if (isFrontCamera) {
            mCamera = Camera.open(1);
        } else {
            mCamera = Camera.open();
        }

        mCamera.setPreviewDisplay(holder);
        Camera.Parameters parameters = mCamera.getParameters();
        parameters.setPreviewSize(640, 480);
        mCamera.setParameters(parameters);
        mCamera.startPreview();
        mCamera.unlock();

        mVideoRecorder = new MediaRecorder();
        mVideoRecorder.setCamera(mCamera);
        mVideoRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
        mVideoRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mVideoRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mVideoRecorder.setVideoSize(720, 480);
        mVideoRecorder.setVideoFrameRate(20);
        mVideoRecorder.setVideoEncodingBitRate(3000000);
        mVideoRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
        mVideoRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_WB);
        mVideoRecorder.setAudioSamplingRate(16000);
        mVideoRecorder.setMaxDuration(30000);
        mVideoRecorder.setPreviewDisplay(holder.getSurface());
        mVideoRecorder.setOutputFile(uniqueOutFile);
        mVideoRecorder.prepare();
        mVideoRecorder.start();
        mRecording = true;
    } catch (Exception e) {
        Log.e(TAG, e.toString());
        e.printStackTrace();
    }
    }
}
</code></pre>

<p>For camera2.</p>

<p>Try this code it will supported with camera2.</p>

<pre><code>public class Camera2VideoFragment extends Fragment
    implements View.OnClickListener, FragmentCompat.OnRequestPermissionsResultCallback {

    private static final int SENSOR_ORIENTATION_DEFAULT_DEGREES = 90;
    private static final int SENSOR_ORIENTATION_INVERSE_DEGREES = 270;
    private static final SparseIntArray DEFAULT_ORIENTATIONS = new SparseIntArray();
    private static final SparseIntArray INVERSE_ORIENTATIONS = new SparseIntArray();

    private static final String TAG = ""Camera2VideoFragment"";
    private static final int REQUEST_VIDEO_PERMISSIONS = 1;
    private static final String FRAGMENT_DIALOG = ""dialog"";

    private static final String[] VIDEO_PERMISSIONS = {
        Manifest.permission.CAMERA,
        Manifest.permission.RECORD_AUDIO,
    };

    static {
    DEFAULT_ORIENTATIONS.append(Surface.ROTATION_0, 90);
    DEFAULT_ORIENTATIONS.append(Surface.ROTATION_90, 0);
    DEFAULT_ORIENTATIONS.append(Surface.ROTATION_180, 270);
    DEFAULT_ORIENTATIONS.append(Surface.ROTATION_270, 180);
    }

    static {
    INVERSE_ORIENTATIONS.append(Surface.ROTATION_0, 270);
    INVERSE_ORIENTATIONS.append(Surface.ROTATION_90, 180);
    INVERSE_ORIENTATIONS.append(Surface.ROTATION_180, 90);
    INVERSE_ORIENTATIONS.append(Surface.ROTATION_270, 0);
    }

    /**
     * An {@link AutoFitTextureView} for camera preview.
     */
    private AutoFitTextureView mTextureView;

    private Button mButtonVideo;

    private CameraDevice mCameraDevice;

    private CameraCaptureSession mPreviewSession;


    private TextureView.SurfaceTextureListener mSurfaceTextureListener
        = new TextureView.SurfaceTextureListener() {

    @Override
    public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture,
                                          int width, int height) {
        openCamera(width, height);
    }

    @Override
    public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture,
                                            int width, int height) {
        configureTransform(width, height);
    }

    @Override
    public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
        return true;
    }

    @Override
    public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
    }

    };

    private Size mPreviewSize;


    private Size mVideoSize;

    private MediaRecorder mMediaRecorder;

    private boolean mIsRecordingVideo;

    private HandlerThread mBackgroundThread;

    private Handler mBackgroundHandler;

    /**
     * A {@link Semaphore} to prevent the app from exiting before closing the camera.
     */
    private Semaphore mCameraOpenCloseLock = new Semaphore(1);

    /**
     * {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its status.
     */
    private CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {

    @Override
    public void onOpened(CameraDevice cameraDevice) {
        mCameraDevice = cameraDevice;
        startPreview();
        mCameraOpenCloseLock.release();
        if (null != mTextureView) {
            configureTransform(mTextureView.getWidth(), mTextureView.getHeight());
        }
    }

    @Override
    public void onDisconnected(CameraDevice cameraDevice) {
        mCameraOpenCloseLock.release();
        cameraDevice.close();
        mCameraDevice = null;
    }

    @Override
    public void onError(CameraDevice cameraDevice, int error) {
        mCameraOpenCloseLock.release();
        cameraDevice.close();
        mCameraDevice = null;
        Activity activity = getActivity();
        if (null != activity) {
            activity.finish();
        }
    }

    };
    private Integer mSensorOrientation;
    private String mNextVideoAbsolutePath;
    private CaptureRequest.Builder mPreviewBuilder;
    private Surface mRecorderSurface;

    public static Camera2VideoFragment newInstance() {
    return new Camera2VideoFragment();
    }

    /**
     * In this sample, we choose a video size with 3x4 aspect ratio. Also, we don't use sizes
     * larger than 1080p, since MediaRecorder cannot handle such a high-resolution video.
     *
     * @param choices The list of available sizes
     * @return The video size
     */
    private static Size chooseVideoSize(Size[] choices) {
    for (Size size : choices) {
        if (size.getWidth() == size.getHeight() * 4 / 3 &amp;&amp; size.getWidth() &lt;= 1080) {
            return size;
        }
    }
    Log.e(TAG, ""Couldn't find any suitable video size"");
    return choices[choices.length - 1];
    }

    /**
     * Given {@code choices} of {@code Size}s supported by a camera, chooses the smallest one whose
     * width and height are at least as large as the respective requested values, and whose aspect
     * ratio matches with the specified value.
     *
     * @param choices     The list of sizes that the camera supports for the intended output class
     * @param width       The minimum desired width
     * @param height      The minimum desired height
     * @param aspectRatio The aspect ratio
     * @return The optimal {@code Size}, or an arbitrary one if none were big enough
     */
    private static Size chooseOptimalSize(Size[] choices, int width, int height, Size aspectRatio) {
    // Collect the supported resolutions that are at least as big as the preview Surface
    List&lt;Size&gt; bigEnough = new ArrayList&lt;Size&gt;();
    int w = aspectRatio.getWidth();
    int h = aspectRatio.getHeight();
    for (Size option : choices) {
        if (option.getHeight() == option.getWidth() * h / w &amp;&amp;
                option.getWidth() &gt;= width &amp;&amp; option.getHeight() &gt;= height) {
            bigEnough.add(option);
        }
    }

    // Pick the smallest of those, assuming we found any
    if (bigEnough.size() &gt; 0) {
        return Collections.min(bigEnough, new CompareSizesByArea());
    } else {
        Log.e(TAG, ""Couldn't find any suitable preview size"");
        return choices[0];
    }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_camera2_video, container, false);
    }

    @Override
    public void onViewCreated(final View view, Bundle savedInstanceState) {
    mTextureView = (AutoFitTextureView) view.findViewById(R.id.texture);
    mButtonVideo = (Button) view.findViewById(R.id.video);
    mButtonVideo.setOnClickListener(this);
    view.findViewById(R.id.info).setOnClickListener(this);
    }

    @Override
    public void onResume() {
    super.onResume();
    startBackgroundThread();
    if (mTextureView.isAvailable()) {
        openCamera(mTextureView.getWidth(), mTextureView.getHeight());
    } else {
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
    }
    }

    @Override
    public void onPause() {
    closeCamera();
    stopBackgroundThread();
    super.onPause();
    }

    @Override
    public void onClick(View view) {
    switch (view.getId()) {
        case R.id.video: {
            if (mIsRecordingVideo) {
                stopRecordingVideo();
            } else {
                startRecordingVideo();
            }
            break;
        }
        case R.id.info: {
            Activity activity = getActivity();
            if (null != activity) {
                new AlertDialog.Builder(activity)
                        .setMessage(R.string.intro_message)
                        .setPositiveButton(android.R.string.ok, null)
                        .show();
            }
            break;
        }
    }
    }

    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
    mBackgroundThread = new HandlerThread(""CameraBackground"");
    mBackgroundThread.start();
    mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
    mBackgroundThread.quitSafely();
    try {
        mBackgroundThread.join();
        mBackgroundThread = null;
        mBackgroundHandler = null;
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    }

    /**
     * Gets whether you should show UI with rationale for requesting permissions.
     *
     * @param permissions The permissions your app wants to request.
     * @return Whether you can show permission rationale UI.
     */
    private boolean shouldShowRequestPermissionRationale(String[] permissions) {
    for (String permission : permissions) {
        if (FragmentCompat.shouldShowRequestPermissionRationale(this, permission)) {
            return true;
        }
    }
    return false;
    }

    /**
     * Requests permissions needed for recording video.
     */
    private void requestVideoPermissions() {
    if (shouldShowRequestPermissionRationale(VIDEO_PERMISSIONS)) {
        new ConfirmationDialog().show(getChildFragmentManager(), FRAGMENT_DIALOG);
    } else {
        FragmentCompat.requestPermissions(this, VIDEO_PERMISSIONS, REQUEST_VIDEO_PERMISSIONS);
    }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                       @NonNull int[] grantResults) {
    Log.d(TAG, ""onRequestPermissionsResult"");
    if (requestCode == REQUEST_VIDEO_PERMISSIONS) {
        if (grantResults.length == VIDEO_PERMISSIONS.length) {
            for (int result : grantResults) {
                if (result != PackageManager.PERMISSION_GRANTED) {
                    ErrorDialog.newInstance(getString(R.string.permission_request))
                            .show(getChildFragmentManager(), FRAGMENT_DIALOG);
                    break;
                }
            }
        } else {
            ErrorDialog.newInstance(getString(R.string.permission_request))
                    .show(getChildFragmentManager(), FRAGMENT_DIALOG);
        }
    } else {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }
    }

    private boolean hasPermissionsGranted(String[] permissions) {
    for (String permission : permissions) {
        if (ActivityCompat.checkSelfPermission(getActivity(), permission)
                != PackageManager.PERMISSION_GRANTED) {
            return false;
        }
    }
    return true;
    }

    /**
     * Tries to open a {@link CameraDevice}. The result is listened by `mStateCallback`.
     */
    private void openCamera(int width, int height) {
    if (!hasPermissionsGranted(VIDEO_PERMISSIONS)) {
        requestVideoPermissions();
        return;
    }
    final Activity activity = getActivity();
    if (null == activity || activity.isFinishing()) {
        return;
    }
    CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
    try {
        Log.d(TAG, ""tryAcquire"");
        if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
            throw new RuntimeException(""Time out waiting to lock camera opening."");
        }
        String cameraId = manager.getCameraIdList()[0];

        // Choose the sizes for camera preview and video recording
        CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
        StreamConfigurationMap map = characteristics
                .get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
        mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
        mVideoSize = chooseVideoSize(map.getOutputSizes(MediaRecorder.class));
        mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),
                width, height, mVideoSize);

        int orientation = getResources().getConfiguration().orientation;
        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
            mTextureView.setAspectRatio(mPreviewSize.getWidth(), mPreviewSize.getHeight());
        } else {
            mTextureView.setAspectRatio(mPreviewSize.getHeight(), mPreviewSize.getWidth());
        }
        configureTransform(width, height);
        mMediaRecorder = new MediaRecorder();
        manager.openCamera(cameraId, mStateCallback, null);
    } catch (CameraAccessException e) {
        Toast.makeText(activity, ""Cannot access the camera."", Toast.LENGTH_SHORT).show();
        activity.finish();
    } catch (NullPointerException e) {
        // Currently an NPE is thrown when the Camera2API is used but not supported on the
        // device this code runs.
        ErrorDialog.newInstance(getString(R.string.camera_error))
                .show(getChildFragmentManager(), FRAGMENT_DIALOG);
    } catch (InterruptedException e) {
        throw new RuntimeException(""Interrupted while trying to lock camera opening."");
    }
    }

    private void closeCamera() {
    try {
        mCameraOpenCloseLock.acquire();
        closePreviewSession();
        if (null != mCameraDevice) {
            mCameraDevice.close();
            mCameraDevice = null;
        }
        if (null != mMediaRecorder) {
            mMediaRecorder.release();
            mMediaRecorder = null;
        }
    } catch (InterruptedException e) {
        throw new RuntimeException(""Interrupted while trying to lock camera closing."");
    } finally {
        mCameraOpenCloseLock.release();
    }
    }

    /**
     * Start the camera preview.
     */
    private void startPreview() {
    if (null == mCameraDevice || !mTextureView.isAvailable() || null == mPreviewSize) {
        return;
    }
    try {
        closePreviewSession();
        SurfaceTexture texture = mTextureView.getSurfaceTexture();
        assert texture != null;
        texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
        mPreviewBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);

        Surface previewSurface = new Surface(texture);
        mPreviewBuilder.addTarget(previewSurface);

        mCameraDevice.createCaptureSession(Arrays.asList(previewSurface), new CameraCaptureSession.StateCallback() {

            @Override
            public void onConfigured(CameraCaptureSession cameraCaptureSession) {
                mPreviewSession = cameraCaptureSession;
                updatePreview();
            }

            @Override
            public void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
                Activity activity = getActivity();
                if (null != activity) {
                    Toast.makeText(activity, ""Failed"", Toast.LENGTH_SHORT).show();
                }
            }
        }, mBackgroundHandler);
    } catch (CameraAccessException e) {
        e.printStackTrace();
    }
    }

    /**
     * Update the camera preview. {@link #startPreview()} needs to be called in advance.
     */
    private void updatePreview() {
    if (null == mCameraDevice) {
        return;
    }
    try {
        setUpCaptureRequestBuilder(mPreviewBuilder);
        HandlerThread thread = new HandlerThread(""CameraPreview"");
        thread.start();
        mPreviewSession.setRepeatingRequest(mPreviewBuilder.build(), null, mBackgroundHandler);
    } catch (CameraAccessException e) {
        e.printStackTrace();
    }
    }

    private void setUpCaptureRequestBuilder(CaptureRequest.Builder builder) {
    builder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
    }

    /**
     * Configures the necessary {@link android.graphics.Matrix} transformation to `mTextureView`.
     * This method should not to be called until the camera preview size is determined in
     * openCamera, or until the size of `mTextureView` is fixed.
     *
     * @param viewWidth  The width of `mTextureView`
     * @param viewHeight The height of `mTextureView`
     */
    private void configureTransform(int viewWidth, int viewHeight) {
    Activity activity = getActivity();
    if (null == mTextureView || null == mPreviewSize || null == activity) {
        return;
    }
    int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
    Matrix matrix = new Matrix();
    RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
    RectF bufferRect = new RectF(0, 0, mPreviewSize.getHeight(), mPreviewSize.getWidth());
    float centerX = viewRect.centerX();
    float centerY = viewRect.centerY();
    if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
        bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
        matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
        float scale = Math.max(
                (float) viewHeight / mPreviewSize.getHeight(),
                (float) viewWidth / mPreviewSize.getWidth());
        matrix.postScale(scale, scale, centerX, centerY);
        matrix.postRotate(90 * (rotation - 2), centerX, centerY);
    }
    mTextureView.setTransform(matrix);
    }

    private void setUpMediaRecorder() throws IOException {
    final Activity activity = getActivity();
    if (null == activity) {
        return;
    }
    mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
    mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
    mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
    if (mNextVideoAbsolutePath == null || mNextVideoAbsolutePath.isEmpty()) {
        mNextVideoAbsolutePath = getVideoFilePath(getActivity());
    }
    mMediaRecorder.setOutputFile(mNextVideoAbsolutePath);
    mMediaRecorder.setVideoEncodingBitRate(10000000);
    mMediaRecorder.setVideoFrameRate(30);
    mMediaRecorder.setVideoSize(mVideoSize.getWidth(), mVideoSize.getHeight());
    mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
    mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
    int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
    switch (mSensorOrientation) {
        case SENSOR_ORIENTATION_DEFAULT_DEGREES:
            mMediaRecorder.setOrientationHint(DEFAULT_ORIENTATIONS.get(rotation));
            break;
        case SENSOR_ORIENTATION_INVERSE_DEGREES:
            mMediaRecorder.setOrientationHint(INVERSE_ORIENTATIONS.get(rotation));
            break;
    }
    mMediaRecorder.prepare();
    }

    private String getVideoFilePath(Context context) {
    return context.getExternalFilesDir(null).getAbsolutePath() + ""/""
            + System.currentTimeMillis() + "".mp4"";
    }

    private void startRecordingVideo() {
    if (null == mCameraDevice || !mTextureView.isAvailable() || null == mPreviewSize) {
        return;
    }
    try {
        closePreviewSession();
        setUpMediaRecorder();
        SurfaceTexture texture = mTextureView.getSurfaceTexture();
        assert texture != null;
        texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());
        mPreviewBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
        List&lt;Surface&gt; surfaces = new ArrayList&lt;&gt;();

        // Set up Surface for the camera preview
        Surface previewSurface = new Surface(texture);
        surfaces.add(previewSurface);
        mPreviewBuilder.addTarget(previewSurface);

        // Set up Surface for the MediaRecorder
        mRecorderSurface = mMediaRecorder.getSurface();
        surfaces.add(mRecorderSurface);
        mPreviewBuilder.addTarget(mRecorderSurface);

        // Start a capture session
        // Once the session starts, we can update the UI and start recording
        mCameraDevice.createCaptureSession(surfaces, new CameraCaptureSession.StateCallback() {

            @Override
            public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                mPreviewSession = cameraCaptureSession;
                updatePreview();
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        // UI
                        mButtonVideo.setText(R.string.stop);
                        mIsRecordingVideo = true;

                        // Start recording
                        mMediaRecorder.start();
                    }
                });
            }

            @Override
            public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
                Activity activity = getActivity();
                if (null != activity) {
                    Toast.makeText(activity, ""Failed"", Toast.LENGTH_SHORT).show();
                }
            }
        }, mBackgroundHandler);
    } catch (CameraAccessException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    }

    private void closePreviewSession() {
    if (mPreviewSession != null) {
        mPreviewSession.close();
        mPreviewSession = null;
    }
    }

    private void stopRecordingVideo() {
    // UI
    mIsRecordingVideo = false;
    mButtonVideo.setText(R.string.record);
    // Stop recording
    mMediaRecorder.stop();
    mMediaRecorder.reset();

    Activity activity = getActivity();
    if (null != activity) {
        Toast.makeText(activity, ""Video saved: "" + mNextVideoAbsolutePath,
                Toast.LENGTH_SHORT).show();
        Log.d(TAG, ""Video saved: "" + mNextVideoAbsolutePath);
    }
    mNextVideoAbsolutePath = null;
    startPreview();
    }

    /**
     * Compares two {@code Size}s based on their areas.
     */
    static class CompareSizesByArea implements Comparator&lt;Size&gt; {

    @Override
    public int compare(Size lhs, Size rhs) {
        // We cast here to ensure the multiplications won't overflow
        return Long.signum((long) lhs.getWidth() * lhs.getHeight() -
                (long) rhs.getWidth() * rhs.getHeight());
    }

    }

    public static class ErrorDialog extends DialogFragment {

    private static final String ARG_MESSAGE = ""message"";

    public static ErrorDialog newInstance(String message) {
        ErrorDialog dialog = new ErrorDialog();
        Bundle args = new Bundle();
        args.putString(ARG_MESSAGE, message);
        dialog.setArguments(args);
        return dialog;
    }

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        final Activity activity = getActivity();
        return new AlertDialog.Builder(activity)
                .setMessage(getArguments().getString(ARG_MESSAGE))
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        activity.finish();
                    }
                })
                .create();
    }

    }

    public static class ConfirmationDialog extends DialogFragment {

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        final Fragment parent = getParentFragment();
        return new AlertDialog.Builder(getActivity())
                .setMessage(R.string.permission_request)
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        FragmentCompat.requestPermissions(parent, VIDEO_PERMISSIONS,
                                REQUEST_VIDEO_PERMISSIONS);
                    }
                })
                .setNegativeButton(android.R.string.cancel,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                parent.getActivity().finish();
                            }
                        })
                .create();
    }

    }

}
</code></pre>

<p>Reference from: <a href=""https://github.com/googlesamples/android-Camera2Video"" rel=""nofollow noreferrer"">Camera2 Video</a></p>
",2257754,,2257754,,2017-01-10 8:29:01,2017-01-10 8:29:01,,,,5,,,
Android,41638092,2,,40976486,2017-01-13 15:32:36,2584,,2,,"<p>Remove👇🏽 from your <code>build.gradle</code>:</p>

<pre><code>compile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude module: 'support-annotations'
}
</code></pre>

<p>See <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IdlingResourceSample/app/build.gradle#L47"" rel=""nofollow noreferrer"">this</a>, You need to add <code>compile 'com.android.support.test.espresso:espresso-idling-resource:2.2.2'</code> instead of whole Espresso-core lib.</p>
",1597616,,,,,2017-01-13 15:32:36,,,,0,,,
Android,41674292,2,,41660420,2017-01-16 10:29:59,2586,,2,,"<p>To explain it simple, if you want to call a Java function from C++, you should implement a jni Callback.</p>

<p>You could follow the hello-jniCallback project from this <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow noreferrer"">android ndk examples repository</a>.</p>

<p>Most of the examples are written in C rather than in C++, so you should do some changes.
For example those functions in C like:</p>

<p><code>FindClass(env, someString)</code></p>

<p>In C++ you should use: </p>

<p><code>env-&gt;FindClass(someString)</code> </p>
",7086415,,7086415,,2017-01-16 10:45:38,2017-01-16 10:45:38,,,,7,,,
Android,41679756,2,,3320534,2017-01-16 15:30:34,2587,,2,,"<p>Here is a dedicated project for <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Android Architecture blueprints</a> with well documented source codes. All of them are based on the MVP pattern with several twists. Also check the <a href=""https://github.com/googlesamples/android-architecture/wiki/Samples-at-a-glance"" rel=""nofollow noreferrer"">comparison</a> of the various solutions based on lines-of-code, testability, cost of learning, their support for increasing data complexity. It depends on the particularly developed app and the context (time to market, developers, future plans, etc.) which blueprint fits best.</p>
",189849,,,,,2017-01-16 15:30:34,,,,0,,,
Android,41700092,2,,41641443,2017-01-17 14:48:26,2588,,4,,"<p>Tests should be hermetic: you shouldn't have dependencies on external data sources.</p>

<p>Create a product flavor where you replace the Firebase data source with a fake one, only used in tests. This lets you test with fake data, for repeatable tests.</p>

<p>This concept is explained in <a href=""https://android-developers.googleblog.com/2015/12/leveraging-product-flavors-in-android.html"" rel=""nofollow noreferrer"">Leveraging product flavors in Android Studio for hermetic testing</a></p>

<p>And it's implemented in <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Android Architecture Blueprints</a></p>

<p>The caveat is that you're not going to test the integration between Firebase and your app, but those tests tend to be <a href=""https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html"" rel=""nofollow noreferrer"">flaky</a>. </p>
",3033153,,,,,2017-01-17 14:48:26,,,,0,,,
Android,41705928,2,,41705353,2017-01-17 20:02:23,2588,,1,,"<p>You can check out Google Sample for Camera2 API here <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">Github repo for Camera2 API</a></p>

<p>And to make and activity full screen check <a href=""https://stackoverflow.com/questions/2868047/fullscreen-activity-in-android"">this</a> out</p>
",4855680,,-1,,2017-05-23 12:33:35,2017-01-17 20:02:23,,,,0,,,
Android,41712084,2,,41711704,2017-01-18 5:35:30,2588,,1,,"<p>Ok, I found this  <a href=""https://github.com/googlesamples/android-vision/issues/65"" rel=""nofollow noreferrer"">camera2 with mobile vision? #65</a></p>

<blockquote>
  <p>There are no near term plans for a camera2 version of the CameraSource class in the official API. However, given how the API is structured, an alternate version of CameraSource could be written by the developer community that uses camera2. All of the existing APIs for working with frames and detectors are sufficient to support a camera2 implementation as well.</p>
</blockquote>
",2301721,,,,,2017-01-18 5:35:30,,,,0,,,
Android,41712772,2,,37559401,2017-01-18 6:30:54,2588,,1,,"<p>Please have a look </p>

<p><a href=""https://github.com/googlesamples/android-vision/issues/65"" rel=""nofollow noreferrer"">camera2 with mobile vision? #65</a></p>

<p>Ok, I found this  </p>

<blockquote>
  <p>There are no near term plans for a camera2 version of the CameraSource class in the official API. However, given how the API is structured, an alternate version of CameraSource could be written by the developer community that uses camera2. All of the existing APIs for working with frames and detectors are sufficient to support a camera2 implementation as well.</p>
</blockquote>
",2301721,,,,,2017-01-18 6:30:54,,,,1,,,
Android,41730541,2,,41730394,2017-01-18 22:23:25,2589,,3,,"<p>Your media player instance is going to live on the main thread, which is the UI thread. This is not recommended.</p>

<p>I would probably create a service that would create a new thread holding the media player. Each of your activities could then bind to the service to control the media player.</p>

<p>See section <a href=""https://developer.android.com/guide/components/services.html"" rel=""nofollow noreferrer"">Extending the service class</a>.</p>

<p>You can also look at <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""nofollow noreferrer"">the media player sample</a>.</p>
",1245894,,,,,2017-01-18 22:23:25,,,,5,,,
Android,41813453,2,,41813004,2017-01-23 18:46:04,2594,,1,,"<p>You are looking for a 'CircularReveal' animation.  You can use built-in one such as <a href=""https://github.com/googlesamples/android-RevealEffectBasic"" rel=""nofollow noreferrer"">ViewAnimationUtils.createCircularReveal()</a> but this will require a min-SDK of 21.  If you need the animation on older versions of Android, <a href=""https://github.com/ozodrukh/CircularReveal"" rel=""nofollow noreferrer"">there are several libraries</a> that are easy to use that achieve this.</p>

<p>As far as using the CircularReveal, just follow the documentation or find a tutorial online.  Typically, you will set an initial circle (size and coordinates) and an end circle (size and coordinates) and when the animation is triggered it will animate the little circle into the big circle.</p>
",6754511,,,,,2017-01-23 18:46:04,,,,1,,,
Android,41830890,2,,41699572,2017-01-24 14:36:36,2595,,2,,"<blockquote>
  <p>What kind of app is this ""provider app""?</p>
</blockquote>

<p>The configurations provider app is another app running on the device. This app is typically controlled by an administrator. The administrator communicates the configuration changes to the provider app, and this app, in turn, changes the configurations on the managed app.</p>

<p>Take a look at the BasicManagedProfile sample: <a href=""https://github.com/googlesamples/android-BasicManagedProfile"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BasicManagedProfile</a>. This is exactly this kind of app.</p>

<blockquote>
  <p>Are there any Android API this app should implement in order to act as
  a configurations provider?</p>
</blockquote>

<p>Yes, this app should ask for provisioning the managed profile:</p>

<pre><code>Intent intent = new Intent(ACTION_PROVISION_MANAGED_PROFILE);
intent.putExtra(EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME,
                        activity.getApplicationContext().getPackageName());
if (intent.resolveActivity(activity.getPackageManager()) != null) {
    startActivityForResult(intent, REQUEST_PROVISION_MANAGED_PROFILE);
    activity.finish();
} else {
    Toast.makeText(activity, ""Device provisioning is not enabled. Stopping."",
                                                  Toast.LENGTH_SHORT).show();
}
</code></pre>

<blockquote>
  <p>How does this companion app hooks the configuration changes into the
  RestrictionsManager, so that the managed app to be able to retrieve
  them?</p>
</blockquote>

<p>It uses the DevicePolicyManager to enforce restrictions on the managed app:</p>

<pre><code>DevicePolicyManager manager = (DevicePolicyManager) getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);

Bundle settings = new Bundle();
settings.putBoolean(""downloadOnCellular"", true);

manager.setApplicationRestrictions(
        BasicDeviceAdminReceiver.getComponentName(getActivity()),
        PACKAGE_NAME_MANAGED_APP, settings);
</code></pre>

<p>Again, take a look at how this is done in the sample project.</p>
",1271435,,1271435,,2017-01-27 12:43:26,2017-01-27 12:43:26,,,,0,,,
Android,41895453,2,,41672850,2017-01-27 13:47:23,2598,,2,,"<p>This is the code that I am using in one of my production application which also takes care of android api versions <a href=""https://github.com/googlesamples/android-ImmersiveMode/blob/master/Application/src/main/java/com/example/android/immersivemode/ImmersiveModeFragment.java"" rel=""nofollow noreferrer"">ImmersiveModeFragment.java</a>.
It also takes care when you leave your app and resume it again. You can download the sample and try with all the features that an immersive app should have.</p>
",2870088,,2870088,,2017-01-28 13:53:26,2017-01-28 13:53:26,,,,0,,,
Android,41931372,2,,36293866,2017-01-30 8:14:59,2600,,2,,"<p>You can check UIMode like in google example:</p>

<p><a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/utils/CarHelper.java#L106"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/utils/CarHelper.java#L106</a></p>

<pre><code>public static boolean isCarUiMode(Context c) {
    UiModeManager uiModeManager = (UiModeManager) c.getSystemService(Context.UI_MODE_SERVICE);
    if (uiModeManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_CAR) {
        LogHelper.d(TAG, ""Running in Car mode"");
        return true;
    } else {
        LogHelper.d(TAG, ""Running on a non-Car mode"");
        return false;
    }
}
</code></pre>

<p>Then before run alarm check <code>isCarUiMode</code> result</p>
",959086,,,,,2017-01-30 8:14:59,,,,2,,,
Android,42013567,2,,41985926,2017-02-02 22:32:25,2604,,2,,"<p>Note that the aspect ratio of the camera sensor and the aspect ratio of your device screen most often do not match - sensors are generally 4:3 ratio and screens are generally around 16:9.  Though there is wide variation in both.</p>

<p>Since the aspect ratios don't match, you'll need to decide if you're going to have black bars, or zoom the camera preview so that it fills the screen (but some part of the image is not visible).</p>

<p>In any case, to have the preview be full-screen, you just need to have the TextureView (or SurfaceView) be the entire layout. So basically, edit this layout file: <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/res/layout/fragment_camera2_basic.xml"" rel=""nofollow noreferrer"">fragment_camera2_basic.xml</a>, remove all the other Views, and remove references to them in the source code.  Or change them to be on top of the TextureView, not next to - this is all standard Android UI layout stuff. And you'll need to make your Activity be <a href=""https://developer.android.com/training/system-ui/immersive.html"" rel=""nofollow noreferrer"">full-screen</a>.</p>

<p>By default, AutoFillTextureView will try to maintain aspect ratio, so it'll produce black bars.  If you want no black bars, then you'll have to change AutoFillTextureView, which is not straightforward, and I won't get into it here.</p>
",1344825,,,,,2017-02-02 22:32:25,,,,3,,,
Android,42033188,2,,42000731,2017-02-03 21:21:08,2605,,1,,"<p>You can try using <code>intented</code>. Take a look at googles documentation for intents <a href=""https://google.github.io/android-testing-support-library/docs/espresso/intents/"" rel=""nofollow noreferrer"">here</a> and the sample code <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java#L113"" rel=""nofollow noreferrer"">here</a></p>
",31252,,,,,2017-02-03 21:21:08,,,,0,,,
Android,42123925,2,,42081701,2017-02-08 21:26:54,2610,,2,,"<p>The camera2 sample application HdrViewfinder, which uses RenderScript to do some image processing, may be helpful for how to connect up the camera and RenderScript: <a href=""https://github.com/googlesamples/android-HdrViewfinder"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-HdrViewfinder</a></p>

<p>It doesn't do YUV->RGB conversion, IIRC, and I think yuv2rgb.rs may be intended for a different YUV colorspace than what the camera produces (due to backwards-compatibility concerns - it existed before camera2).  But it gets you to the point where you can write your own RS script to apply to camera data.</p>
",1344825,,,,,2017-02-08 21:26:54,,,,1,,,
Android,42158818,2,,42158754,2017-02-10 11:55:52,2611,,1,,"<p>It's free for both, Android &amp; iOS.<br>
I use the Barcode API from Mobile Vision and never had any issues.</p>

<p>Implementation Samples for <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow noreferrer"">Android</a> &amp; <a href=""https://github.com/googlesamples/ios-vision"" rel=""nofollow noreferrer"">iOS</a>  </p>
",6808319,,6808319,,2017-02-10 12:01:24,2017-02-10 12:01:24,,,,2,,,
Android,42196575,2,,42196234,2017-02-13 4:11:38,2614,,1,,"<p>You should look into <strong>JobScheduler</strong></p>

<p>Here are some references.</p>

<p><a href=""https://developer.android.com/reference/android/app/job/JobScheduler.html"" rel=""nofollow noreferrer"">https://developer.android.com/reference/android/app/job/JobScheduler.html</a></p>

<p><a href=""http://www.vogella.com/tutorials/AndroidTaskScheduling/article.html"" rel=""nofollow noreferrer"">http://www.vogella.com/tutorials/AndroidTaskScheduling/article.html</a></p>

<p><a href=""https://github.com/googlesamples/android-JobScheduler/tree/master/Application/src/main/java/com/example/android/jobscheduler"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-JobScheduler/tree/master/Application/src/main/java/com/example/android/jobscheduler</a></p>
",958282,,,,,2017-02-13 4:11:38,,,,2,,,
Android,42208145,2,,42162320,2017-02-13 15:52:18,2615,,1,,"<p>These coordinates can be negative if the face extends beyond the top and/or the left edges of the image. Even though the head may not be entirely within the photo, the face detector will estimate the bounding box of the face beyond the image bounds based upon what is visible.</p>

<p>The coordinates should be correct relative to the image.  However, if you are drawing on a preview from the front-facing camera, note that this preview is displayed reversed (like a mirror image).  In this case, you'd need to reverse the coordinates on order to draw on the preview.  See an example of how this is done here:</p>

<p><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/ui/camera/GraphicOverlay.java#L101"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/FaceTracker/app/src/main/java/com/google/android/gms/samples/vision/face/facetracker/ui/camera/GraphicOverlay.java#L101</a></p>
",5231007,,,,,2017-02-13 15:52:18,,,,0,,,
Android,42217905,2,,42199260,2017-02-14 4:32:07,2615,,1,,"<p>Sometimes when we are learning a dependency injection framework like Dagger 2, the misconception can arise that the <code>new</code> keyword and static factories are to be avoided at all costs and that <em>every single object</em> should be injected. </p>

<p>In the case of Fragments, the <a href=""https://developer.android.com/guide/components/fragments.html#Creating"" rel=""nofollow noreferrer"">best practice</a> for instantiation is to use static factory methods. Even though a previous DI framework, Roboguice, encouraged injection of Fragments as properties of an Activity (<code>@Inject MeasurementFragment mf</code>), with Dagger 2 it may be better to try a different approach. The reason for this is that we need to co-ordinate with the <code>FragmentManager</code> for the Activity:</p>

<p>For a given Activity, Fragments are handled by a <code>FragmentManager</code>. When the Activity <code>onSaveInstanceState(Bundle outBundle)</code> is called (for instance, in conditions of low memory) the <code>FragmentManager</code> will save the instance state of each Fragment for restoration inside <code>onCreate(Bundle savedInstanceState);</code>.</p>

<p>This is why you often see in the Android examples:</p>

<pre><code>    if (savedInstanceState == null) {
        // During initial setup, plug in the details fragment.
        DetailsFragment details = new DetailsFragment();
        details.setArguments(getIntent().getExtras());
        getFragmentManager().beginTransaction().add(android.R.id.content, details).commit();
    }
</code></pre>

<p>The check for <code>saveInstanceState == null</code> is in case the Fragment is already present in the FragmentManager. In the case of restoring the Activity from a saved instance state you can use: </p>

<pre><code>fragmentManager.findFragmentByTag(String tag)
</code></pre>

<p>to get a handle on it. This means that simple property injection of a Fragment inside an Activity using Dagger 2 is not enough to account for the complex lifecycles of Fragments and Activities.</p>

<p>A better approach maybe to abandon the property injection of your Fragment inside your Activity and use static factories as recommended in the Developer's Guide. You would then inject the dependencies for your Fragment <em>inside the Fragment itself</em>. Something like this:</p>

<pre><code>class MeasurementFragment extends Fragment {

    @Inject Converter converter;

    static MeasurementFragment instantiate() {
        //if MeasurementFragment comes to require params in the future
        //you can pass them in here and use setArguments(Bundle params);
        return new MeasurementFragment(null); 
    }

    MeasurementFragment(){
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        DaggerMainActivityComponent.builder()
            .build()
            .inject(this);
    } 
}
</code></pre>

<p>Now when you use <code>fragmentManager.beginTransaction().add()</code> on the <code>MeasurementFragment</code> inside your Activity, injection will be performed on the commit when the Android system has invoked the lifecycle callbacks through to <code>onActivityCreated(Bundle bundle)</code>.</p>

<p>Here is what your Activity might look like with this approach:</p>

<pre><code>class MainActivity extends AppCompatActivity {

    public static final String MEASUREMENT_FRAG = ""MEASUREMENT_FRAG"";

    MeasurementFragment measureFrag;

    @Override
    protected void OnCreate(Bundle b){
       super(b);
       injectMembers();
       if (b == null) {
           measureFrag = MeasurementFragment.instantiate();
           getFragmentManager().beginTransaction().add(R.id.frag_container, measureFrag, MEASUREMENT_FRAG).commit();
       }
       else {
           //frag is already instantiated and added to container
           measureFrag = getFragmentManager().findFragmentByTag(MEASUREMENT_FRAG);
       }
    }

    @VisibleForTesting
    void injectMembers() {
       DaggerMainActivityComponent().create().inject(this);
    }
}
</code></pre>

<p>What I have outlined here is the approach to injecting members inside Fragments that is demonstrated in this popular <a href=""https://github.com/vinc3m1/nowdothis"" rel=""nofollow noreferrer"">Dagger 2 example on Github</a>. A step further is to make the Fragments as lightweight as possible and to totally eschew injecting dependencies inside them, as illustrated in the <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">Google Android Architecture Blueprint for Dagger 2</a>.</p>
",5241933,,5241933,,2017-02-15 3:54:00,2017-02-15 3:54:00,,,,0,,,
Android,42336619,2,,42336304,2017-02-20 4:37:41,2621,,2,,"<p>First of all, the crash is probably because your Java code is trying to load the c++ shared library and fails, because the library was not built due to the NDK errors. So take care of the errors first.</p>

<p>Second, did you configure your Android.mk properly? Have a look here, for example (it is for Eclipse and not Android Studio, but the mk file is the same): <a href=""https://blog.jayway.com/2011/10/13/getting-started-with-android-ndk/"" rel=""nofollow noreferrer"">Getting started with Android NDK</a>. Looking at an existing simple project can also help: <a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-jni"" rel=""nofollow noreferrer"">hello-jni</a>.</p>
",944017,,,,,2017-02-20 4:37:41,,,,0,,,
Android,42366771,2,,42366276,2017-02-21 12:01:27,2622,,1,,"<blockquote>
  <p>just for recording video with its preview which can be saved into sd
  card</p>
</blockquote>

<p>If thats all you want you can simply use:</p>

<pre><code>static final int REQUEST_VIDEO_CAPTURE = 1;

Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {
     startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);
}
</code></pre>

<p><a href=""https://developer.android.com/training/camera/videobasics.html"" rel=""nofollow noreferrer"">Source</a></p>

<hr>

<p>If you want to implement that yourself with the help of camera2. I would suggest to have a look at the sourcecode of <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">googlesamples/android-Camera2Basic</a></p>

<p>Espacially at <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow noreferrer"">Camera2BasicFragment.java</a></p>
",5183341,,,,,2017-02-21 12:01:27,,,,7,,,
Android,42419041,2,,42418550,2017-02-23 14:50:11,2625,,1,,"<p>I think it is the issue with the Image Format of Your <strong>Uploadable Image</strong> usually *.raw has the largest size. You should try to upload the jpg/png images. When saving the images just use <strong>Filename.jpg</strong> as the file name and the image will get saved .ready for upload .You may delete the file once it is uploaded. the changes won't get reflected to your gallery till the <strong><em>the Media Store</em></strong> probe <em>{ service }</em> get updated. You can use this <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a> as a reference to build your app</p>
",6410011,,,,,2017-02-23 14:50:11,,,,0,,,
Android,42448872,2,,42420540,2017-02-24 21:48:10,2626,,1,,"<p>So apparently this only happens to DataMatrix due to the lack of finder patterns. For the rest of Barcodes it works everywhere on the screen.</p>

<p><a href=""https://github.com/googlesamples/android-vision/issues/194"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision/issues/194</a></p>
",1652657,,,,,2017-02-24 21:48:10,,,,0,,,
Android,42498001,2,,28766018,2017-02-28 0:00:14,2629,,1,,"<p>I opened a new issue in the official Google immersive sample project code. Hope they will provide an official way to handle toolbar in immersive mode. </p>

<p><a href=""https://github.com/googlesamples/android-BasicImmersiveMode/issues/1"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BasicImmersiveMode/issues/1</a></p>
",2378095,,,,,2017-02-28 0:00:14,,,,0,,,
Android,42576961,2,,37086806,2017-03-03 10:53:23,2632,,1,,"<p><strong>Open the project on Android Studio and let it solve the problems for you</strong></p>

<p>It immediately shows at the left bottom:</p>

<p><a href=""https://i.stack.imgur.com/Cm4LG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Cm4LG.png"" alt=""enter image description here""></a></p>

<p>Then click that link, and it will fix the right files for you.</p>

<p>This ended up fixing the Gradle version as mentioned at: <a href=""https://stackoverflow.com/a/37091489/895245"">https://stackoverflow.com/a/37091489/895245</a> but it also fixed further errors, so it is the easiest thing to do.</p>

<p>Tested on <a href=""https://github.com/googlesamples/android-vulkan-tutorials/tree/7ba478ac2e0d9006c9e2e261446003a4449b8aa3/tutorial05_triangle"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vulkan-tutorials/tree/7ba478ac2e0d9006c9e2e261446003a4449b8aa3/tutorial05_triangle</a> , Android Studio 2.3, Ubuntu 14.04.</p>
",895245,,-1,,2017-05-23 12:18:21,2017-03-03 10:53:23,,,,0,,,
Android,42577323,2,,42577096,2017-03-03 11:10:26,2632,,1,,"<p>Firstly, switch to <code>FusedLocationApi</code> instead of LocationManager which is old now. You need to use <code>requestLocationUpdates()</code> method of FusedLocationAPI.</p>

<p>Go through the google samples for details:
<a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location</a></p>
",2191999,,,,,2017-03-03 11:10:26,,,,0,,,
Android,42692990,2,,42683932,2017-03-09 10:35:03,2638,,4,,"<p>In addition to what Dan Albert posted, the <code>hello-jni</code> example actually already shows the necessary ifdefs for detecting the different ABIs:</p>

<p><a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-jni/app/src/main/cpp/hello-jni.c"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/blob/master/hello-jni/app/src/main/cpp/hello-jni.c</a></p>

<pre><code>#if defined(__arm__)
    #if defined(__ARM_ARCH_7A__)
    #if defined(__ARM_NEON__)
      #if defined(__ARM_PCS_VFP)
        #define ABI ""armeabi-v7a/NEON (hard-float)""
      #else
        #define ABI ""armeabi-v7a/NEON""
      #endif
    #else
      #if defined(__ARM_PCS_VFP)
        #define ABI ""armeabi-v7a (hard-float)""
      #else
        #define ABI ""armeabi-v7a""
      #endif
    #endif
  #else
   #define ABI ""armeabi""
  #endif
#elif defined(__i386__)
#define ABI ""x86""
#elif defined(__x86_64__)
#define ABI ""x86_64""
#elif defined(__mips64)  /* mips64el-* toolchain defines __mips__ too */
#define ABI ""mips64""
#elif defined(__mips__)
#define ABI ""mips""
#elif defined(__aarch64__)
#define ABI ""arm64-v8a""
#else
#define ABI ""unknown""
#endif
</code></pre>
",3115956,,,,,2017-03-09 10:35:03,,,,1,,,
Android,42820930,2,,42820003,2017-03-15 21:23:37,2645,,17,,"<p>As you can see in <strong>Google's</strong> samples (<a href=""https://github.com/googlesamples/android-architecture"" rel=""noreferrer"">https://github.com/googlesamples/android-architecture</a>), <code>Activities</code> create <code>Presenters</code>. Also <code>Views</code> attach to <code>Activity</code> and <code>Presenters</code> get views (<code>Fragments</code>) as parameter. </p>

<p>After <code>Fragment</code> transaction committed or <code>Fragment</code> (view) state restored <code>Presenters</code> get created and take <code>Fragments</code> (views) as parameter than call </p>

<pre><code>view.setPresenter(T presenter); 
</code></pre>

<p>methods of views and <code>Presenters</code> get registered to view.</p>

<p>I think creating <code>Presenter</code> in <code>Fragment</code> is not a good practice. First of all they are <strong>separate layers</strong>. This is illegal for <strong>Separation of concerns</strong>. And second, if you create presenter in <code>Fragment</code>, you bind your Presenter's life to view's <code>LifeCycle</code> and when <code>Fragment</code> is destroyed and recreated, you create a new presenter but they're different layers.</p>

<p><strong>The model</strong> is an interface defining the data to be displayed or otherwise acted upon in the user interface.</p>

<p><strong>The presenter</strong> acts upon the model and the view. It retrieves data from repositories (the model), and formats it for display in the view.</p>

<p><strong>The view</strong> is a passive interface that displays data (the model) and routes user commands (events) to the presenter to act upon that data.</p>

<p>So <code>Activity</code> can act as an <code>overall controller</code> which creates the <code>Presenters</code> and <code>Views</code> and connect them.</p>

<p><a href=""https://i.stack.imgur.com/ilxW3.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ilxW3.png"" alt=""enter image description here""></a></p>

<p>If we talk about your question, yes you can register presenter in fragment. But you should avoid creating presenters in fragments which you use as a view.</p>

<p>But there're lot's of different approaches about MVP pattern in Android community like below.
<a href=""https://plus.google.com/communities/114285790907815804707"" rel=""noreferrer"">https://plus.google.com/communities/114285790907815804707</a></p>

<p>Why activities are not ui elements?
<a href=""http://www.techyourchance.com/activities-android/"" rel=""noreferrer"">http://www.techyourchance.com/activities-android/</a></p>
",1559852,,1559852,,2017-03-15 21:32:52,2017-03-15 21:32:52,,,,2,,,
Android,42854451,2,,42853827,2017-03-17 10:01:03,2646,,1,,"<p>Problem 1. You can't bind a service to multiple activities in android.</p>

<p>Problem 2. You will need a MediaController for that.Have a look here : <a href=""https://developer.android.com/reference/android/widget/MediaController.html"" rel=""nofollow noreferrer"">https://developer.android.com/reference/android/widget/MediaController.html</a></p>

<p>For the first problem, you can create an Application class to which you will bind the service too. The application class will live as long as your app, while your activities will change, therefore you won't be able to bind it to one single activity. Have a look here : <a href=""https://developer.android.com/reference/android/app/Application.html"" rel=""nofollow noreferrer"">https://developer.android.com/reference/android/app/Application.html</a></p>

<p>For the second one, please have a look on the Google samples provided by them. The media player sample is here : <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-UniversalMusicPlayer</a></p>

<p>A good starting point with the android Media Player is here : <a href=""https://www.youtube.com/watch?v=XQwe30cZffg&amp;index=1&amp;list=PLw4z5K72qyXG54c-ZBKrqby3vz9g30dzr&amp;t=771s"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=XQwe30cZffg&amp;index=1&amp;list=PLw4z5K72qyXG54c-ZBKrqby3vz9g30dzr&amp;t=771s</a></p>
",4536657,,,,,2017-03-17 10:01:03,,,,9,,,
Android,42960462,2,,42953373,2017-03-22 18:59:14,2652,,1,,"<p><strong>Use one and only one <code>@Singleton</code> scoped component</strong></p>

<p>You should have one and only one <code>@Singleton</code> scoped component like this: </p>

<pre><code>@Singleton
@Component(modules={CommonModule.class, ExpModule.class})
public interface CommonComponent {

}
</code></pre>

<p><strong>Only specify Activities, Fragments, and Services as explicit injection targets for Components</strong></p>

<p>In an Android app, you should only list Activities, Fragments and Services as injection sites. You should configure Dagger 2 to inject the rest of your dependencies without having to resort to calling <code>component.inject(this)</code> inside them.</p>

<p>For example, if your <code>CommonClass</code> looks like this:</p>

<pre><code>public class CommonClass {
    @Inject Repository repository;

    public class CommonClass() {
         CommonComponentHolder.get().inject(this);
    }
}
</code></pre>

<p>Refactor it like this:</p>

<pre><code>public class CommonClass {
    private final Repository repository;

    @Inject
    public class CommonClass(Repository repository) {
         this.repository = repository;
    }
}
</code></pre>

<p>Now when you have an Activity or Fragment that needs <code>CommonClass</code> and you are injecting with <code>CommonComponent</code> or one of its sub-components or dependent components, they can obtain instances of <code>CommonClass</code> wired with the correct dependencies:</p>

<pre><code>public class MyActivity extends AppCompatActivity {

    @Inject CommonClass commonClass;

    public void onCreate(Bundle savedInstanceState) {
        CommonComponentHolder.getComponent().inject(this);
    }
}
</code></pre>

<p><strong>Use subcomponents or dependent components to specify the injection targets</strong></p>

<p>Now you have a <code>@Singleton</code> scoped component, you'll probably want to create a component for a narrower scope for your Activity or Fragment. You'll have to connect it to your <code>CommonComponent</code>, so use dependent components or subcomponents (subcomponents are preferred as of Dagger 2.10). Since you say you have already tried defining a <code>@ExpScope</code>, I think the missing piece is to make subcomponent or dependent component with the <code>@ExpScope</code> that injects your Activity or Fragment.</p>

<p>Something like the following for the top-level singleton component:</p>

<pre><code>@Singleton
@Component(modules={CommonModule.class, ExpModule.class})
public interface CommonComponent {
    ExpComponent.Builder exComponent();
}
</code></pre>

<p>And then for the subcomponent:</p>

<pre><code>@ExpScope
@Subcomponent(modules = {NarrowerScopedModule.class})
public interface ExpComponent {
    @Subcomponent.Builder
    public interface Builder {
        Builder narrowerScopedModule(NarrowerScopedModule narrowerScopedModule);
        ExpComponent build();
    }
}
</code></pre>

<p>There are good working examples of Android projects in the <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Google Android Architecture Blueprints Github repo</a></p>
",5241933,,5241933,,2017-03-23 6:40:02,2017-03-23 6:40:02,,,,8,,,
Android,43078276,2,,43071830,2017-03-28 19:28:02,2658,,3,,"<p>Components are for grouping objects of a similar lifecycle. While Components may happen to correspond to a particular set of functionality (like a <code>TaskComponent</code> for injecting a <code>TaskActivity</code> and a <code>TaskPresenter</code>) it is not always possible or desirable to insist on only one Component per set of functionality (for instance, insisting on only one <code>TaskComponent</code> for all task related activities and dependencies). </p>

<p>Instead, in Dagger 2 re-usability is available through Modules which you can very easily swap in and out of Components. Within the constraints of the advice for organising your Modules for testability in the <a href=""https://google.github.io/dagger/testing.html"" rel=""nofollow noreferrer"">Dagger 2 official documentation</a> you are able to organise Modules congruent with your functionality (e.g., a <code>TaskModule</code> for all-task related dependencies). Then, because Components are so lightweight, you can make as many as you like to deal with the different lifecycles of your Activities and so on. Remember also that you can compose Modules using the <code>Class&lt;?&gt; [] includes()</code> method inside the <code>Module</code> <code>@interface</code>.</p>

<p>In your particular scenario, you want to share the <code>Task</code> object from a <code>TaskDetailActivity</code>. If you held a reference to the <code>Task</code> within your <code>TaskDetailActivity</code> then that reference will no longer be available when <code>TaskDetailActivity</code> is destroyed. While you could try some solution of holding binding the <code>Task</code> in a Module and then maintaining a reference to that Module at the app-scope level, you would essentially be doing the same as the <code>UserScope</code> at the app-scoped level in the article you have linked. Any kind of solution for sharing the <code>Task</code> object between Activity using Dagger 2 would necessarily involve maintaining a reference to the object at the app-scoped level. </p>

<p>Using Dagger 2 doesn't mean that the <code>new</code> keyword or serialization/deserialization of <code>Parcelables</code> is now wrong and so if your first intuition is to use <code>Intent</code> to communicate then I would say that you are right. If you need a more robust solution than directly communicating the <code>Task</code>, then you could extract a <code>TaskRepository</code> and transmit an <code>Intent</code> between Activity that contains the <code>id</code> of the <code>Task</code> you wish to retrieve. Indeed, some of the <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Google Android Architecture Blueprints</a> have a solution just like this.</p>
",5241933,,5241933,,2017-03-29 1:55:33,2017-03-29 1:55:33,,,,2,,,
Android,43078517,2,,42977275,2017-03-28 19:44:42,2658,,1,,"<p>Basically, as already suggested above, you are to plunge into the science of <em>optical recognition</em>. These are quite complex algorithms that analyze pixels of an image and try to 'see' some text or, let's say, faces in the images. This objective, obvious for a human eye and mind, is quite complex especially considering that the image may have been shot with some particular lighting (back light or side light), with right or wrong white balance, etc.</p>

<p>Despite the whole complexity, there is good news: Google has provided a special library that does exactly that: recognizes texts, bar codes and faces. It is called  <a href=""https://developers.google.com/vision/"" rel=""nofollow noreferrer"">Mobile Vision</a></p>

<p>Even without knowing the recognizing algorithms, you basically initiate this library and then feed your images to these algorithms with Face API, Barcode API or Text API. And then after the processing within that library you are given whatever was found by those algorithms. It's a kind of Magic :)</p>

<p>Useful links here:</p>

<p><a href=""https://codelabs.developers.google.com/codelabs/mobile-vision-ocr/#0"" rel=""nofollow noreferrer"">Tutorial with Text API</a></p>

<p><a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/ocr-codelab/ocr-reader-complete"" rel=""nofollow noreferrer"">The code sample of the app using Text API</a></p>
",3901722,,,,,2017-03-28 19:44:42,,,,0,,,
Android,43080361,2,,43069429,2017-03-28 21:34:18,2658,,4,,"<p>There are two levels of control for the flash - manual, and controlled by the auto-exposure routine. You're currently mixing them together.</p>

<p>If you want to fire the flash manually, then you need to set AE_MODE to either AE_MODE_OFF or AE_MODE_ON; not any of the FLASH modes.  Then, FLASH_MODE will control whether the flash will be in torch mode, off, or fire once for a given request.  </p>

<p>Since you're always leave AE_MODE in one of the FLASH states, what you do to FLASH_MODE should not matter, barring a bug in some specific device.</p>

<p>If you want to guarantee flash firing in every other picture, you need to use AE_MODE_ON_ALWAYS_FLASH for the force-flash photos, and you need to use AE_MODE_ON for the no-flash phoots; don't touch FLASH_MODE.
Right now, with AUTO_FLASH, it's up to the device whether to fire a flash or not, so you'll see different behavior from different devices and lighting conditions - some will fire, some won't.</p>

<p>The other key thing you're not doing is running a precapture sequence; this is essential for flash pictures, because it allows the device to fire the preflash to determine correct flash power, focus, and white balance.</p>

<p>To run precapture, set the AE_MODE as desired, and then set AE_PRECAPTURE_TRIGGER to START for one request. This will transition AE_STATE to PRECAPTURE, and it'll stay there for some number of frames; once AE_STATE is no longer PRECAPTURE, you can issue the actual image capture request.  Make sure you keep the AE_MODE consistent throughout this.</p>

<p>The sample app <a href=""https://github.com/googlesamples/android-Camera2Basic/"" rel=""nofollow noreferrer"">Camera2Basic</a> implements the precapture sequence, so take a look there; it also has some optimizations that skip precapture in case the scene is not dark enough to need flash, but since you want to force-fire flash, that's not relevant to you.</p>
",1344825,,,,,2017-03-28 21:34:18,,,,1,,,
Android,43128307,2,,43128082,2017-03-30 21:04:58,2660,,1,,"<ol>
<li><p>Yes, the methods are either in the activity or in other classes, but since there is no other places for java code to be, could you clarify this question better?</p></li>
<li><p>To reduce the complexity of Activitys. If you have very little logic, it is perfectly fine, to have all the code in the activity. But as soon as the count of lines rise, you may run into problems like readability, testability and things like that. 
But you should at least put code, that you use in different Activitys, into separate classes.</p></li>
<li><p>A good example would be something like M(odel)V(iew)P(resenter), where the goal is, to separate the View (Setup Buttons, Textview etc.), the presenter (Connection the loginbutton to the loginservice while showing a loginview) and the model (The actual implementation of the loginservice).</p></li>
<li><p>Google itself offers some examples for a clean <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">architecture</a> and a simple example for <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">MVP</a>.</p></li>
</ol>
",7787955,,,,,2017-03-30 21:04:58,,,,2,,,
Android,43155128,2,,43150975,2017-04-01 9:34:36,2661,,1,,"<p>If you are interested in implementing MVP in Android, please refer to the <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">Google Android Architecture Blueprints</a>.</p>

<p>With respect to your question:</p>

<blockquote>
  <p>Because Model will decide which method should be worked in presenter and according to choosed method the presenter will invoke view methods.</p>
</blockquote>

<p>This isn't the usual way of doing MVP. In MVP, the model is passive and the presenter is the agent. </p>

<p><a href=""https://i.stack.imgur.com/WaWeK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WaWeK.png"" alt=""model view presenter""></a></p>

<p><em>(Diagram from <a href=""https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter"" rel=""nofollow noreferrer"">MVP Wikipedia page</a>)</em></p>

<p>As per the diagram above, the presenter manipulates the model, and the model doesn't know or care about the presenter. When it is necessary for the model to notify the presenter of state change events it is done through <em>the presenter</em> registering for callbacks from the model. This is also clear in the Blueprint example:</p>

<pre><code>@Inject
TasksPresenter(TasksRepository tasksRepository, TasksContract.View tasksView) {
    mTasksRepository = tasksRepository;
    mTasksView = tasksView;
}
</code></pre>

<p>The presenter takes a dependency on the model (the tasks repository) but the tasks repository doesn't know or care about who is consuming it. While the linked example doesn't show a state-change event propagating from the model layer to the presenter, if there was one it probably be done through registering a callback inside the presenter layer. Something like the following:</p>

<pre><code>mTasksRepository.registerStateChangeEvent(this);
</code></pre>

<p>Likewise, the example also shows loading similar to yours and correctly places this inside the presenter:</p>

<pre><code>private void loadStatistics() {
    mStatisticsView.setProgressIndicator(true);

    // The network request might be handled in a different thread so make sure Espresso knows
    // that the app is busy until the response is handled.
    EspressoIdlingResource.increment(); // App is busy until further notice

    mTasksRepository.getTasks(new TasksDataSource.LoadTasksCallback() {
    //snip    
</code></pre>

<p>Because <code>mTasksRepository</code> doesn't take any dependencies that relate to the view or presenter and is manipulated as a patient by the presenter, we still maintain separation of concerns.</p>
",5241933,,5241933,,2017-04-02 2:08:26,2017-04-02 2:08:26,,,,2,,,
Android,43159400,2,,43159176,2017-04-01 16:39:53,2662,,5,,"<p><a href=""https://willowtreeapps.com/ideas/camera2-and-you-leveraging-android-lollipops-new-camera/"" rel=""noreferrer"">This article</a> provides a lot of information about how to set up a project with the Camera2 API. From the first few paragraphs:</p>

<blockquote>
  <p>DSLR-like levels of customization, such as native control over exposure and raw sensor capture are finally possible. And while this new approach requires a little more thought and legwork, the level of control you get in return is well worth the effort.</p>
</blockquote>

<p>So the main difference is that you have more control over what you can do with the phone's camera. It is also likely that there is an improvement in performance and photo quality, but I haven't found any mentions of it anywhere.</p>

<p>If you don't want to use the Camera2 API as it is somewhat more complicated, the deprecated version seems to work fine on <em>most</em> devices, however it is more than likely that it will eventually be removed, which will cause your app to... not work. So regardless of which API you prefer using, it is always going to be better to go with the one that isn't deprecated.</p>

<p>To help with implementing the API, there's a nice and simple library I like <a href=""https://github.com/google/cameraview"" rel=""noreferrer"">here</a>, or if you don't like libraries or have a more specific use for it you could take a look at this <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">sample project</a>.</p>
",4955981,,,,,2017-04-01 16:39:53,,,,0,,,
Android,43165263,2,,43163138,2017-04-02 6:25:25,2662,,1,,"<p>The situation you are experiencing may be a consequence of organising your Modules and Components in an unusual way. In particular, grouping laterally (one Component injects all the Presenters) rather than vertically (one component injects the functionality related to <code>SelectOpponentActivity</code>) is problematic.</p>

<p>A good example to follow is in the <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Google Android Architecture Blueprints GitHub repo</a>. If you peruse the code there, you will see that they have organised functionality related to Tasks inside one Java package together with a separate Component, Module, Presenter etc. This has the nice advantage of being able to restrict accessibility of the constructors of the classes contained therein and fulfilling Effective Java Item 13: <em>Minimize the accesibility of classes and members.</em></p>

<p>Likewise, you've grouped all your modules together into a Presenter Module and an Interactor Module. The advice from the Dagger 2 official documentation is to <a href=""https://google.github.io/dagger/testing.html"" rel=""nofollow noreferrer"">organise Modules first for testability</a> and then along functional lines. Again, you can refer to the Blueprint example for how to do this. </p>

<p>Finally, note that there is unavoidably some boilerplate involved in using most DI frameworks like Dagger 2. In a sense, you are exchanging a bigger problem (""how do I deal with all of these constructors?"") with much smaller and more manageable problems (""how do I group my Components"" etc.).</p>

<p><strong>Update</strong>
There is a library called Auto Dagger2 that can generate components for you. See <a href=""https://github.com/lukaspili/Auto-Dagger2"" rel=""nofollow noreferrer"">this Github repo</a>. Here is an example of an annotation:</p>

<pre><code>@AutoComponent
@Singleton
public class ExampleApplication extends Application { 
}
</code></pre>

<p>Which generates the following code:</p>

<pre><code>@Component
@Singleton
public interface ExampleApplicationComponent { 
}
</code></pre>

<p>Also check out <a href=""https://github.com/google/auto/"" rel=""nofollow noreferrer"">Google Auto</a> if you are interested in code generation tools.</p>
",5241933,,5241933,,2017-04-04 2:10:27,2017-04-04 2:10:27,,,,6,,,
Android,43186639,2,,43180273,2017-04-03 13:58:52,2664,,3,,"<p>After more research I've found that this question was already asked and answered.
Unfortunately the question is still marked as not answered.
Here there is the <a href=""https://stackoverflow.com/questions/37027885/in-app-billing-mhelper-dispose-error"">link to the original question</a>.</p>

<p>The solution is simple:</p>

<ol>
<li>The file that you can get from the guide are outdated, and should be instead downloaded from <a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive"" rel=""nofollow noreferrer"">github</a>.</li>
<li><p>In the method <code>onDestroy</code> you should instead use the following code:</p>

<pre><code>@Override
public void onDestroy() {
   super.onDestroy();
   //Always unbind the connection with the store, otherwise performance degradation of the device may follow.
   if (mHelper != null) {
      mHelper.disposeWhenFinished();
      mHelper = null;
   }
}
</code></pre></li>
</ol>

<p><code>disposeWhenFinished</code> it's a more elegant solution that works better than a <code>dispose</code>.</p>
",6875945,,-1,,2017-05-23 12:18:16,2017-04-03 16:20:54,,,,0,,,
Android,43190609,2,,43155911,2017-04-03 17:16:43,2664,,1,,"<p>Having tried before to maintain the structure of an iOS app in Android, with a far simpler domain that Camera2, I would suggest it is probably more trouble than it is worth.</p>

<p>Android and iOS have some quite particular architectural patterns and you may find that you are really swimming against the tide in one if you try to match the structure of the other.</p>

<p>Camers2 in particular is really quite involved - I would take a look at the example on GitHub (like below) and use this as a starting point. However, take a good look at the issues list and questions tagged with Camera2 on Stack overflow as there are definitely still issues with it that you really don't want to rediscover yourself if you can avoid it:</p>

<ul>
<li><a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></li>
</ul>
",334402,,,,,2017-04-03 17:16:43,,,,0,,,
Android,43259296,2,,38359040,2017-04-06 15:20:20,2667,,1,,"<p>With stock Android, currently all Fingerprints are considered equal.
<a href=""https://github.com/googlesamples/android-FingerprintDialog/issues/20"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-FingerprintDialog/issues/20</a></p>

<p>As <strong>mariotaku</strong> says at the bottom there is a way with the hidden API to tell Fingerprints apart. But this could likely break in future releases.</p>

<blockquote>
  <p><code>/**
   * Obtain the Fingerprint associated with this operation. Applications are strongly
   * discouraged from associating specific fingers with specific applications or operations.
   *
   * @hide
   */
  public Fingerprint getFingerprint() { return mFingerprint; }</code></p>
</blockquote>

<p>Not the <code>@hide</code> in the code block. Meaning this function is not available <em>publicly</em> so you would have to use reflection to access it.</p>

<h2>Side note:</h2>

<p>According to this link, there is the ability to use different fingerprint gestures to launch different apps on newer Huawei phones.
<a href=""https://www.reddit.com/r/Nexus6P/comments/42p8ba/different_fingerprint_launches_different_app/"" rel=""nofollow noreferrer"">https://www.reddit.com/r/Nexus6P/comments/42p8ba/different_fingerprint_launches_different_app/</a></p>

<p>Upon further inspection, this is actually nothing to do with reading different fingerprints but rather using gestures on the fingerprint sensor to perform different actions. These gestures can be performed with any finger, not only the ones registered as authentication fingerprints.
<a href=""http://www.androidcentral.com/how-enable-fingerprint-gestures-honor-6x"" rel=""nofollow noreferrer"">http://www.androidcentral.com/how-enable-fingerprint-gestures-honor-6x</a></p>
",2734961,,,,,2017-04-06 15:20:20,,,,0,,,
Android,43283016,2,,43282599,2017-04-07 16:28:06,2668,,2,,"<p>An answer is to use the 'intended' method after your test code to verify that the activity result meets your requirements. That looks like this:</p>

<pre class=""lang-java prettyprint-override""><code>@Test
public void typeNumber_ValidInput_InitiatesCall() {
    // Types a phone number into the dialer edit text field and presses the call button.
    onView(withId(R.id.edit_text_caller_number))
            .perform(typeText(VALID_PHONE_NUMBER), closeSoftKeyboard());
    onView(withId(R.id.button_call_number)).perform(click());

    // Verify that an intent to the dialer was sent with the correct action, phone
    // number and package. Think of Intents intended API as the equivalent to Mockito's verify.
    intended(allOf(
            hasAction(Intent.ACTION_CALL),
            hasData(INTENT_DATA_PHONE_NUMBER),
            toPackage(PACKAGE_ANDROID_DIALER)));
}
</code></pre>

<p>However, as part of a fully automated test, you'll need to stub out the response to the activity too so that it can run without actual blocking user input required. You'll need to set up intent stubbing before running tests:</p>

<pre class=""lang-java prettyprint-override""><code>@Before
    public void stubAllExternalIntents() {
        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before
        // every test run. In this case all external Intents will be blocked.
        intending(not(isInternal())).respondWith(new ActivityResult(Activity.RESULT_OK, null));
    }
</code></pre>

<p>Then you can write the corresponding part of the test like this:</p>

<pre class=""lang-java prettyprint-override""><code>@Test
    public void pickContactButton_click_SelectsPhoneNumber() {
        // Stub all Intents to ContactsActivity to return VALID_PHONE_NUMBER. Note that the Activity
        // is never launched and result is stubbed.
        intending(hasComponent(hasShortClassName("".ContactsActivity"")))
                .respondWith(new ActivityResult(Activity.RESULT_OK,
                        ContactsActivity.createResultData(VALID_PHONE_NUMBER)));

        // Click the pick contact button.
        onView(withId(R.id.button_pick_contact)).perform(click());

        // Check that the number is displayed in the UI.
        onView(withId(R.id.edit_text_caller_number))
                .check(matches(withText(VALID_PHONE_NUMBER)));
    }
</code></pre>

<p>If you need to verify with actual user input from another application (like the phone dialer), that is outside the scope of Espresso. Since I currently work with a vendor that helps with these kinds of cases, I hesitate to name names and tools, but lots of people do need to write tests that simulate the real end-to-end experience.</p>

<p>Mike Evans has a great write-up about testing intents <a href=""http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents/"" rel=""nofollow noreferrer"">here</a> and there's always the android documentation <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/IntentsBasicSample/app/src/androidTest/java/com/example/android/testing/espresso/BasicSample/DialerActivityTest.java"" rel=""nofollow noreferrer"">here</a>.</p>
",3195307,,,,,2017-04-07 16:28:06,,,,1,,,
Android,43320453,2,,40441577,2017-04-10 10:12:01,2670,,1,,"<p>It looks like you just want a static rectangle in the center of the preview.</p>

<p>You can do this via an xml layout by adding the image into the layout.</p>

<p>Taking the Camera2Basic example (<a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a>) and adding it to this, the example below adds the rectangle, some text and control buttons on the side (it is for landscape orientation): </p>

<pre class=""lang-js prettyprint-override""><code>&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;

    &lt;com.example.android.camera2basic.AutoFitTextureView
        android:id=""@+id/texture""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentStart=""true""
        android:layout_alignParentTop=""true"" /&gt;

    &lt;LinearLayout
        android:id=""@+id/control""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_alignParentBottom=""true""
        android:layout_alignParentEnd=""true""
        android:layout_alignParentTop=""true""
        android:background=""@color/colorPrimary""
        android:orientation=""vertical""&gt;

        &lt;Space
            android:layout_width=""1dp""
            android:layout_height=""0dp""
            android:layout_weight=""1"" &gt;
        &lt;/Space&gt;

        &lt;TextView
            android:id=""@+id/label1""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_gravity=""center""
            android:text=""@string/label1_text"" /&gt;

        &lt;Space
            android:layout_width=""1dp""
            android:layout_height=""0dp""
            android:layout_weight=""1"" &gt;
        &lt;/Space&gt;

        &lt;Button
            android:id=""@+id/picture_button""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_gravity=""center""
            android:text=""@string/picture_button_text"" /&gt;

        &lt;Space
            android:layout_width=""1dp""
            android:layout_height=""0dp""
            android:layout_weight=""1"" &gt;
        &lt;/Space&gt;

        &lt;ImageButton
            android:id=""@+id/info""
            style=""@android:style/Widget.Material.Light.Button.Borderless""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_gravity=""center_horizontal|bottom""
            android:contentDescription=""@string/description_info""
            android:padding=""20dp""
            android:src=""@drawable/ic_action_info"" /&gt;

        &lt;Space
            android:layout_width=""1dp""
            android:layout_height=""0dp""
            android:layout_weight=""1"" &gt;
        &lt;/Space&gt;

    &lt;/LinearLayout&gt;

    &lt;RelativeLayout
        android:id=""@+id/tileview""
        android:layout_width=""fill_parent""
        android:layout_height=""fill_parent""
        android:layout_toLeftOf=""@+id/control""
        android:background=""@android:color/transparent"" &gt;

        &lt;ImageView
            android:id=""@+id/autofocus_rectangle""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:src=""@drawable/autofocus_landscape_Image""
            android:layout_centerInParent=""true"" /&gt;

        &lt;TextView
            android:id=""@+id/bottom_text""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            android:layout_centerInParent=""true""
            android:layout_alignParentBottom=""true""
            android:layout_margin=""10sp""
            android:background=""@android:color/holo_blue_dark""
            android:textSize=""15sp""
            android:padding=""5sp""
            android:text="""" /&gt;

    &lt;/RelativeLayout&gt;

&lt;/RelativeLayout&gt;
</code></pre>


",334402,,,,,2017-04-10 10:12:01,,,,0,,,
Android,43358105,2,,43198926,2017-04-12 0:03:06,2672,,1,,"<p>Are you talking about QR Code + Barcode or OCR + Barcode?</p>

<p>The former one, when building BarcodeDetector, you can specify which Barcode types you'd like to detect and recognize, for example you can do Barcode.UPC_A | Barcode.QR_CODE.</p>

<p>The later one, you can mimic what we did in the demo app multiTracker
<a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/multi-tracker/app/src/main/java/com/google/android/gms/samples/vision/face/multitracker/MultiTrackerActivity.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision/blob/master/visionSamples/multi-tracker/app/src/main/java/com/google/android/gms/samples/vision/face/multitracker/MultiTrackerActivity.java</a></p>
",1750600,,,,,2017-04-12 0:03:06,,,,0,,,
Android,43408479,2,,43370329,2017-04-14 9:04:56,2674,,5,,"<p>If you try @azizbekian's path, I wrote about this <a href=""https://github.com/ardock/android-topeka/issues/1"" rel=""nofollow noreferrer"">here</a>, created new test rules <a href=""https://github.com/ardock/android-topeka/tree/65c03fa2e3ae47810de0843196cd278057ed14c8/app/src/androidTest/java/com/google/samples/apps/topeka/rule"" rel=""nofollow noreferrer"">here</a> and tested it <a href=""https://github.com/ardock/android-topeka/branches/all"" rel=""nofollow noreferrer"">here</a></p>

<p>I confirm @Testujaca Malpeczka path works on Travis-ci for Android APIs 17-22 as discussed <a href=""https://github.com/googlesamples/android-topeka/pull/69"" rel=""nofollow noreferrer"">here</a></p>

<p>If you are looking for a solution for latest Android APIs and tools, work in progress <a href=""https://stackoverflow.com/q/42731625/1009132"">here</a> and <a href=""https://stackoverflow.com/q/43090804/1009132"">here</a></p>

<pre><code>before_script:
  # Wait for emulator fully-booted and disable animations
  - android-wait-for-emulator
  - adb shell settings put global window_animation_scale 0 &amp;
  - adb shell settings put global transition_animation_scale 0 &amp;
  - adb shell settings put global animator_duration_scale 0 &amp;
  - adb shell input keyevent 82 &amp;
</code></pre>

<p>It also works in Circle-ci and probably any continuous integration build server, see <a href=""https://web.archive.org/web/20160411180215/http://riggaroo.co.za/setting-circle-ci-test-deploy-build-android-app/"" rel=""nofollow noreferrer"">broken link here</a></p>

<pre><code>test:
  pre:
    - ...
    - circle-android wait-for-boot
    - adb shell input keyevent 82
    - adb shell settings put global window_animation_scale 0
    - adb shell settings put global transition_animation_scale 0
    - adb shell settings put global animator_duration_scale 0
</code></pre>

<p>My extended test rules work for Android APIs 15-22, and there was a bug in Android 23 emulator.</p>

<p>I'll try it for later versions 24+ using android-topeka sample another day, probably it works.</p>

<p>Any help, improvement or effective alternative using <code>sdkmanager</code> would be much appreciated.</p>
",1009132,,-1,,2017-05-23 12:10:03,2017-04-28 23:40:22,,,,6,,,
Android,43421865,2,,41766196,2017-04-15 3:23:53,2675,,1,,"<p>It is not related with the SurfaceView at all. It is a Camera API misconfiguration. You will have to make some additional changes inside your CameraSource.java file.
You can find it on <a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow noreferrer"">this GitHub repository</a></p>

<p>First, you need to know that it is an Exposure Problem. It refers to the light the camera allows to receive on the lens. You need to know if your Camera supports Exposure Compensation. You will have to query <a href=""https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMinExposureCompensation()"" rel=""nofollow noreferrer"">getMinExposureCompensation()</a> and <a href=""https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMaxExposureCompensation()"" rel=""nofollow noreferrer"">getMaxExposureCompensation()</a> from your Camera.Parameters instance. As the documentation explains, if both methods return 0, exposure compensation is not supported and there's nothing you can do.</p>

<p>Luckily most of the time this characteristic is supported by all phones. Now you can check the current camera exposure by calling <a href=""https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getExposureCompensation()"" rel=""nofollow noreferrer"">getExposureCompensation()</a> which will return the default value (usually 0, which means exposure is not adjusted). Now <strong>to prevent dark images</strong>, you only have to set your new exposure between the min and max values using <a href=""https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setExposureCompensation(int)"" rel=""nofollow noreferrer"">setExposureCompensation()</a> and apply the Camera.Parameters to your camera.</p>

<p>Finally, you can Lock the Exposure to avoid losing the configuration using <a href=""https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setAutoExposureLock(boolean)"" rel=""nofollow noreferrer"">setAutoExposureLock()</a>, <a href=""https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getAutoExposureLock()"" rel=""nofollow noreferrer"">getAutoExposureLock()</a> and most important: before setting the Exposure Lock you must be sure that <a href=""https://developer.android.com/reference/android/hardware/Camera.Parameters.html#isAutoExposureLockSupported()"" rel=""nofollow noreferrer"">isAutoExposureLockSupported()</a> returned true.</p>

<p>Good Luck!</p>
",4612755,,,,,2017-04-15 3:23:53,,,,0,,,
Android,43430331,2,,43381177,2017-04-15 19:26:22,2676,,1,,"<p>I figured it out! Here are the Google docs I followed...</p>

<p><a href=""https://developer.android.com/wear/preview/features/standalone-apps.html"" rel=""nofollow noreferrer"">https://developer.android.com/wear/preview/features/standalone-apps.html</a></p>

<p>Sample: <a href=""https://github.com/googlesamples/android-WearVerifyRemoteApp"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-WearVerifyRemoteApp</a></p>
",3995465,,,,,2017-04-15 19:26:22,,,,0,,,
Android,43451369,2,,43451231,2017-04-17 12:19:06,2677,,2,,"<blockquote>
  <p>So isn't it superfluous in this case to link against the appcompat v7 when the project itself requires v23? </p>
</blockquote>

<p>With a <code>minSdkVersion</code> of 23, you do not need <code>appcompat-v7</code>, but you will then need to not use anything from it (e.g., <code>AppCompatActivity</code>, <code>Theme.AppCompat</code>).</p>

<p>Google likes everyone to use <code>appcompat-v7</code>, but it adds ~1MB of bloat to your app for little added value, particularly with a <code>minSdkVersion</code> of 23.</p>

<blockquote>
  <p>The second thing I'm not sure about is linking against constraint layout. HelloJNI does this as well but I don't know why. </p>
</blockquote>

<p>Google has converted many of their templates and examples over to use <code>ConstraintLayout</code>.</p>

<blockquote>
  <p>From my research it looks like constraint layout allows apps to do some advanced layout tricks but of course HelloJNI doesn't do that... so why does it still link against constraint layout?</p>
</blockquote>

<p>Because they are using <code>ConstraintLayout</code> in <a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-jni/app/src/main/res/layout/activity_hello_jni.xml"" rel=""nofollow noreferrer"">a layout resource</a>... that itself is unused. If I had to guess, they copied their JNI code into a new project created by a template that added the layout resource, dependency upon the <code>constraint</code> artifact, dependency upon <code>appcompat-v7</code>, etc.</p>

<blockquote>
  <p>I don't need to link against appcompat v7 because my app targets v9</p>
</blockquote>

<p><strike>Your app has <code>targetSdkVersion</code> of 25, not 9.</strike></p>
",115145,,115145,,2017-04-17 12:38:17,2017-04-17 12:38:17,,,,2,,,
Android,43468945,2,,43468627,2017-04-18 9:52:22,2678,,2,,"<p>I would suggest you to take a look at this GitHub <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture</a> made by Google developers. It provides samples to build Android apps using different architectural concepts and tools. Hope it helps.</p>
",7871886,,,,,2017-04-18 9:52:22,,,,0,,,
Android,43485466,2,,31973415,2017-04-19 2:47:21,2679,,1,,"<blockquote>
  <p>Just to give another option as this solution didn't work for me.</p>
</blockquote>

<p>I found this really useful thread where it propose some workarounds related to the memory leak in MapView:</p>

<p><a href=""https://github.com/googlesamples/android-play-location/issues/26"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/issues/26</a></p>

<p>For me, the most interesting things from this thread (that worked for me) is:</p>

<blockquote>
  <p>1) Make sure to unregister your callbacks:</p>
</blockquote>

<pre><code>if (googleApiClient != null) {
        googleApiClient.unregisterConnectionCallbacks(this);
        googleApiClient.unregisterConnectionFailedListener(this);

        if (googleApiClient.isConnected()) {
                LocationServices.FusedLocationApi.removeLocationUpdates(googleApiClient, this);
        }

        googleApiClient.disconnect();
        googleApiClient = null;
 }
</code></pre>

<blockquote>
  <p>2) Use a WeakReference for LocationListener</p>
</blockquote>

<pre><code>public class WeakLocationListener implements LocationListener {

    private final WeakReference&lt;LocationListener&gt; locationListenerRef;

    public WeakLocationListener(@NonNull LocationListener locationListener) {
        locationListenerRef = new WeakReference&lt;&gt;(locationListener);
    }

    @Override
    public void onLocationChanged(android.location.Location location) {
        if (locationListenerRef.get() == null) {
            return;
        }
        locationListenerRef.get().onLocationChanged(location);
    }

}
</code></pre>

<p>Hope it helps!</p>
",3212266,,,,,2017-04-19 2:47:21,,,,0,,,
Android,43502439,2,,43467964,2017-04-19 17:31:53,2680,,1,,"<p>Use gradle <code>connectedCheck</code> command
You can find an example app here from google</p>

<p><a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint</a></p>

<p>There you can also read how to run the example tests on multiple devices from the command line / terminal, or from within Android Studio</p>

<p>You can also take a look at Spoon if you want to use an external tool plugin:
<a href=""https://github.com/square/spoon"" rel=""nofollow noreferrer"">https://github.com/square/spoon</a></p>

<p>good luck</p>
",3549911,,,,,2017-04-19 17:31:53,,,,3,,,
Android,43506843,2,,43460985,2017-04-19 22:03:08,2680,,3,,"<p>I think I can answer my own question: I was creating my Camera2 Fragment after the <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow noreferrer"">Android's Camera2 example</a>. However, I didn't really consider the method <code>configureTransform</code> to be important as, opposite to the example code, my application is forced to landscape mode anyway. It turned out that this assumption was wrong. Since having <code>configureTransform</code> reintegrated in my code I haven't experienced any more hiccups.</p>

<p>Update: The original example within the Android documentation pages doesn't seem to exist anymore. I've updated the link which is now pointing to the code on Github.</p>
",2001687,,2001687,,2018-09-15 14:05:32,2018-09-15 14:05:32,,,,5,,,
Android,43524437,2,,43361706,2017-04-20 15:55:43,2681,,1,,"<p>The simple answer is: You can't.</p>

<p>Why? Android camera output frames in NV21 ByteBuffer. And you must generate your masks based on the landmarks points in a separated Bitmap, then join them.
Sorry but, that's how the Android Camera API work. Nothing can be done. You must do it manually.</p>

<p>Also, I wouldn't get the camera preview then convert it to YuvImage then to Bitmap. That process consumes <strong>a lot</strong> of resources and makes preview <strong>very very slow</strong>. Instead I would use this method which will be a lot faster and rotates your preview internally so you don't loose time doing it:</p>

<pre><code>outputFrame = new Frame.Builder().setImageData(mPendingFrameData, mPreviewSize.getWidth(), mPreviewSize.getHeight(), ImageFormat.NV21)
              .setId(mPendingFrameId)
              .setTimestampMillis(mPendingTimeMillis)
              .setRotation(mRotation)
              .build();
mDetector.receiveFrame(outputFrame);
</code></pre>

<p>All the code can be found in <a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow noreferrer"">CameraSource.java</a></p>
",4612755,,,,,2017-04-20 15:55:43,,,,0,,,
Android,43560714,2,,43559225,2017-04-22 15:01:22,2683,,1,,"<p>The old deprecated camera API still works on Android 21 and above. But you are right, using the new API is preferable, and gives you more options and better performance.</p>

<p>You can start with the official <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">Camera2Basic</a> sample.</p>
",192373,,,,,2017-04-22 15:01:22,,,,1,,,
Android,43564630,2,,25462277,2017-04-22 21:07:04,2683,,22,,"<p>Combining a few answers into a more digestible one because @VP's answer, while technically clear, is difficult to understand if it's your first time moving from Camera to Camera2:</p>

<p>Using <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a> as a starting point, modify the following:</p>

<p>In <code>createCameraPreviewSession()</code> init a new <code>Surface</code> from <code>mImageReader</code></p>

<pre><code>Surface mImageSurface = mImageReader.getSurface();
</code></pre>

<p>Add that new surface as a output target of your <code>CaptureRequest.Builder</code> variable.  Using the Camera2Basic sample, the variable will be <code>mPreviewRequestBuilder</code></p>

<pre><code>mPreviewRequestBuilder.addTarget(mImageSurface);
</code></pre>

<p>Here's the snippet with the new lines (see my @AngeloS comments):</p>

<pre><code>private void createCameraPreviewSession() {

    try {

        SurfaceTexture texture = mTextureView.getSurfaceTexture();
        assert texture != null;

        // We configure the size of default buffer to be the size of camera preview we want.
        texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

        // This is the output Surface we need to start preview.
        Surface surface = new Surface(texture);

        //@AngeloS - Our new output surface for preview frame data
        Surface mImageSurface = mImageReader.getSurface();

        // We set up a CaptureRequest.Builder with the output Surface.
        mPreviewRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);

        //@AngeloS - Add the new target to our CaptureRequest.Builder
        mPreviewRequestBuilder.addTarget(mImageSurface);

        mPreviewRequestBuilder.addTarget(surface);

        ...
</code></pre>

<p>Next, in <code>setUpCameraOutputs()</code>, change the format from <code>ImageFormat.JPEG</code> to <code>ImageFormat.YUV_420_888</code> when you init your <code>ImageReader</code>. (PS, I also recommend dropping your preview size for smoother operation - one nice feature of Camera2)</p>

<pre><code>mImageReader = ImageReader.newInstance(largest.getWidth() / 16, largest.getHeight() / 16, ImageFormat.YUV_420_888, 2);
</code></pre>

<p>Finally, in your <code>onImageAvailable()</code> method of <code>ImageReader.OnImageAvailableListener</code>, be sure to use @Kamala's suggestion because the preview will stop after a few frames if you don't close it</p>

<pre><code>    @Override
    public void onImageAvailable(ImageReader reader) {

        Log.d(TAG, ""I'm an image frame!"");

        Image image =  reader.acquireNextImage();

        ...

        if (image != null)
            image.close();
    }
</code></pre>
",630996,,,,,2017-04-22 21:07:04,,,,3,,,
Android,43564927,2,,43533251,2017-04-22 21:40:13,2683,,1,,"<p>When something goes wrong with your Dagger 2 setup, you will get a compile-time message in the Gradle console when you try and build (it's in the bottom right corner of Android Studio). The message will tell you what is wrong and give you a clue for how to fix it.</p>

<p>In your case, it looks like you have something like this inside your <code>LoginActivity</code>:</p>

<pre><code>@Inject FileOrganiserModule fileOrganiserModule;

protected void onCreate(Bundle savedInstanceState) {
</code></pre>

<p>Dagger 2 modules and components are like scaffolding that helps you to request injection for the dependencies in your project. You normally shouldn't request injection of them by putting <code>@Inject</code> annotations on them. </p>

<p>If you have to create your module with a reference of the current Activity, you normally just create an instance of the module using the constructor:</p>

<pre><code>void injectMembers() {
    DaggerLoginComponent.builder().loginModule(new LoginModule(this));
}
</code></pre>

<p>Or you can use the new <code>dagger.android</code> classes to do that for you. A good example project for you to follow is in the Google Android Architecture Blueprints repo <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">here</a></p>
",5241933,,,,,2017-04-22 21:40:13,,,,0,,,
Android,43595592,2,,43535937,2017-04-24 18:47:50,2685,,3,,"<p>Your problem doesn't sound like it's related to <code>RecyclerView.Adapter</code> -- and actually you shouldn't try to solve it within your <code>Adapter</code>: the responsibility of the adapter is to act as a bridge (or ""adapter"" ;-) ) between your data and view component. Giving it more responsibility would turn it into something that is not interchangeable with other <code>Adapter</code> implementations (you don't want this!).</p>

<p>You should probably find a clean way to abstract your data persistence. The in-memory cache should go into that abstraction. You mentioned the repository pattern, this would be good choice IMHO.</p>

<p>Your architecture should roughly look like this:</p>

<pre><code>adapter -&gt; repository -&gt; |-&gt; cache
                         |-&gt; database
</code></pre>

<p>The repository combines the logic for data access (your DAO) and the cache handling (your CacheManager). The repository would always first check the cache and then fetch data from the database. It also updates the cache if non-cached data is fetched. Furthermore, it registers for updates on the database. As soon as the database notifies for changed data, the repository has the chance to update the cache and/or propagate the notification to the view. The important part is that the interface of the repository hides all this logic; it only offers access to data.</p>

<p>You then need to find a way to make your adapter work with your repository. I'd suggest Android's <code>Loader</code> mechanics. By this you get asynchronous loading and correct lifecycle handling for free. Also this nicely decouples adapter and repository.</p>

<p>If you need some inspirations on how to apply the repository pattern, have a look into the <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">googlesamples/android-architecture</a> Github. The <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/"" rel=""nofollow noreferrer"">Clean Architecture branch</a> could be a good fit for you.</p>

<p>On a side note: try to find real (unique) keys of your data. Using the position within the data list is usually a bad idea and depending on the structure of your data will result in strange side effects in the view.</p>
",786434,,,,,2017-04-24 18:47:50,,,,4,,,
Android,43602828,2,,43602188,2017-04-25 6:05:03,2685,,1,,"<p><code>getPurchases</code> needs an Integer that is representing the InApp Billing API. So your call</p>

<pre><code>Bundle ownedItems = mService.getPurchases(6, getPackageName(), ""inapp"", null);
</code></pre>

<p>must be handling the api version. If you developing InApp Billing version 3, it must be:</p>

<pre><code>Bundle ownedItems = mService.getPurchases(3, getPackageName(), ""inapp"", null);
</code></pre>

<p>Like described in API:</p>

<p><strong>Pass the In-app Billing API version (“3”), the package name of your calling app, and the purchase type (“inapp” or ""subs"") into the method. Here is an example:</strong></p>

<p><code>Bundle ownedItems = mService.getPurchases(3, getPackageName(), ""inapp"", null)</code>;</p>

<p>I wonder why it works, anyway I don´t think that this is causing the problem.</p>

<p>The next thing is, the <code>getPurchases()</code> returns only not consumed items. If your items are consumed, it will not return these. That´s why history returns it. Like described in API:</p>

<pre><code>getPurchases()
</code></pre>

<p><strong>This method returns the current un-consumed products owned by the user, including both purchased items and items acquired by redeeming a promo code.</strong> </p>

<pre><code>getPurchaseHistory()
</code></pre>

<p><strong>This method returns the most recent purchase made by the user for each SKU, even if that purchase is expired, canceled, or consumed.</strong></p>

<p>My experience with inApp Billing is that this is a huge pain as it is not possible to test every cirumstances through a test account. It seems like a not finished part of android. But we have no other choice to follow exact the api, so I recommend to do it exactly like described.</p>

<p>API and Source Codes:</p>

<p><a href=""https://developer.android.com/google/play/billing/billing_integrate.html"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_integrate.html</a></p>

<p><a href=""https://developer.android.com/google/play/billing/billing_reference.html"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_reference.html</a></p>

<p><a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl</a></p>
",1538986,,1538986,,2017-04-25 6:13:51,2017-04-25 6:13:51,,,,0,,,
Android,43615180,2,,43258773,2017-04-25 15:38:09,2686,,1,,"<p>IMHO, it's better to consider a Contentprovider as a datasource, although the data can be stored in several ways (SQLite database, files, ...), to keep some independence between the architecture and the Android framework.</p>

<p>A Google repository provide some samples of architecture. One of them contains an example of architecture with a content provider and a repository :</p>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-contentproviders/"" rel=""nofollow noreferrer"" title=""googlesamples/android-architecture/todo-mvp-contentproviders"">googlesamples/android-architecture/todo-mvp-contentproviders</a></p>

<p>Selected excerpts :</p>

<blockquote>
  <p>You could then use content providers to support additional features that are not covered by this sample, providing the following possible benefits:</p>
  
  <ul>
  <li>Allow you to securely share data stored in your app with other apps.</li>
  <li>Add support for custom searches in your app.</li>
  <li>Develop widgets which access data in your app.</li>
  </ul>
</blockquote>

<p><a href=""https://i.stack.imgur.com/Iwg9u.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Iwg9u.png"" alt=""architecture todo-mvp-contentproviders""></a></p>
",5581663,,,,,2017-04-25 15:38:09,,,,0,,,
Android,43615569,2,,43535937,2017-04-25 15:55:58,2686,,1,,"<p>I think it's an architecture subject. Rx is out of subject. For example for a repository, Rx is just a way to implement it, and by extension, its cache.</p>

<p>A Google repository provide some samples of architecture. One of them contains an example of architecture with a basic mvp, and a repository who manage cache :</p>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">googlesamples/android-architecture/todo-mvp</a></p>

<p>Another example in the same repository with Rx :</p>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/"" rel=""nofollow noreferrer"">googlesamples/android-architecture/todo-mvp-rxjava</a></p>

<p>We can be seen here that these two examples share the same scheme of architecture :</p>

<p><a href=""https://i.stack.imgur.com/K27jv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/K27jv.png"" alt=""enter image description here""></a></p>
",5581663,,,,,2017-04-25 15:55:58,,,,3,,,
Android,43648795,2,,43620089,2017-04-27 4:42:34,2687,,1,,"<p>When you add android:configChanges=""orientation|screenSize"" and avoid the restart the system will call onConfigurationChanged() on your activity.</p>

<p>In here you can handle anything you want to that might be important for your application, for example resizing the video view for the new orientation.</p>

<p>If you don't do this the system will use the old view dimensions which no longer match the display.</p>

<p>See this answer for an example of how to resize a video view: <a href=""https://stackoverflow.com/a/14113271/334402"">https://stackoverflow.com/a/14113271/334402</a></p>

<p>Google's Camerea2Vdieo example (<a href=""https://github.com/googlesamples/android-Camera2Video"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Video</a>) shows one approach to resize a video when a surface has changed - they do not stop the activity restarting but the principles are the same, in that you detect the 'window' has changed and then measure the new size and reset accordingly:</p>

<p>Detecting the change using a SurfaceTextureListener:</p>

<pre class=""lang-js prettyprint-override""><code>/**
     * {@link TextureView.SurfaceTextureListener} handles several lifecycle events on a
     * {@link TextureView}.
     */
    private TextureView.SurfaceTextureListener mSurfaceTextureListener
            = new TextureView.SurfaceTextureListener() {

        @Override
        public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture,
                                              int width, int height) {
            openCamera(width, height);
        }

        @Override
        public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture,
                                                int width, int height) {
            configureTransform(width, height);
        }

        @Override
        public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
            return true;
        }

        @Override
        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
        }

    };
</code></pre>

<p>The transformation of the texture is done in configureTransform which you can see at the link above.</p>
",334402,,-1,,2017-05-23 12:02:14,2017-04-27 18:22:10,,,,3,,,
Android,43685579,2,,30350739,2017-04-28 17:13:31,2689,,3,,"<p><a href=""https://github.com/googlesamples/android-play-places/blob/master/PlaceCompleteAdapter/Application/src/main/java/com/example/google/playservices/placecomplete/PlaceAutocompleteAdapter.java"" rel=""nofollow noreferrer"">Here</a> is an example of how to do just that. </p>

<p>You have the bonus of getting any of the <code>AutocompletePrediction</code> from the adapter. Just call <code>getItem(int position)</code> from the <code>AutoCompleteTextView</code>'s <code>AdapterView.OnItemClickListener</code> for example and use any data from the prediction clicked as you wish.</p>

<p>Links relevant code:</p>

<pre><code>/**
 * Adapter that handles Autocomplete requests from the Places Geo Data API.
 * {@link AutocompletePrediction} results from the API are frozen and stored directly in this
 * adapter. (See {@link AutocompletePrediction#freeze()}.)
 * &lt;p&gt;
 * Note that this adapter requires a valid {@link com.google.android.gms.common.api.GoogleApiClient}.
 * The API client must be maintained in the encapsulating Activity, including all lifecycle and
 * connection states. The API client must be connected with the {@link Places#GEO_DATA_API} API.
 */
public class PlaceAutocompleteAdapter
        extends ArrayAdapter&lt;AutocompletePrediction&gt; implements Filterable {

    private static final String TAG = ""PlaceAutocompleteAdapter"";
    private static final CharacterStyle STYLE_BOLD = new StyleSpan(Typeface.BOLD);
    /**
     * Current results returned by this adapter.
     */
    private ArrayList&lt;AutocompletePrediction&gt; mResultList;

    /**
     * Handles autocomplete requests.
     */
    private GoogleApiClient mGoogleApiClient;

    /**
     * The bounds used for Places Geo Data autocomplete API requests.
     */
    private LatLngBounds mBounds;

    /**
     * The autocomplete filter used to restrict queries to a specific set of place types.
     */
    private AutocompleteFilter mPlaceFilter;

    /**
     * Initializes with a resource for text rows and autocomplete query bounds.
     *
     * @see android.widget.ArrayAdapter#ArrayAdapter(android.content.Context, int)
     */
    public PlaceAutocompleteAdapter(Context context, GoogleApiClient googleApiClient,
            LatLngBounds bounds, AutocompleteFilter filter) {
        //change the layout nex for your own if you'd like
        super(context, android.R.layout.simple_expandable_list_item_2, android.R.id.text1);
        mGoogleApiClient = googleApiClient;
        mBounds = bounds;
        mPlaceFilter = filter;
    }

    /**
     * Sets the bounds for all subsequent queries.
     */
    public void setBounds(LatLngBounds bounds) {
        mBounds = bounds;
    }

    /**
     * Returns the number of results received in the last autocomplete query.
     */
    @Override
    public int getCount() {
        return mResultList.size();
    }

    /**
     * Returns an item from the last autocomplete query.
     */
    @Override
    public AutocompletePrediction getItem(int position) {
        return mResultList.get(position);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View row = super.getView(position, convertView, parent);

        // Sets the primary and secondary text for a row.
        // Note that getPrimaryText() and getSecondaryText() return a CharSequence that may contain
        // styling based on the given CharacterStyle.

        AutocompletePrediction item = getItem(position);

        TextView textView1 = (TextView) row.findViewById(android.R.id.text1);
        TextView textView2 = (TextView) row.findViewById(android.R.id.text2);
        textView1.setText(item.getPrimaryText(STYLE_BOLD));
        textView2.setText(item.getSecondaryText(STYLE_BOLD));

        return row;
    }

    /**
     * Returns the filter for the current set of autocomplete results.
     */
    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults results = new FilterResults();

                // We need a separate list to store the results, since
                // this is run asynchronously.
                ArrayList&lt;AutocompletePrediction&gt; filterData = new ArrayList&lt;&gt;();

                // Skip the autocomplete query if no constraints are given.
                if (constraint != null) {
                    // Query the autocomplete API for the (constraint) search string.
                    filterData = getAutocomplete(constraint);
                }

                results.values = filterData;
                if (filterData != null) {
                    results.count = filterData.size();
                } else {
                    results.count = 0;
                }

                return results;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {

                if (results != null &amp;&amp; results.count &gt; 0) {
                    // The API returned at least one result, update the data.
                    mResultList = (ArrayList&lt;AutocompletePrediction&gt;) results.values;
                    notifyDataSetChanged();
                } else {
                    // The API did not return any results, invalidate the data set.
                    notifyDataSetInvalidated();
                }
            }

            @Override
            public CharSequence convertResultToString(Object resultValue) {
                // Override this method to display a readable result in the AutocompleteTextView
                // when clicked.
                if (resultValue instanceof AutocompletePrediction) {
                    return ((AutocompletePrediction) resultValue).getFullText(null);
                } else {
                    return super.convertResultToString(resultValue);
                }
            }
        };
    }

    /**
     * Submits an autocomplete query to the Places Geo Data Autocomplete API.
     * Results are returned as frozen AutocompletePrediction objects, ready to be cached.
     * objects to store the Place ID and description that the API returns.
     * Returns an empty list if no results were found.
     * Returns null if the API client is not available or the query did not complete
     * successfully.
     * This method MUST be called off the main UI thread, as it will block until data is returned
     * from the API, which may include a network request.
     *
     * @param constraint Autocomplete query string
     * @return Results from the autocomplete API or null if the query was not successful.
     * @see Places#GEO_DATA_API#getAutocomplete(CharSequence)
     * @see AutocompletePrediction#freeze()
     */
    private ArrayList&lt;AutocompletePrediction&gt; getAutocomplete(CharSequence constraint) {
        if (mGoogleApiClient.isConnected()) {
            Log.i(TAG, ""Starting autocomplete query for: "" + constraint);

            // Submit the query to the autocomplete API and retrieve a PendingResult that will
            // contain the results when the query completes.
            PendingResult&lt;AutocompletePredictionBuffer&gt; results =
                    Places.GeoDataApi
                            .getAutocompletePredictions(mGoogleApiClient, constraint.toString(),
                                    mBounds, mPlaceFilter);

            // This method should have been called off the main UI thread. Block and wait for at most 60s
            // for a result from the API.
            AutocompletePredictionBuffer autocompletePredictions = results
                    .await(60, TimeUnit.SECONDS);

            // Confirm that the query completed successfully, otherwise return null
            final Status status = autocompletePredictions.getStatus();
            if (!status.isSuccess()) {
                Toast.makeText(getContext(), ""Error contacting API: "" + status.toString(),
                        Toast.LENGTH_SHORT).show();
                Log.e(TAG, ""Error getting autocomplete prediction API call: "" + status.toString());
                autocompletePredictions.release();
                return null;
            }

            Log.i(TAG, ""Query completed. Received "" + autocompletePredictions.getCount()
                    + "" predictions."");

            // Freeze the results immutable representation that can be stored safely.
            return DataBufferUtils.freezeAndClose(autocompletePredictions);
        }
        Log.e(TAG, ""Google API client is not connected for autocomplete query."");
        return null;
    }
}
</code></pre>
",1626594,,1626594,,2017-04-29 12:00:59,2017-04-29 12:00:59,,,,1,,,
Android,43760847,2,,43694696,2017-05-03 13:01:50,2694,,1,,"<p>Finally, I found the Google example for <a href=""https://github.com/googlesamples/android-Camera2Basic/"" rel=""nofollow noreferrer"">Camera2</a>. the GLSurfaceView seems an implementation of this project. I compared the two projects and I created the necessary classes to take photo.</p>
",767440,,,,,2017-05-03 13:01:50,,,,0,,,
Android,43766165,2,,43765499,2017-05-03 17:08:10,2694,,1,,"<p>Unfortunately there is no way to handle exceptions from not your own native code. </p>

<p>I had the similar issue with google-vision. And I reported the issue to google vision github <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision</a></p>

<p>Sadly but this library has some bugs. In my case it was the bug in the barcode text parser.
It will be cool if you report your problem too.</p>

<p>It may be interesting that there is a way to catch exception from your own native code: <a href=""https://stackoverflow.com/questions/8415032/catching-exceptions-thrown-from-native-code-running-on-android"">Catching exceptions thrown from native code running on Android</a></p>
",7958563,,-1,,2017-05-23 12:02:23,2017-05-03 17:08:10,,,,4,,,
Android,43826462,2,,43715276,2017-05-06 23:47:37,2697,,2,,"<p>In addition to the good comments you received above, you should group your classes by feature in packages and put the Dagger 2 <code>Component</code> and <code>Module</code> classes in that package.</p>

<p>Refer to the Google Android Architecture Blueprints <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">Dagger/MVP sample</a>. </p>

<p>There is a root package for the Application class and the app-scoped module and component. From that root package, there are the following sub-packages grouped by feature:</p>

<pre><code>addedittask 
statistics
taskdetail  
tasks
util
</code></pre>

<p>Inside the package there are the following classes:</p>

<pre><code>TaskDetailActivity.java
TaskDetailComponent.java
TaskDetailContract.java
TaskDetailFragment.java 
TaskDetailPresenter.java
TaskDetailPresenterModule.java
</code></pre>

<p>The benefit of doing this is you can use <a href=""http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"" rel=""nofollow noreferrer"">access control</a> to prevent unintended usages of your classes. This fulfils Effective Java Item 13 - <em>Minimize the accesibility of classes and members</em>.</p>
",5241933,,,,,2017-05-06 23:47:37,,,,0,,,
Android,43843796,2,,43843594,2017-05-08 9:10:05,2698,,5,,"<p>You can use shared element Transition </p>

<p><a href=""https://github.com/codepath/android_guides/wiki/Shared-Element-Activity-Transition"" rel=""noreferrer"">https://github.com/codepath/android_guides/wiki/Shared-Element-Activity-Transition</a></p>

<p><a href=""https://github.com/googlesamples/android-ActivitySceneTransitionBasic"" rel=""noreferrer"">https://github.com/googlesamples/android-ActivitySceneTransitionBasic</a></p>

<p><a href=""https://github.com/toddway/MaterialTransitions"" rel=""noreferrer"">https://github.com/toddway/MaterialTransitions</a></p>

<p><a href=""https://github.com/afollestad/shared-element-transition-samples"" rel=""noreferrer"">https://github.com/afollestad/shared-element-transition-samples</a></p>

<pre><code>FirstFragment fragmentOne = ...;
SecondFragment fragmentTwo = ...;
// Check that the device is running lollipop
if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
    // Inflate transitions to apply
    Transition changeTransform = TransitionInflater.from(this).
          inflateTransition(R.transition.change_image_transform);
    Transition explodeTransform = TransitionInflater.from(this).
          inflateTransition(android.R.transition.explode);

    // Setup exit transition on first fragment
    fragmentOne.setSharedElementReturnTransition(changeTransform);
    fragmentOne.setExitTransition(explodeTransform);

    // Setup enter transition on second fragment
    fragmentTwo.setSharedElementEnterTransition(changeTransform);
    fragmentTwo.setEnterTransition(explodeTransform);

    // Find the shared element (in Fragment A)
    ImageView ivProfile = (ImageView) findViewById(R.id.ivProfile);

    // Add second fragment by replacing first 
    FragmentTransaction ft = getFragmentManager().beginTransaction()
            .replace(R.id.container, fragmentTwo)
            .addToBackStack(""transaction"")
            .addSharedElement(ivProfile, ""profile"");
    // Apply the transaction
    ft.commit();
}
else {
    // Code to run on older devices
}
</code></pre>

<p><strong>OUTPUT</strong></p>

<p><a href=""https://i.stack.imgur.com/xZKMk.gif"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/xZKMk.gif"" alt=""enter image description here""></a></p>
",4407266,,,,,2017-05-08 9:10:05,,,,0,,,
Android,43939515,2,,43939275,2017-05-12 13:54:41,2703,,2,,"<p>the method <code>queryInventoryAsync()</code> holds one or four paramters. If you look into the source code see the following desciption:</p>

<pre><code>   /**
     * Asynchronous wrapper for inventory query. This will perform an inventory
     * query as described in {@link #queryInventory}, but will do so asynchronously
     * and call back the specified listener upon completion. This method is safe to
     * call from a UI thread.
     *
     * @param querySkuDetails as in {@link #queryInventory}
     * @param moreItemSkus as in {@link #queryInventory}
     * @param moreSubsSkus as in {@link #queryInventory}
     * @param listener The listener to notify when the refresh operation completes.
     */

public void queryInventoryAsync(final boolean querySkuDetails, final List&lt;String&gt; moreItemSkus,
            final List&lt;String&gt; moreSubsSkus, final QueryInventoryFinishedListener listener)
throws IabAsyncInProgressException.....
</code></pre>

<p>and for the single paramter, there is no description (it´s declared in the one above):</p>

<pre><code> public void queryInventoryAsync(QueryInventoryFinishedListener listener)
        throws IabAsyncInProgressException{
        queryInventoryAsync(false, null, null, listener);
}
</code></pre>

<p>The documentation of InApp Billing and the <code>IABHelper</code> class is absolutely poor, but I guess it´s enough to call only <code>queryInventoryAsync(QueryInventoryFinishedListener listener)</code> and you will get all informations inside the listener. </p>

<p>The listener returns <code>IabResult result</code> and <code>Inventory inv</code> . These hold all information you need.</p>

<p>IABHelper on GitHub:</p>

<p><a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/IabHelper.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/IabHelper.java</a></p>
",1538986,,1538986,,2017-05-12 16:44:11,2017-05-12 16:44:11,,,,0,,,
Android,43939528,2,,43939275,2017-05-12 13:55:20,2703,,1,,"<p>The method you are calling has the signature:</p>

<p><code>queryInventoryAsync(boolean,List&lt;String&gt;,List&lt;String&gt;,QueryInventoryFinishedListener)</code></p>

<p>(4 parameters)</p>

<p>You are calling it with only 3 parameters.</p>

<p>If you check the sample code on <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util/IabHelper.java"" rel=""nofollow noreferrer"">Github</a>, you will see that there is no method with only 3 parameters.</p>
",1027277,,1027277,,2017-05-12 14:39:13,2017-05-12 14:39:13,,,,4,,,
Android,43975716,2,,43975602,2017-05-15 9:22:55,2705,,7,,"<p>When you start up the fingerprint reader, you pass in a <a href=""https://developer.android.com/reference/android/os/CancellationSignal.html"" rel=""noreferrer"">CancellationSignal</a>.</p>

<p>When you want to cancel (maybe in the OnPause on your Activity), just call the <code>cancel</code> method of this object.</p>

<p>There is a complete sample <a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""noreferrer"">here</a>.</p>
",1027277,,,,,2017-05-15 9:22:55,,,,1,,,
Android,44049240,2,,44011869,2017-05-18 13:33:25,2709,,1,,"<p>First, start hacking away at the Hello-JNI example from Google:
<a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-jni"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/master/hello-jni</a></p>

<p>Use that as a test bed.</p>

<p>Then, create a Java Class with <code>public native</code> methods that let you interact with your library.  Something of a high level API, probably to pass a file name or buffer to SHPOpenLL and return a pointer to the ShapeFile context (<code>ShapeHandle</code>).  Looks like your library is written in C, so you should be able to write a similar interface to query the shapefile passing a (jint) c-style cast of your <code>ShapeHandle</code> pointer.</p>

<p>Next, you need to play around with <code>javah</code> to generate the header for your shapefile interface.  Once the header is generated, you can use it to implement your interface in a .cc file.  From there you will basically make Java calls to your C interface and it will return jobjects. (jint, jbool, jstring, etc...)</p>

<hr>

<p>I'm looking at the ShapeLib that you want to use and while it's easy enough, there will be some gotchas.</p>

<ul>
<li>You will need to implement <a href=""https://github.com/sw897/shapelib/blob/master/shapefil.h#L282"" rel=""nofollow noreferrer"">SAHooks</a> for file I/O.  I suggest looking at <a href=""https://github.com/PolygonTek/BlueshiftEngine/tree/master/Engine/Source/Dependencies/nvidia/nv_file"" rel=""nofollow noreferrer"">NVFile</a> for an example how to  access APK files (or downloaded files). You will need to init it using activity.context.assetmanager.  Then use nv_file to wrap FRead/FSeek/etc...</li>
<li>Passing info back to java is going to be tough.  Personally, I would build a Java class to hold the shape information and fill it out on the <code>C</code> side.  However, you might be tempted to query these parameters from the <code>SHPObject</code> one at a time.  Will be slow, but less error prone.</li>
</ul>

<p>E.g. </p>

<pre><code>// Java 
MyJavaShapeObject obj = new MyJavaShapeObject();
_c_retrieveShapeObj((jint)pShapeFile, obj);

// C
java_blah_blah_c_retrieveShapeObj(JNIEnv* env, jclass activity, jint theShapeFile, jobject theObj){
    ShapeHandle pShapeFileHandle = (ShapeHandle)theShapeFile; // c style conversion
    // http://stackoverflow.com/questions/11647646/how-to-use-the-jni-to-change-the-fields-of-a-java-class
    // http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html#wp16613
    // http://stackoverflow.com/a/36759159/7949696
} 
</code></pre>
",7949696,,,,,2017-05-18 13:33:25,,,,0,,,
Android,44096650,2,,43966265,2017-05-21 12:06:42,2711,,5,,"<p>As I understand <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso"" rel=""noreferrer"">Google Samples</a> the dependency:</p>

<pre><code>com.android.support.test.espresso:espresso-idling-resource:2.2.2
</code></pre>

<p>is only needed when you are implementing custom <code>IdlingResource</code>. Even in <code>IdlingResourceSample</code> README there is a sentence:</p>

<blockquote>
  <p>Consider using the CountingIdlingResource class from the espresso-contrib package</p>
</blockquote>

<p>And as I understand your code you are trying to use <code>CountingIdlingResource</code> from espresso-contrib package, so try to organise your test dependencies as written in other <a href=""https://github.com/googlesamples/android-testing/blob/master/ui/espresso/RecyclerViewSample/app/build.gradle#L44"" rel=""noreferrer"">Google sample</a>.</p>
",6507689,,,,,2017-05-21 12:06:42,,,,1,,,
Android,44099595,2,,44096913,2017-05-21 17:08:21,2712,,1,,"<p>Use CMakelists to include and build your code into a shared library.  <a href=""https://developer.android.com/studio/projects/add-native-code.html"" rel=""nofollow noreferrer"">https://developer.android.com/studio/projects/add-native-code.html</a></p>

<p>Specifically, use CMakeLists in your GameCode/ and Android_Core/ directories, and a CMakeList in your root that calls 'add_subdirectory' for those two dirs.</p>

<p>That's the easy part.  Really, what you want is a native_activity example that draws to the screen using OpenGL ES 2+ : <a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-gl2"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/master/hello-gl2</a></p>

<p>I would even go as far as recommending using the nVidia tools: <a href=""https://github.com/PolygonTek/BlueshiftEngine/tree/master/Engine/Source/Dependencies/nvidia"" rel=""nofollow noreferrer"">https://github.com/PolygonTek/BlueshiftEngine/tree/master/Engine/Source/Dependencies/nvidia</a> , escpecially the nv_file and nv_egl utilities. </p>
",7949696,,,,,2017-05-21 17:08:21,,,,0,,,
Android,44117381,2,,24874066,2017-05-22 16:02:36,2713,,10,,"<p>The latest Android Emulator now supports OpenGL ES 3.0.  To use OpenGL ES 3.0, your development machine needs a host GPU graphics card that supports OpenGL 3.2 or higher on Microsoft® Windows® or Linux. </p>

<p>See:
<a href=""https://android-developers.googleblog.com/2017/05/android-studio-3-0-canary1.html"" rel=""noreferrer"">https://android-developers.googleblog.com/2017/05/android-studio-3-0-canary1.html</a></p>

<p><a href=""https://i.stack.imgur.com/C87ld.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/C87ld.jpg"" alt=""OpenGL ES 3.0 in Android Emulator""></a></p>

<p>The <a href=""https://github.com/googlesamples/android-ndk/tree/f9f26dfce3dda37cf08a56286dd268a0e94d9da6/gles3jni"" rel=""noreferrer""><code>gles3jni</code> sample app</a> from the NDK is a good option to try it out.</p>

<p>If it fails with:</p>

<pre><code>java.lang.RuntimeException: createContext failed: EGL_BAD_CONFIG
</code></pre>

<p>also try to run first on host:</p>

<pre><code>echo ""GLESDynamicVersion = on"" &gt;&gt; ~/.android/advancedFeatures.ini
</code></pre>

<p>as the devs are currently whitelisting supported host GPUs, and that overrides it, see also: <a href=""https://issuetracker.google.com/issues/68496715"" rel=""noreferrer"">https://issuetracker.google.com/issues/68496715</a></p>
",5551196,,895245,,2017-10-31 7:05:32,2017-10-31 7:05:32,,,,5,,,
Android,44145483,2,,44023646,2017-05-23 21:38:35,2714,,1,,"<p>It looks like you are missing: </p>

<pre><code>manager.setProfileEnabled(componentName);
</code></pre>

<p>I recommend looking a little closer at some of the examples below. I'm not sure what <code>isProfileActive()</code> does. I would use: </p>

<pre><code>manager.isProfileOwnerApp(getApplicationContext().getPackage())
</code></pre>

<p>When you create a managed profile, the managed profile's apps and data are separate from the user's apps/data that created the managed profile (in most cases, personal versus work). If you open your app from the original user's context, it will try to set up a work profile again. To see your app as the profile owner, you need to open it in your managed profile's context (your app will be ""badge"", have a little briefcase on it). Additionally, data like your certificates will be restricted to your managed profile.</p>

<ul>
<li><a href=""https://developer.android.com/work/managed-profiles.html"" rel=""nofollow noreferrer"">https://developer.android.com/work/managed-profiles.html</a></li>
<li><a href=""https://developers.google.com/android/work/build-dpc"" rel=""nofollow noreferrer"">https://developers.google.com/android/work/build-dpc</a></li>
</ul>

<p>A good initial example to follow:
<a href=""https://github.com/googlesamples/android-BasicManagedProfile"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BasicManagedProfile</a></p>

<p>A much more complex, but more complete example. It can be configured as a device owner or profile owner:
<a href=""https://github.com/googlesamples/android-testdpc"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testdpc</a></p>
",6917917,,1841194,,2017-08-15 5:53:00,2017-08-15 5:53:00,,,,0,,,
Android,44148377,2,,44127950,2017-05-24 3:20:13,2714,,1,,"<p>We did not produce a GATT client sample specific to Android Things because the existing Android samples already covered this case pretty well. You can use the standard Android BLE APIs without any changes, so have a look at the existing <a href=""https://github.com/googlesamples/android-BluetoothLeGatt"" rel=""nofollow noreferrer"">Android BluetoothLeGatt Sample</a>.</p>

<p>Additionally, if you find it helpful, I personally built an Android <a href=""https://github.com/devunwired/accessory-samples/tree/master/BluetoothGatt"" rel=""nofollow noreferrer"">BLE GATT sample</a> a few years back that talks specifically to the SensorTag. It was a previous version of the hardware, but the overall concepts should remain the same.</p>
",246461,,,,,2017-05-24 3:20:13,,,,2,,,
Android,44167821,2,,44135586,2017-05-24 20:22:58,2715,,3,,"<p>This sample from Google <a href=""https://github.com/googlesamples/android-HdrViewfinder"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-HdrViewfinder</a> gives the basic of what you need to do.</p>

<p>Summary:</p>

<p>1) Add a <em>Surface</em> to the output of the camera</p>

<p>2) Listen to updates to this surface, in the above example it happens in <em>ViewfinderProcessor.java</em></p>

<p>The above example uses 2 surfaces for a fake HDR preview but you should easily be able to clean the example up to only use 1 surface. Also the example uses a custom Render Script kernel for processing, you don't need to use that. You can easily catch the buffer type <em>Allocation</em> in ViewfinderProcessor.java to get a byte array as in the old Camera API.</p>
",4027806,,,,,2017-05-24 20:22:58,,,,2,,,
Android,44178673,2,,44157859,2017-05-25 10:48:19,2715,,2,,"<p><em>It's not a bug, it's a feature</em></p>

<p>The problems that would emerge from allowing mixing scopes in the manner you have suggested are similar to <a href=""https://stackoverflow.com/questions/225929/what-is-the-exact-problem-with-multiple-inheritance#226056"">the problems of multiple inheritance in OO languages</a>.</p>

<p>Consider the following component structure (the diamond problem):</p>

<pre><code>    A
   / \
  B   C
   \ /
    D
</code></pre>

<p><code>D</code> sub-component of both <code>B</code> and <code>C</code>. Since siblings <code>B</code> and <code>C</code> are independent of each other they are free to expose an arbitrary dependency <code>Foo</code> to sub-components. Assume that <code>Foo</code> is required for the module set in component <code>D</code>. Which <code>Foo</code> should <code>D</code> now use? The one from <code>B</code> or the one from <code>C</code>? </p>

<p>The situation is even more complex if you allow scopes. A scope in Dagger 2 is for marking lifecycle. In other words, it says ""I will maintain a reference to these bindings at this point"". Hence, your <code>@Singleton</code> scoped bindings must be grouped in a Component for which you maintain a reference at the level of your Application subclass. It does nothing, for instance, to initialise a <code>@AppScoped</code> Component as a local variable within a method or as a field of an Activity - it will be discarded with the method stack or destroyed when the Activity is destroyed. </p>

<p>Returning to the above example, assume that <code>B</code> and <code>C</code> have different scopes. The <code>Foo</code> bound in <code>B</code> is <code>@BScoped</code>. So it should only live as long as <code>B</code>. But it is possible for <code>D</code> to get the <code>@CScoped Foo</code> from <code>C</code>. So we can no longer ascertain that <code>B</code> is exposing a <code>@BScoped Foo</code> to its subcomponent - we have allowed the possibility of <code>Foo</code> to escape its scope. This is in addition to the processing problems presented by not restricting ourselves to directed acyclic graphs. As you are probably aware, many problems in computer science become easier to solve once we disallow cycles.</p>

<p>The fact that you get the error message for your set up only when you add scope annotations and it disappears when you remove them is not indicative that there is a bug in Dagger 2 or something lacking. It simply means that without scope annotations you only have the illusion of a Component hierarchy since all Components are effectively equal. Again, even if you think you have somehow made a diamond through combination of non-scoped and scoped components, it will not truly be a diamond because there is no real hierarchy in the non-scoped Components.</p>

<p>Your proposed architecture is well-intentioned in that you are trying to achieve separation of <em>layers</em>. However, Dagger 2 components are for grouping <em>lifecycle</em>, not layers. To illustrate, most Android apps will have app-scoped dependencies, such as a <code>GSON</code>, a <code>SharedPreferences</code> etc. These dependencies that live and die together and last for the whole lifecycle of your app are normally bound in the module set for a <code>@Singleton</code> component. You could also call it <code>@PerApp</code> or <code>@AppScoped</code> - it really doesn't matter as long as you retain a reference to the component in your sub-class of <code>Application</code>.</p>

<p>Underneath this in your <a href=""https://en.wikipedia.org/wiki/Directed_acyclic_graph"" rel=""nofollow noreferrer"">directed acyclic graph</a> (the DAG in DAGger) you can put what you want. Some people make a <code>@UserScope</code> which lasts just as long as the app has a signed-in user. Others skip this step and move straight to <code>@PerActivity</code> or <code>@ActivityScoped</code> components. The module sets for the <code>@PerActivity</code> components should bind members that have the lifecycle of a single activity e.g., the Activity's Context.</p>

<p>At this point it's better to group by <em>functionality</em> like in the <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">Google Android Architecture Blueprint</a>. Although your components at this level will inject dependencies from different layers (the model layer and the presentation layer) these can be separated by <a href=""https://google.github.io/dagger//testing.html"" rel=""nofollow noreferrer"">judicious use of modules</a>. Additionally, you can group the members will be in the same Java package which means you can use access modifiers to fulfil Effective Java Item 13: Minimise the accessibility of classes and members.</p>
",5241933,,5241933,,2017-05-29 2:52:45,2017-05-29 2:52:45,,,,3,,,
Android,44185706,2,,44185477,2017-05-25 16:43:44,2716,,3,,"<p>You are getting tree Uri. So you need to Add below code to get files from Tree Uri.</p>

<pre><code>        DocumentFile documentFile = DocumentFile.fromTreeUri(this, uri);
        for (DocumentFile file : documentFile.listFiles()) {

            if(file.isDirectory()){ // if it is sub directory
                // Do stuff with sub directory
            }else{
                // Do stuff with normal file
            }

           Log.d(""Uri-&gt;"",file.getUri() + ""\n"");

        }
</code></pre>

<p>For the query the contents, you can use below code.</p>

<pre><code>ContentResolver contentResolver = getActivity().getContentResolver();
    Uri docUri = DocumentsContract.buildDocumentUriUsingTree(uri,
            DocumentsContract.getTreeDocumentId(uri));
    Uri childrenUri = DocumentsContract.buildChildDocumentsUriUsingTree(uri,
            DocumentsContract.getTreeDocumentId(uri));
Cursor docCursor = contentResolver.query(docUri, new String[]{
            Document.COLUMN_DISPLAY_NAME, Document.COLUMN_MIME_TYPE}, null, null, null);
    try {
        while (docCursor.moveToNext()) {
            Log.d(TAG, ""found doc ="" + docCursor.getString(0) + "", mime="" + docCursor
                    .getString(1));

        }
    } finally {
        // close cursor
    }
</code></pre>

<p>You can check Google sample code: 
<a href=""https://github.com/googlesamples/android-DirectorySelection/blob/master/Application/src/main/java/com/example/android/directoryselection/DirectorySelectionFragment.java#L150"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-DirectorySelection/blob/master/Application/src/main/java/com/example/android/directoryselection/DirectorySelectionFragment.java#L150</a></p>
",2949612,,2949612,,2017-05-25 16:56:21,2017-05-25 16:56:21,,,,5,,,
Android,44194893,2,,44194579,2017-05-26 6:19:22,2716,,37,,"<p>While initializing subclasses of <code>ViewModel</code> using <code>ViewModelProviders</code>, by default it expects your <code>UserModel</code> class to have zero argument constructor. 
In your case your constructor has argument <code>MutableLiveData&lt;User&gt; user</code></p>

<p>One way to fix this is to have a default no arg constructor for your <code>UserModel</code></p>

<p>Otherwise, if you want to have a non zero argument constructor for your ViewModel class, you may have to create a custom <code>ViewModelFactory</code> class to initialise your ViewModel instance, which will implement <code>ViewModelProvider.Factory</code> interface.</p>

<p>I have not tried this yet, but here is the link to excellent sample from google for the same: <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample"" rel=""noreferrer"">github.com/googlesamples/android-architecture-components</a>.
Specifically, checkout this class <a href=""https://github.com/googlesamples/android-architecture-components/blob/b1a194c1ae267258cd002e2e1c102df7180be473/GithubBrowserSample/app/src/main/java/com/android/example/github/viewmodel/GithubViewModelFactory.java"" rel=""noreferrer"">GithubViewModelFactory.java</a> for Java code and this class <a href=""https://github.com/googlesamples/android-architecture-components/blob/d7cd7a9414ef1eeba52a79ec76f6d9827cd50a36/GithubBrowserSample/app/src/main/java/com/android/example/github/viewmodel/GithubViewModelFactory.kt"" rel=""noreferrer"">GithubViewModelFactory.kt</a> for corresponding Kotlin code</p>
",6937018,,6937018,,2018-05-16 6:57:28,2018-05-16 6:57:28,,,,3,,,
Android,44233597,2,,44213150,2017-05-29 1:35:43,2719,,1,,"<p>Please take a look at the official sample apps from Google, such as <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">Camera2Basic</a>, or the new <a href=""https://github.com/google/cameraview"" rel=""nofollow noreferrer"">CameraView</a> library.  They handle aspect ratio issues such as what you're seeing.</p>
",1344825,,,,,2017-05-29 1:35:43,,,,2,,,
Android,44247207,2,,43923586,2017-05-29 16:47:24,2720,,1,,"<p>To answer the original question on how to use getBuyIntentExtraParams, I found out that you need to copy the actual aidl file from google and replace your aidl file.. Do not copy the code inside google's aidl and replace your code. </p>

<p>Latest aidl file from google: <a href=""https://github.com/googlesamples/android-play-billing/blob/0154723d8c97011fb5ce0163d55b496cb5ebccb7/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/0154723d8c97011fb5ce0163d55b496cb5ebccb7/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl</a></p>
",7999135,,,,,2017-05-29 16:47:24,,,,0,,,
Android,44271247,2,,44270688,2017-05-30 20:20:52,2721,,43,,"<p>Room calculates the <code>LiveData</code>'s value lazily when there is an observer.</p>

<p>You can check the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/db/RepoDaoTest.java"" rel=""noreferrer"">sample app</a>.</p>

<p>It uses a <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/test-common/java/com/android/example/github/util/LiveDataTestUtil.java"" rel=""noreferrer"">getValue</a> utility method which adds an observer to get the value:</p>

<pre><code>public static &lt;T&gt; T getValue(final LiveData&lt;T&gt; liveData) throws InterruptedException {
    final Object[] data = new Object[1];
    final CountDownLatch latch = new CountDownLatch(1);
    Observer&lt;T&gt; observer = new Observer&lt;T&gt;() {
        @Override
        public void onChanged(@Nullable T o) {
            data[0] = o;
            latch.countDown();
            liveData.removeObserver(this);
        }
    };
    liveData.observeForever(observer);
    latch.await(2, TimeUnit.SECONDS);
    //noinspection unchecked
    return (T) data[0];
}
</code></pre>

<p>Better w/ kotlin, you can make it an extensions function :).</p>
",608649,,1913888,,2017-06-01 12:52:01,2017-06-01 12:52:01,,,,4,,,
Android,44285889,2,,34473611,2017-05-31 13:16:06,2722,,4,,"<p>With the latest Google I/O 2017 announcement for <code>Android Architectural Components</code>, the proper way to abstract Realm in Android apps is:</p>

<p>1.) Realm instance lifecycle is managed by <code>ViewModel</code> class, and it is closed in <code>onCleared()</code> method</p>

<p>2.) RealmResults is a <code>MutableLiveData&lt;List&lt;T&gt;&gt;</code>, so you can create a <code>RealmLiveData&lt;T&gt;</code> class which wraps a <code>RealmResults&lt;T&gt;</code>.</p>

<p>Therefore, you can create a view model like this:</p>

<pre><code>// based on  https://github.com/googlesamples/android-architecture-components/blob/178fe541643adb122d2a8925cf61a21950a4611c/BasicSample/app/src/main/java/com/example/android/persistence/viewmodel/ProductListViewModel.java
public class ProductListViewModel {
    private final MutableLiveData&lt;List&lt;ProductEntity&gt;&gt; observableProducts = new MutableLiveData&lt;&gt;();

    Realm realm;
    RealmResults&lt;ProductEntity&gt; results;
    RealmChangeListener&lt;RealmResults&lt;ProductEntity&gt;&gt; realmChangeListener = (results) -&gt; {
        if(results.isLoaded() &amp;&amp; results.isValid()) { // you probably don't need this, just making sure.
            observableProducts.setValue(results);
        }
    };

    public ProductListViewModel() {
        realm = Realm.getDefaultInstance();             
        results = realm.where(ProductEntity.class).findAllSortedAsync(""id""); 
          // could use a Realm DAO class here
        results.addChangeListener(realmChangeListener);

        observableProducts.setValue(null); // if using async query API, the change listener will set the loaded results.
    }

    public LiveData&lt;List&lt;ProductEntity&gt;&gt; getProducts() {
        return observableProducts;
    }

    @Override
    protected void onCleared() {
        results.removeChangeListener(realmChangeListener);
        realm.close();
        realm = null;
    }
}
</code></pre>

<p>or you can separate them into a realm viewmodel and a realm livedata based on <a href=""https://news.realm.io/news/android-architecture-components-and-realm/"" rel=""nofollow noreferrer"">this article</a>:</p>

<pre><code>public class LiveRealmData&lt;T extends RealmModel&gt; extends LiveData&lt;RealmResults&lt;T&gt;&gt; {

    private RealmResults&lt;T&gt; results;
    private final RealmChangeListener&lt;RealmResults&lt;T&gt;&gt; listener = 
        new RealmChangeListener&lt;RealmResults&lt;T&gt;&gt;() {
            @Override
            public void onChange(RealmResults&lt;T&gt; results) { setValue(results);}
    };

    public LiveRealmData(RealmResults&lt;T&gt; realmResults) {
        results = realmResults;
    }

    @Override
    protected void onActive() {
        results.addChangeListener(listener);
    }

    @Override
    protected void onInactive() {
        results.removeChangeListener(listener);
    }
}

public class CustomResultViewModel extends ViewModel {

    private Realm mDb;
    private LiveData&lt;String&gt; mLoansResult;

    public CustomResultViewModel() {
        mDb = Realm.getDefaultInstance();
        mLoansResult = RealmUtils.loanDao(mDb).getAll();
    }

    public LiveData&lt;String&gt; getLoansResult() {
        return mLoansResult;
    }

    @Override
    protected void onCleared() {
        mDb.close();
        super.onCleared();
    }
}
</code></pre>

<p>Either way, you've wrapped Realm's auto-updating and lazy-loaded result set into a LiveData and ViewModel, separate from the fragments/adapters:</p>

<pre><code>// based on https://github.com/googlesamples/android-architecture-components/blob/178fe541643adb122d2a8925cf61a21950a4611c/BasicSample/app/src/main/java/com/example/android/persistence/ProductListFragment.java
public class ProductListFragment extends LifecycleFragment {
    private ProductAdapter productAdapter;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        //...
        productAdapter = new ProductAdapter(mProductClickCallback);
        //...
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        final ProductListViewModel viewModel =
                ViewModelProviders.of(this).get(ProductListViewModel.class); // &lt;-- !

        subscribeUi(viewModel);
    }

    private void subscribeUi(ProductListViewModel viewModel) {
        // Update the list when the data changes
        viewModel.getProducts().observe(this, (myProducts) -&gt; {
            if (myProducts == null) {
                // ...
            } else {
                productAdapter.setProductList(myProducts);
                //...
            }
        });
    }
}
</code></pre>

<hr>

<p>But if you are <strong>not</strong> using Android Architectural Components, even then what one needs to keep in mind is that:</p>

<blockquote>
  <p>RealmResults is a list of proxy objects that mutates in place, and it has change listeners.</p>
</blockquote>

<p>So what you need is either wrapping it as Flowable with LATEST backpressure, akin to</p>

<pre><code>private io.reactivex.Flowable&lt;RealmResults&lt;T&gt;&gt; realmResults() {
    return io.reactivex.Flowable.create(new FlowableOnSubscribe&lt;RealmResults&lt;T&gt;&gt;() {
        @Override
        public void subscribe(FlowableEmitter&lt;RealmResults&lt;T&gt;&gt; emitter)
                throws Exception {
            Realm observableRealm = Realm.getDefaultInstance();
            RealmResults&lt;T&gt; results = realm.where(clazz)./*...*/.findAllSortedAsync(""field"", Sort.ASCENDING);
            final RealmChangeListener&lt;RealmResults&lt;T&gt;&gt; listener = _results -&gt; {
                if(!emitter.isDisposed()) {
                    emitter.onNext(_results);
                }
            };
            emitter.setDisposable(Disposables.fromRunnable(() -&gt; {
                observableRealm.removeChangeListener(listener);
                observableRealm.close();
            }));
            observableRealm.addChangeListener(listener);
            emitter.onNext(observableRealm);
        }
    }, BackpressureStrategy.LATEST).subscribeOn(scheduler).unsubscribeOn(scheduler);
</code></pre>

<p>Or creating your own <code>MutableLiveList</code> interface.</p>

<pre><code>public interface MutableLiveList&lt;T&gt; extends List&lt;T&gt; { 
     public interface ChangeListener {
         void onChange(MutableLiveList&lt;T&gt; list);
     }

     void addChangeListener(ChangeListener listener);
     void removeChangeListener(ChangeListener listener);
}
</code></pre>
",2413303,,2413303,,2017-06-01 13:00:17,2017-06-01 13:00:17,,,,4,,,
Android,44318444,2,,44297396,2017-06-01 23:11:01,2723,,6,,"<ul>
<li><p><strong>0.</strong> Build openssl libraries for Android; you must choose the ABI (<strong>armeabi-v7a</strong> and <strong>x86</strong> are usually enough). You can find the <a href=""https://wiki.openssl.org/index.php/Android"" rel=""nofollow noreferrer"">official tutorial</a> long and boring. In this case, you can find prebuilt binaries on GitHub or elsewhere. Decide whether you want shared libs or static libs.</p></li>
<li><p><strong>1.</strong> With Android Studio 2.3 you can build your library by the integrated <a href=""https://developer.android.com/studio/projects/add-native-code.html"" rel=""nofollow noreferrer"">externalNativeBuild</a> gradle task. But you can build it separately, using <a href=""https://developer.android.com/ndk/guides/index.html"" rel=""nofollow noreferrer""><code>ndk-build</code></a> command. </p></li>
<li><p><strong>2.</strong> If you choose not to use gradle, copy the built shared libs to <code>app/src/main/jniLibs</code> directory of your Android project.</p></li>
<li><p><strong>3.</strong> You need a JNI wrapper to connect your Java code with C code. On the Java side, declare necessary <strong>native</strong> methods in one or more classes. These methods must be <em>implemented</em> on the C/C++ side, as described in the Android JNI <a href=""https://developer.android.com/ndk/samples/sample_hellojni.html"" rel=""nofollow noreferrer"">walkthrough</a>. Your Java code must explicitly load the shared library that includes these native method implementations. Note that you cannot directly call native functions in your library, or in opensssl library, even if these functions are <em>exported</em>.</p></li>
</ul>

<p>The working <strong>Android.mk</strong>:</p>

<pre><code>include $(CLEAR_VARS)

LOCAL_MODULE := vrazovpn
LOCAL_SRC_FILES := src/myc_files.c src/myother_c_files.c
LOCAL_STATIC_LIBRARIES := openssl libcrypto
include $(BUILD_SHARED_LIBRARY)

include $(CLEAR_VARS)
LOCAL_MODULE := openssl
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include
LOCAL_SRC_FILES := libs/$(TARGET_ARCH_ABI)/libssl.a
include $(PREBUILT_STATIC_LIBRARY)

include $(CLEAR_VARS)
LOCAL_MODULE := libcrypto
LOCAL_SRC_FILES := libs/$(TARGET_ARCH_ABI)/libcrypto.a
include $(PREBUILT_STATIC_LIBRARY)
</code></pre>

<p><em>few comments to clarify the above:</em></p>

<ul>
<li><strong>LOCAL_SRC_FILES</strong> paths are relative to <strong>LOCAL_PATH</strong>.</li>
<li><strong>LOCAL_C_INCLUDE</strong> paths are relative to the working directory, that's why we often prefix them with <code>$(LOCAL_PATH)</code>.</li>
<li>It's OK to use <strong>LOCAL_C_INCLUDES</strong> to refer to headers that belong to some library that we use, but it is much safer and cleaner to export these headers with the library, using the power of <strong>LOCAL_EXPORT_C_INCLUDES</strong>; there are other settings that can be exported similarly.</li>
<li><p><strong>Android.mk</strong> should not (and cannot) set the target ABI; it <em>receives</em> the target ABI from <code>ndk-build</code>. You can control which ABIs to include in build either by listing them in your <strong>Application.mk</strong> file or on the command line, e.g.</p>

<p><code>ndk-build APP_ABI=""x86 armeabi-v7a""</code></p></li>
</ul>

<p>If you build your library in Android Studio 2.3 or above, using the gradle plugin, the <code>APP_ABI</code> setting is ignored. You must specify the list in <a href=""https://github.com/googlesamples/android-ndk/blob/master/native-media/app/build.gradle#L12"" rel=""nofollow noreferrer""><strong>abiFilters</strong></a>.</p>
",192373,,192373,,2017-06-09 19:25:02,2017-06-09 19:25:02,,,,9,,,
Android,44338249,2,,44338160,2017-06-02 22:26:33,2724,,5,,"<p>Yes, you can assume that it goes back to ICS at least. Also starting support library version 26, minSdk becomes 14. So I assume new architecture libraries will be the same.</p>

<p>According to googlesamples, lowest API version is 14, which is Ice Cream Sandwich. </p>

<p>Here are the links to the gradle files for the minSdk 14 apps:</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/build.gradle"" rel=""noreferrer"">Github Browser Sample gradle file</a></p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PersistenceContentProviderSample/app/build.gradle"" rel=""noreferrer"">Persistent Content Provider Sample</a></p>
",7002941,,,,,2017-06-02 22:26:33,,,,1,,,
Android,44375613,2,,44208618,2017-06-05 18:42:31,2727,,36,,"<p>In one of Google's <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample"" rel=""noreferrer"">sample apps for Android Architecture Components</a> they wrap the LiveData emitted object in a class that can contain a status, data, and message for the emitted object.</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt"" rel=""noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt</a></p>

<p>With this approach you can use the status to determine if there was an error.</p>
",7465852,,4772470,,2018-05-08 8:52:13,2018-05-08 8:52:13,,,,0,,,
Android,44419653,2,,42091283,2017-06-07 17:54:46,2729,,1,,"<p>I'm not sure if I'm misunderstanding your question, but I'll try to take a crack at it. For my below explanation, I'll reference <a href=""https://github.com/googlesamples/android-instant-apps"" rel=""nofollow noreferrer"">this code sample by Google</a> several times. I <strong>HIGHLY</strong> suggest cloning that repo and playing around with it, since I think it will answer your question.</p>

<blockquote>
  <p>if we use libraries like dagger, butterknife, ... all modules would be dependent on other modules</p>
</blockquote>

<p>As mentioned by others, any libraries that will be used by all of your Features  will go into your Base Feature.</p>

<blockquote>
  <p>if our modules contain (views) as required, how should a transition to another view (from another module) be implemented without importing this module?</p>
</blockquote>

<p><a href=""https://stackoverflow.com/a/44262396/1759443"">This answer</a> covers the overview of it - but this part seems to be the root of your question so I'll try to dig in a little deeper.</p>

<p>Let's say Feature1 (<code>BrowseActivity</code>) wants to open up Feature2 (<code>ItemDetailActivity</code>). Instead of Feature1 calling <code>startActivity(ItemDetailActivity.class)</code> directly, it will have to use the method call below (this is because Feature1 doesn't have access to Feature2's <code>ItemDetailActivity.class</code> since they do NOT depend on each other).
<a href=""https://github.com/googlesamples/android-instant-apps/blob/master/multi-feature-module/main/src/main/java/com/example/android/unsplash/MainActivity.java#L186"" rel=""nofollow noreferrer"">Here is the code sample provided by Google</a></p>

<pre><code>Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""https://example.com/itemdetail""));
intent.setPackage(getPackageName());
intent.addCategory(Intent.CATEGORY_BROWSABLE);
startActivity(intent);
</code></pre>

<p>Now the missing part is that in Feature2's <code>AndroidManifest</code> you need to declare that <code>ItemDetailActivity</code> is listening for the <code>https://example.com/itemdetail</code> link. <a href=""https://github.com/googlesamples/android-instant-apps/blob/master/multi-feature-module/detail/src/main/AndroidManifest.xml#L21"" rel=""nofollow noreferrer"">Here is the relevant code sample from Google</a></p>

<pre><code>&lt;activity android:name="".ItemDetailActivity""&gt;
    &lt;intent-filter&gt;
      &lt;action android:name=""android.intent.action.MAIN"" /&gt;
      &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
    &lt;/intent-filter&gt;
    &lt;intent-filter android:autoVerify=""true""&gt;
      &lt;action android:name=""android.intent.action.VIEW"" /&gt;
      &lt;category android:name=""android.intent.category.DEFAULT"" /&gt;
      &lt;category android:name=""android.intent.category.BROWSABLE"" /&gt;
      &lt;data android:scheme=""http"" /&gt;
      &lt;data android:scheme=""https"" /&gt;
      &lt;data android:host=""example.com"" /&gt;
      &lt;!-- IMPORTANT --&gt;
      &lt;data android:pathPrefix=""/itemdetail""/&gt;
    &lt;/intent-filter&gt;
    &lt;meta-data
      android:name=""default-url""
      android:value=""https://www.example.com/itemdetail"" /&gt;
&lt;/activity&gt;
</code></pre>

<p>For any more info, read up on <a href=""https://developer.android.com/training/app-links/index.html"" rel=""nofollow noreferrer"">Digital Asset Links</a> as well as general <a href=""https://developer.android.com/training/app-indexing/deep-linking.html"" rel=""nofollow noreferrer"">Deep Linking</a></p>
",1759443,,,,,2017-06-07 17:54:46,,,,0,,,
Android,44422987,2,,44415839,2017-06-07 21:22:09,2729,,1,,"<p><a href=""https://github.com/googlesamples/android-instant-apps/tree/master/hello"" rel=""nofollow noreferrer"">This sample project</a> seems to be pretty close to what you're trying to achieve. Perhaps you don't need the <code>application project("":apk"")</code> in your <code>base/build.gradle</code> since you only have one feature (and that is the base split). You could also try removing <code>base = true</code>.</p>

<p><a href=""https://developer.android.com/topic/instant-apps/overview.html#features"" rel=""nofollow noreferrer"">This section of the docs</a> covers your use case - but it sounds like everything is set up correctly.</p>

<p>Could you also add your <code>AndroidManifests</code> to your original post?</p>
",1759443,,,,,2017-06-07 21:22:09,,,,7,,,
Android,44427693,2,,44404906,2017-06-08 5:58:02,2729,,1,,"<p>You should use; </p>

<ol>
<li><code>Database.beginTransaction()</code> before insert operation.</li>
<li><code>Database.setTransactionSuccessful()</code> after insert operation.</li>
<li><code>Database.endTransaction()</code> finally.</li>
</ol>

<p>Sample code:</p>

<pre><code>private static void insertData(AppDatabase db, List&lt;ProductEntity&gt; products, List&lt;CommentEntity&gt; comments) {
    db.beginTransaction();
    try {
        db.productDao().insertAll(products);
        db.commentDao().insertAll(comments);
        db.setTransactionSuccessful();
    } finally {
        db.endTransaction();
    }
}
</code></pre>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/db/DatabaseInitUtil.java"" rel=""nofollow noreferrer"">Sample reference</a></p>
",1460509,,,,,2017-06-08 5:58:02,,,,1,,,
Android,44459068,2,,44428389,2017-06-09 13:27:24,2731,,2,,"<blockquote>
  <p>if sections.getValue() is null I have to call api for data and insert
  in into the database</p>
</blockquote>

<p>You can handle this at <code>onChange</code> method:</p>

<pre><code>sections.observe(this, new Observer&lt;List&lt;Section&gt;&gt;() {
    @Override
    public void onChanged(@Nullable List&lt;Section&gt; sections){
         if(sections == null || sections.size() == 0) {
             // No data in your database, call your api for data
         } else {
             // One or more items retrieved, no need to call your api for data.
         }
    }
});
</code></pre>

<p>But you should better put this Database/Table initialization logic to a repository class. Check out <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/BasicSample"" rel=""nofollow noreferrer"">Google's sample</a>. See <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/db/DatabaseCreator.java"" rel=""nofollow noreferrer"">DatabaseCreator</a> class.</p>
",1460509,,1460509,,2017-06-09 13:34:05,2017-06-09 13:34:05,,,,1,,,
Android,44483001,2,,36206989,2017-06-11 10:54:13,2732,,14,,"<p>Some of the best examples of how to organise your components, modules, and packages can be found in the Google Android Architecture Blueprints Github repo <a href=""https://github.com/googlesamples/android-architecture"" rel=""noreferrer"">here</a>.</p>

<p>If you examine the source code there, you can see there is one single app-scoped Component (with a lifecycle of the duration of the whole app) and then separate Activity-scoped Components for the Activity and Fragment corresponding to a given functionality in a project. For example, there are the following packages:</p>

<pre><code>addedittask
taskdetail
tasks
</code></pre>

<p>Inside each package there is a module, component, presenter etc. For instance, inside <code>taskdetail</code> there are the following classes:</p>

<pre><code>TaskDetailActivity.java
TaskDetailComponent.java
TaskDetailContract.java
TaskDetailFragment.java
TaskDetailPresenter.java
TaskDetailPresenterModule.java
</code></pre>

<p>The advantage of organising this way (rather than grouping all of the activities in one component or module) is that you can take advantage of Java accessibility modifiers and fulfil Effective Java item 13. In other words, the functionally grouped classes will be in the same package and you can take advantage of <code>protected</code> and <code>package-private</code> <a href=""https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html"" rel=""noreferrer"">accessibility modifiers</a> to prevent unintended usages of your classes.</p>
",5241933,,,,,2017-06-11 10:54:13,,,,1,,,
Android,44495913,2,,44485631,2017-06-12 9:27:06,2733,,1,,"<p>It turned out to be a bug on the library
<a href=""https://github.com/googlesamples/android-architecture-components/issues/49"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/issues/49</a></p>
",6801380,,,,,2017-06-12 9:27:06,,,,0,,,
Android,44506312,2,,44270577,2017-06-12 18:25:39,2734,,77,,"<p>You need to implement your own <code>ViewModelProvider.Factory</code>. There is an example app created by Google demonstrating how to connect Dagger 2 with ViewModels. <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample"" rel=""noreferrer"">LINK</a>. You need those 5 things:</p>

<p>In ViewModel:</p>

<pre><code>@Inject
public UserViewModel(UserRepository userRepository, RepoRepository repoRepository) {
</code></pre>

<p>Define annotation:</p>

<pre><code>@Documented
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@MapKey
@interface ViewModelKey {
    Class&lt;? extends ViewModel&gt; value();
}
</code></pre>

<p>In ViewModelModule:</p>

<pre><code>@Module
abstract class ViewModelModule {
    @Binds
    @IntoMap
    @ViewModelKey(UserViewModel.class)
    abstract ViewModel bindUserViewModel(UserViewModel userViewModel);
</code></pre>

<p>In Fragment:</p>

<pre><code>@Inject
ViewModelProvider.Factory viewModelFactory;

@Override
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
            userViewModel = ViewModelProviders.of(this, viewModelFactory).get(UserViewModel.class);
</code></pre>

<p>Factory:</p>

<pre><code>@Singleton
public class GithubViewModelFactory implements ViewModelProvider.Factory {
    private final Map&lt;Class&lt;? extends ViewModel&gt;, Provider&lt;ViewModel&gt;&gt; creators;

    @Inject
    public GithubViewModelFactory(Map&lt;Class&lt;? extends ViewModel&gt;, Provider&lt;ViewModel&gt;&gt; creators) {
        this.creators = creators;
    }

    @SuppressWarnings(""unchecked"")
    @Override
    public &lt;T extends ViewModel&gt; T create(Class&lt;T&gt; modelClass) {
        Provider&lt;? extends ViewModel&gt; creator = creators.get(modelClass);
        if (creator == null) {
            for (Map.Entry&lt;Class&lt;? extends ViewModel&gt;, Provider&lt;ViewModel&gt;&gt; entry : creators.entrySet()) {
                if (modelClass.isAssignableFrom(entry.getKey())) {
                    creator = entry.getValue();
                    break;
                }
            }
        }
        if (creator == null) {
            throw new IllegalArgumentException(""unknown model class "" + modelClass);
        }
        try {
            return (T) creator.get();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
</code></pre>
",1952987,,2711056,,2018-04-02 22:08:22,2018-04-02 22:08:22,,,,11,,,
Android,44514607,2,,44293066,2017-06-13 7:11:47,2734,,9,,"<p>If you want to do your query synchronously and not receive notifications of updates on the dataset, just don't wrap you return value in a LiveData object. Check out the sample code from Google.</p>

<p>Take a look at loadProductSync() <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/db/dao/ProductDao.java"" rel=""noreferrer"">here</a></p>
",1495686,,1495686,,2017-06-15 7:45:27,2017-06-15 7:45:27,,,,10,,,
Android,44575660,2,,44570359,2017-06-15 19:39:52,2737,,2,,"<blockquote>
  <p>My assumption is no (on the grounds that not all Things platforms will have a suitable GPU)</p>
</blockquote>

<p>I'll be more specific when I know what a <em>""suitable"" GPU</em> is, but if there are some of those (see below) among the supported <a href=""https://developer.android.com/things/hardware/developer-kits.html#hardware_platforms"" rel=""nofollow noreferrer"">hardware platformes</a> the assumption isn't correct.</p>

<blockquote>
  <p>but I was hoping perhaps that people had tried it or otherwise know whether RenderScript Compute works on Android Things.</p>
</blockquote>

<p>I tried <a href=""https://github.com/googlesamples/android-RenderScriptIntrinsic/"" rel=""nofollow noreferrer"">this sample</a> on a <em>RPi3</em> and it worked, although the question if the computation was parallelized across both CPU <strong>and GPU</strong> left open.</p>

<p><a href=""https://i.stack.imgur.com/liDJx.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/liDJx.jpg"" alt=""enter image description here""></a></p>
",3290339,,3290339,,2017-06-18 17:03:23,2017-06-18 17:03:23,,,,2,,,
Android,44665454,2,,44570999,2017-06-21 1:30:11,2742,,1,,"<p>If you want to add the text to your <strong>own</strong> watch face, I would use the <a href=""https://developer.android.com/reference/android/support/wearable/complications/rendering/TextRenderer.html"" rel=""nofollow noreferrer"">TextRenderer</a> class in the wearable support library. It renders text on a canvas within specified bounds and readjusts the text to make it fit. It is usually intended for complication data, but you could use it on your own non-complication data.</p>

<p>You might think about exposing your data to the complication framework, so you could let any other watch face (not just your own) display your data. You can add a tap event, so a user can click into your app from the other watch faces. It is actually quite easy, check out the <a href=""https://codelabs.developers.google.com/codelabs/data-providers/index.html?index=..%2F..%2Findex#0"" rel=""nofollow noreferrer"">Google I/O code lab</a> on how to do it.</p>

<p>If you do go that route (exposing data to the complication framework), you could also add support for displaying complication data (and now your data) on your own watch face. There is a code lab for that too (<a href=""https://codelabs.developers.google.com/codelabs/complications/index.html?index=..%2F..%2Findex#0"" rel=""nofollow noreferrer"">here</a>), i.e., displaying complication data on your watch face.</p>

<p>Finally, if you just want to see the source code in a project that supports complications, you can check out the Analog watch face in the Google's <a href=""https://github.com/googlesamples/android-WatchFace"" rel=""nofollow noreferrer"">github repo for watch faces</a>.</p>
",1631197,,,,,2017-06-21 1:30:11,,,,1,,,
Android,44689559,2,,44689013,2017-06-22 3:18:04,2743,,1,,"<p>Fragments should not be dependencies for your ViewModel - the ViewModel is supposed to have a greater scope than that of the Fragment. </p>

<p>Please see <a href=""https://github.com/googlesamples/android-architecture-components"" rel=""nofollow noreferrer"">this GitHub repo</a> with a sample project that uses Android architecture components with Dagger 2.</p>
",5241933,,5241933,,2017-06-22 10:53:18,2017-06-22 10:53:18,,,,3,,,
Android,44705844,2,,44652828,2017-06-22 17:26:20,2744,,1,,"<p>No, there's no built-in rotation for YUV output. To minimize overhead, it's always produced as-is from the image sensor.  You can read the SENSOR_ORIENTATION field to determine how the image sensor is placed on the device; typically the long edge of the image sensor lines up with the long edge of the Android device, but that still leaves two rotations that are valid.</p>

<p>Also, if your goal is to have the image 'upright', then you also need to read what the device's orientation is from the accelerometer, and add that in to the rotation.</p>

<p>You're doing a copy already getting the frame from the Image into the Allocation, so doing a 90/180/270 degree rotation then is relatively straightforward, though memory-bandwidth-intensive. </p>

<p>You can also take a look at one of Google's sample apps, <a href=""https://github.com/googlesamples/android-HdrViewfinder"" rel=""nofollow noreferrer"">HdrViewfinderDemo</a>, which pipes camera data into RenderScript without the intermediate copy you're doing, and then converts to RGB to draw to a SurfaceView.  It doesn't have a rotation in it now, but you could adjust the lookup done via rsGetElementAtYuv_uchar_* to do 90-increments.</p>
",1344825,,,,,2017-06-22 17:26:20,,,,0,,,
Android,44791228,2,,44790666,2017-06-27 23:00:10,2749,,1,,"<p>1.- The drawer (NavigationView) is a ViewGroup, you can add a Fragment inside of it and then do whatever you want.</p>

<pre><code>&lt;android.support.design.widget.NavigationView
        android:id=""@+id/nav_view""
        android:layout_width=""wrap_content""
        android:layout_height=""match_parent""
        android:layout_gravity=""start""
        android:fitsSystemWindows=""true""
        android:background=""@drawable/side_nav_bar""&gt;

        &lt;fragment
            android:id=""@+id/drawerFragment""
            android:name=""cl.cutiko.someapp.views.main.drawer.DrawerFragment""
            android:layout_width=""match_parent""
            android:layout_height=""match_parent"" /&gt;

&lt;/android.support.design.widget.NavigationView&gt;
</code></pre>

<p>2.- If you want to use the default implementation then you don't need to have each function in a fragment, you can use a Presenter and return the result of the presenter to the View. See MVP design pattern <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">here</a> </p>
",4017501,,,,,2017-06-27 23:00:10,,,,2,,,
Android,44837540,2,,44489235,2017-06-30 2:06:15,2751,,9,,"<p>Using <a href=""https://developer.android.com/reference/android/support/v7/util/DiffUtil.html"" rel=""noreferrer"">DiffUtil</a> might help with updating one row in a huge list. You can then have LiveData wrap the list of comments instead of a single comment or attribute of a comment. </p>

<p>Here's an example of using DiffUtil within a <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductAdapter.java#L44"" rel=""noreferrer"">RecyclerView adapter</a> and the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductListFragment.java#L69"" rel=""noreferrer"">list LiveData observation code in the fragment</a>.</p>
",497605,,497605,,2017-11-20 18:10:54,2017-11-20 18:10:54,,,,2,,,
Android,44837887,2,,44582019,2017-06-30 2:55:13,2751,,30,,"<h2>Update</h2>

<p>There are actually a few ways to resolve this issue. They are summarized nicely in the article <a href=""https://medium.com/androiddevelopers/livedata-with-snackbar-navigation-and-other-events-the-singleliveevent-case-ac2622673150"" rel=""nofollow noreferrer"">LiveData with SnackBar, Navigation and other events (the SingleLiveEvent case)</a>. This is written by a fellow Googler who works with the Architecture Components team.</p>

<p><strong>TL;DR</strong> A more robust approach is to use an <a href=""https://gist.githubusercontent.com/JoseAlcerreca/5b661f1800e1e654f07cc54fe87441af/raw/d1d9ad561c16f4d04367424ac5f5b305ba691852/Event.kt"" rel=""nofollow noreferrer"">Event wrapper class</a>, which you can see an example of at the bottom of <a href=""https://medium.com/androiddevelopers/livedata-with-snackbar-navigation-and-other-events-the-singleliveevent-case-ac2622673150"" rel=""nofollow noreferrer"">the article</a>.</p>

<p>This pattern has made it's way into numerous Android samples, for example:</p>

<ul>
<li><a href=""https://github.com/nickbutcher/plaid/blob/master/core/src/main/java/io/plaidapp/core/util/event/Event.kt"" rel=""nofollow noreferrer"">Plaid</a></li>
<li><a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvvm-live-kotlin/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/Event.kt"" rel=""nofollow noreferrer"">Architecture Blueprints</a></li>
<li><a href=""https://github.com/google/iosched/blob/master/shared/src/main/java/com/google/samples/apps/iosched/shared/result/Event.kt"" rel=""nofollow noreferrer"">IOSched</a></li>
</ul>

<p><strong>Why is an Event wrapper preferred over SingleLiveEvent?</strong></p>

<p>One issue with SingleLiveEvent is that if there are multiple observers to a SingleLiveEvent, only one of them will be notified when that data has changed - this can introduce subtle bugs and is hard to work around. </p>

<p>Using an Event wrapper class, all of your observers will be notified as normal.  You can then choose to either explicitly ""handle"" the content (content is only ""handled"" once) or peek at the content, which always returns whatever the latest ""content"" was. In the dialog example, this means you can always see what the last message was with <code>peek</code>, but ensure that for every new message, the dialog only is triggered once, using <code>getContentIfNotHandled</code>.</p>

<h2>Old Response</h2>

<p>Alex's response in the comments is I think exactly what you're looking for. There's sample code for a class called <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">SingleLiveEvent</a>. The purpose of this class is described as:</p>

<blockquote>
  <p>A lifecycle-aware observable that sends only new updates after
  subscription, used for events like navigation and Snackbar messages.</p>
  
  <p>This avoids a common problem with events: on configuration change
  (like rotation) an update can be emitted if the observer is active.
  This LiveData only calls the observable if there's an explicit call to
  setValue() or call().</p>
</blockquote>
",497605,,497605,,2019-04-16 5:39:53,2019-04-16 5:39:53,,,,1,,,
Android,44842236,2,,44841963,2017-06-30 8:41:34,2751,,2,,"<p>You cannot save a fingerprint image or template. It is stated by Android in the <a href=""https://developer.android.com/about/versions/marshmallow/android-6.0.html"" rel=""nofollow noreferrer"">Fingerprint Section</a>.</p>

<p>The Fingerprint data is stored by android system in the phone at a secure location which is not accessible. You can write an app that gets and stores fingerprint to authenticate the user. You can go through this sample that demonstrates to use registered fingerprints to authenticate the user in your app. </p>

<p><a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-FingerprintDialog</a></p>

<p>If you need fingerprint authentication for about 300 users, your best bet would be implementing an <a href=""https://en.wikipedia.org/wiki/Automated_fingerprint_identification"" rel=""nofollow noreferrer"">AFIS</a> solutions. You can also check out this <a href=""https://github.com/lethalskillzz/Android-Fingerprint-Attendance-Client"" rel=""nofollow noreferrer"">github repo</a>, but I cannot guarantee it's veracity. </p>

<p>Stating this <a href=""https://stackoverflow.com/a/33473549/7461132"">answer</a>, there's some fingerprint scanners compatible with Android Platform and with SDK for Android. These SDKs allow to get fingerprint image or template. Scanners are plugged on USB port so you can't charge tablet and use fingerprint scanner simultaneous. For instance:</p>

<p><a href=""http://www.dermalog.com/en/products_solutions/fingerprintscanner/"" rel=""nofollow noreferrer"">http://www.dermalog.com/en/products_solutions/fingerprintscanner/</a></p>

<p><a href=""http://www.futronic-tech.com/product_fs80h.html"" rel=""nofollow noreferrer"">http://www.futronic-tech.com/product_fs80h.html</a></p>

<p><a href=""http://www.crossmatch.com/authentication-hardware/"" rel=""nofollow noreferrer"">http://www.crossmatch.com/authentication-hardware/</a></p>

<p>There's also some devices with integrated fingerprint scanner and with SDK to get fingerprint image or template. But this would be out of scope for programming.</p>
",7461132,,7461132,,2017-07-02 13:57:19,2017-07-02 13:57:19,,,,4,,,
Android,44849010,2,,44829710,2017-06-30 14:37:09,2752,,2,,"<p>I don't think capturing photos via the <code>MediaStore.ACTION_IMAGE_CAPTURE</code> intent will work at the moment unfortunately. Even if the activity could start, it requires write access to external storage to actually send back the full image and external storage is not available to Instant Apps (see <a href=""https://developer.android.com/topic/instant-apps/prepare.html#restricted_features"" rel=""nofollow noreferrer"">restrictions</a>). <a href=""https://developer.android.com/reference/android/support/v4/content/FileProvider.html"" rel=""nofollow noreferrer""><code>FileProvider</code></a> is also not support on Instant Apps at the moment in case the capture intent could write to internal storage (I'm not sure about that).</p>

<p>The permission <code>android.permission.CAMERA</code> is supported though, you will just need to use the <a href=""https://developer.android.com/reference/android/hardware/camera2/package-summary.html"" rel=""nofollow noreferrer"">camera2 APIs</a>. There is a code sample you can try out <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">here</a>.</p>
",268156,,,,,2017-06-30 14:37:09,,,,1,,,
Android,44859727,2,,44859713,2017-07-01 10:10:41,2752,,2,,"<p>Fingerprint Authentication is only available from Android 6.0</p>

<p>Here is an example:
<a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-FingerprintDialog</a></p>
",4845438,,,,,2017-07-01 10:10:41,,,,4,,,
Android,44911261,2,,44910631,2017-07-04 17:12:58,2756,,3,,"<p>A little searching shows that Trival Drive V2 sample has a shared build.gradle file:</p>

<p><a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/build.gradle"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/build.gradle</a></p>

<p>which has the following line:</p>

<pre><code>compile 'com.android.billingclient:billing:dp-1'
</code></pre>

<p>Looking at the documentation here:</p>

<p><a href=""https://developer.android.com/google/play/billing/billing_library.html"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_library.html</a></p>

<p>Shows that Google just released a new version of the Billing Library release dp-1:</p>

<blockquote>
  <p>Starting with Play Billing Library release dp-1 (June 2017), the minimum
  supported API level is Android 2.2 (API level 8). The minimum supported
  In-app Billing API is version 3.</p>
</blockquote>

<p>And specifically calls out changes to the minimum support Android API and In-app Billing API.</p>

<p>Given the Trivial Drive V2 sample app(s) has a Wear 2.0 example - this version has billing support on Wear 2.0 apps.</p>
",295004,,295004,,2017-07-04 17:18:09,2017-07-04 17:18:09,,,,6,,,
Android,44957486,2,,34979420,2017-07-06 19:36:41,2758,,5,,"<p>This issue was opened on the google's android-play-billing samples <a href=""https://github.com/googlesamples/android-play-billing/issues/7"" rel=""noreferrer"">repo</a>.
Looks like it was ignored for a long time and was eventually closed with <a href=""https://github.com/googlesamples/android-play-billing/issues/7#issuecomment-305316583"" rel=""noreferrer"">this</a> comment. In short, they have following suggestions.</p>

<hr>

<p><em>We reviewed our guidelines and internal APIs, and since the developerPayload is not supported across all features on In-App Billing API (including promocodes), we are removing the recommendation to use it as a security check.</em></p>

<p><em>As you can see in our documentation, on the page Implementing In-app Billing (<a href=""https://developer.android.com/google/play/billing/billing_integrate.html"" rel=""noreferrer"">https://developer.android.com/google/play/billing/billing_integrate.html</a>) we've added a recommendation:</em></p>

<p><em>Caution: Don't use the developerPayload field for security validation purposes. This field isn't always available when completing tasks related to In-app Billing. For more information about security best practices, see the In-app Billing Security and Design guide.</em></p>

<p><em>Our recommendation is to validate on your own backend, using the Play Developer API.</em></p>

<hr>
",1230067,,,,,2017-07-06 19:36:41,,,,1,,,
Android,44983042,2,,44844149,2017-07-08 5:59:34,2759,,26,,"<h1>tl;dr Don't inject model layer dependencies inside custom <code>View</code> objects</h1>

<p>Subclasses of <code>View</code> are not good targets for Dagger 2 injection. <code>View</code> objects are meant to be drawn and not must else, hence the name ""view"". The constructors for <a href=""https://developer.android.com/reference/android/view/View.html"" rel=""noreferrer""><code>View</code></a> should make this clear; they are designed for inflating <code>View</code> objects from attributes specified in XML. In other words, a <code>View</code> object should be able to be specified in a <code>layout.xml</code> file, inflated at the appropriate point in the lifecycle, and then obtained using <code>findViewById(int id)</code>, <a href=""https://jakewharton.github.io/butterknife/"" rel=""noreferrer"">Butterknife</a> or data binding. In this way, the best custom <code>View</code> objects take no dependencies.</p>

<p>If you want to link a <code>View</code> and some data from the model layer, the standard pattern is to write an Adapter like those for <code>RecyclerView</code> and <code>ListView</code>. If this is not possible, using a setter (e.g., <code>setData()</code>) is preferable to passing dependencies from the model layer in the constructor or requesting injection from within one of the lifecycle methods of the <code>View</code>. </p>

<p>If instead you inject your <code>LiveData</code> object inside an Activity or Fragment using the <code>AndroidInjector</code> class the correct <code>Context</code> will be provided without you having to do anything. This explains your comment ""I don't get any compiler complaints if CustomLiveData is injected into MainActivity instead into the view.""</p>

<p>Once you have injected the <code>LiveData</code> object into the Activity, use one of the above methods (an adapter or a setter) to associate the data with your custom <code>View</code>. See the Google Android Architecture example <a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvp-dagger/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksFragment.java"" rel=""noreferrer"">here</a> where elements from the model layer are injected using Dagger 2 and then associated with a <code>ListView</code> using <code>findViewById</code> and <code>setAdapter()</code></p>

<p>Link to the Dagger 2 issue where injection of <code>View</code> objects is discussed: </p>

<p><a href=""https://github.com/google/dagger/issues/720"" rel=""noreferrer"">https://github.com/google/dagger/issues/720</a></p>
",5241933,,5241933,,2017-07-08 22:21:16,2017-07-08 22:21:16,,,,4,,,
Android,45005181,2,,45004976,2017-07-10 6:34:01,2761,,1,,"<p>You just need to read <a href=""https://developer.android.com/training/swipe/index.html"" rel=""nofollow noreferrer"">docs on SwipeRefreshLayout</a></p>

<p>First, add SwipeRefreshLayout to your activity layout:</p>

<pre><code>&lt;android.support.v4.widget.SwipeRefreshLayout
    xmlns:android=""http://schemas.android.com/apk/res/android""
    android:id=""@+id/swiperefresh""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""&gt;

    // here is your content

&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;
</code></pre>

<p>Then find instance of swipe refresh layout in your activity:</p>

<pre><code>mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipeRefresh);
</code></pre>

<p>And set refresh listener in which trigger your update method</p>

<pre><code>/*
 * Sets up a SwipeRefreshLayout.OnRefreshListener that is invoked when the user
 * performs a swipe-to-refresh gesture.
 */
mSwipeRefreshLayout.setOnRefreshListener(
    new SwipeRefreshLayout.OnRefreshListener() {
        @Override
        public void onRefresh() {
            Log.i(LOG_TAG, ""onRefresh called from SwipeRefreshLayout"");

            // This method performs the actual data-refresh operation.
            // The method calls setRefreshing(false) when it's finished.
            myUpdateOperation();
        }
    }
);
</code></pre>

<p>For more information read docs, link in the beginning of the answer.</p>

<p>Also you might look at google samples:</p>

<ul>
<li><a href=""https://github.com/googlesamples/android-SwipeRefreshLayoutBasic/#readme"" rel=""nofollow noreferrer"">SwipeRefreshLayoutBasic</a></li>
<li><a href=""https://github.com/googlesamples/android-SwipeRefreshListFragment/#readme"" rel=""nofollow noreferrer"">SwipeRefreshListFragment</a></li>
</ul>

<p>List of all google samples you can find <a href=""https://developer.android.com/samples/index.html"" rel=""nofollow noreferrer"">here</a></p>

<p>Hope it helps</p>
",1533933,,,,,2017-07-10 6:34:01,,,,4,,,
Android,45019307,2,,44580702,2017-07-10 18:30:10,2762,,5,,"<p>You cannot.</p>

<p>The only way to achieve this is to use <a href=""https://developer.android.com/reference/android/arch/persistence/room/ForeignKey.html"" rel=""noreferrer"">@ForeignKey</a> constraint. If you want to still keep the list of object inside your parent POJO, you have to use <a href=""https://developer.android.com/reference/android/arch/persistence/room/Ignore.html"" rel=""noreferrer"">@Ignore</a> or provide a <a href=""https://developer.android.com/reference/android/arch/persistence/room/TypeConverter.html"" rel=""noreferrer"">@TypeConverter</a></p>

<p>For more info, follow this blog post:-</p>

<p><a href=""https://www.bignerdranch.com/blog/room-data-storage-for-everyone/"" rel=""noreferrer"">https://www.bignerdranch.com/blog/room-data-storage-for-everyone/</a></p>

<p>and sample code:-</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components"" rel=""noreferrer"">https://github.com/googlesamples/android-architecture-components</a></p>
",5266029,,,,,2017-07-10 18:30:10,,,,2,,,
Android,45064361,2,,26599824,2017-07-12 17:42:57,2764,,2,,"<p>This was covered in one of the <a href=""https://www.youtube.com/watch?v=4L4fLrWDvAU"" rel=""nofollow noreferrer"">Google I/O 2016 talks</a>. The source for the transition which you can copy into your code is found <a href=""https://github.com/googlesamples/android-unsplash/blob/master/app/src/main/java/com/example/android/unsplash/transition/TextResize.java"" rel=""nofollow noreferrer"">here</a>. If your IDE complains the <code>addTarget(TextView.class);</code> requires API 21, just remove the constructor and add the target either dynamically or in your xml. </p>

<p>i.e. (note this is in Kotlin)</p>

<pre><code>val textResizeTransition = TextResize().addTarget(view.findViewById(R.id.text_view))
</code></pre>
",5849894,,5849894,,2017-07-12 18:02:36,2017-07-12 18:02:36,,,,0,,,
Android,45133332,2,,45132697,2017-07-16 21:07:58,2768,,1,,"<blockquote>
  <p>What is the best approach to implement a service which executes every
  15 mins.</p>
</blockquote>

<p>Using the Job Scheduler. Information on job scheduling can be found at the <a href=""https://developer.android.com/topic/performance/scheduling.html"" rel=""nofollow noreferrer"">Intelligent Job-Scheduling documentation</a>. However, be aware that you can't be 100% sure that your service is going to run exactly every 15 minutes as its execution can be affected by the Doze mode and its <a href=""https://developer.android.com/training/monitoring-device-state/doze-standby.html#restrictions"" rel=""nofollow noreferrer"">restrictions</a>.</p>

<p>For the notification part, you <a href=""https://developer.android.com/training/notify-user/build-notification.html"" rel=""nofollow noreferrer"">build your notification</a> as you would normally do.</p>

<p>If you need more info, you may view the <a href=""https://www.youtube.com/watch?v=QdINLG5QrJc"" rel=""nofollow noreferrer"">Using the Android Job Scheduler</a> and <a href=""https://www.youtube.com/watch?v=XFN3MrnNhZA"" rel=""nofollow noreferrer"">Background work with JobScheduler</a> videos and check <a href=""https://github.com/googlesamples/android-JobScheduler"" rel=""nofollow noreferrer"">this</a> sample project. Also, one relevant question regarding the repetitive nature of the service can be found <a href=""https://stackoverflow.com/a/39089169"">here</a>.</p>
",6569284,,,,,2017-07-16 21:07:58,,,,1,,,
Android,45141825,2,,43135948,2017-07-17 10:29:09,2768,,6,,"<p>This is a documented and long-running issue with the Google Maps SDK leaking memory even after a call to removeLocationUpdates. You can read more about it <a href=""http://github.com/googlesamples/android-play-location/issues/26"" rel=""noreferrer"">here</a>. </p>

<p>The following workaround removed the leak canary notification for me. </p>

<p>1) Create a WeakLocationListener class that wraps the location listener in a weak reference and then use this class to handle the onLocationChanged call back. </p>

<pre><code>public class WeakLocationListener implements LocationListener {

private final WeakReference&lt;LocationListener&gt; locationListenerRef;

public WeakLocationListener(@NonNull LocationListener locationListener) {
    locationListenerRef = new WeakReference&lt;&gt;(locationListener);
}

@Override
public void onLocationChanged(android.location.Location location) {
    if (locationListenerRef.get() == null) {
        return;
    }
    locationListenerRef.get().onLocationChanged(location);
}
</code></pre>

<p>2) Create an instance of WeakLocationListener (using the LocationListener implemented by your fragment) and use it when you requestLocationUpdates and removeLocationUpdates - the location will be returned to your activity/fragment (or whatever class is implementing LocationListener) and the leak canary notification should disappear. </p>

<p>Hope this helps. </p>
",6320723,,,,,2017-07-17 10:29:09,,,,2,,,
Android,45155219,2,,45110739,2017-07-17 23:37:51,2769,,1,,"<p>There is a difference between being a device owner and a device administrator. You are setting one (device admin) and checking for another (device owner).</p>

<p>A device owner is typically set during device provisioning at the beginning of the Google Wizard. But it may also be set after going through the Google Wizard using the dpm command you mentioned. The dpm command can only set a device owner if there are no accounts on the device. The device owner is restricted when it can be set because of the control it has. A corporate owned device will typically be provisioned with an MDM/EMM as the device owner.</p>

<p>A device administrator is much much more limited in the control it has of a device. But it can be added at any point. Each Android release restricts more and more what a device admin can do ever since Android Enterprise (android for work [AfW]) was released in Lollipop.</p>

<p>The most complete kiosk solution will set a device up with an app as the device owner. Other solutions I've seen are using a custom launcher to lock down the device by whitelisting apps, but there are a lot of security holes with this implementation. </p>

<p>Look into the TestDPC app. Google provides source code to it and it will have most, if not everything of what you need. Play around with the control it gives you as a device owner. </p>

<p><a href=""https://developers.google.com/android/work/build-dpc"" rel=""nofollow noreferrer"">https://developers.google.com/android/work/build-dpc</a></p>

<p><a href=""https://github.com/googlesamples/android-testdpc"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testdpc</a></p>

<p>My guess is that your app is not set up correctly as a device owner nor device admin. Specifically look to see that you have a DeviceAdminReceiver declared with the <code>android:permission=""android.permission.BIND_DEVICE_ADMIN""</code> in the manifest along with an xml resource file containing the policies it may use. More of your source code would help debug the issues you see.</p>
",6917917,,,,,2017-07-17 23:37:51,,,,1,,,
Android,45203189,2,,45202858,2017-07-20 0:28:41,2771,,1,,"<p>You can use the <code>defaultValue</code> field to explain how your app behaves if the property is not explicitly set by the managing app.</p>

<p>The XML file referenced in the manifest is meant to be used by the MDM to display a UI in their console so the IT admin can configure your app. If you set a <code>defaultValue</code> for a property the MDM pre-populates the corresponding field when your app is configured for the first time (e.g. display a checked checkbox for a boolean property that default to <code>true</code>).</p>

<p>For the admin, not configuring your app should be the same as configuring it with the default configuration. Therefore, to be consistent, your app should behave the same way whether a property is unset or set to the <code>defaultValue</code>.</p>

<p>To see how your configuration will look like in an MDM console you can use the <a href=""https://enterprise.google.com/android/experience"" rel=""nofollow noreferrer"">Android Management Experience demo</a>.</p>

<p><strong>Edit: More details on how the restriction schema and <code>defaultValue</code> can be retrieved</strong></p>

<p>The app's restriction schema defined in the XML file can be retrieved either</p>

<ul>
<li>using the <a href=""https://developers.google.com/android/work/play/emm-api/v1/products/getAppRestrictionsSchema"" rel=""nofollow noreferrer"">Google Play EMM API getAppRestrictionsSchema</a> method which returns the <code>defaultValue</code>s for each restriction</li>
<li>or by any app on the device using <a href=""https://developer.android.com/reference/android/content/RestrictionsManager.html#getManifestRestrictions(java.lang.String)"" rel=""nofollow noreferrer"">RestrictionsManager.getManifestRestrictions</a>, where the returned <code>RestrictionEntry</code>s have their values set to the <code>defaultValue</code> if specified in the XML file, or to a generic default value otherwise (<code>0</code> for <code>TYPE_INTEGER</code>, <code>false</code> for <code>TYPE_BOOLEAN</code>, etc). You can read the full logic of this method in AOSP's <a href=""https://android.googlesource.com/platform/frameworks/base/+/marshmallow-release/core/java/android/content/RestrictionsManager.java#597"" rel=""nofollow noreferrer"">RestrictionManager.java</a>, and see how it is used in TestDPC's <a href=""https://github.com/googlesamples/android-testdpc/blob/master/app/src/main/java/com/afwsamples/testdpc/profilepolicy/apprestrictions/ManageAppRestrictionsFragment.java#L339"" rel=""nofollow noreferrer"">ManageAppRestrictionsFragment.java</a>.</li>
</ul>
",4816506,,4816506,,2017-07-20 15:07:13,2017-07-20 15:07:13,,,,3,,,
Android,45216102,2,,45215637,2017-07-20 13:24:15,2772,,2,,"<p><em>here is a constructor with two parameters, one is activity and another is Listener, now I want to get the location in background service with using the same class</em></p>

<p>It actually needs a context not activity exactly. </p>

<p>Anyways, you can follow the google samples of location</p>

<p><a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location</a></p>
",1281180,,,,,2017-07-20 13:24:15,,,,1,,,
Android,45290061,2,,45198979,2017-07-24 21:07:39,2776,,2,,"<p>Creating an API 26 (aka O) emulator allowed me to successfully install the Instant App, while otherwise following the guide. Hat-tip to donly from <a href=""https://github.com/googlesamples/android-instant-apps/issues/21"" rel=""nofollow noreferrer"">Github project android-instant-apps</a> 
Workarounds I tried unsuccessfully first:</p>

<ul>
<li>Uninstalling ""<strong>Google Play Services for Instant Apps</strong>"" (from the other answer)</li>
<li>Downgrading to Android Studio 3.0 Canary 5</li>
<li>Using a physical device that can run instant apps (Galaxy S6 SM-G920V, Android 7.0)</li>
</ul>
",2701057,,2638235,,2018-03-19 8:06:28,2018-03-19 8:06:28,,,,0,,,
Android,45295417,2,,45291486,2017-07-25 6:25:13,2776,,2,,"<p>The key point is <strong>verify that the signing certificate is issued to <code>attest.android.com</code> by a trusted Certificate Authority</strong></p>

<p>Any trusted CA will issue a fake certificate to <code>attest.android.com</code>. See what happens if they engage in bad practices <a href=""https://security.googleblog.com/2016/10/distrusting-wosign-and-startcom.html?m=1"" rel=""nofollow noreferrer"">https://security.googleblog.com/2016/10/distrusting-wosign-and-startcom.html?m=1</a></p>

<p>See Google's <a href=""https://developer.android.com/training/safetynet/attestation.html#verify-compat-check"" rel=""nofollow noreferrer"">doc</a></p>

<blockquote>
  <p><strong>Verify the compatibility check response</strong></p>
  
  <p>You should take steps to make sure that the compatibility check response actually came from the SafetyNet service and includes data that matches your request data.</p>
  
  <p><em>Caution: You should send the entire JWS response to your own server, using a secure connection, for verification. We don't recommend that you perform the verification directly in your app because, in that case, there is no guarantee that the verification logic itself hasn't been modified.</em></p>
  
  <p>Follow these steps to verify the origin of the JWS message:</p>
  
  <ol>
  <li><p>Extract the SSL certificate chain from the JWS message.</p></li>
  <li><p><strong>Validate the SSL certificate chain and use SSL hostname matching to verify that the leaf certificate was issued to the hostname attest.android.com.</strong></p></li>
  <li><p>Use the certificate to verify the signature of the JWS message.</p></li>
  <li><p>Check the data of the JWS message to make sure it matches the data within your original request. In particular, make sure that the nonce, timestamp, package name, and the SHA-256 hashes match.</p></li>
  </ol>
</blockquote>

<p>The second dot requires to validate the certificate chain. It is assumed that it is used a Trust Manager containing the root certificate of the Certificate Authority</p>

<p>I have inspected Google's sample code in <a href=""https://github.com/googlesamples/android-play-safetynet/blob/master/server/java/src/main/java/OfflineVerify.java"" rel=""nofollow noreferrer"">OfflineVerify</a> to ensure the existence of a TrustManager because it is not explictly said, and it is effectively used during JWS verification. It uses the default system TrustManager, but you can use a custom one</p>

<p>Note that is used JWS (Json Web Signature), not JWT. A JWT is usually an authentication token signed with JWS</p>
",6371459,,,,,2017-07-25 6:25:13,,,,2,,,
Android,45297563,2,,44503704,2017-07-25 8:13:48,2776,,2,,"<p>There were 2 issues with my tests:</p>

<ol>
<li>The first problem was in getting / initialising <code>UiDevice</code> instance in static block (as a static field in util class). I moved it into <code>@Before</code>and it helped to resolve the issue partially. </li>
<li>Another problem was occurring while searching for an element using a package name obtained from the <code>UiDevice</code>. I replaced getting package with <code>InstrumentationRegistry.getTargetContext().getPackageName();</code> as it's done in <a href=""https://github.com/googlesamples/android-testing-templates/blob/master/AndroidTestingBlueprint/app/src/androidTest/java/com/example/android/testing/blueprint/ui/uiautomator/UiAutomatorTest.java"" rel=""nofollow noreferrer"">google samples</a>. </li>
</ol>
",2870138,,,,,2017-07-25 8:13:48,,,,1,,,
Android,45315101,2,,45275041,2017-07-25 23:36:25,2777,,2,,"<p><strong>UPDATE</strong>   They’ve again updated the <a href=""https://developer.android.com/topic/instant-apps/faqs.html"" rel=""nofollow noreferrer"">Instant Apps FAQ</a> on how to do this. </p>

<blockquote>
  <p>For devices running Android 8.0 (API level 26) or higher, the instant
  app's data is transferred automatically when the APK installation
  begins, if the installed app is configured to use targetSandboxVersion
  2.</p>
  
  <p>For installed apps not configured to use targetSandboxVersion 2, or
  devices running Android 7.1 (API level 25) or lower, please consider
  using the Cookie API (Sample) or Storage API (Sample) to transfer the
  data.</p>
</blockquote>

<p>For Oreo 8.0 and higher, it should be automatically handled.</p>

<p>But for 7.0 and below, you've got 2 options (#1 is recommended):</p>

<ol>
<li><a href=""https://developers.google.com/android/reference/com/google/android/gms/instantapps/PackageManagerCompat#setInstantAppCookie(byte[])"" rel=""nofollow noreferrer"">PackageManagerCompat#setInstantAppCookie()</a>, the cookie has a size limit, but it is the simplest and most suitable for shared preferences.</li>
<li><a href=""https://developers.google.com/android/reference/com/google/android/gms/instantapps/InstantAppsClient#getInstantAppData()"" rel=""nofollow noreferrer"">InstantAppsClient#getInstantAppData()</a>, creates a ZIP of the data that you'll have to extract and parse once it's moved over to the installed-app side, a bit more complicated.</li>
</ol>

<p>The FAQ lists a sample for each option:</p>

<ul>
<li><a href=""https://github.com/googlesamples/android-instant-apps/tree/master/cookie-api"" rel=""nofollow noreferrer"">googlesamples/android-instant-apps/cookie-api</a></li>
<li><a href=""https://github.com/googlesamples/android-instant-apps/tree/master/storage-api"" rel=""nofollow noreferrer"">googlesamples/android-instant-apps/storage-api</a></li>
</ul>

<p>The Storage API/ZIP sample does not show you how to parse the ZIP files and what file type/format to expect from SharedPreferences files, so you'll have to implement that yourself, but here are some related posts:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/23869228/how-to-read-file-from-zip-using-inputstream"">How to read file from ZIP using InputStream?</a></li>
<li><a href=""https://stackoverflow.com/questions/27917809/how-to-transfer-sharedpreferences-file-from-internal-storage-to-external-storage"">How to transfer sharedpreferences file from internal storage to external storage?</a></li>
</ul>
",6668797,,6668797,,2019-01-12 0:04:45,2019-01-12 0:04:45,,,,0,,,
Android,45323407,2,,45307191,2017-07-26 9:51:54,2777,,1,,"<p>Take a look at the Camera2Basic example that Google provides on GitHub: <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></p>

<p>There is a method in the main fragment which chooses the optional preview size for a given device. This may be a better approach if you want to make your app more flexible, rather than hardcoding the size, but even if you would still rather stick with set sizes you can see how they use the results.</p>

<p>The summary is that you simply set the size of the, in their case, TextureView to whatever size preview you want.</p>

<p>The method name is 'chooseOptimalSize' and it includes this comment/explanation: </p>

<pre class=""lang-js prettyprint-override""><code>/**
     * Given {@code choices} of {@code Size}s supported by a camera, choose the smallest one that
     * is at least as large as the respective texture view size, and that is at most as large as the
     * respective max size, and whose aspect ratio matches with the specified value. If such size
     * doesn't exist, choose the largest one that is at most as large as the respective max size,
     * and whose aspect ratio matches with the specified value.
     *
     * @param choices           The list of sizes that the camera supports for the intended output
     *                          class
     * @param textureViewWidth  The width of the texture view relative to sensor coordinate
     * @param textureViewHeight The height of the texture view relative to sensor coordinate
     * @param maxWidth          The maximum width that can be chosen
     * @param maxHeight         The maximum height that can be chosen
     * @param aspectRatio       The aspect ratio
     * @return The optimal {@code Size}, or an arbitrary one if none were big enough
     */
</code></pre>
",334402,,,,,2017-07-26 9:51:54,,,,1,,,
Android,45343959,2,,40155591,2017-07-27 7:22:28,2778,,2,,"<p>I've dug some into the problem and my findings is that code that used to work for Andrdoi 5.x might work if the application is set to be the device owner. </p>

<p>Solution:</p>

<p>The solution is to add the device as deviceOwner. This will allow for static IP to be set using the 5.x hacks as referenced by Mogi. A good example of how this is done is using the example found here:</p>

<p><a href=""https://github.com/googlesamples/android-DeviceOwner/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-DeviceOwner/</a></p>

<p>Using adb shell and running the command:</p>

<pre><code>dpm set-device-owner com.example.android.deviceowner/.DeviceOwnerReceiver
</code></pre>

<p>will make it ready to be allowed to do its job.</p>
",217672,,217672,,2017-07-28 7:01:42,2017-07-28 7:01:42,,,,0,,,
Android,45374280,2,,45373916,2017-07-28 13:02:43,2780,,1,,"<p>Remove the</p>

<pre><code>&lt;uses-feature android:name=""android.hardware.camera2"" android:required=""true"" /&gt;
</code></pre>

<p>The android.hardware.camera is more than enough. </p>

<p>If you look into the camera basic sample you can see they declare only the android.hardware.camera feature.</p>

<p>Google Camera sample
<a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/AndroidManifest.xml"" rel=""nofollow noreferrer"" title=""Google Camera sample"">https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/AndroidManifest.xml</a></p>
",199498,,,,,2017-07-28 13:02:43,,,,1,,,
Android,45383196,2,,42367317,2017-07-28 22:22:55,2780,,1,,"<p>In that situation, I think one could be guided by the <strong>tablet MVP example</strong> on GitHub, the <a href=""https://github.com/googlesamples/android-architecture/tree/dev-todo-mvp-tablet/"" rel=""nofollow noreferrer"">Android Architecture Blueprints</a>.</p>

<p><a href=""https://i.stack.imgur.com/6iYHA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6iYHA.png"" alt=""MVP tablet mode""></a></p>

<p><strong>Transferred to your case</strong>, your structure could be something like this</p>

<p><a href=""https://i.stack.imgur.com/oYZ9l.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oYZ9l.jpg"" alt=""MVP diagramm""></a></p>

<p>The views are reporting (e.g who's been checked) to a common Presenter, who is manipulating the views through their particular Presenter.</p>
",5487324,,,,,2017-07-28 22:22:55,,,,0,,,
Android,45484818,2,,4972927,2017-08-03 12:53:51,2786,,3,,"<p>Great! Articals by <a href=""https://medium.com/upday-devs/android-architecture-patterns-part-3-model-view-viewmodel-e7eeee76b73b"" rel=""nofollow noreferrer"">@Florina Muntenescu</a></p>

<p>The Model-View-ViewModel Pattern</p>

<p>The main players in the MVVM pattern are:</p>

<ul>
<li>The View — that informs the ViewModel about the user’s actions</li>
<li>The ViewModel — exposes streams of data relevant to the View</li>
<li>The DataModel — abstracts the data source. The ViewModel works with
the DataModel to get and save the data.</li>
</ul>

<p>Example of MVVM Architecture:</p>

<p><a href=""https://github.com/erikcaffrey/People-MVVM"" rel=""nofollow noreferrer"">https://github.com/erikcaffrey/People-MVVM</a></p>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding/</a></p>

<p><a href=""https://github.com/iammert/Android-MVVM-Architecture"" rel=""nofollow noreferrer"">https://github.com/iammert/Android-MVVM-Architecture</a></p>

<p><a href=""https://github.com/segunfamisa/android-mvvm-sample"" rel=""nofollow noreferrer"">https://github.com/segunfamisa/android-mvvm-sample</a></p>

<p><a href=""https://github.com/manas-chaudhari/android-mvvm"" rel=""nofollow noreferrer"">https://github.com/manas-chaudhari/android-mvvm</a></p>
",2473302,,,,,2017-08-03 12:53:51,,,,0,,,
Android,45518867,2,,45518852,2017-08-05 6:10:14,2787,,3,,"<p>You have to read and decide. Check these from Google:</p>

<p><a href=""https://developer.android.com/topic/libraries/architecture/guide.html"" rel=""nofollow noreferrer"">https://developer.android.com/topic/libraries/architecture/guide.html</a></p>

<p><a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture</a></p>
",4586742,,,,,2017-08-05 6:10:14,,,,0,,,
Android,45530234,2,,45530213,2017-08-06 8:44:58,2788,,3,,"<p>Refer the Architecture guides from Google:</p>

<p><a href=""https://developer.android.com/topic/libraries/architecture/guide.html"" rel=""nofollow noreferrer"">https://developer.android.com/topic/libraries/architecture/guide.html</a></p>

<p><a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture</a></p>

<p>MVP sample from Google:
<a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a></p>
",4586742,,,,,2017-08-06 8:44:58,,,,0,,,
Android,45577505,2,,45515288,2017-08-08 20:30:14,2791,,4,,"<p>Whether RAW capture is supported at all, and what rate it can be done are both device-dependent.</p>

<p>If the device supports the <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_RAW"" rel=""nofollow noreferrer"">RAW capability</a>, then you can use an ImageReader with the RAW_SENSOR format as a capture target. The format will then also be listed in the <a href=""https://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getOutputFormats()"" rel=""nofollow noreferrer"">available output formats</a>.  You can see what kinds of stream combinations are supported in the documentation for <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureSession(java.util.List%3Candroid.view.Surface%3E,%20android.hardware.camera2.CameraCaptureSession.StateCallback,%20android.os.Handler)"" rel=""nofollow noreferrer"">createCaptureSession</a> in the RAW-capability table. </p>

<p>To determine how fast you can capture RAW buffers, take a look at the output of <a href=""https://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getOutputMinFrameDuration(int,%20android.util.Size)"" rel=""nofollow noreferrer"">getOutputMinFrameDuration</a>, which tells you what the maximum frame rate when including an output of given format and resolution combination. In addition, the <a href=""https://developer.android.com/reference/android/hardware/camera2/params/StreamConfigurationMap.html#getOutputStallDuration(int,%20android.util.Size)"" rel=""nofollow noreferrer"">getOutputStallDuration</a> method will tell you if you need extra delay between two consecutive requests targeting the RAW output to avoid stalling preview.  There's no requirement to support any particular output rate of RAW buffers in the general case. </p>

<p>However, if the device supports either of the more-efficient RAW10 or RAW12 formats, and it supports the <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE"" rel=""nofollow noreferrer"">BURST_CAPTURE</a> capability, then it's guaranteed to support capturing those formats with at least 20fps rates.</p>

<p>You can look at the Google <a href=""https://github.com/googlesamples/android-Camera2Raw"" rel=""nofollow noreferrer"">camera2raw</a> sample for basic still capture. However, you can certainly capture RAW buffers continually instead of alongside JPEG buffers. But your frame rate may be very low in that case, and to preserve your preview frame rate, you may wish to only issue a RAW capture one out of every N preview frames.  </p>

<p>For example, if the stall duration for RAW_SENSOR is 100ms, but the minimum frame duration is 30ms, you can run continuous preview by having a capture request pattern of (R+P),P,P,P,(R+P),P,P,P... so that there's at least 100 ms between the starts of each raw capture. That'll get you ~8fps RAW and 30fps preview.</p>
",1344825,,,,,2017-08-08 20:30:14,,,,1,,,
Android,45605696,2,,45605433,2017-08-10 6:09:21,2792,,1,,"<p>You can use Google's MOBILE VISION API for face detection .</p>

<p>check <a href=""https://developers.google.com/vision/android/face-tracker-tutorial"" rel=""nofollow noreferrer"">here</a> for documentation and check <a href=""https://github.com/googlesamples/android-vision"" rel=""nofollow noreferrer"">here</a>  for sample source code , application using this api .</p>

<p>some basics creating detector</p>

<pre><code>FaceDetector detector = new FaceDetector.Builder()
        .build(getApplicationContext());

detector.setProcessor(
    new MultiProcessor.Builder&lt;Face&gt;()
        .build(new GraphicFaceTrackerFactory()));

//Create a camera source to capture video images from the camera, 
    mCameraSource = new CameraSource.Builder()
            .setRequestedPreviewSize(640, 480)
            .setFacing(CameraSource.CAMERA_FACING_BACK)
            .setRequestedFps(30.0f)
            .build(getApplicationContext(), detector);
</code></pre>
",3872374,,,,,2017-08-10 6:09:21,,,,3,,,
Android,45620594,2,,45599717,2017-08-10 18:00:44,2793,,1,,"<p>If you already have CMakeList.txt for your project at correct level then you can just add .cpp filenames to your target.</p>

<pre><code>add_library(libraryName SHADERD myClass.cpp
</code></pre>

<p>You can see <a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-libs/app/src/main/cpp/CMakeLists.txt"" rel=""nofollow noreferrer"">NDK samples</a> for more details (adding android libraries etc.)</p>

<p>If you have never written CMake file then lookup appropriate documentation for it.</p>
",62056,,,,,2017-08-10 18:00:44,,,,1,,,
Android,45628082,2,,45628008,2017-08-11 6:09:09,2793,,1,,"<p>You can check this FragmentedPodcast Episode talking about Instant Apps <a href=""http://fragmentedpodcast.com/episodes/90/"" rel=""nofollow noreferrer"">Fragmented Podcast Episode 90</a> also find more about it in the show notes.</p>

<p>Here are the <a href=""https://github.com/googlesamples/android-instant-apps"" rel=""nofollow noreferrer"">Google Samples Repository</a> for Instant Apps.</p>
",1992823,,,,,2017-08-11 6:09:09,,,,0,,,
Android,45645939,2,,45531230,2017-08-12 2:26:17,2794,,12,,"<p>It seems you have a few misconceptions.</p>

<p>Generally it is never OK to call network from the Main (UI) thread but unless you have a lot of data it might be OK to fetch data from DB in the Main thread. And this is what Google example does.</p>

<p><strong>1.</strong></p>

<blockquote>
  <p>The demo uses executors framework, and defines a fixed pool with 3 threads for networkIO, however in the demo only a worker task is defined for one call, i.e. the FetchNextSearchPageTask. </p>
</blockquote>

<p>First of all, since Java 8 you can create simple implementation of some interfaces (so called ""functional interfaces"") using lambda syntax. This is what happens in the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/repository/NetworkBoundResource.java#L67-L76"" rel=""noreferrer"">NetworkBoundResource</a>:</p>

<pre><code>            appExecutors.diskIO().execute(() -&gt; {
                saveCallResult(processResponse(response));
                appExecutors.mainThread().execute(() -&gt;
                        // we specially request a new live data,
                        // otherwise we will get immediately last cached value,
                        // which may not be updated with latest results received from network.
                        result.addSource(loadFromDb(),
                                newData -&gt; result.setValue(Resource.success(newData)))
                );
            });
</code></pre>

<p>at first task (<code>processResponse</code> and <code>saveCallResult</code>) is scheduled on a thread provided by the <code>diskIO</code> <code>Executor</code> and then from that thread the rest of the work is scheduled back to the Main thread.</p>

<p><strong>2.</strong> </p>

<blockquote>
  <p>Why is @MainThread applied here for networkIO?</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>All other network requests seem to be executed on the main thread.</p>
</blockquote>

<p>This is not so. Only result wrapper i.e. <code>LiveData&lt;ApiResponse&lt;RequestType&gt;&gt;</code> is created on the main thread. The network request is done on a different thread. This is not easy to see because <a href=""https://github.com/square/retrofit"" rel=""noreferrer"">Retrofit</a> library is used to do all the network-related heavy lifting and it nicely hides such implementation details. Still, if you look at the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/util/LiveDataCallAdapter.java#L48"" rel=""noreferrer"">LiveDataCallAdapter</a> that wraps Retrofit into a <code>LiveData</code>, you can see that <a href=""https://square.github.io/retrofit/2.x/retrofit/retrofit2/Call.html#enqueue-retrofit2.Callback-"" rel=""noreferrer"">Call.enqueue</a> is used which is actually an asynchronous call (scheduled internally by Retrofit). </p>

<p>Actually if not for ""pagination"" feature, the example would not need <code>networkIO</code> <code>Executor</code> at all. ""Pagination"" is a complicated feature and thus it is implemented using explicit <code>FetchNextSearchPageTask</code> and this is a place where I think Google example is done not very well: <code>FetchNextSearchPageTask</code> doesn't re-use request parsing logic (i.e. <code>processResponse</code>) from <code>RepoRepository</code> but just assumes that it is trivial (which it is now, but who knows about the future...). Also there is no scheduling of the merging job onto the <code>diskIO</code> <code>Executor</code> which is also inconsistent with the rest of the response processing.</p>
",182660,,,,,2017-08-12 2:26:17,,,,1,,,
Android,45766541,2,,45723230,2017-08-19 0:26:01,2801,,1,,"<p>I would separate the concepts in your mind and work on them individually. Once you become fluent/masterful in both concepts, you can try combining them. </p>

<p>For example, try building a simple multiple activity/fragment application the MVP design pattern. With MVP, you'll be writing two-way interface contracts between the Presenter (an object that contains view logic and controls the view, as well as handles behavior that the view collects and forwards through), and the View (a view object, typically a native component like Fragment or Activity that is responsible for displaying a view and handling user input like touch events). </p>

<p>With Dagger2, you'll be learning the dependency injection design pattern/architectural style. You will build modules that combine to form components and then use those components to inject objects. </p>

<p>Combining the two begins with understanding each concept on it's own. </p>

<p>Check out the Google Architectural Blueprint repository for examples of MVP and Dagger2. <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture</a> </p>
",2836797,,5241933,,2017-08-21 3:29:51,2017-08-21 3:29:51,,,,0,,,
Android,45774580,2,,45721090,2017-08-19 17:44:22,2802,,2,,"<p>You should first notify your Notification with no image or place holder, then load your bitmap with an AsyncTask, or use Picasso and Target callback.</p>

<p>Give to your task the builder that you used for the first notify, when bitmap is loaded, add it to the builder, and then re-notify your Notification.</p>

<p>If there's a risk that content had changed before complete image loading, store a variable that identify your current content to show, that you can check before renotify.</p>

<p>You can follow that exemple of MediaNotificationManager provide by google <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/src/main/java/com/example/android/uamp/MediaNotificationManager.java"" rel=""nofollow noreferrer"">UniversalMusicPlayer</a> project.</p>

<p>In your case : </p>

<pre><code>// CONSTRUCT THE NOTIFICATION DETAILS
builder.setAutoCancel(true);
builder.setSmallIcon(R.drawable.ic_launcher);
builder.setContentTitle(""Some Title"");
builder.setContentText(""Some Content Text"");
//builder.setLargeIcon(bitmap); // replace this line with place holder drawable from resources
builder.setContentIntent(pendingIntent);

manager.notify(NOTIFICATION_ID, builder.build());

currentLoadImageTask = new LoadImageTask(manager, builder);
currentLoadImageTask.execute(""https://graph.facebook.com/YOUR_USER_ID/picture?type=large"");

// ...

static class LoadImageTask extends AsyncTask&lt;String, Void, Bitmap&gt; {

    final NotificationManager manager;
    final NotificationCompat.Builder builder;

    public LoadImageTask(final NotificationManager manager, final NotificationCompat.Builder builder) {
        this.manager = manager;
        this.builder = builder;
    }

    @Override
    protected Bitmap doInBackground(final String... strings) {
        if (strings == null || strings.length == 0) {
            return null;
        }
        try {
            final URL url = new URL(strings[0]);
            final HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoInput(true);
            connection.connect();
            final InputStream input = connection.getInputStream();
            return BitmapFactory.decodeStream(input);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    protected void onPostExecute(final Bitmap bitmap) {
        if (bitmap == null || manager == null || builder == null) {
            return;
        }
        builder.setLargeIcon(bitmap);
        manager.notify(NOTIFICATION_ID, builder.build());
    }
}
</code></pre>

<p>With picasso : </p>

<pre><code>// CONSTRUCT THE NOTIFICATION DETAILS
builder.setAutoCancel(true);
builder.setSmallIcon(R.drawable.ic_launcher);
builder.setContentTitle(""Some Title"");
builder.setContentText(""Some Content Text"");
//builder.setLargeIcon(bitmap); // replace this line with place holder drawable from resources
builder.setContentIntent(pendingIntent);

manager.notify(NOTIFICATION_ID, builder.build());

// ...

Picasso.with(context)
    .load(""https://graph.facebook.com/YOUR_USER_ID/picture?type=large"")
    .resize(250, 250)
    .into(new Target() {
        @Override
        public void onBitmapLoaded(final Bitmap bitmap, final Picasso.LoadedFrom from) {
            builder.setLargeIcon(bitmap);
            manager.notify(NOTIFICATION_ID, builder.build());
        }

        @Override
        public void onBitmapFailed(final Drawable errorDrawable) {
             // Do nothing
        }

        @Override
        public void onPrepareLoad(final Drawable placeHolderDrawable) {
             // Do nothing
        }
    });
</code></pre>

<p>If not in UiThread you can create a Runnable and execute it in Looper</p>

<pre><code> final Handler uiHandler = new Handler(Looper.getMainLooper())
 uiHandler.post(new Runnable() {
      @Override
      public void run() {
           // Call from here
      }
 });
</code></pre>

<p>Picasso is much better simply because using cache.</p>

<p>And I highly recommend you to resize every bitmap you set in notification because it can easily provoc OutOfMemoryException if you dont.</p>
",1469481,,1469481,,2017-08-20 18:30:17,2017-08-20 18:30:17,,,,7,,,
Android,45790999,2,,45617293,2017-08-21 6:57:56,2803,,2,,"<p>I solved this problem using GridLayoutManager instead of StaggeredGridLayoutManager thanks to Chris in this <a href=""https://groups.google.com/forum/#!category-topic/google-admob-ads-sdk/android/S9ke0zZRw10"" rel=""nofollow noreferrer"">google groups answer</a>.</p>

<p>Here is Solution</p>

<pre><code>  public static final int ITEMS_PER_AD = 8;

  private GridLayoutManager mLayoutManager;

  // The Native Express ad height.
  private static final int NATIVE_EXPRESS_AD_HEIGHT = 150;

 // The Native Express ad unit ID.
 private static final String AD_UNIT_ID = ""ca-app-pub-3940256099942544/1072772517"";

 // The RecyclerView that holds and displays Native Express ads and menu items.
 private RecyclerView mRecyclerView;

 // List of Native Express ads and MenuItems that populate the RecyclerView.
 private List&lt;Object&gt; mRecyclerViewItems = new ArrayList&lt;&gt;();

 @Override
 protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    mLayoutManager = new GridLayoutManager(this, 2);
    mLayoutManager.setSpanSizeLookup(new 
    GridLayoutManager.SpanSizeLookup() {
    @Override
    public int getSpanSize(int position) {
        if (position % MainActivity.ITEMS_PER_AD == 0) {
            return 2;
        }
        return 1;
    }
    });

    mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);

    // Use this setting to improve performance if you know that changes
    // in content do not change the layout size of the RecyclerView.
    mRecyclerView.setHasFixedSize(true);

    // Specify a linear layout manager.
    mRecyclerView.setLayoutManager(mLayoutManager);

   // Update the RecyclerView item's list with menu items and Native Express ads.
   addMenuItemsFromJson();
   addNativeExpressAds();
   setUpAndLoadNativeExpressAds();

   // Specify an adapter.
   RecyclerView.Adapter adapter = new RecyclerViewAdapter(this, mRecyclerViewItems);
   mRecyclerView.setAdapter(adapter);
}
</code></pre>

<p>If you can follow the <a href=""https://github.com/googlesamples/android-ads/tree/master/advanced/NativeExpressRecyclerViewExample"" rel=""nofollow noreferrer"">this sample project</a>, you can find other class and layout. Because this is modified version of this project.
I hope this solution works others like me.</p>
",2739748,,,,,2017-08-21 6:57:56,,,,2,,,
Android,45801006,2,,45366037,2017-08-21 15:38:34,2804,,1,,"<p>It seems there is no way to change placeholder text with either auto complete activity or even with PlaceAutocompleteFragment because it also use autocomplete activity inside. The only way is using AutoCompleteTextView that you have full control on it. Google provides full sample code that is also easy to integrate and provide good UX. </p>

<p><a href=""https://github.com/googlesamples/android-play-places/tree/master/PlaceCompleteAdapter"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-places/tree/master/PlaceCompleteAdapter</a></p>

<p>I create a feature request <a href=""https://issuetracker.google.com/issues/64892097"" rel=""nofollow noreferrer"">here</a>, hopefully it will be supported in the future. </p>
",578309,,,,,2017-08-21 15:38:34,,,,0,,,
Android,45821616,2,,36161390,2017-08-22 15:23:36,2805,,4,,"<p>You can get token and order id parsing the response from 'getPurchases'</p>

<p><a href=""https://developer.android.com/google/play/billing/billing_reference.html#getPurchases"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_reference.html#getPurchases</a></p>

<p>But it is easer if you use IabHelper from TrialDrive Sample .
<a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive</a></p>

<p>There you app you can retrieve the token from the purchase object which you obtain starting a queryInventory:</p>

<pre><code>IabHelper.QueryInventoryFinishedListener mGotInventoryListener = new IabHelper.QueryInventoryFinishedListener() {
        public void onQueryInventoryFinished(IabResult result, Inventory inventory) {
           Log.d(TAG, ""Query inventory finished."");

            // Have we been disposed of in the meantime? If so, quit.
            if (mHelper == null) return;

            // Is it a failure?
            if (result.isFailure()) {
                Log.d(TAG, ""Failed to query inventory: "" + result);
                return;
            }

            Purchase premiumMonthly = inventory.getPurchase(SKU_SUSCRIPTION);
            if (premiumMonthly != null &amp;&amp; premiumMonthly.isAutoRenewing()) {
                    String token = premiumMonthly.getToken();
                    String orderid = premiumMonthly.getOrderId();

                    Log.d(TAG, token);
                    Log.d(TAG, orderid);
                } 
            }
   ....

    mHelper.queryInventoryAsync(mGotInventoryListener);
</code></pre>
",2807405,,,,,2017-08-22 15:23:36,,,,1,,,
Android,45856128,2,,45854762,2017-08-24 8:02:47,2806,,2,,"<p>There are many libraries available which add a face mask on camera preview. Almost all of them use OpenCV. Check out these libraries.</p>

<ul>
<li><a href=""https://github.com/hardik-trivedi/FaceFilter"" rel=""nofollow noreferrer"">FaceFilter</a></li>
<li><a href=""https://github.com/marsbroshok/face-replace"" rel=""nofollow noreferrer"">Face Replace</a></li>
<li><a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/FaceTracker"" rel=""nofollow noreferrer"">FaceTracker</a></li>
<li><a href=""https://github.com/CyberAgent/android-gpuimage"" rel=""nofollow noreferrer"">Android GPUimage</a></li>
</ul>

<p>The <a href=""https://github.com/CyberAgent/android-gpuimage"" rel=""nofollow noreferrer"">Android GPUimage</a> seems to add image on Camera Preview. A similar <a href=""https://stackoverflow.com/questions/39154572/save-applied-filter-in-camera-preview-with-gpuimage"">question</a> used this library to add face mask on camera preview. You can take a look into the answer posted on the question. </p>

<p>The FaceFilter library does the same work, but on a captured image. However you can see the <a href=""https://trivedihardik.wordpress.com/2017/02/13/android-mobile-vision-api-face-filter-implementation/"" rel=""nofollow noreferrer"">tutorial</a> for the library posted by the author and integrate it with face detection. There are several tutorials for face detection. This <a href=""https://code.tutsplus.com/tutorials/an-introduction-to-face-detection-on-android--cms-25212"" rel=""nofollow noreferrer"">tutorial</a> explains how to implement face detection, while also overlaying graphics on it. Although there is not much on the overlaid graphics in the tutorial, it might solve your question.</p>
",7461132,,7461132,,2017-08-24 8:56:58,2017-08-24 8:56:58,,,,4,,,
Android,45878920,2,,45783523,2017-08-25 9:57:56,2807,,14,,"<p>""A binding with matching key exists in component"" means that you have bound a dependency somewhere in your entire object graph but it cannot be reached from the subcomponent where it needs to be injected. Here is the javadoc:</p>

<blockquote>
  <p>Utility code that looks for bindings matching a key in all subcomponents in a binding graph so that a user is advised that a binding exists elsewhere when it is not found in the current subgraph. If a binding matching a key exists in a sub- or sibling component, that is often what the user actually wants to use.</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/Qs743.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Qs743.png"" alt=""A diagram of where the binding is present in the sibling component""></a></p>

<p>For instance, assume you have two Activities, ActivityA and ActivityB. You generate subcomponents with <code>@ContributesAndroidInjector</code> and bind <code>Foo</code> in the ActivityA module but not the ActivityB module. If you request injection for <code>Foo</code> in ActivityB with <code>@Inject Foo foo</code> you will get that error message.</p>

<p>In your particular case, the error you are getting can be reproduced by: </p>

<ol>
<li><p>Cloning the project from GitHub</p>

<pre><code>git clone https://github.com/googlesamples/android-architecture-components.git`
</code></pre></li>
<li><p>Copy-pasting <code>MainActivity</code> into a new file <code>ContactsActivity</code></p></li>
<li><p>Modifying <code>MainActivityModule</code> to look like your <code>ActivityModule</code></p></li>
</ol>

<p>So from this we can conclude that your <code>ActivityModule</code> is problematic. The <code>@ContributesAndroidInjector</code> is not as simple as it might seem. It actually means you are creating a new Dagger 2 subcomponent for the Activity you specify there (see the <a href=""https://google.github.io/dagger//android.html"" rel=""nofollow noreferrer"">docs here</a>). </p>

<p>A subcomponent can use bindings from a parent component but not sibling components. Your two lines for <code>ContributesAndroidInjector</code> in the <code>ActivityModule</code> create two sibling subcomponents: one for <code>MainActivity</code> and one for <code>ContactsActivity</code>.</p>

<p>However, <code>NavigationController</code> is dependent on <code>MainActivity</code> which is bound in the object graph for the <code>MainActivity</code> subcomponent but not in that for the <code>ContactsActivity</code> subcomponent. <code>AddContactsFragment</code> has become part of the object graph for the <code>ContactsActivity</code> subcomponent and doesn't have access to <code>MainActivity</code> anymore. This means that when Dagger 2 tries to inject the <code>NavigationController</code> inside your <code>AddContactsFragment</code> it cannot provide <code>MainActivity</code> as a dependency for it. This explains the ""cannot provide"" part of the error message.</p>

<p>Although it can't provide <code>MainActivity</code> in that particular object graph, the <code>AndroidInjector</code> <em>does</em> know in general about <code>MainActivity</code> hence the error message ""a binding key exists"". What binding key is this? A key that binds <code>MainActivity.class</code> to a <code>MainActivityFactory</code>. Where is this key bound? In your <code>ActivityModule</code> when you wrote the <code>@ContributesAndroidInjector</code> for <code>MainActivity</code>.</p>

<p>How to fix this is getting beyond scope of a StackOverflow question because it involves a lengthy refactor of the code. You would need to re-organise the object graph so that the <code>NavigationController</code> no longer depends on <code>MainActivity</code>. Perhaps you could make it depend on <code>AppCompatActivity</code> since that is a superclass of both your Activities. You would then need to stop using <code>ContributesAndroidInjector</code> and write explicit modules for your two Activities that include bindings for <code>AppCompatActivity</code>.</p>

<p>However, for now please go back to basics and start with something easier. It is a recipe for disaster to start with a complex project without a complete understanding and just modify it hoping that it will work. </p>

<p>The <a href=""https://github.com/codepath/dagger2-example"" rel=""nofollow noreferrer"">Codepath Dagger 2 tutorial project</a> is much easier to understand and will get you familiar with the basic concepts involved in Dagger 2. Once you are comfortable with the basic concepts and have understood dependent components and sub-components, then you can attempt a more difficult example. Good luck!</p>
",5241933,,5241933,,2018-10-19 2:51:49,2018-10-19 2:51:49,,,,3,,,
Android,45890245,2,,45851214,2017-08-25 22:39:22,2808,,1,,"<p>An Instant App is meant to be a feature or one of many features of your Main App (installed app). The experience between your instant app and your installed app is supposed to be the same <a href=""https://developer.android.com/topic/instant-apps/ux-best-practices.html"" rel=""nofollow noreferrer"">UX best practices for apps on Google Play Instant</a>. If you route your users from the instant app to an entirely different app that may or may not contain the same features (activities), then this is not recommended.</p>

<p>To apply your productivity app example, consisting of routine, diary, etc.; each feature of your Instant App would cater to each of those parts. For example:</p>

<ul>
<li><p><a href=""http://www.example.com/check-routine"" rel=""nofollow noreferrer"">http://www.example.com/check-routine</a> > launches the Instant App (feature) for your routine activity.</p></li>
<li><p><a href=""http://www.example.com/write-diary"" rel=""nofollow noreferrer"">http://www.example.com/write-diary</a> > launches the Instant App (feature) for your diary activity.</p></li>
</ul>

<p>Then once users have installed your main app, any of those links would now open the main app and bring them to the same respective activities.</p>

<p>For more information on multi-feature Instant Apps, see the doc and <em>hello-feature-module</em> sample: </p>

<ul>
<li><p><a href=""https://developer.android.com/topic/instant-apps/getting-started/structure.html#structure_of_an_instant_app_with_multiple_features"" rel=""nofollow noreferrer"">Create your first instant app</a></p></li>
<li><p><a href=""https://github.com/googlesamples/android-instant-apps/tree/master/hello-feature-module"" rel=""nofollow noreferrer"">Google samples/android-instant-apps</a> </p></li>
</ul>
",6668797,,2638235,,2018-12-06 10:58:48,2018-12-06 10:58:48,,,,0,,,
Android,45943282,2,,40398072,2017-08-29 15:42:26,2812,,60,,"<p>Here's a neat alternative from Google's architecture components <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicRxJavaSampleKotlin/app/src/main/java/com/example/android/observability/persistence/UsersDatabase.kt"" rel=""noreferrer"">sample code</a>, which uses the <code>also</code> function:</p>

<pre><code>class UsersDatabase : RoomDatabase() {

    companion object {

        @Volatile private var INSTANCE: UsersDatabase? = null

        fun getInstance(context: Context): UsersDatabase =
            INSTANCE ?: synchronized(this) {
                INSTANCE ?: buildDatabase(context).also { INSTANCE = it }
            }

        private fun buildDatabase(context: Context) =
            Room.databaseBuilder(context.applicationContext,
                    UsersDatabase::class.java, ""Sample.db"")
                    .build()
    }
}
</code></pre>
",775282,,8343333,,2017-08-29 19:15:04,2017-08-29 19:15:04,,,,3,,,
Android,45989022,2,,45857714,2017-08-31 19:45:39,2814,,2,,"<p>As you can check in the google sample -
<a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/MainActivity.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/MainActivity.java</a></p>

<p>consumeAsync() is called twice:</p>

<p>-When the purchase is complete, in <code>OnIabPurchaseFinishedListener</code></p>

<p>-When the inventory is queried at the start of the activity, in <code>QueryInventoryFinishedListener</code></p>

<p>You also need to call it when the purchase was successful as well as when you query the inventory and find a consumable item in there (because if the item is consumed, then it won't appear in the inventory)</p>
",6806175,,,,,2017-08-31 19:45:39,,,,0,,,
Android,45994451,2,,45994279,2017-09-01 6:32:22,2814,,1,,"<p>You can use</p>

<ol>
<li><a href=""https://developer.android.com/reference/android/app/job/JobScheduler.html"" rel=""nofollow noreferrer"">JobScheduler</a></li>
</ol>

<blockquote>
  <p>This API allows you to run scheduled service and the android system
  will batch all the services from different applications and run them
  together in some particular timeframe</p>
</blockquote>

<ol start=""2"">
<li><a href=""https://github.com/firebase/firebase-jobdispatcher-android"" rel=""nofollow noreferrer"">Firebase Job Dispatcher</a></li>
</ol>

<blockquote>
  <p>The Firebase JobDispatcher is a library for scheduling background jobs
  in your Android app. It provides a JobScheduler-compatible API that
  works on all recent versions of Android (API level 9+) that have
  Google Play services installed.</p>
</blockquote>

<p>for reference you can use following links</p>

<p><a href=""https://medium.com/@kevalpatel2106/how-to-handle-background-services-in-android-o-f96783e65268"" rel=""nofollow noreferrer"">reference 1</a><br>
<a href=""http://www.vogella.com/tutorials/AndroidTaskScheduling/article.html"" rel=""nofollow noreferrer"">reference 2</a><br>
<a href=""https://github.com/googlesamples/android-JobScheduler"" rel=""nofollow noreferrer"">reference 3</a><br>
<a href=""https://medium.com/google-developers/scheduling-jobs-like-a-pro-with-jobscheduler-286ef8510129"" rel=""nofollow noreferrer"">referennce 4</a><br>
<a href=""https://medium.com/@anshuljain/become-a-pro-at-scheduling-tasks-in-android-1b955f75f430"" rel=""nofollow noreferrer"">reference 5</a><br>
<a href=""https://stackoverflow.com/questions/37720015/firebase-jobdispatcher-how-does-it-work-compared-to-previous-apis-jobschedule"">reference 6</a></p>
",3134215,,,,,2017-09-01 6:32:22,,,,0,,,
Android,46064204,2,,34773958,2017-09-05 22:31:42,2819,,26,,"<p>For some, there is a file, <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicRxJavaSampleKotlin/app/src/test/java/com/example/android/observability/MockitoKotlinHelpers.kt"" rel=""noreferrer"">MockitoKotlinHelpers.kt</a> provided by Google in the Android Architecture repo. It provides a convenient way to call capture.. just call
<code>verify(activityHandlerMock).navigateTo(capture(classCaptor), capture(booleanCaptor))</code></p>
",4100025,,3423236,,2018-04-12 15:12:31,2018-04-12 15:12:31,,,,6,,,
Android,46103575,2,,45627420,2017-09-07 19:12:31,2821,,6,,"<p>I'm the Android Frameworks engineer leading the Autofill Framework project, so I'll answer some questions:</p>

<ul>
<li>The <em>""Contents can't be autofilled""</em> message typically means the Autofill Service does not know how to autofill the screen. When you're adding autofill support to your app, it's often easier to use an Autofill Service you can control first, rather than a ""real"" service like a password manager. As mentioned in a previous reply, we provide a <a href=""https://github.com/googlesamples/android-AutofillFramework"" rel=""noreferrer"">sample service</a> that can be used for this purpose.</li>
<li>When you long-press a text field and select <em>AUTOFILL</em>, you are in fact ""forcing"" an autofill request as mentioned in another reply (i.e., behind the scenes the text field is calling <em>AutofillManager.requestAutofill()</em>). If the Autofill Service knows how to autofill your screen, you shouldn't need to do that, as the autofill suggestions would show up right away once you focus the input field.</li>
<li>You shouldn't need to set <em>importantForAutofill</em> or call <em>AutofillManager.cancel()</em> in your case.</li>
</ul>

<p>So, my recommendation is to try to use the sample Autofill Service implementation to test your app first. Most likely, the first time you access your app the autofill popup won't be shown because the service does not have data for it. But once your app triggers the save UI (for example, after you manually enter the phone number and the activity finishes) and you tap save, that data should be available the next time you launch the activity. </p>

<p>Hope that helps,</p>

<p>-- Felipe</p>
",8576395,,,,,2017-09-07 19:12:31,,,,2,,,
Android,46138158,2,,46062532,2017-09-10 7:05:07,2823,,2,,"<p>For display only, one easy approach is to use a <a href=""https://developer.android.com/reference/android/opengl/GLSurfaceView.html"" rel=""nofollow noreferrer""><code>GLSurfaceView</code></a>, a <a href=""https://developer.android.com/reference/android/graphics/SurfaceTexture.html"" rel=""nofollow noreferrer""><code>SurfaceTexture</code></a> to render the video frames, and a <a href=""https://developer.android.com/reference/android/media/MediaPlayer.html"" rel=""nofollow noreferrer""><code>MediaPlayer</code></a>. Prokash's answer links to an open source library that shows how to accomplish that. There are a number of other examples around if you search those terms together. Taking that route, you draw video frames to an OpenGL texture and create OpenGL shaders to manipulate how the texture is rendered. (I would suggest asking Prokash for further details and accepting his answer if this is enough to fill your requirements.)</p>

<p>Similarly, you could use the OpenGL tools with <a href=""https://developer.android.com/reference/android/media/MediaCodec.html"" rel=""nofollow noreferrer""><code>MediaCodec</code></a> and <a href=""https://developer.android.com/reference/android/media/MediaExtractor.html"" rel=""nofollow noreferrer""><code>MediaExtractor</code></a> to decode video frames. The <code>MediaCodec</code> would be configured to output to a <code>SurfaceTexture</code>, so you would not need to do much more than code some boilerplate to get the output buffers rendered. The filtering process would be the same as with a <code>MediaPlayer</code>. There are a number of examples using <code>MediaCodec</code> as a decoder available, e.g. <a href=""https://github.com/googlesamples/android-BasicMediaDecoder"" rel=""nofollow noreferrer"">here</a> and <a href=""https://github.com/taehwandev/MediaCodecExample"" rel=""nofollow noreferrer"">here</a>. It should be fairly straightforward to substitute the <code>TextureView</code> or <code>SurfaceView</code> used in those examples with the <code>GLSurfaceView</code> of Prokash's example.</p>

<p>The advantage of this approach is that you have access to all the separate tracks in the media file. Because of that, you should be able to filter the video track with OpenGL and straight copy other tracks for export. You would use a <code>MediaCodec</code> in encode mode with the <code>Surface</code> from the <code>GLSurfaceView</code> as input and a <a href=""https://developer.android.com/reference/android/media/MediaMuxer.html"" rel=""nofollow noreferrer""><code>MediaMuxer</code></a> to put it all back together. You can see several relevant examples at <a href=""http://bigflake.com/mediacodec/#DecodeEditEncodeTest"" rel=""nofollow noreferrer"">BigFlake</a>.</p>

<p>You can use a <code>MediaCodec</code> without a <code>Surface</code> to access decoded byte data directly and manipulate it that way. <a href=""https://github.com/grishka/android-video-transcoder"" rel=""nofollow noreferrer"">This example</a> illustrates that approach. You can manipulate the data and send it to an encoder for export or render it as you see fit. There is some extra complexity in dealing with the raw byte data. Note that I like this example because it illustrates dealing with the audio and video tracks separately.</p>

<p>You can also use <a href=""https://www.ffmpeg.org/"" rel=""nofollow noreferrer"">FFMpeg</a>, either in native code or via one of the Java wrappers out there. This option is more geared towards export than immediate playback. See <a href=""https://github.com/guardianproject/android-ffmpeg-java"" rel=""nofollow noreferrer"">here</a> or <a href=""https://github.com/WritingMinds/ffmpeg-android-java"" rel=""nofollow noreferrer"">here</a> for some libraries that attempt to make FFMpeg available to Java. They are basically wrappers around the command line interface. You would need to do some extra work to manage playback via FFMpeg, but it is definitely doable.</p>

<p>If you have questions, feel free to ask, and I will try to expound upon whatever option makes the most sense for your use case.</p>
",2617694,,,,,2017-09-10 7:05:07,,,,1,,,
Android,46143363,2,,40740239,2017-09-10 17:10:08,2824,,1,,"<p>You can see implementation of <a href=""https://github.com/googlesamples/android-ActivitySceneTransitionBasic/blob/master/Application/src/main/java/com/example/android/activityscenetransitionbasic/SquareFrameLayout.java#L26"" rel=""nofollow noreferrer""><code>SquareFrameLayout</code></a> from android developers website:</p>

<pre>    
<code>
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        final int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        final int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        if (widthSize == 0 && heightSize == 0) {
            // If there are no constraints on size, let FrameLayout measure
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);

            // Now use the smallest of the measured dimensions for both dimensions
            final int minSize = Math.min(getMeasuredWidth(), getMeasuredHeight());
            setMeasuredDimension(minSize, minSize);
            return;
        }

        final int size;
        if (widthSize == 0 || heightSize == 0) {
            // If one of the dimensions has no restriction on size, set both dimensions to be the
            // on that does
            size = Math.max(widthSize, heightSize);
        } else {
            // Both dimensions have restrictions on size, set both dimensions to be the
            // smallest of the two
            size = Math.min(widthSize, heightSize);
        }

        final int newMeasureSpec = MeasureSpec.makeMeasureSpec(size, MeasureSpec.EXACTLY);
        super.onMeasure(newMeasureSpec, newMeasureSpec);
    }
</code>
</pre>
",1083957,,1083957,,2018-05-08 14:56:48,2018-05-08 14:56:48,,,,2,,,
Android,46226877,2,,24118042,2017-09-14 19:29:08,2828,,1,,"<p>Using this Google sample <a href=""https://github.com/googlesamples/android-CardEmulation"" rel=""nofollow noreferrer"">project</a>, I tried to add the suggestions by @Michael Roland (eg. adding android:apduServiceBanner, category and description).</p>

<p>As a result, the graphic shows up in the Tap and Pay Settings screen, but not the text. 
I logged an issue with the sample project, but do not expect any resolution.</p>

<p>The current workaround is to create a apduServiceBanner drawable that has the text built into the drawable.</p>
",923920,,2425802,,2018-04-10 22:06:29,2018-04-10 22:06:29,,,,0,,,
Android,46280749,2,,46278357,2017-09-18 13:37:52,2832,,11,,"<blockquote>
  <ol>
  <li>[...] It means that all the viewmodels are added to the DI graph. Why that is done in that way instead of having separate  Module for each Activity/Fragment [...]?</li>
  </ol>
</blockquote>

<p>They are added to the DI graph, but they are not yet created. Instead they end up in a map of providers, as <a href=""https://github.com/googlesamples/android-architecture-components/blob/b411aa3f423744ec9b7f4c0559e3938ab2c40547/GithubBrowserSample/app/src/main/java/com/android/example/github/viewmodel/GithubViewModelFactory.kt#L28"" rel=""noreferrer"">seen in the ViewModelFacory</a>.</p>

<pre><code>@Inject
public GithubViewModelFactory(Map&lt;Class&lt;? extends ViewModel&gt;, Provider&lt;ViewModel&gt;&gt; creators) { }
</code></pre>

<p>So we now have a <code>GithubViewModelFactory</code> that has a list of providers and can create any <code>ViewModel</code> that was bound. Fragments and Activities can now just inject the factory and retrieve their ViewModel.</p>

<pre><code>@Inject
ViewModelProvider.Factory viewModelFactory;

// ...later...
repoViewModel = ViewModelProviders.of(this, viewModelFactory).get(RepoViewModel.class);
</code></pre>

<p>As to the why...alternatively you could create a <code>ViewModelProvider.Factory</code> for every Activity / Fragment and register the implementation in every Module. This would be a lot of duplicated boilerplate code, though.</p>

<blockquote>
  <ol start=""2"">
  <li>In this specific example, where viewmodels are instantiated using GithubViewModelFactory is there any way to pass a parameter to the specific ViewModel? Or the better solution would be to create a setter in ViewModel and set needed param via setter?</li>
  </ol>
</blockquote>

<p>It seems like all the ViewModels only depend on <code>@Singleton</code> objects&mdash;which is necessary, since they all get provided from the AppComponent. This means that there is no way to pass in ""parameters"" other than other <code>@Singleton</code> dependencies.</p>

<p>So, as you suggested, you'd either have to move the factory down into the Activity / Fragment component so that you can provide lower-scoped dependencies, or use a setter method.</p>
",1837367,,2489403,,2018-04-29 12:50:41,2018-04-29 12:50:41,,,,4,,,
Android,46329081,2,,8660646,2017-09-20 18:13:33,2834,,1,,"<p>It's possible</p>

<p>Reference:
<a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/MainActivity.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/MainActivity.java</a></p>

<p>Basically you must cunsume the item to notify Google about this possibility.</p>

<pre><code>if (purchase.getSku().equals(SKU_GAS)) {
                // bought 1/4 tank of gas. So consume it.
                Log.d(TAG, ""Purchase is gas. Starting gas consumption."");
                try {
                    mHelper.consumeAsync(purchase, mConsumeFinishedListener);
                } catch (IabAsyncInProgressException e) {
                    complain(""Error consuming gas. Another async operation in progress."");
                    setWaitScreen(false);
                    return;
                }
            }
</code></pre>

<p>See the documentation about <strong>Consume a purchase</strong></p>

<p><a href=""https://developer.android.com/training/in-app-billing/purchase-iab-products.html#Consume"" rel=""nofollow noreferrer"">https://developer.android.com/training/in-app-billing/purchase-iab-products.html#Consume</a></p>
",3097425,,,,,2017-09-20 18:13:33,,,,0,,,
Android,46374050,2,,46343521,2017-09-22 22:29:34,2836,,1,,"<p>Great answer and looking deep by @Kuffs!</p>

<p>Google will fix multiple calls soon: <a href=""https://issuetracker.google.com/issues/66054158"" rel=""nofollow noreferrer"">https://issuetracker.google.com/issues/66054158</a></p>

<p>However, your integration with billing flow should work even when onPurchasesUpdate was triggered multiple times, since it could happen anyway. For example, if somebody was buying in parallel on another device with the same @gmail account. And people in some countries (e.g. Spain) do share their @gmail accounts rather frequently with many friends and family members.</p>

<p>Please, check <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/src/main/java/com/example/billingmodule/billing/BillingManager.java"" rel=""nofollow noreferrer"">TrivialDrive_v2</a> implementation to get an idea, how handle such situations gracefully.</p>
",1390874,,,,,2017-09-22 22:29:34,,,,1,,,
Android,46402334,2,,46258255,2017-09-25 9:53:44,2838,,4,,"<p>Okay,</p>

<p>As it turned out it was an issue at Google</p>

<blockquote>
  <p>Thanks for your reply to Google Play Developer Support!</p>
  
  <p>Our team have recently made some changes that should fix this issue
  (which is what you have confirmed). </p>
  
  <p>On the other hand, we do encourage developers to use our new Play
  Billing library
  (<a href=""https://developer.android.com/google/play/billing/billing_library.html"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_library.html</a>),
  which gracefully handles most of use cases, and a good example of
  integrating with it is our open-sourced sample:
  <a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive_v2"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive_v2</a>
  I appreciate your patience on this fix, I hope this helps! If you have
  any further questions, please let me know. I'm happy to help.</p>
</blockquote>
",583616,,,,,2017-09-25 9:53:44,,,,0,,,
Android,46438563,2,,45834449,2017-09-27 2:28:43,2840,,2,,"<p>It turns out that notifications can be auto-bundled on 24+ devices. So the manually created summary notification is no longer needed. 
Please refer to <a href=""https://github.com/googlesamples/android-WearNotifications/blob/fd7cdc51a76e6beb7d7b428a8c30ab745e3bbfb8/Application/src/main/java/com/example/android/wearable/wear/wearnotifications/MainActivity.java#L310"" rel=""nofollow noreferrer"">The Example Project</a></p>
",679563,,,,,2017-09-27 2:28:43,,,,0,,,
Android,46442616,2,,46428090,2017-09-27 8:08:49,2840,,1,,"<p>Update Google Play Services on your devices.</p>

<p>Possibly the same problem as here: <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/issues/97"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-UniversalMusicPlayer/issues/97</a></p>
",2241008,,,,,2017-09-27 8:08:49,,,,3,,,
Android,46443592,2,,46443524,2017-09-27 8:57:56,2840,,5,,"<p>There is an <a href=""https://developer.android.com/reference/android/arch/lifecycle/AndroidViewModel.html"" rel=""nofollow noreferrer""><code>AndroidViewModel</code></a>, which receives <code>Application</code> instance as parameter.</p>

<p>From docs:</p>

<blockquote>
  <p>Application context aware <strong>ViewModel</strong>.</p>
  
  <p>Subclasses must have a constructor which accepts <strong>Application</strong> as the only parameter.</p>
</blockquote>

<p>You can retrieve a string from <code>strings.xml</code> using that parameter.</p>

<hr>

<blockquote>
  <p>The repo in the link, however uses <strong>ViewModel</strong> and not AndroidViewModel. If I extend my ViewModel to use <strong>AndroidViewModel</strong> and include the <strong>Application</strong> - it's trying to inject <strong>MyApplication</strong> instead of <strong>Application</strong> if that makes sense.</p>
</blockquote>

<p>I've checked out <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample"" rel=""nofollow noreferrer"">GithubBrowserSample</a>. Here's how <code>UserViewModel</code> looks like:</p>

<pre>
<code>
    public class UserViewModel extends ViewModel {
        ...
        @Inject
        public UserViewModel(UserRepository userRepository, RepoRepository repoRepository) {
            ...
        }
        ...
    }
</code>
</pre>

<p>And here's what changes I've done:</p>

<pre>
<code>
    public class UserViewModel extends AndroidViewModel {
        ...
        @Inject
        public UserViewModel(Application application, UserRepository userRepository, RepoRepository repoRepository) {
            super(application);
            ...
        }
        ...
    }
</code>
</pre>
",1083957,,1083957,,2017-09-27 14:21:02,2017-09-27 14:21:02,,,,5,,,
Android,46455651,2,,46362835,2017-09-27 19:17:50,2841,,1,,"<p>If you only want to display the modified output, then I'm not sure why you have two outputs configured (the TextureView and the ImageReader).</p>

<p>Generally, if you want something like</p>

<pre><code>camera -&gt; in-app edits -&gt; display
</code></pre>

<p>You have several options, depending on the kinds of edits you want, and various tradeoffs between ease of coding, performance, and so on.</p>

<p>One of the most efficient options is to do your edits as an OpenGL shader.
In that case, a GLSurfaceView is probably the simplest option.
Create a SurfaceTexture object with a texture ID that's unused in the GLSurfaceView's EGL context, and pass a Surface created from the SurfaceTexture to the camera session and requests.
Then in the SurfaceView drawing method, call SurfaceTexture's updateTexImage() method, and then use the texture ID to render your output as you'd like it.</p>

<p>That does require a lot of OpenGL code, so if you're not familiar with it, that can be challenging.</p>

<p>You can also use RenderScript for a similar effect; there you'll have an output SurfaceView or TextureView, and then a RenderScript script that reads from an input Allocation from the Camera and writes to an output Allocation to the View; you can create such Allocations from a Surface.
The Google <a href=""https://github.com/googlesamples/android-HdrViewfinder/"" rel=""nofollow noreferrer"">HdrViewfinderDemo</a> camera2 sample app uses this approach. It's a lot less boilerplate.</p>

<p>Third, you can just use an ImageReader like you're doing now, but you'll have to do a lot of conversion yourself to write it to the screen.  The simplest (but slowest) option is to get a Canvas from a SurfaceView or a ImageView, and just write pixels to it one by one.  Or you can do that via the <a href=""https://developer.android.com/ndk/reference/native__window_8h.html"" rel=""nofollow noreferrer"">ANativeWindow</a> NDK, which is faster but requires writing JNI code and still requires you to do YUV->RGB conversions yourself (or use undocumented APIs to push YUV into the ANativeWindow and hope it works).</p>
",1344825,,,,,2017-09-27 19:17:50,,,,2,,,
Android,46476343,2,,46470190,2017-09-28 18:48:27,2842,,2,,"<p>Just inside your activity's onCreate or even better onResume (this will prevent potential problems with lost purchases when switching between apps) in addition to successful onBillingSetupFinished callback.</p>

<p>For all similar questions, please check the latest <a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive_v2"" rel=""nofollow noreferrer"">TrivialDrive_v2</a>. </p>

<p>E.g. queryPurchase is triggered <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/src/main/java/com/example/billingmodule/BaseGamePlayActivity.java#L160"" rel=""nofollow noreferrer"">here</a> and <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/src/main/java/com/example/billingmodule/billing/BillingManager.java#L116"" rel=""nofollow noreferrer"">here</a> there.</p>
",1390874,,,,,2017-09-28 18:48:27,,,,3,,,
Android,46479262,2,,44910631,2017-09-28 22:37:30,2842,,1,,"<p><a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive_v2"" rel=""nofollow noreferrer"">TrivialDrive_v2</a> demonstrates a new way of integration with Google Play Billing.</p>

<p>It's based on the latest release of <a href=""https://developer.android.com/google/play/billing/billing_library.html"" rel=""nofollow noreferrer"">Play Billing library</a> (currently 1.0) and tries to promote the best practices of integration with it.</p>

<p>TrivialDrive sample was kept for those that still use an integration via AIDL file (e.g. C++ developers).</p>
",1390874,,1390874,,2017-09-28 22:44:21,2017-09-28 22:44:21,,,,0,,,
Android,46493759,2,,46493575,2017-09-29 17:07:09,2843,,1,,"<p>You should use <a href=""https://developer.android.com/google/play/billing/billing_reference.html#getPurchaseHistory"" rel=""nofollow noreferrer"">getPurchaseHistory()</a> method.
<a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl#L239-L264"" rel=""nofollow noreferrer"">Signature</a> of the method:</p>

<pre><code>Bundle getPurchaseHistory(int apiVersion,
                          String packageName,
                          String type,
                          String continuationToken,
                          Bundle extraParams);
</code></pre>

<p>Your code will look like this:</p>

<pre><code>Bundle purchaseHistoryBundle = service.getPurchaseHistory(6, BuildConfig.APPLICATION_ID, ""subs"", null, new Bundle());
</code></pre>

<p>In addition, <a href=""https://github.com/gorgon"" rel=""nofollow noreferrer"">guy from Google</a> suggests in <a href=""https://github.com/googlesamples/android-play-billing"" rel=""nofollow noreferrer"">that example</a> use <code>queryPurchaseHistoryAsync</code>method:</p>

<blockquote>
  <p>This library also allows to get purchase history even though it's not
  demonstrated inside the sample. Please use <a href=""https://developer.android.com/reference/com/android/billingclient/api/BillingClient.html#queryPurchaseHistoryAsync(java.lang.String,%20com.android.billingclient.api.PurchaseHistoryResponseListener)"" rel=""nofollow noreferrer"">this method</a> to get all
  purchases history (up to 1 record per SKU).</p>
</blockquote>
",3166697,,3166697,,2017-09-29 17:46:11,2017-09-29 17:46:11,,,,0,,,
Android,46497294,2,,46410536,2017-09-29 21:44:21,2843,,7,,"<p>Ok I found why. It's not a problem with the Android build of the device.
It's because there already was an <code>IInAppBillingService.aidl</code> in our project. Once I removed it and clean the project everything is working properly. -> <a href=""https://github.com/googlesamples/android-play-billing/issues/86#issuecomment-332369494"" rel=""noreferrer"">Github Issue</a></p>
",4193343,,,,,2017-09-29 21:44:21,,,,0,,,
Android,46497582,2,,46462128,2017-09-29 22:14:31,2843,,5,,"<blockquote>
  <ol>
  <li>Can i use LiveData to wrap Delete, Insert, Update calls?</li>
  </ol>
</blockquote>

<p>No, you can't. I wrote an answer to the <a href=""https://github.com/googlesamples/android-architecture-components/issues/162"" rel=""noreferrer"">issue</a>. The reason is, that LiveData is used to notify for changes. Insert, Update, Delete won't trigger a change. It will return the deleted rows, the inserted ID or the affected rows. Even if it looks horrible it makes sense not having LiveData wrapped around your stuff. Anyway, it would make sense to have something like Single around the calls to let the operation triggered and operated on a RX-Java operation. </p>

<p>If you want to trigger those calls, you observe on a selection query which notify your LiveData onec you have updated, inserted or deleted some/any data.</p>

<blockquote>
  <ol start=""2"">
  <li>Better way to maintain such asynctask class for delete, insert , update?</li>
  </ol>
</blockquote>

<p>After looking at your example it looks like that you misuse the (Model/View/)ViewModel-Pattern. You should never access your repository in your view. I'm not sure if you'r doing this because its not visible in your sample. Anyway, after observing your LiveData and getting a result, there's no need to wrap the updating of data inside your viewModel in an AsyncTask. That means, that you should alway take care of</p>

<p>a) view &lt;-> viewmodel &lt;-> repository and not view &lt;-> repository and view &lt;-> viewmodel</p>

<p>and </p>

<p>b) don't try to use threads which are not needed. You observe LiveData on a Background Thread (@WorkerThread) by default (if not annotated with @MainThread) and get the value in the ui-thread (@MainThread).</p>
",2032539,,,,,2017-09-29 22:14:31,,,,4,,,
Android,46637319,2,,46636607,2017-10-09 0:18:49,2852,,2,,"<p>In android we call it as App Shortcuts it will be supported from Android N and above. You can refer to <a href=""https://github.com/googlesamples/android-AppShortcuts"" rel=""nofollow noreferrer"">github link</a> by Google for sample </p>
",5539802,,,,,2017-10-09 0:18:49,,,,0,,,
Android,46727422,2,,46701959,2017-10-13 10:06:30,2856,,1,,"<p>I experimented a little with this on camera2basic (<a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a>) and found I could get the preview back much quicker if I called unlock just after acquiring the image and before saving it - I also removed the original call to unLockFocus in the captureCallback. </p>

<pre class=""lang-js prettyprint-override""><code>    /**
     * This a callback object for the {@link ImageReader}. ""onImageAvailable"" will be called when a
     * still image is ready to be saved.
     */
    private final ImageReader.OnImageAvailableListener mOnImageAvailableListener
            = new ImageReader.OnImageAvailableListener() {

        @Override
        public void onImageAvailable(ImageReader reader) {
            Log.d(TAG,""onImageAvailable"");

            //Get the image
            Image cameraImage = reader.acquireNextImage();

            //Now unlock the focus so the UI does not look locked - note that this is a much earlier point than in the
            //original Camera2Basic example from google as the original place was causing the preview to lock during any
            //image manipulation and saving.
            unlockFocus();

            //Save the image file in the background - note check you have permissions granted by user or this will cause an exception.
            mBackgroundHandler.post(new ImageSaver(getActivity().getApplicationContext(), cameraImage, outputPicFile);

        }

    };
</code></pre>



<p>However, Camera2Basic has many callbacks and I found that when you start testing with scenarios where the activity or fragment is paused and resumed, and especially if your app has other asynchronous callbacks also, it is very easy to get into race conditions that can cause unexpected behaviour or crashes.</p>

<p>If you just want a simple example of a camera that returns the preview quicker when taking a photo, then the basic FotoApparat example might be worth looking at also:</p>

<ul>
<li><a href=""https://github.com/Fotoapparat/Fotoapparat"" rel=""nofollow noreferrer"">https://github.com/Fotoapparat/Fotoapparat</a></li>
</ul>
",334402,,,,,2017-10-13 10:06:30,,,,3,,,
Android,46736617,2,,46731190,2017-10-13 19:11:50,2857,,1,,"<p>Google provides a good feature list here:
<a href=""https://developers.google.com/android/work/requirements/features"" rel=""nofollow noreferrer"">https://developers.google.com/android/work/requirements/features</a></p>

<p>If your devices have NFC, I would provision using NFC. You can look at the code here for your own implementation or you might be able to use the app with very few modifications.
<a href=""https://github.com/googlesamples/android-NfcProvisioning"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-NfcProvisioning</a></p>

<p>By tapping the welcome screen in the Google Setup Wizard 6 times will allow you to use QR code provisioning. It is a bit more cumbersome in my opinion and requires Android 7.0+.</p>

<p>Those are your only two options unless you become a Google EMM Partner or again, partner with them to support Zero Touch Enrollment on Android 8.0+ devices for your own homebaked solution.</p>

<p>You might want to also look at existing open source EMM/MDM implementations that already exist such as WSO2.</p>
",6917917,,,,,2017-10-13 19:11:50,,,,6,,,
Android,46759532,2,,46635651,2017-10-15 20:12:40,2859,,1,,"<p>You should use Service as a command manager for your music player app. All the play, pause, next and other playback controls should be sent to service, and service will delegate it accordingly. Also Android <a href=""https://developer.android.com/reference/android/media/MediaPlayer.html"" rel=""nofollow noreferrer"">MediaPlayer</a> has asynchronous methods and associated listeners to notify callers. Please do have a look at <a href=""https://developer.android.com/reference/android/media/MediaPlayer.html"" rel=""nofollow noreferrer"">it</a>.
Please follow google sample code for music player <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-UniversalMusicPlayer</a> which addresses basic music player functionalities very well.</p>
",3669602,,,,,2017-10-15 20:12:40,,,,0,,,
Android,46765390,2,,39895783,2017-10-16 7:52:21,2859,,1,,"<p>I suffered the same problem.
Gradle doesn't packaging .so files into apk while I filled CMakeLists.txt correctly, but finally I resolved it.</p>

<p>Add the JniLibs path into sourceSets in local build.gradle as this sample code:
<a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-libs/app/build.gradle"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/blob/master/hello-libs/app/build.gradle</a>
which is <a href=""https://stackoverflow.com/users/4496512/gerry"">@Gerry</a> mentioned in the comment.</p>

<p>I did:</p>

<hr>

<ol>
<li><p>copy .so libraries into src/main/JniLibs/${ANDROID_ABI}.</p>

<p>ex) mobile/src/main/JniLibs/armeabi-v7a/libavcodec.so</p></li>
</ol>

<hr>

<ol start=""2"">
<li>edit CMakeLists.txt</li>
</ol>

<p>CMakeLists.txt</p>

<pre><code>cmake_minimum_required(VERSION 3.4.1)

# project path (absolute), change it to yours.
set(projectDir C:/Users/Administrator/AndroidStudioProjects/TestApp1)

# headers
include_directories(${projectDir}/mobile/src/main/JniLibs/${ANDROID_ABI}/include)

# sample ndk lib
add_library( native-lib SHARED src/main/cpp/native-lib.cpp )

# FFMPEG libraries
add_library( lib_avcodec SHARED IMPORTED )

set_target_properties(  lib_avcodec  PROPERTIES IMPORTED_LOCATION  ${projectDir}/mobile/src/main/JniLibs/${ANDROID_ABI}/libavcodec.so)

# ...
# (omitted) same codes with lib_avdevice, lib_avfilter, lib_avformat, lib_avutil, lib_swresample, and lib_swscale each.
# ...

target_link_libraries( # Specifies the target library.
                   native-lib

                   lib_avcodec
                   lib_avdevice
                   lib_avfilter
                   lib_avformat
                   lib_avutil
                   lib_swresample
                   lib_swscale
                   )
</code></pre>

<hr>

<ol start=""3"">
<li>in build.gradle (app)</li>
</ol>

<p>build.gradle</p>

<pre><code>android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId ""your-application-Id""
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName ""1.0""
        testInstrumentationRunner ""android.support.test.runner.AndroidJUnitRunner""
        externalNativeBuild {
            cmake {
                cppFlags ""-std=c++11 -frtti -fexceptions""
            }
        }

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'armeabi', 'armeabi-v7a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    # ADD THIS BLOCK.
    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = ['src/main/JniLibs']
        }
    }

    externalNativeBuild {
        cmake {
            path ""CMakeLists.txt""
        }
    }
    productFlavors {
    }
}
</code></pre>

<hr>

<p>hope it helps you.</p>

<p>p.s. I used FFMPEG libraries that built myself.</p>
",4251216,,,,,2017-10-16 7:52:21,,,,0,,,
Android,46780276,2,,46562806,2017-10-16 23:09:12,2860,,1,,"<p>The <code>developerPayload</code> is not included in the Google Play Billing Library.</p>

<p><a href=""https://issuetracker.google.com/issues/63381481"" rel=""nofollow noreferrer"">https://issuetracker.google.com/issues/63381481</a></p>

<p><a href=""https://github.com/googlesamples/android-play-billing/issues/78"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/issues/78</a></p>

<p>The Google Play server API will verify that the purchase was processed by Google.</p>

<p>If your server needs to verify the authenticity of the client app (when you send the <code>purchaseToken</code> to the server), you can send extra information from the client app.</p>
",1689960,,,,,2017-10-16 23:09:12,,,,1,,,
Android,46788946,2,,46774109,2017-10-17 11:22:07,2860,,1,,"<p>There is an <a href=""https://github.com/googlesamples/android-play-billing"" rel=""nofollow noreferrer"">example</a> provided by Google. In this example, they use additional <code>BillingManager</code> class which can be accessed from different places of your application but it isn't a singleton because it's not only about <code>BillingClient</code> you also have to have <code>PurchasesUpdatedListener</code> which is receiving updates from the <code>BillingManager</code>. </p>

<p>If you want to make <code>BillingClient</code> a singleton you can use <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/src/main/java/com/example/billingmodule/billing/BillingManager.java"" rel=""nofollow noreferrer"">BillingManager</a> from the sample app and manage the list of <code>BillingUpdatesListener</code> by yourself.</p>
",1245166,,,,,2017-10-17 11:22:07,,,,2,,,
Android,46815305,2,,46774218,2017-10-18 16:49:15,2862,,13,,"<p>The problem in your case is, that if you have nullable values Kotlin will generate several constructors for each possible constructor.</p>

<p>That means that you have to define a default constructor and fill it with default values. </p>

<p>If you want to have another one which should be ignored you should make sure to use the parent constructor with all those parameters.</p>

<p>Example:</p>

<pre><code>@Entity(tableName = ""inspections"")
data class Inspection(
@SerializedName(""id"")
var id: Int = 0,

@PrimaryKey
@SerializedName(""guid"")
var guid: String = """",

@SerializedName(""score"")
var score: Double = 0.0,

@SerializedName(""notification_sent_at"")
var notificationSentAt: Date = Date(),

var wasUploaded: Boolean = false)  {

@Ignore
constructor() : this(0, """", 0.0, Date(), false)
}
</code></pre>

<p>In this case only two constructors will be generated ""under the hood"". If you have nullable values you will have all possible constructors available.</p>

<p>Example:</p>

<pre><code>data class Test(var id: Int = 0, var testString: String? = null, var testBool : Boolean? = null) {
   constructor(0)
} 
</code></pre>

<p>generates </p>

<pre><code>constructor(var id:Int)
constructor() : this(0)
constructor(var id:Int, var testString: String)
constructor(var id:Int, var testBool: Boolean) 
constructor(var id:Int, var testString: String, var testBool : Boolean)
// .. and so on
</code></pre>

<p>Since you'r looking for an official documentation, you may want to look at <a href=""https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html"" rel=""noreferrer"">Overloads Generation</a>.</p>

<p>After testing your class which works flawlessly i found in another post that you have to check if you used <code>apply plugin: 'kotlin-kapt'</code> in your Gradle.</p>

<p>Double check that you've valid type converters for your Date class. I wrote <a href=""https://github.com/googlesamples/android-architecture-components/issues/43"" rel=""noreferrer"">that issue</a> longer time ago.</p>

<p>After recoding your stuff above it worked just fine by adding a UserPermissions class like that:</p>

<pre><code>data class UserPermissions(var permissionid: String) 
</code></pre>

<p>Edit: After using your UserPermission class everything worked just fine. Please take care if you use the proper import (util.Date instead of sql.Date for example).</p>

<p>Another problem is that your using an old very buggy library of room. </p>

<p>The current version (while writing this) is</p>

<pre><code>implementation ""android.arch.persistence.room:runtime:1.0.0-beta2""
kapt ""android.arch.persistence.room:compiler:1.0.0-beta2""
implementation ""android.arch.persistence.room:rxjava2:1.0.0-beta2""
</code></pre>

<p>I wrote <a href=""https://github.com/googlesamples/android-architecture-components/issues/172"" rel=""noreferrer"">an issue</a> long time ago </p>
",2032539,,2032539,,2017-10-20 9:27:26,2017-10-20 9:27:26,,,,12,,,
Android,46816791,2,,46811159,2017-10-18 18:22:11,2862,,1,,"<p>As long as your device runs Lollipop or greater, you will want to set your app as a device owner. Note, this is different than device administrator. An app is granted device owner permissions only during device provisioning at the welcome screen of the Google Setup Wizard. The device owner is restricted when it can be set because of the control it has. Only one app can be the device owner.</p>

<p>A kiosk solution will set a device up with an app as the device owner. It will suspend all packages that shouldn't be available using <a href=""https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPackagesSuspended(android.content.ComponentName,%20java.lang.String[],%20boolean)"" rel=""nofollow noreferrer"">setPackagesSuspended</a>.</p>

<p>Some additional links you may find helpful (all require device owner for a COSU/kiosk-mode solution):</p>

<ul>
<li><a href=""https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationHidden(android.content.ComponentName,%20java.lang.String,%20boolean)"" rel=""nofollow noreferrer"">setApplicationHidden</a></li>
<li><a href=""https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addUserRestriction(android.content.ComponentName,%20java.lang.String)"" rel=""nofollow noreferrer"">addUserRestriction</a></li>
<li><a href=""https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_INSTALL_APPS"" rel=""nofollow noreferrer"">DISALLOW_INSTALL_APPS</a></li>
</ul>

<p>Look into the TestDPC app. Google provides source code to it and it will have most, if not everything of what you need. </p>

<p><a href=""https://developers.google.com/android/work/build-dpc"" rel=""nofollow noreferrer"">https://developers.google.com/android/work/build-dpc</a></p>

<p><a href=""https://github.com/googlesamples/android-testdpc"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testdpc</a></p>

<p>Other solutions I've seen (mostly on pre-Lollipop releases) are to use a custom launcher to hide non-approved apps. This custom launcher is sometimes referred to as a secure launcher, but hiding apps instead of suspending them as the device owner is much less effective. Secure launcher, IMO, is a misnomer.</p>
",6917917,,,,,2017-10-18 18:22:11,,,,0,,,
Android,46827625,2,,46727276,2017-10-19 10:16:08,2862,,28,,"<p>NSimon, its great that you start using AAC. </p>

<p>I wrote a <a href=""https://github.com/googlesamples/android-architecture-components/issues/63"" rel=""noreferrer"">issue</a> in the aac's-github before about that.</p>

<p>There are several ways doing that.</p>

<p>One solution would be using a </p>

<p><a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/ref/WeakReference.html"" rel=""noreferrer"">WeakReference</a> to a NavigationController which holds the Context of the Activity. This is a common used pattern for handling context-bound stuff inside a ViewModel.</p>

<p>I highly decline this for several reasons. First: that usually means that you have to keep a reference to your NavigationController which fixes the context leak, but doesnt solve the architecture at all.</p>

<p>The best way (in my oppinion) is using LiveData which is lifecycle aware and can do all the wanted stuff. </p>

<p>Example:</p>

<pre><code>class YourVm : ViewModel() { 

    val uiEventLiveData = SingleLiveData&lt;Pair&lt;YourModel, Int&gt;&gt;()
    fun onClick(item: YourModel) {
        uiEventLiveData.value = item to 3 // can be predefined values
    }
}
</code></pre>

<p>After that you can listen inside your view for changes.</p>

<pre><code>class YourFragmentOrActivity { 
     //assign your vm whatever
     override fun onActivityCreated(savedInstanceState: Bundle?) { 
        var context = this
        yourVm.uiEventLiveData.observe(this, Observer {
            when (it?.second) {
                1 -&gt; { context.startActivity( ... ) }
                2 -&gt; { .. } 
            }

        })
    }
}
</code></pre>

<p>Take care that ive used a modified MutableLiveData, because else it will always emit the latest result for new Observers which leads to bad behaviour. For example if you change activity and go back it will end in a loop.</p>

<pre><code>class SingleLiveData&lt;T&gt; : MutableLiveData&lt;T&gt;() {

    private val mPending = AtomicBoolean(false)

    @MainThread
    override fun observe(owner: LifecycleOwner, observer: Observer&lt;T&gt;) {

        if (hasActiveObservers()) {
            Log.w(TAG, ""Multiple observers registered but only one will be notified of changes."")
        }

        // Observe the internal MutableLiveData
        super.observe(owner, Observer { t -&gt;
            if (mPending.compareAndSet(true, false)) {
                observer.onChanged(t)
            }
        })
    }

    @MainThread
    override fun setValue(t: T?) {
        mPending.set(true)
        super.setValue(t)
    }

    /**
     * Used for cases where T is Void, to make calls cleaner.
     */
    @MainThread
    fun call() {
        value = null
    }

    companion object {
        private val TAG = ""SingleLiveData""
    }
}
</code></pre>

<p><em>Why is that attempt better then using WeakReferences, Interfaces, or any other solution?</em> </p>

<p>Because this event split UI logic with business logic. Its also possible to have multiple observers. It cares about the lifecycle. It doesnt leak anything. </p>

<p>You could also solve it by using RxJava instead of LiveData by using a PublishSubject. (<code>addTo</code> requires <a href=""https://github.com/ReactiveX/RxKotlin"" rel=""noreferrer"">RxKotlin</a>)</p>

<p>Take care about not leaking a subscription by releasing it in onStop().</p>

<pre><code>class YourVm : ViewModel() { 
   var subject : PublishSubject&lt;YourItem&gt;  = PublishSubject.create();
}

class YourFragmentOrActivityOrWhatever {
    var composite = CompositeDisposable() 
    onStart() { 
         YourVm.subject 
             .subscribe( { Log.d(""..."", ""Event emitted $it"") }, { error(""Error occured $it"") }) 
               .addTo(compositeDisposable)         
       }   
       onStop() {
         compositeDisposable.clear()
       }
    }
</code></pre>

<p>Also take care that a ViewModel is bound to an Activity OR a Fragment. You can't share a ViewModel between multiple Activities since this would break the ""Livecycle-Awareness"".</p>

<p>If you need that persist your data by using a database like <a href=""https://developer.android.com/topic/libraries/architecture/room.html"" rel=""noreferrer"">room</a> or share the data using parcels.</p>
",2032539,,2032539,,2017-10-19 10:29:52,2017-10-19 10:29:52,,,,6,,,
Android,46835897,2,,46823116,2017-10-19 17:44:45,2863,,5,,"<p>Are you sending only a single capture request? Or are you running a repeating request in the background, and then only issuing a high-resolution capture on button press?</p>

<p>The former won't really work - you have to have a flow of requests to have the autoexposure, focus, and white balance algorithms converge to good values. A single capture won't be properly metered or focused.</p>

<p>Please take a look at the <a href=""https://github.com/googlesamples/android-Camera2Basic/"" rel=""noreferrer"">Camera2Basic</a> sample; if you replace the TextureView in that sample with just a SurfaceTexture (give it a random texture ID and don't call updateTexImage), then you can have no preview.  But it implements focusing and the precapture trigger correctly, which is critical for you here.  For one, the triggers must only be set on one request, and then you do need to watch the capture results coming back to see when the exposure / focus state changes to FOCUSED or CONVERGED.</p>

<p>I'd also recommend the CONTINUOUS_PICTURE focus mode instead of AUTO; it's likely to get you a focused image faster.</p>
",1344825,,,,,2017-10-19 17:44:45,,,,4,,,
Android,46844610,2,,44922761,2017-10-20 7:53:34,2863,,17,,"<p>Just adding this answer for future reference: the same issue was also raised with the Android Arch Components team a while ago and the <a href=""https://github.com/googlesamples/android-architecture-components/issues/35"" rel=""noreferrer"">official answer</a> for now is:</p>

<blockquote>
  <p>(...) it is just a warning. Should not be a problem.</p>
</blockquote>

<p>This applies to warnings following the format mentioned in the title of the question, and include:</p>

<blockquote>
  <p>w: warning: Supported source version 'RELEASE_7' from annotation processor 'android.arch.lifecycle.LifecycleProcessor' less than -source '1.8'
  w: </p>
  
  <p>w: warning: Supported source version 'RELEASE_7' from annotation processor 'android.arch.persistence.room.RoomProcessor' less than -source '1.8'
  w: </p>
</blockquote>

<p>Basically it's <code>javac</code> informing you that these annotation processors were compiled against and generate code for a different (older) version of Java (Java 7) than your module's source level is set to (Java 8). The reason for this is that the compiler cannot make any promises that the processors will then still behave correctly [but the developers can and did in this particular case].</p>

<p>Note that the warning is still issued if you remove the <code>-Xlint</code> compiler flag, so short of using <code>-nowarn</code> it cannot be suppressed unfortunately.</p>
",1029225,,,,,2017-10-20 7:53:34,,,,1,,,
Android,46846928,2,,46846823,2017-10-20 10:12:24,2863,,1,,"<p>Create a Listener for that. </p>

<pre><code>public interface OnChange() {
  void changed();
}

public class ListenerHolder {
    public static OnChange onChange = new OnChange( ... );
}

MyClass mClass = new MyClass();

@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);
    ListenerHolder.onChange.changed();
}
</code></pre>

<p>Take care that the interface should be static somewhere else then the own activity, else it may be destroyed with the activity. </p>

<p>But there are a few better ways solving that. BroadcastReceivers, Deeplinking, Extending, LiveData (Livecycle-aware), RxJava Subjects, ...</p>

<p>It's a bad design pattern to hook into view events outside a class which is not used for that.</p>

<p>Take a look at <a href=""https://github.com/googlesamples/android-architecture-components"" rel=""nofollow noreferrer"">Android Architecture Components</a>  which uses a Mvvm Pattern including ViewModels and LiveData to survive configuration changes.</p>

<p>If you'r new to Android i highly recommend you to take a look at <a href=""https://developer.android.com/topic/libraries/architecture/index.html"" rel=""nofollow noreferrer"">https://developer.android.com/topic/libraries/architecture/index.html</a> for a proper design of your app. You may also start using Kotlin because it will be the maintained language in future for android.</p>
",2032539,,2032539,,2017-10-20 10:20:17,2017-10-20 10:20:17,,,,2,,,
Android,46871075,2,,4200119,2017-10-22 6:14:48,2865,,1,,"<p>Example from google <a href=""https://github.com/googlesamples/android-ndk/tree/master/sensor-graph"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/master/sensor-graph</a>.Their code allow you controll SENSOR_REFRESH_RATE_HZ for the accelerometer.Written on c++ and connected to java code  through the NDK.</p>
",3774071,,,,,2017-10-22 6:14:48,,,,0,,,
Android,46883664,2,,46804775,2017-10-23 7:08:10,2866,,23,,"<p>I had the same question by the way. And I found a sample <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PersistenceContentProviderSample"" rel=""noreferrer"">here</a> which answers my question. Hope it does the same with you. </p>

<p>In short, this is in the DAO object which would be called from Content Provider's <code>query()</code> method.</p>

<pre><code>/**
 * Select all cheeses.
 *
 * @return A {@link Cursor} of all the cheeses in the table.
 */
@Query(""SELECT * FROM "" + Cheese.TABLE_NAME)
Cursor selectAll();
</code></pre>

<p>Notice how it returns <code>Cursor</code> object. Other operations, you can see for yourself in more detail in the sample.</p>

<p>This here is choice number 3 in the answer by @CommonsWare, I think.</p>
",2420677,,,,,2017-10-23 7:08:10,,,,4,,,
Android,46909007,2,,46908920,2017-10-24 11:10:40,2867,,2,,"<p>I haven't encountered any issues in regards to Kotlin and Android Instant Apps.</p>

<p>Several of the publicly available Android Instant Apps sample apps are written in Kotlin.</p>

<p>See <a href=""https://github.com/googlesamples/android-instant-apps/tree/master/hello-kotlin"" rel=""nofollow noreferrer"">hello-kotlin</a> and <a href=""https://github.com/googlesamples/android-instant-apps"" rel=""nofollow noreferrer"">browse through the samples</a> for implementation details.</p>
",422060,,,,,2017-10-24 11:10:40,,,,2,,,
Android,46939989,2,,46923289,2017-10-25 18:49:43,2869,,5,,"<p>The problem is that any loaded data have to go through the database first, then loading it from the database to the UI, as <code>NetworkBoundResource</code> does. Consequently, What I did is to decouple the persistent database and create a temporary field to load from.</p>

<p>For example if I wanted to edit the <a href=""https://github.com/googlesamples/android-architecture-components/blob/2e09898630783bf863ddd82f1c30817da9a2fe32/GithubBrowserSample/app/src/main/java/com/android/example/github/repository/RepoRepository.java#L179-L229"" rel=""nofollow noreferrer"">original</a> search method, I would suggest:</p>

<pre><code>public LiveData&lt;Resource&lt;List&lt;Repo&gt;&gt;&gt; search(String query) {
    return new NetworkBoundResource&lt;List&lt;Repo&gt;, RepoSearchResponse&gt;(appExecutors) {

        // Temp ResultType
        private List&lt;Repo&gt; resultsDb;

        @Override
        protected void saveCallResult(@NonNull RepoSearchResponse item) {
            // if you don't care about order
            resultsDb = item.getItems();
        }

        @Override
        protected boolean shouldFetch(@Nullable List&lt;Repo&gt; data) {
            // always fetch.
            return true;
        }

        @NonNull
        @Override
        protected LiveData&lt;List&lt;Repo&gt;&gt; loadFromDb() {
            if (resultsDb == null) {
                return AbsentLiveData.create();
            }else {
                return new LiveData&lt;List&lt;Repo&gt;&gt;() {
                    @Override
                    protected void onActive() {
                        super.onActive();
                        setValue(resultsDb);
                    }
                };
            }
        }

        @NonNull
        @Override
        protected LiveData&lt;ApiResponse&lt;RepoSearchResponse&gt;&gt; createCall() {
            return githubService.searchRepos(query);
        }

        @Override
        protected RepoSearchResponse processResponse(ApiResponse&lt;RepoSearchResponse&gt; response) {
            RepoSearchResponse body = response.body;
            if (body != null) {
                body.setNextPage(response.getNextPage());
            }
            return body;
        }
    }.asLiveData();
}
</code></pre>

<p>I ran it and it works.</p>

<p><strong>Edit:</strong> 
I made another simpler class to handle that (There is another answer here by Daniel Wilson has more feature and is updated).</p>

<p>However, this class has no dependencies and is converted to the basics to make fetch response only: </p>

<pre><code>abstract class NetworkBoundResource&lt;RequestType&gt; {

    private val result = MediatorLiveData&lt;Resource&lt;RequestType&gt;&gt;()

    init {
        setValue(Resource.loading(null))
        fetchFromNetwork()
    }

    @MainThread
    private fun setValue(newValue: Resource&lt;RequestType&gt;) {
        if (result.value != newValue) {
            result.value = newValue
        }
    }

    private fun fetchFromNetwork() {
        val apiResponse = createCall()
        result.addSource(apiResponse) { response -&gt;
            result.removeSource(apiResponse)

            when (response) {
                is ApiSuccessResponse -&gt; {
                        setValue(Resource.success(processResponse(response)))
                }

                is ApiErrorResponse -&gt; {
                    onFetchFailed()
                    setValue(Resource.error(response.errorMessage, null))

                }
            }
        }
    }

    protected fun onFetchFailed() {
    }

    fun asLiveData() = result as LiveData&lt;Resource&lt;RequestType&gt;&gt;

    @WorkerThread
    protected open fun processResponse(response: ApiSuccessResponse&lt;RequestType&gt;) = response.body

    @MainThread
    protected abstract fun createCall(): LiveData&lt;ApiResponse&lt;RequestType&gt;&gt;
}
</code></pre>

<p>So when using it, only one method could be implemented <code>createCall()</code>: </p>

<pre><code>fun login(email: String, password: String) = object : NetworkBoundResource&lt;Envelope&lt;User&gt;&gt;() {
    override fun createCall() = api.login(email, password)
}.asLiveData()
</code></pre>
",2489403,,2489403,,2018-07-08 12:26:01,2018-07-08 12:26:01,,,,3,,,
Android,46950207,2,,46949518,2017-10-26 9:10:28,2869,,32,,"<p>First of all, after upgrading there are a few changes to gradle.</p>

<p>Its important to upgrade to the latest gradle version to fix that.</p>

<p>That means that you need to add the proper version for your build gradle which is currently</p>

<pre><code> dependencies {
    classpath 'com.android.tools.build:gradle:3.0.0'
 }
</code></pre>

<p>the next step is to remove your  <code>android-apt</code> which is not longer needed.</p>

<p>its enough to have only <code>apply plugin: 'com.android.application'</code></p>

<p>Onec you have done that, change your dependencies from</p>

<p><code>compile</code> to <code>implementation</code>, <code>apt</code> to <code>annotationProcessor</code> and <code>testCompile</code> to <code>androidTestImplementation</code> </p>

<p>If you have done that invalidate your cache and restart which is very important.</p>

<p>Then it should work.</p>

<p>You can find a working gradle file using the latest version at</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/build.gradle"" rel=""noreferrer"">app build.gradle</a> and <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/build.gradle"" rel=""noreferrer"">project build.gradle</a></p>

<p>p/s : For many people still use Realm old version,</p>

<p>Please update to latest version since old version still use ""android-apt"".</p>
",2032539,,2522405,,2017-10-31 4:21:36,2017-10-31 4:21:36,,,,0,,,
Android,46962809,2,,46940606,2017-10-26 20:00:09,2870,,1,,"<p>Yes, the problem is that Dagger, Databinding and Room uses an Annotation Processor.  That means that one code generator get issues while processing corrupt code by another.</p>

<p>Ive <a href=""https://github.com/googlesamples/android-architecture-components/issues/43"" rel=""nofollow noreferrer"">added an issue long time ago</a>. Google-Team want to improve that, but usually you can see the errors in your gradle log straight at the top. </p>

<p>After developing a little bit with those libraries you'll find the issues easy.</p>
",2032539,,,,,2017-10-26 20:00:09,,,,1,,,
Android,46979581,2,,46975251,2017-10-27 16:25:03,2871,,1,,"<p>Instant apps are only supported in API 21+ devices (<a href=""https://developer.android.com/topic/instant-apps/faqs.html"" rel=""nofollow noreferrer"">link</a>), older devices will only support full apk. </p>

<p>The better approach is to define different minSdk based on your module, like:</p>

<p>You can take a look at Google's analytics sample on <a href=""https://github.com/googlesamples/android-instant-apps/tree/master/analytics"" rel=""nofollow noreferrer"">GitHub</a></p>

<p>Project's gradle</p>

<pre><code>ext {
    buildTools = '26.0.2'
    compileSdk = 26
    minSdk = 15
    minSdkInstant = 21
    versionCode = 1
    versionName = '1.0'
    supportLib = '26.1.0'
    firebaseVer = '10.2.4'
    instantAppsVer = '1.0.0'
}
</code></pre>

<p>Base gradle</p>

<pre><code>android {
    compileSdkVersion rootProject.compileSdk
    buildToolsVersion rootProject.buildTools
    baseFeature true
    defaultConfig {
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.compileSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }
    buildTypes {
        release {}
    }
}
</code></pre>

<p>Installed gradle</p>

<pre><code> defaultConfig {
        applicationId ""com.example.android.instant.analytics""
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.compileSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName

    }
</code></pre>

<p>Instant gradle</p>

<pre><code>android {
    defaultConfig {
        minSdkVersion rootProject.minSdkInstant
    }
}
</code></pre>
",3185230,,3185230,,2017-10-27 16:50:15,2017-10-27 16:50:15,,,,3,,,
Android,47081594,2,,46340106,2017-11-02 17:46:56,2877,,11,,"<p>In this case I would recommend to use one view model which populates three different LiveData objects. This way the UI can get updated whenever one of your three requests gets a response. For details how to use a RecyclerView with LiveData take a look into the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductFragment.java"" rel=""noreferrer"">Google Example</a>.</p>

<p>I think having multiple viewmodels per activity only increases complexity and I do not see any value in doing that.</p>
",8876284,,8876284,,2018-01-25 10:16:16,2018-01-25 10:16:16,,,,3,,,
Android,47087195,2,,23393010,2017-11-03 1:41:40,2877,,3,,"<p>A noob-friendly guide to make Android interact with a LED-lamp.</p>

<p>Step 1. 
Get an tool to scan your BLE device. I used ""Bluetooth LE Lab"" for Win10, but this one will do it as well: <a href=""https://play.google.com/store/apps/details?id=com.macdom.ble.blescanner"" rel=""nofollow noreferrer"">https://play.google.com/store/apps/details?id=com.macdom.ble.blescanner</a></p>

<p>Step 2. 
Analyse the behavior of the BLE device by entering data, I recommend to enter hex values. </p>

<p>Step 3. 
Get the sample of the Android docs. <a href=""https://github.com/googlesamples/android-BluetoothLeGatt"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BluetoothLeGatt</a></p>

<p>Step 4. 
Modify the UUIDs you find in <code>SampleGattAttributes</code></p>

<p>My config: </p>

<pre><code>    public static String CUSTOM_SERVICE = ""0000ffe5-0000-1000-8000-00805f9b34fb"";
    public static String CLIENT_CHARACTERISTIC_CONFIG = ""0000ffe9-0000-1000-8000-00805f9b34fb"";

    private static HashMap&lt;String, String&gt; attributes = new HashMap();

    static {
        attributes.put(CUSTOM_SERVICE, CLIENT_CHARACTERISTIC_CONFIG);
        attributes.put(CLIENT_CHARACTERISTIC_CONFIG, ""LED"");
    }
</code></pre>

<p><a href=""https://i.stack.imgur.com/UP6lL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UP6lL.png"" alt=""enter image description here""></a></p>

<p>Step 5. 
In BluetoothService.java modify <code>onServicesDiscovered</code>:</p>

<pre><code>@Override
public void onServicesDiscovered(BluetoothGatt gatt, int status) {
    if (status == BluetoothGatt.GATT_SUCCESS) {

        for (BluetoothGattService gattService : gatt.getServices()) {
            Log.i(TAG, ""onServicesDiscovered: ---------------------"");
            Log.i(TAG, ""onServicesDiscovered: service="" + gattService.getUuid());
            for (BluetoothGattCharacteristic characteristic : gattService.getCharacteristics()) {
                Log.i(TAG, ""onServicesDiscovered: characteristic="" + characteristic.getUuid());

                if (characteristic.getUuid().toString().equals(""0000ffe9-0000-1000-8000-00805f9b34fb"")) {

                    Log.w(TAG, ""onServicesDiscovered: found LED"");

                    String originalString = ""560D0F0600F0AA"";

                    byte[] b = hexStringToByteArray(originalString);

                    characteristic.setValue(b); // call this BEFORE(!) you 'write' any stuff to the server
                    mBluetoothGatt.writeCharacteristic(characteristic);

                    Log.i(TAG, ""onServicesDiscovered: , write bytes?! "" + Utils.byteToHexStr(b));
                }
            }
        }

        broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);
    } else {
        Log.w(TAG, ""onServicesDiscovered received: "" + status);
    }
}
</code></pre>

<p>Convert the byte-String using this function:</p>

<pre><code>public static byte[] hexStringToByteArray(String s) {
int len = s.length();
byte[] data = new byte[len / 2];
for (int i = 0; i &lt; len; i += 2) {
    data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
            + Character.digit(s.charAt(i + 1), 16));
}
return data;
}
</code></pre>

<p>PS: The above code is far away from production, but I hope it helps those, who are new to BLE. </p>
",2533290,,,,,2017-11-03 1:41:40,,,,1,,,
Android,47097901,2,,44288546,2017-11-03 14:16:33,2878,,3,,"<p>For Lollipop and above you can use the <a href=""https://developer.android.com/reference/android/media/projection/MediaProjection.html"" rel=""nofollow noreferrer"">MediaProjection</a> API of Google to take the screenshot but you need to ask for the permission from the user.</p>

<p>You can find the sample screen capture code using MediaProjection <a href=""https://github.com/googlesamples/android-ScreenCapture"" rel=""nofollow noreferrer"">Here</a></p>

<p>For the devices less then Lollipop you need root permission for it.</p>
",3887560,,,,,2017-11-03 14:16:33,,,,0,,,
Android,47170397,2,,47160241,2017-11-08 2:04:50,2882,,2,,"<p>Let say a simple scenario using your login idea, user login fail and the app need to make a simple Toast or SnackBar to show the related information such as ""Your username and password is incorrect"". The code you need is </p>

<p>Toast (Required <code>Context</code>)</p>

<pre><code>Toast.makeText(context, text, duration).show();
</code></pre>

<p>Snackbar (Required <code>View</code>)</p>

<pre><code>Snackbar.make(findViewById(R.id.myCoordinatorLayout),
                                R.string.email_archived, Snackbar.LENGTH_SHORT);
</code></pre>

<p>If you want to use it inside your ViewModel (I am not familiar with Kotlin)</p>

<pre><code>  @Suppress(""PARAMETER_NAME_CHANGED_ON_OVERRIDE"")
    void function login(final View view) {
      // here I am calling API and on success
      repo.login(result -&gt; {
           if(result.statusCode == 401)
           Toast.makeText(view.getContext(), ""Login failed..."", duration).show();
      });
    }
</code></pre>

<p>You are going to find the reference of the activity in the reverse way, which make more complex code and hard to maintain since every time you need to get the reference of <strong>the activity or context to do something related to the view or activity in the view model instead of the Activity</strong></p>

<p>From the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/ui/search/SearchFragment.java"" rel=""nofollow noreferrer"">google sample</a>, you can see <code>doSearch()</code> function is called when the input is done. And after the search result fetched , the binding will put the latest result back to this observer , and now it is the activity job to update the result in the adapter. </p>

<pre><code>private void initSearchInputListener() {
        binding.get().input.setOnEditorActionListener((v, actionId, event) -&gt; {
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                doSearch(v);
                return true;
            }
            return false;
        });
        binding.get().input.setOnKeyListener((v, keyCode, event) -&gt; {
            if ((event.getAction() == KeyEvent.ACTION_DOWN)
                    &amp;&amp; (keyCode == KeyEvent.KEYCODE_ENTER)) {
                doSearch(v);
                return true;
            }
            return false;
        });
    }

    private void doSearch(View v) {
        String query = binding.get().input.getText().toString();
        // Dismiss keyboard
        dismissKeyboard(v.getWindowToken());
        binding.get().setQuery(query);
        searchViewModel.setQuery(query);
    }

private void initRecyclerView() {

        binding.get().repoList.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                LinearLayoutManager layoutManager = (LinearLayoutManager)
                        recyclerView.getLayoutManager();
                int lastPosition = layoutManager
                        .findLastVisibleItemPosition();
                if (lastPosition == adapter.get().getItemCount() - 1) {
                    searchViewModel.loadNextPage();
                }
            }
        });
        searchViewModel.getResults().observe(this, result -&gt; {
            binding.get().setSearchResource(result);
            binding.get().setResultCount((result == null || result.data == null)
                    ? 0 : result.data.size());
            adapter.get().replace(result == null ? null : result.data);
            binding.get().executePendingBindings();
        });

        searchViewModel.getLoadMoreStatus().observe(this, loadingMore -&gt; {
            if (loadingMore == null) {
                binding.get().setLoadingMore(false);
            } else {
                binding.get().setLoadingMore(loadingMore.isRunning());
                String error = loadingMore.getErrorMessageIfNotHandled();
                if (error != null) {
                    Snackbar.make(binding.get().loadMoreBar, error, Snackbar.LENGTH_LONG).show();
                }
            }
            binding.get().executePendingBindings();
        });
    }
</code></pre>

<p>Also, according to the answer from @Emanuel S, you will see his argument </p>

<blockquote>
  <p>WeakReference to a NavigationController which holds the Context of the
  Activity. This is a common used pattern for handling context-bound
  stuff inside a ViewModel.</p>
  
  <p>I highly decline this for several reasons. First: that usually means
  that you have to keep a reference to your NavigationController which
  fixes the context leak, but doesnt solve the architecture at all.</p>
  
  <p>The best way (in my oppinion) is using LiveData which is lifecycle
  aware and can do all the wanted stuff.</p>
</blockquote>

<p>Another question you may think about it if you implement ui action inside the viewmodel  , if you get a NullPointerException in your view or context or do some enhancement about it, which class you will find first ? ViewModel or Activity ? Since the first one you hold the UI action , the second one you hold the data binding. Both may be possible in the troubleshoot. </p>
",2877822,,,,,2017-11-08 2:04:50,,,,0,,,
Android,47180652,2,,47180304,2017-11-08 13:11:21,2883,,1,,"<p>You need to add the dependency inside the dependencies block in your <strong>module</strong> <code>build.gradle</code> <strong><em>not</em></strong> in your project <code>build.gradle</code>.</p>

<p>You can see the sample how adding the dependency from <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/mobile/build.gradle"" rel=""nofollow noreferrer"">UniversalMusicPlayer sample</a>. Here the sample of <strong>module</strong> build.gradle without the license:</p>

<pre><code>apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion ""26.0.1""

    defaultConfig {
        applicationId ""com.example.android.uamp""
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 2
        versionName ""1.1""
        testInstrumentationRunner ""android.support.test.runner.AndroidJUnitRunner""
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    provided 'com.google.android.wearable:wearable:2.0.3'

    compile 'com.google.android.gms:play-services-cast-framework:11.0.1'
    compile 'com.google.android.support:wearable:2.0.3'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:cardview-v7:26.1.0'
    compile 'com.android.support:mediarouter-v7:26.1.0'
    compile 'com.android.support:leanback-v17:26.1.0'
    compile 'com.android.support:design:26.1.0'

    compile 'com.google.android.exoplayer:exoplayer:r2.5.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:26.1.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}
</code></pre>

<p>Take a look at the dependencies block:</p>

<pre><code>dependencies {
   ...
}
</code></pre>

<p>You need to add <code>debugCompile 'com.amitshekhar.android:debug-db:1.0.0'
</code> there. So it will become:</p>

<pre><code>dependencies {
   ...
   debugCompile 'com.amitshekhar.android:debug-db:1.0.0
}
</code></pre>
",4758255,,,,,2017-11-08 13:11:21,,,,2,,,
Android,47202334,2,,47202160,2017-11-09 12:52:35,2884,,1,,"<p>I think its happening because of you are using old method of getPlace</p>

<p>try to swap the arguments, by changing it from:</p>

<pre><code>Place place = PlacePicker.getPlace(data, this);
</code></pre>

<p>to </p>

<pre><code>Place place = PlacePicker.getPlace(getContext(), data);
</code></pre>

<hr>

<p><strong>Update #2</strong></p>

<p>Enable Google places API in the developer console and add these lines to AndroidManifest</p>

<pre><code>&lt;meta-data
  android:name=""com.google.android.geo.API_KEY""
  android:value=""ADD_YOUR_API_KEY_HERE"" /&gt;
</code></pre>

<hr>

<p><strong>Update #3</strong></p>

<p>after some search, it looks like there is others having same issue. Look at these links:</p>

<p><a href=""https://github.com/zhangtaii/react-native-google-place-picker/issues/21"" rel=""nofollow noreferrer"">https://github.com/zhangtaii/react-native-google-place-picker/issues/21</a></p>

<p><a href=""https://www.codesd.com/item/google-placepicker-closes-immediately-after-launch-with-result-code-2.html"" rel=""nofollow noreferrer"">https://www.codesd.com/item/google-placepicker-closes-immediately-after-launch-with-result-code-2.html</a></p>

<p><a href=""https://github.com/googlesamples/android-play-places/issues/13"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-places/issues/13</a></p>
",1317522,,1317522,,2017-11-09 14:12:17,2017-11-09 14:12:17,,,,16,,,
Android,47211381,2,,1513485,2017-11-09 20:56:41,2884,,4,,"<p><a href=""https://github.com/googlesamples"" rel=""noreferrer"">GoogleSamples</a> has verbose example using latest FusedLocationProviderApi.
Unfortunately the most upvoted answers are out of date. </p>

<p>Follow the below examples to implement Location Services using FusedLocationProviderApi</p>

<p><a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates"" rel=""noreferrer"">https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates</a></p>

<p><a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationUpdates/app/src/main/java/com/google/android/gms/location/sample/locationupdates/MainActivity.java"" rel=""noreferrer"">https://github.com/googlesamples/android-play-location/blob/master/LocationUpdates/app/src/main/java/com/google/android/gms/location/sample/locationupdates/MainActivity.java</a></p>
",1946016,,,,,2017-11-09 20:56:41,,,,0,,,
Android,47236867,2,,47236796,2017-11-11 10:25:07,2885,,9,,"<p><code>deps</code> is an instance of <code>Map</code> class that is set on <code>project</code> instance and defined in <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/versions.gradle#L5"" rel=""noreferrer"">versions.gradle</a> file. This <code>versions.gradle</code> file is in turn <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/build.gradle#L20"" rel=""noreferrer"">applied</a> in root <code>build.gradle</code> script, hence <code>deps</code> can be used in subprojects.</p>
",542270,,,,,2017-11-11 10:25:07,,,,0,,,
Android,47270509,2,,47194606,2017-11-13 17:50:28,2888,,1,,"<p>You need to set the camera's auto-exposure mode to one of the flash-using ones; generally that's either <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_AUTO_FLASH"" rel=""nofollow noreferrer"">AE_MODE_ON_AUTO_FLASH</a> or <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_ALWAYS_FLASH"" rel=""nofollow noreferrer"">AE_MODE_ON_ALWAYS_FLASH</a>.</p>

<p>You can check which modes are available on your device via <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AE_AVAILABLE_MODES"" rel=""nofollow noreferrer"">AE_AVAILABLE_MODES</a>.</p>

<p>Then you'll need to use the <a href=""https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html#CONTROL_AE_PRECAPTURE_TRIGGER"" rel=""nofollow noreferrer"">AE precapture trigger</a> before doing the main image capture, so that a preflash can be fired for accurate flash brightness control.</p>

<ol>
<li>Ensure your preview request has the desired AE flash mode, have it set as the repeating request for your capture session.</li>
<li>Create a new capture request builder with your preview settings.</li>
<li>Set the precapture trigger to START for that builder</li>
<li>Create one request with that builder, and call CameraCaptureSession.capture() with it</li>
<li>Wait for the <a href=""https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_STATE"" rel=""nofollow noreferrer"">AE_STATE</a> of PRECAPTURE to appear and disappear; during this time the camera device may light up the flash to measure how bright it needs to be.</li>
<li>Once AE_STATE_PRECAPTURE ends, issue the high-resolution capture request using the STILL_CAPTURE template (which sets the capture intent control to STILL_CAPTURE, triggering the main flash firing).</li>
</ol>

<p>The <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">Camera2Basic</a> sample includes all this for flash operation, as a sample to follow. It uses AE_MODE_AUTO_FLASH if supported by the device.</p>
",1344825,,,,,2017-11-13 17:50:28,,,,0,,,
Android,47292362,2,,47283709,2017-11-14 17:58:14,2889,,1,,"<p>I think this is still an open issue, please see <a href=""https://github.com/googlesamples/android-vision/issues/62"" rel=""nofollow noreferrer"">link</a> for details. One workaround for this as stated by a developer:</p>

<blockquote>
  <p>Right, the barcode API generally doesn't support color-inverted codes. There's no parameter or option to control this at the moment. Though some APIs support them, I don't believe it's a common feature.</p>
  
  <p>For a workaround, you could preprocess the colors in the bitmap before passing them to the barcode API (perhaps inverting colors on alternate frames).</p>
</blockquote>

<p>Hope this helps.</p>
",5995040,,,,,2017-11-14 17:58:14,,,,0,,,
Android,47318747,2,,47309359,2017-11-15 22:58:48,2890,,4,,"<p>You can take a look into <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-live/"" rel=""noreferrer"">this Google Sample</a>, which applies Architecture Components and the Data Binding Library together.</p>
",8876284,,,,,2017-11-15 22:58:48,,,,0,,,
Android,47339205,2,,47219596,2017-11-16 21:17:07,2891,,1,,"<p>If you implement MediaSession, the title will appear. The system evaluates the MediaSession similar to how notifications with MediaSession work on phones. </p>

<p>There is an <a href=""https://github.com/googlesamples/android-PictureInPicture/blob/master/app/src/main/java/com/example/android/pictureinpicture/MediaSessionPlaybackActivity.java"" rel=""nofollow noreferrer"">activity that demonstrates</a> how MediaSession can affect PIP actions in the android-PictureInPicture sample. This is a bug in the sample, thank you for logging it.</p>

<p>To get the title to appear, you will need to update the meta data on the media session.</p>

<pre><code>MediaMetadataCompat metadata = new MediaMetadataCompat.Builder()
            .putString(
                 MediaMetadataCompat.METADATA_KEY_DISPLAY_TITLE, 
                ""Big Buck Bunny"")
            ...
            .build();
mSession.setMetadata(metadata);
</code></pre>
",8677540,,,,,2017-11-16 21:17:07,,,,0,,,
Android,47360988,2,,41926094,2017-11-17 23:55:00,2892,,1,,"<p>There are two places where you may want to do those settings:</p>

<p>· If you want to do it before the preview starts, then the better place would be inside of the overrided method onConfigured within the createCameraPreviewSession() void (line 696 in the <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow noreferrer"">Camera2BasicFragment</a> file provided in the Google's <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">Camera2Basic</a> sample:</p>

<pre><code>private void createCameraPreviewSession() {
    try {
        SurfaceTexture texture = mTextureView.getSurfaceTexture();
        assert texture != null;

        // We configure the size of default buffer to be the size of camera preview we want.
        texture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

        // This is the output Surface we need to start preview.
        Surface surface = new Surface(texture);

        // We set up a CaptureRequest.Builder with the output Surface.
        mPreviewRequestBuilder
                = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
        mPreviewRequestBuilder.addTarget(surface);

        // Here, we create a CameraCaptureSession for camera preview.
        mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),
                new CameraCaptureSession.StateCallback() {

                    @Override
                    public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                        // The camera is already closed
                        if (null == mCameraDevice) {
                            return;
                        }

                        // When the session is ready, we start displaying the preview.
                        mCaptureSession = cameraCaptureSession;
                        try {


                            //Place here your custom camera settings


                            // Start displaying the camera preview.
                            mPreviewRequest = mPreviewRequestBuilder.build();
                            mCaptureSession.setRepeatingRequest(mPreviewRequest,
                                    mCaptureCallback, mBackgroundHandler);
                        } catch (CameraAccessException e) {
                            e.printStackTrace();
                        }
                    }

                    @Override
                    public void onConfigureFailed(
                            @NonNull CameraCaptureSession cameraCaptureSession) {
                        showToast(""Failed"");
                    }
                }, null
        );
    } catch (CameraAccessException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>· If you want to do the settings after the preview has started and in runtime just call your <em>disableAutomatics()</em> from the UI or anywhere else and it should work fine.</p>

<p>Note that you don't have to close the older <em>CaptureSession</em> by calling its <em>CaptureSession.close()</em> method as explained in an answer to <a href=""https://stackoverflow.com/questions/35620400/changing-flash-setting-of-android-camera-2-at-runtime"">this other question</a> because the new replaces the older one.</p>

<hr>

<p>However I am not sure about setting the exposure time value manually as you did in your question</p>

<blockquote>
  <p>mPreviewRequestBuilder.set(CaptureRequest.SENSOR_EXPOSURE_TIME, 1000000L);</p>
</blockquote>

<p>because you may get unexpected results. What I know is that doing so is usually discouraged and it's preferred instead to let the camera adjust by its own and then call AE (auto-exposure) lock:</p>

<pre><code>mPreviewRequestBuilder.set(CaptureRequestCONTROL_AE_LOCK, true);
</code></pre>

<p>You can check the CONTROL_AE_LOCK reference <a href=""https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html#CONTROL_AE_MODE"" rel=""nofollow noreferrer"">here</a>.</p>

<p>But if your code needs a fixed exposure time then it should work.</p>
",7287236,,,,,2017-11-17 23:55:00,,,,0,,,
Android,47387942,2,,47387202,2017-11-20 8:39:28,2894,,1,,"<p>From my experience, 1x1 pixel preview is not reliable, and many devices will not work with this correctly. On some devices, you can push the SurfaceView off screen with clever layout (e.g. huge left margin), but not on others. It is possible to hide a SurfaceView under other elements of your view hierarchy, but this doesn't always work smoothly, because the framework sometimes creates a Surface too late (I believe it's a bug on some devices, not intended). </p>

<p>It is safer to use TextureView, as in the <a href=""https://github.com/googlesamples/android-MediaRecorder"" rel=""nofollow noreferrer"">MediaRecorder official sample</a>. You can set visibility of the TextureView to <strong>hidden</strong>, or hide it behind some other view, and you can make it very small. Here you can find more details: <a href=""https://stackoverflow.com/a/21447945/192373"">https://stackoverflow.com/a/21447945/192373</a>.</p>
",192373,,,,,2017-11-20 8:39:28,,,,0,,,
Android,47409546,2,,47367576,2017-11-21 9:28:13,2895,,6,,"<p>As usual, Google's own <a href=""https://github.com/googlesamples/android-AutofillFramework/tree/master/afservice"" rel=""nofollow noreferrer"">examples repository provides a good starting point</a> for learning the Autofill Framework's API, and covers much more material than I can fit into an answer. Here's an overview of the key concepts. From the description in the <a href=""https://developer.android.com/guide/topics/text/autofill.html"" rel=""nofollow noreferrer"">documentation</a>, we want to create an Autofill <em>service</em> that will handle requests from other apps (the clients) to store and retrieve Autofill field data. </p>

<p>First, we need to create a service provider class that fulfills this contract. We can extend the base <a href=""https://developer.android.com/reference/android/service/autofill/AutofillService.html"" rel=""nofollow noreferrer""><code>AutofillService</code> class</a>: </p>

<pre class=""lang-java prettyprint-override""><code>import android.service.autofill.AutofillService;
...
public class MyAutofillService extends AutofillService {
    ...
    @Override
    public void onFillRequest(FillRequest request, CancellationSignal cancellationSignal,
        FillCallback callback) { ... }

    @Override
    public void onSaveRequest(SaveRequest request, SaveCallback callback) { ... }
}
</code></pre>

<p>The service's <a href=""https://developer.android.com/reference/android/service/autofill/AutofillService.html#onFillRequest(android.service.autofill.FillRequest,%20android.os.CancellationSignal,%20android.service.autofill.FillCallback)"" rel=""nofollow noreferrer""><code>onFillRequest()</code></a> and <a href=""https://developer.android.com/reference/android/service/autofill/AutofillService.html#onSaveRequest(android.service.autofill.SaveRequest,%20android.service.autofill.SaveCallback)"" rel=""nofollow noreferrer""><code>onSaveRequest()</code></a> methods are the most significant for our understanding. The Android system calls <code>onFillRequest()</code> to determine if our service can autofill fields for a particular activity, and gives the method a <a href=""https://developer.android.com/reference/android/service/autofill/FillRequest.html"" rel=""nofollow noreferrer""><code>FillRequest</code></a> which contains the context and view information that our service will examine for fillable fields. When the service finishes, it invokes the provided <code>callback</code> with the appropriate autofill data.</p>

<p>Here's a <em>dramatically</em> simplified overview of the basic steps needed to provide autofill suggestions for a <code>FillRequest</code>: </p>

<pre><code>@Override
public void onFillRequest(FillRequest request, CancellationSignal signal, FillCallback callback) {
    List&lt;FillContext&gt; contexts = request.getFillContexts();
    AssistStructure structure = contexts.get(contexts.size() - 1);
    WindowNode windowNode = structure.getWindowNodeAt(0);
    ViewNode viewNode = windowNode.getRootViewNode(); // pretend this is an EditText

    String suggestionText = ""This will appear in the autofill list for 'viewNode'."";
    RemoteViews suggestion = new RemoteViews(getPackageName(), R.layout.autofill_suggestion);
    suggestion.setTextViewText(R.id.autofill_suggestion, suggestionText);

    Dataset suggestionDataset = new Dataset.Builder(suggestion) 
        .setValue(viewNode.getAutoFillId(), AutofillValue.forText(suggestionText))
        .build();

    FillResponse response = new FillResponse.Builder() 
        .addDataset(suggestionDataset)
        .build();

    callback.onSuccess(response);
}
</code></pre>

<p>As we can see, the Autofill API requires a lot of code just to provide a single, static autofill suggestion for a <code>View</code> that we already know in advance&mdash;the example assumes that <code>viewNode</code> is a text input field that we want to provide autofill suggestions for. In reality, this example is too simple, but I wanted to clearly show the minimum implementation. For each <code>WindowNode</code>, we need to walk through the view tree of the root <a href=""https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html"" rel=""nofollow noreferrer""><code>ViewNode</code></a> and each of its children to find each of the input fields that our service wishes to provide autofill data for, and then create a <a href=""https://developer.android.com/reference/android/widget/RemoteViews.html"" rel=""nofollow noreferrer""><code>RemoteViews</code></a> and <a href=""https://developer.android.com/reference/android/service/autofill/Dataset.html"" rel=""nofollow noreferrer""><code>Dataset</code></a> that contains the autofill suggestion for each field that we'll add to the <a href=""https://developer.android.com/reference/android/service/autofill/FillResponse.html"" rel=""nofollow noreferrer""><code>FillResponse</code></a> using <a href=""https://developer.android.com/reference/android/service/autofill/FillResponse.Builder.html"" rel=""nofollow noreferrer""><code>FillResponse.Builder.addDataset()</code></a>. This example doesn't show the plain XML layout for the <code>R.layout.autofill_suggestion</code> <code>TextView</code> used to create the suggestion display item for a <code>RemoteViews</code>. </p>

<p>Similarly, Android calls <code>onSaveRequest()</code> when a user wants to save the data in an activity's fields for future completion requests and injects a <a href=""https://developer.android.com/reference/android/service/autofill/SaveRequest.html"" rel=""nofollow noreferrer""><code>SaveRequest</code></a> that our service uses to find autofill data to remember.</p>

<p>The specific implementation of each of these methods will depend on the type of Autofill data that our app provides. Autofill services <em>must</em> conscientiously examine the characteristics of each field and <em>carefully</em> select a set of appropriate autofill suggestions to avoid leaking the user's data to a malicious client activity (see comments). For a password manager in particular, we need to pay special attention to properly authenticating a user of the service and providing a safe set of suggestions when requesting and saving autofill data.</p>

<p>We can now <a href=""https://developer.android.com/guide/topics/manifest/service-element.html"" rel=""nofollow noreferrer"">register the service</a> in the <code>&lt;application&gt;</code> block of the project's <i>AndroidManifest.xml</i>: </p>

<pre class=""lang-xml prettyprint-override""><code>&lt;service
    android:name="".MyAutofillService""
    android:label=""Multi-Dataset Autofill Service""
    android:permission=""android.permission.BIND_AUTOFILL_SERVICE""&gt;
    &lt;meta-data
        android:name=""android.autofill""
        android:resource=""@xml/multidataset_service"" /&gt;

    &lt;intent-filter&gt;
        &lt;action android:name=""android.service.autofill.AutofillService"" /&gt;
    &lt;/intent-filter&gt;
&lt;/service&gt;
</code></pre>

<p>As shown, this binds our Autofill service as an available option that appears in the Autofill services list show in the question. The <code>android:name</code> attribute must match the name of our <code>AutofillService</code> class, and our app must declare the <code>BIND_AUTOFILL_SERVICE</code> permission. Change the value of <code>android:label</code> to a suitable name for the service (for example, ""Autofill with Password Manager""). Alternatively, set this in a string resource. Note also that we should provide a ""settings"" activity used to configure our service which we specify in the <code>&lt;meta‑data&gt;</code> for <code>android.autofill</code>: </p>

<pre class=""lang-xml prettyprint-override""><code>&lt;autofill-service android:settingsActivity=""foo.bar.SettingsActivity"" /&gt;
</code></pre>

<p>Then, the user can enable our Autofill service from their device Settings. We can broadcast the <a href=""https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_SET_AUTOFILL_SERVICE"" rel=""nofollow noreferrer""><code>ACTION_REQUEST_SET_AUTOFILL_SERVICE</code></a> intent during setup or first launch to assist the user in finding this screen.</p>
",5209322,,5209322,,2017-11-23 5:30:25,2017-11-23 5:30:25,,,,3,,,
Android,47414698,2,,46391543,2017-11-21 13:47:29,2896,,1,,"<p>You are referring to the old Google Play Billing library (v3), which if you really want to implement you can find it as part of the TrivialDrive demo app below. You can copy parts that you need (aidl, util) and change your app as per demo sample.<br/>
<a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive</a></p>

<p>~~~</p>

<p>The new version of Play Billing library v1.0 is covered by Garbriele Mariotti's answer (above). If you happen to use a platform that doesn't support Maven, Gradle or AARs I will be making it available soon (UPDAT to follow) as an Eclipse based project that you may be able to import into your IDE the same way you wanted to import the old library downloaded through SDK Manager (which probably doesn't include it anymore as they dev team doens't want you to use it anymore).</p>

<p>If you just want to download it and look at it, you can download it from here: <br/>
<a href=""https://google.bintray.com/play-billing/com/android/billingclient/billing/1.0/"" rel=""nofollow noreferrer"">https://google.bintray.com/play-billing/com/android/billingclient/billing/1.0/</a></p>

<p>~~~</p>

<p>Google Play Billing 1.0 library for Eclipse available from here:<br/>
<a href=""https://github.com/dandar3/android-google-services-billing/tree/1.0"" rel=""nofollow noreferrer"">https://github.com/dandar3/android-google-services-billing/tree/1.0</a></p>
",308836,,308836,,2017-11-28 22:26:39,2017-11-28 22:26:39,,,,0,,,
Android,47422589,2,,47307796,2017-11-21 20:57:40,2896,,1,,"<p>As you say answering your question is not easy because there are multiple solutions to achieve what you want. </p>

<p>I think you should read about Object Detection especially about Convolutional Neural Nets (CNN). Good libs for the detection task are probably <a href=""https://opencv.org/platforms/android/"" rel=""nofollow noreferrer"">OpenCV</a> and Googles <a href=""https://www.tensorflow.org/mobile/android_build"" rel=""nofollow noreferrer"">Tensorflow</a>. Also samples in Googles <a href=""https://developers.google.com/vision/android/getting-started"" rel=""nofollow noreferrer"">Mobile Vision API</a> can show you how to have a live feed from the camera and manage overlaying it with your paintings. <a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/ocr-codelab/ocr-reader-complete"" rel=""nofollow noreferrer"">This</a> example I personally found very helpful to see where/how to implement a detector as well as a graphic overlay even if its for Text Recognition. Finally <a href=""https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/android"" rel=""nofollow noreferrer"">here</a> you have the Android Tensorflow demos. </p>

<p>But as easy as it seems it's still a long way to go. For this kind of implementation with Tensorflow you need to...</p>

<ol>
<li>Collect sample images with walls and what is not a wall ;)</li>
<li>Think about preprocessing e.g. rescale, grayscale and filter and implement it</li>
<li>Write and tune your Python code for your CNN model</li>
<li>Train and evaluate your model with Python</li>
<li>Port your model to Android</li>
<li>Paint on the appropriate area  </li>
</ol>

<p>Another approach I can think of would be with <a href=""https://en.wikipedia.org/wiki/Edge_detection"" rel=""nofollow noreferrer"">Edge Detection</a> and <a href=""https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_houghlines/py_houghlines.html"" rel=""nofollow noreferrer"">Hough Line Transform</a> but I suggest you to use Neural Nets because results are probably better, Tensorflow (Mobile or Lite) is already optimized for Android and it's cutting edge tech ;)</p>

<p>Hope this helps!</p>
",7089630,,,,,2017-11-21 20:57:40,,,,0,,,
Android,47446145,2,,47383674,2017-11-23 1:09:10,2897,,3,,"<p>I solved this problem referencing this, <a href=""https://github.com/googlesamples/android-ndk/issues/450"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/issues/450</a></p>
",4665928,,,,,2017-11-23 1:09:10,,,,0,,,
Android,47497481,2,,47367042,2017-11-26 15:01:49,2901,,1,,"<p>I found this <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingSample/app/src/main/java/paging/android/example/com/pagingsample"" rel=""nofollow noreferrer"">paging example</a> by google. Based on that I wrote this view model (see <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PagingSample/app/src/main/java/paging/android/example/com/pagingsample/CheeseViewModel.kt"" rel=""nofollow noreferrer"">CheeseViewModel</a>):</p>

<pre><code>class MyViewModel(app: Application) : AndroidViewModel(app) {

    val data = MyDatabase.get(app).dao.get().create(
            /* initial load position */ 0,
            PagedList.Config.Builder()
                    .setPageSize(50)
                    .setPrefetchDistance(50)
                    .build())
}
</code></pre>

<p>And I added this to my DB class (see <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PagingSample/app/src/main/java/paging/android/example/com/pagingsample/CheeseDb.kt"" rel=""nofollow noreferrer"">CheeseDb</a>):</p>

<pre><code>companion object {

    // Google example noted that this might not be the best
    // solution and to use a dependency injection framework instead.

    private var instance: MyDatabase? = null

    @Synchronized
    fun get(context: Context): MyDatabase {
        return instance ?: Room.databaseBuilder(context.applicationContext,
                MyDatabase::class.java, ""myDB"")
                .build()
                .also { instance = it }
    }
}
</code></pre>

<p>So that answers the question on how to get a DAO instance in a view model. Regarding the other question, I guess that the <a href=""https://developer.android.com/topic/libraries/architecture/paging.html#classes"" rel=""nofollow noreferrer"">paging library</a> example was incomplete.</p>
",1020871,,,,,2017-11-26 15:01:49,,,,0,,,
Android,47517685,2,,47517469,2017-11-27 18:39:30,2902,,1,,"<p>You can't get fingerprint template or image from android Fingerprint API. Fingerprint data are stored in a secure place by android system and are not accessible.</p>

<p>But you can ask the system to authenticate the user.</p>

<p>Here <a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow noreferrer"">sample code</a></p>

<p>The doc, in section <a href=""https://developer.android.com/about/versions/marshmallow/android-6.0.html"" rel=""nofollow noreferrer"">Fingerprint Authentication</a></p>
",5955784,,,,,2017-11-27 18:39:30,,,,0,,,
Android,47525583,2,,46627624,2017-11-28 6:53:28,2902,,5,,"<p><strong>Updated:- 5 December 2017</strong></p>

<p>I was fortunate to meet <a href=""https://twitter.com/ceruleanotter?lang=en"" rel=""noreferrer"">Lyla Fujiwara</a>, during Google Developer Days, India where I asked her the same question. She suggested me to user <code>Transformations.switchMap()</code>. Following is the updated solution -</p>

<pre><code>@Singleton
public class SplashScreenViewModel extends AndroidViewModel {
  private final APIClient apiClient;
  // This is the observable which listens for the changes
  // Using 'Void' since the get method doesn't need any parameters. If you need to pass any String, or class
  // you can add that here
  private MutableLiveData&lt;Void&gt; networkInfoObservable;
  // This LiveData contains the information required to populate the UI
  private LiveData&lt;Resource&lt;NetworkInformation&gt;&gt; networkInformationLiveData;

  @Inject
  SplashScreenViewModel(@NonNull APIClient apiClient, @NonNull Application application) {
    super(application);
    this.apiClient = apiClient;

    // Initializing the observable with empty data
    networkInfoObservable = new MutableLiveData&lt;Void&gt;();
    // Using the Transformation switchMap to listen when the data changes happen, whenever data 
    // changes happen, we update the LiveData object which we are observing in the MainActivity.
    networkInformationLiveData = Transformations.switchMap(networkInfoObservable, input -&gt; apiClient.getNetworkInformation());
  }

  /**
   * Function to get LiveData Observable for NetworkInformation class
   * @return LiveData&lt;Resource&lt;NetworkInformation&gt;&gt; 
   */
  public LiveData&lt;Resource&lt;NetworkInformation&gt;&gt; getNetworkInfoObservable() {
    return networkInformationLiveData;
  }

  /**
   * Whenever we want to reload the networkInformationLiveData, we update the mutable LiveData's value
   * which in turn calls the `Transformations.switchMap()` function and updates the data and we get
   * call back
   */
  public void setNetworkInformation() {
    networkInfoObservable.setValue(null);
  }
}
</code></pre>

<p>The Activity's code will be updated as -</p>

<pre><code>final SplashScreenViewModel splashScreenViewModel =
  ViewModelProviders.of(this, viewModelFactory).get(SplashScreenViewModel.class);
observeViewModel(splashScreenViewModel);
// This function will ensure that Transformation.switchMap() function is called
splashScreenViewModel.setNetworkInformation();
</code></pre>

<p>This looks the most prominent and proper solution to me for now, I will update the answer if I better solution later.</p>

<p>Watch her <a href=""https://www.youtube.com/watch?v=SlZVYkhoSq8"" rel=""noreferrer"">droidCon NYC video</a> for more information on LiveData. The official Google repository for LiveData is <a href=""https://github.com/googlesamples/android-architecture-components/"" rel=""noreferrer"">https://github.com/googlesamples/android-architecture-components/</a> look for <code>GithubBrowserSample</code> project.</p>

<p><strong>Old Code</strong></p>

<p>I have not been able find a proper solution to this, but this works so far -
Declare <code>ViewModel</code> outside the <code>observeViewModel()</code> and change the function like this -</p>

<pre><code>private void observeViewModel(final HomeViewModel homeViewModel) {
homeViewModel.getWeatherListObservable().observe(this, weatherModelApiResponse -&gt; {
  if (weatherModelApiResponse.isSuccessful()) {
    mErrorView.setVisibility(View.GONE);
    mBinding.ivLoading.setVisibility(View.GONE);
    try {
      setDataToViews(weatherModelApiResponse.getData());
    } catch (ParseException e) {
      e.printStackTrace();
    }
  } else if (!weatherModelApiResponse.isSuccessful()) {
    mBinding.ivLoading.setVisibility(View.GONE);
    mDialogUtils.showToast(this, weatherModelApiResponse.getError().getMessage());
    mErrorView.setVisibility(View.VISIBLE);
  }
});
}
</code></pre>

<p>Update <strong>HomeViewModel</strong> to -</p>

<pre><code>public class HomeViewModel extends AndroidViewModel {

private final LiveData&lt;ApiResponse&lt;WeatherModel&gt;&gt; weatherListObservable;

@Inject public HomeViewModel(Application application, ContentRepository contentRepository) {
super(application);
getWeattherListData();
}

public void getWeatherListData() {
this.weatherListObservable = contentRepository.getWeatherListData();
}
public LiveData&lt;ApiResponse&lt;WeatherModel&gt;&gt; getWeatherListObservable() {
return weatherListObservable;
}

}
</code></pre>

<p>Now <strong>Retry button</strong>, call the <code>observeViewModel</code> function again and pass <code>mHomeViewModel</code> to it. Now you should be able to get a response.</p>
",1979347,,1979347,,2017-12-05 6:51:01,2017-12-05 6:51:01,,,,4,,,
Android,47530902,2,,46750600,2017-11-28 11:51:16,2902,,1,,"<p>The <code>ActivityRecognitionApi</code> is really deprecated. Since version <strong>11.4.0</strong>, the <code>ActivityRecognitionClient</code> is to be used.</p>

<p><strong>Example Use:</strong></p>

<pre><code>ActivityRecognitionClient activityRecognitionClient = ActivityRecognition.getClient(context);
Task task = activityRecognitionClient.requestActivityUpdates(1000, pendingIntent);
</code></pre>

<p>For more info see the <a href=""https://developers.google.com/android/reference/com/google/android/gms/location/ActivityRecognitionClient"" rel=""nofollow noreferrer"">docs</a> or <a href=""https://github.com/googlesamples/android-play-location/blob/master/ActivityRecognition/app/src/main/java/com/google/android/gms/location/sample/activityrecognition/MainActivity.java"" rel=""nofollow noreferrer"">sample android app</a>.</p>
",1732709,,,,,2017-11-28 11:51:16,,,,1,,,
Android,47544058,2,,47540528,2017-11-29 2:25:20,2903,,2,,"<p>That zip file is the instant app. It can contain multiple APKs, one for each feature module, one for the base, and potentially some configuration APKs. It's ok if it only contains one APK. That will be the base.</p>

<p>Each of the APKs in the zip will have an AndroidManifest.xml, which you can view easily using APK Analyzer. They should each have a packageName, and they should all match, and that value is the package name of the instant app.</p>

<p>The installed app's package name is in the usual place, in that APK's AndroidManifest.xml.</p>

<p>The <a href=""https://github.com/googlesamples/android-instant-apps"" rel=""nofollow noreferrer"">samples</a> demonstrate the recommended way to structure your project, and that will produce and instant and an installed app with the same package name.</p>
",407058,,,,,2017-11-29 2:25:20,,,,1,,,
Android,47558694,2,,9870435,2017-11-29 17:43:51,2904,,2,,"<p><strong>Android NDK official <code>hello-libs</code> CMake example</strong></p>

<p><a href=""https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs</a></p>

<p>Just worked for me on Ubuntu 17.10 host, Android Studio 3, Android SDK 26, NDK 15.2. so I strongly recommend that you base your project on it.</p>

<p>The shared library is called <code>libgperf</code>, the key code parts are:</p>

<ul>
<li><p><a href=""https://github.com/googlesamples/android-ndk/blob/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/app/src/main/cpp/CMakeLists.txt"" rel=""nofollow noreferrer"">hello-libs/app/src/main/cpp/CMakeLists.txt</a>: </p>

<pre><code>// -L
add_library(lib_gperf SHARED IMPORTED)
set_target_properties(lib_gperf PROPERTIES IMPORTED_LOCATION
          ${distribution_DIR}/gperf/lib/${ANDROID_ABI}/libgperf.so)

// -I
target_include_directories(hello-libs PRIVATE
                           ${distribution_DIR}/gperf/include)
// -lgperf
target_link_libraries(hello-libs
                      lib_gperf)
</code></pre></li>
<li><p>on C++ code, use: <code>#include &lt;gperf.h&gt;</code></p></li>
<li><p>header location: <code>hello-libs/distribution/gperf/include/gperf.h</code></p></li>
<li><p>lib location: <code>distribution/gperf/lib/arm64-v8a/libgperf.so</code></p></li>
<li><p><a href=""https://github.com/googlesamples/android-ndk/blob/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/app/build.gradle"" rel=""nofollow noreferrer"">app/build.gradle</a>:</p>

<pre><code>android {
    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = ['../distribution/gperf/lib']
</code></pre>

<p>Then, if you look under <code>/data/app</code> on the device, <code>libgperf.so</code> will be there as well.</p></li>
<li><p>If you only support some architectures, see: <a href=""https://stackoverflow.com/questions/33278152/gradle-build-ndk-target-only-arm/47558314#47558314"">Gradle Build NDK target only ARM</a></p></li>
</ul>

<p>The example git tracks the prebuilt shared libraries, but it also contains the build system to actually build them as well: <a href=""https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/gen-libs"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/gen-libs</a></p>
",895245,,895245,,2017-11-30 10:50:41,2017-11-30 10:50:41,,,,0,,,
Android,47571060,2,,17172153,2017-11-30 10:22:55,2904,,1,,"<p><strong>Android NDK official <code>hello-libs</code> CMake example</strong></p>

<p><a href=""https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs</a></p>

<p>The key thing is to pack all versions of the <code>.so</code> that you care about, e.g.:</p>

<ul>
<li><code>distribution/gperf/lib/arm64-v8a/libgperf.so</code></li>
<li><code>distribution/gperf/lib/x86_64/libgperf.so</code></li>
</ul>

<p>and then pick the right one on CMake with: <code>${ANDROID_ABI}</code>.</p>

<p>I have further explained that example at: <a href=""https://stackoverflow.com/questions/9870435/how-to-link-a-prebuilt-shared-library-to-an-android-ndk-project/47558694#47558694"">How to link a prebuilt shared Library to an Android NDK project?</a></p>
",895245,,895245,,2017-11-30 10:51:06,2017-11-30 10:51:06,,,,0,,,
Android,47571204,2,,11944060,2017-11-30 10:30:27,2904,,6,,"<p><strong>Android <code>${ANDROID_ABI}</code></strong></p>

<p>The <code>${ANDROID_ABI}</code> variable is the way to go in Android, where it assumes values like <code>arm64-v8a</code>, <code>x86_64</code> and so on.</p>

<p>It is used on the official NDK library example: <a href=""https://github.com/googlesamples/android-ndk/blob/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/app/src/main/cpp/CMakeLists.txt#L25"" rel=""noreferrer"">https://github.com/googlesamples/android-ndk/blob/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/app/src/main/cpp/CMakeLists.txt#L25</a></p>

<p>I have further commented on that example at: <a href=""https://stackoverflow.com/questions/17172153/ndk-how-to-include-prebuilt-shared-library-regardless-of-architecture/47571060#47571060"">NDK: How to include Prebuilt Shared Library Regardless of Architecture</a></p>
",895245,,,,,2017-11-30 10:30:27,,,,0,,,
Android,47571737,2,,24357687,2017-11-30 10:56:08,2904,,3,,"<p><strong>Android NDK official <code>hello-libs</code> CMake example</strong></p>

<p><a href=""https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs</a></p>

<p>Just worked for me on Ubuntu 17.10 host, Android Studio 3, Android SDK 26, so I strongly recommend that you base your project on it.</p>

<p>The shared library is called <code>libgperf</code>, the key code parts are:</p>

<ul>
<li><p><a href=""https://github.com/googlesamples/android-ndk/blob/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/app/src/main/cpp/CMakeLists.txt"" rel=""nofollow noreferrer"">hello-libs/app/src/main/cpp/CMakeLists.txt</a>: </p>

<pre><code>// -L
add_library(lib_gperf SHARED IMPORTED)
set_target_properties(lib_gperf PROPERTIES IMPORTED_LOCATION
          ${distribution_DIR}/gperf/lib/${ANDROID_ABI}/libgperf.so)

// -I
target_include_directories(hello-libs PRIVATE
                           ${distribution_DIR}/gperf/include)
// -lgperf
target_link_libraries(hello-libs
                      lib_gperf)
</code></pre></li>
<li><p><a href=""https://github.com/googlesamples/android-ndk/blob/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/app/build.gradle"" rel=""nofollow noreferrer"">app/build.gradle</a>:</p>

<pre><code>android {
    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = ['../distribution/gperf/lib']
</code></pre>

<p>Then, if you look under <code>/data/app</code> on the device, <code>libgperf.so</code> will be there as well.</p></li>
<li><p>on C++ code, use: <code>#include &lt;gperf.h&gt;</code></p></li>
<li><p>header location: <code>hello-libs/distribution/gperf/include/gperf.h</code></p></li>
<li><p>lib location: <code>distribution/gperf/lib/arm64-v8a/libgperf.so</code></p></li>
<li><p>If you only support some architectures, see: <a href=""https://stackoverflow.com/questions/33278152/gradle-build-ndk-target-only-arm/47558314#47558314"">Gradle Build NDK target only ARM</a></p></li>
</ul>

<p>The example git tracks the prebuilt shared libraries, but it also contains the build system to actually build them as well: <a href=""https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/gen-libs"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs/gen-libs</a></p>
",895245,,,,,2017-11-30 10:56:08,,,,0,,,
Android,47589558,2,,47582970,2017-12-01 8:44:47,2905,,3,,"<p>With the latest release (AndroidThings DP 6) you can use the Camera v2 APIs</p>

<p><a href=""https://android-developers.googleblog.com/2017/11/android-things-developer-preview-6.html"" rel=""nofollow noreferrer"">https://android-developers.googleblog.com/2017/11/android-things-developer-preview-6.html</a></p>

<p>This should work: <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic</a></p>

<p>You need to make sure you have the flag set to true in the manifest</p>

<pre><code>&lt;activity

    ...
    android:hardwareAccelerated=""true""&gt;
</code></pre>

<blockquote>
  <p>the Camera2Basic sample using the Camera2 API and TextureView now works on both NXP and Raspberry Pi based devices (with the hardwareAccelerated flag set to true)</p>
</blockquote>
",413127,,,,,2017-12-01 8:44:47,,,,6,,,
Android,47620225,2,,17836234,2017-12-03 16:00:26,2908,,1,,"<p>I know it sounds so easy, but I copy paste from google sample all folder </p>

<p><a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive/app/src/main"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive/app/src/main</a></p>

<blockquote>
  <p>aidl/com/android/vending/billing</p>
  
  <p>copied into project aidl ( I had set project view in Android Studio)</p>
</blockquote>

<p>and next I clean and rebuild project and it found a reference. </p>
",7123042,,,,,2017-12-03 16:00:26,,,,0,,,
Android,47655405,2,,46537927,2017-12-05 13:59:08,2910,,2,,"<p>A very good question, and it is not as simple as it seems!
<a href=""https://github.com/googlesamples/android-architecture/tree/dev-todo-mvvm-live/"" rel=""nofollow noreferrer"">You can see an example from Google team here</a>.</p>

<p>They solved the problem with the help of the factory.
There it is pass (of course) the Application context (not Activity context !). </p>

<p>A small problem - and so much boilerplate code!</p>

<p>My decision:</p>

<pre><code>public class MainApplication extends Application {
public void onCreate() {
AppSharedPref sharedPref = AppSharedPref.getInstance(PreferenceManager.getDefaultSharedPreferences(this));
AppRepository.getInstance(sharedPref);
</code></pre>

<p>Repository is  singltone (a lot of code is skipped for brevity):</p>

<pre><code>public class AppRepository implements AppDataSource {
public static AppRepository getInstance(@NonNull AppSharedPref sharedPref) {
if (INSTANCE == null) {
   INSTANCE = new AppRepository(sharedPref);
}
return INSTANCE;
}
</code></pre>

<p>In ViewModel call:</p>

<pre><code>public class MyViewModel extends AndroidViewModel {

// constructor
public MyViewModel(@NonNull Application application) {
   repository = AppRepository.getInstance(.....);
}
</code></pre>
",345810,,345810,,2017-12-05 17:37:47,2017-12-05 17:37:47,,,,0,,,
Android,47656500,2,,47507583,2017-12-05 14:53:51,2910,,2,,"<p>i just saw the google example and how they did it, and i realized that you need to fix:</p>

<pre><code>@Module public class DatabaseModule {

@Provides
@Singleton
MyDatabase provideMyDatabase(Application context) {
    return Room.databaseBuilder(context.getApplicationContext(), MyDatabase.class, ""MyDB"").build();
}

@Provides
@Singleton
MyDao provideMyDao(MyDatabase myDatabase) {
    return myDatabase.myDao();
}
</code></pre>

<p>}</p>

<p>to check if database already exist, with this code:</p>

<pre><code>  /**
 * Check whether the database already exists and expose it via {@link #getDatabaseCreated()}
 */
private void updateDatabaseCreated(final Context context) {
    if (context.getDatabasePath(DATABASE_NAME).exists()) {
        setDatabaseCreated();
    }
}

private void setDatabaseCreated(){
    mIsDatabaseCreated.postValue(true);
}


public LiveData&lt;Boolean&gt; getDatabaseCreated() {
    return mIsDatabaseCreated;
}
</code></pre>

<p>anyway here is a link to github google sample about this:
<a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/db/AppDatabase.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/db/AppDatabase.java</a></p>
",4637826,,4637826,,2017-12-05 15:05:03,2017-12-05 15:05:03,,,,0,,,
Android,47665641,2,,47663200,2017-12-06 1:59:16,2910,,1,,"<p>Short answer:</p>

<p>No, it's baked into the <code>IdlingPolicies.dynamicIdlingResourceWarningPolicy</code> and not controlled by external configuration as of version 3.0.1. This policy controls the frequency of warning events that are posted to the handler. These events, in turn, cause the call to <code>isIdleNow()</code></p>

<p>Slightly longer answer:</p>

<p>It is like this for a very good reason. <code>isIdleNow()</code> is not a place to set your application state. At the time <code>isIdleNow()</code> is called the state should already be known. The state should be updated with the call to <code>ResourceCallback::onTransitionToIdle</code> and generally(99% of a time) not inside of <code>isIdleNow()</code></p>

<p>The documentation hints at it when it says that you should return immediately, but does not make it clear.</p>

<p>Updating the state in <code>isIdleNow()</code> makes it no better than just sleeping the thread conditionally. Actually, makes it even worse, as your tests are now 5 seconds slower on a per test basis. Which defeats the purpose of espresso as it kills the determinism of the test. And in my opinion determinism of espresso tests is what makes it so great thanks to the built-in main thread synchronization and idling resource interface.</p>

<p>With that being said there should not be a need to modify this timeout. Calling <code>ResourceCallback::onTransitionToIdle</code> will post this event to the handler and espresso will proceed immediately. </p>

<p>Unfortunately, there are lots of examples and even blogs that promote inefficient implementations.</p>

<p>These examples should be great sources of inspiration if you want a more conventional idling resource:</p>

<p><a href=""https://github.com/JakeWharton/okhttp-idling-resource/blob/master/src/main/java/com/jakewharton/espresso/OkHttp3IdlingResource.java"" rel=""nofollow noreferrer"">okhttp idling resource</a></p>

<p><code>DrawerActions$IdlingDrawerListener</code> bundled with espresso-contrib. <a href=""https://android.googlesource.com/platform/frameworks/testing/+/f69eb9ac2856f470cb79f57141f711ed3ceed99d/espresso/espresso-contrib/src/main/java/com/google/android/apps/common/testing/ui/espresso/contrib/DrawerActions.java#203https://android.googlesource.com/platform/frameworks/testing/+/f69eb9ac2856f470cb79f57141f711ed3ceed99d/espresso/espresso-contrib/src/main/java/com/google/android/apps/common/testing/ui/espresso/contrib/DrawerActions.java#203"" rel=""nofollow noreferrer"">here is the source</a>.</p>

<p><code>CountingTaskExecutorRule</code> from Room library, here is the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/util/TaskExecutorWithIdlingResourceRule.java"" rel=""nofollow noreferrer"">usage</a> of it.</p>
",4879701,,4879701,,2017-12-06 17:04:46,2017-12-06 17:04:46,,,,3,,,
Android,47666303,2,,47666255,2017-12-06 3:24:54,2910,,1,,"<p>You did not download the entire repository, or you may have set your project up incorrectly.  the ""<code>..</code>"" in <code>../version.gradle</code> is telling the code to go up a folder in the file system.</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/versions.gradle"" rel=""nofollow noreferrer"">Here is the missing file.</a>  You may be able to just download it, and edit your gradle, or your might have to clone the whole project again.</p>
",2953647,,,,,2017-12-06 3:24:54,,,,1,,,
Android,47666873,2,,47603099,2017-12-06 4:38:32,2910,,2,,"<p>Please have a look at:<br>
<a href=""https://github.com/googlesamples/android-instant-apps/tree/master/install-api"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-instant-apps/tree/master/install-api</a><br>
and<br>
<a href=""https://github.com/googlesamples/android-instant-apps/blob/master/install-api/features/install/src/main/java/com/instantappsamples/feature/install/InstallApiActivity.kt"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-instant-apps/blob/master/install-api/features/install/src/main/java/com/instantappsamples/feature/install/InstallApiActivity.kt</a></p>

<ul>
<li>This sample app demonstrates how to use the <a href=""https://developer.android.com/topic/instant-apps/reference.html#showinstallprompt"" rel=""nofollow noreferrer"">Install API</a>. The API triggers the Intent to install the app on device.</li>
<li>The call also accepts the Intent, which is triggered after the installation is complete.</li>
<li>The sample also shows the correct structure to implement <code>showInstallPrompt</code> method along with <code>postInstallIntent</code>. </li>
</ul>

<p>Refer the sample code snippet:</p>

<pre><code>private val postInstallIntent = Intent(Intent.ACTION_VIEW,
        Uri.parse(""https://install-api.instantappsample.com/"")).
        addCategory(Intent.CATEGORY_BROWSABLE).
        putExtras(Bundle().apply {
            putString(""The key to"", ""sending data via intent"")
        })

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_install)

    val isInstantApp = InstantApps.isInstantApp(this)

    findViewById&lt;Button&gt;(R.id.start_installation).apply {
        isEnabled = isInstantApp
        // Show the installation prompt only for an instant app.
        if (isInstantApp) {
            setOnClickListener {
                InstantApps.showInstallPrompt(this@InstallApiActivity,
                        postInstallIntent,
                        REQUEST_CODE,
                        REFERRER)
            } }
    } }
</code></pre>
",8782189,,,,,2017-12-06 4:38:32,,,,3,,,
Android,47709735,2,,32711975,2017-12-08 7:34:48,2912,,8,,"<p>Thanks to @arin 's answer, I made an improved version.</p>

<p>His code is basically working, but there are 2 problems:<br>
1) Readability - actually I don't know what is going on calculating the <code>Rect zoom</code><br>
2) In my Android 7.1.1 device, the preview will freeze if the zoom is big to a certain extent. Since I solved this problem with the code below, I am pretty sure it is because the original code allowed over-zooming beyond camera's maximum zoom ratio.<br>
(In fact, I don't know why he needs to apply *10 on the ratio returned by <code>CameraCharacteristics</code>)</p>

<p>Below are my codes: (I do this all inside my custom <code>TextureView</code>, which also stores my Camera2 objects and logics):</p>

<p>Related Member variables:</p>

<pre><code>protected CameraCharacteristics cameraCharacteristics;
protected CameraCaptureSession captureSession;
protected CaptureRequest.Builder previewRequestBuilder;

//Zooming
protected float fingerSpacing = 0;
protected float zoomLevel = 1f;
protected float maximumZoomLevel;
protected Rect zoom;
</code></pre>

<p>Right after you get <code>CameraCharacteristics</code> from <code>CameraManager</code>, probably in some initial setup:</p>

<pre><code>maximumZoomLevel = cameraCharacteristics.get(CameraCharacteristics.SCALER_AVAILABLE_MAX_DIGITAL_ZOOM);
</code></pre>

<p>override <code>onTouchEvent</code>:</p>

<pre><code>@Override
public boolean onTouchEvent(MotionEvent event) {
    try {
        Rect rect = cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
        if (rect == null) return false;
        float currentFingerSpacing;

        if (event.getPointerCount() == 2) { //Multi touch.
            currentFingerSpacing = getFingerSpacing(event);
            float delta = 0.05f; //Control this value to control the zooming sensibility
            if (fingerSpacing != 0) {
                if (currentFingerSpacing &gt; fingerSpacing) { //Don't over zoom-in
                    if ((maximumZoomLevel - zoomLevel) &lt;= delta) {
                        delta = maximumZoomLevel - zoomLevel;
                    }
                    zoomLevel = zoomLevel + delta;
                } else if (currentFingerSpacing &lt; fingerSpacing){ //Don't over zoom-out
                    if ((zoomLevel - delta) &lt; 1f) {
                        delta = zoomLevel - 1f;
                    }
                    zoomLevel = zoomLevel - delta;
                }
                float ratio = (float) 1 / zoomLevel; //This ratio is the ratio of cropped Rect to Camera's original(Maximum) Rect
                //croppedWidth and croppedHeight are the pixels cropped away, not pixels after cropped
                int croppedWidth = rect.width() - Math.round((float)rect.width() * ratio);
                int croppedHeight = rect.height() - Math.round((float)rect.height() * ratio);
                //Finally, zoom represents the zoomed visible area
                zoom = new Rect(croppedWidth/2, croppedHeight/2,
                        rect.width() - croppedWidth/2, rect.height() - croppedHeight/2);
                previewRequestBuilder.set(CaptureRequest.SCALER_CROP_REGION, zoom);
            }
            fingerSpacing = currentFingerSpacing;
        } else { //Single touch point, needs to return true in order to detect one more touch point
            return true;
        }
        captureSession.setRepeatingRequest(previewRequestBuilder.build(), captureCallback, null);
        return true;
    } catch (final Exception e) {
        //Error handling up to you
        return true;
    }
}
</code></pre>

<p>And the <code>getFingerSpacing</code> method:</p>

<pre><code>private float getFingerSpacing(MotionEvent event) {
    float x = event.getX(0) - event.getX(1);
    float y = event.getY(0) - event.getY(1);
    return (float) Math.sqrt(x * x + y * y);
}
</code></pre>

<p>Finally don't forget to set the crop region when you actually take the photo. My code is base on this <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">Camera2Basic</a>, I do this inside the <code>captureStillPicture()</code> method:</p>

<pre><code>        //Zoom
        if (zoom != null) {
            captureBuilder.set(CaptureRequest.SCALER_CROP_REGION, zoom);
        }
</code></pre>
",7870874,,7870874,,2017-12-08 7:54:23,2017-12-08 7:54:23,,,,4,,,
Android,47826780,2,,46231746,2017-12-15 6:14:13,2919,,2,,"<p><strong>Good news! ProGuard is now supported in multi-feature instant app. The fix has been added to the Android Studio 3.2 Canary 14 and newer builds.</strong></p>

<p>To enable code shrinking for the entire app project, you must do so from the base module’s <code>build.gradle</code> file. That is, you can include custom <strong>ProGuard</strong> rules in a dynamic feature module, but the minifyEnabled property in dynamic feature module build configurations is ignored.</p>

<p><a href=""https://developer.android.com/guide/app-bundle/configure"" rel=""nofollow noreferrer"">https://developer.android.com/guide/app-bundle/configure</a></p>

<p>Sample project can be seen at <a href=""https://github.com/googlesamples/android-instant-apps/tree/master/multi-feature-module"" rel=""nofollow noreferrer"">multi-feature-module project</a>. </p>

<p>Please report <a href=""https://issuetracker.google.com/issues/65710224"" rel=""nofollow noreferrer"">AIA Team</a> if you encounter any issues.</p>
",2638235,,2638235,,2018-05-29 5:12:08,2018-05-29 5:12:08,,,,0,,,
Android,47840996,2,,47840682,2017-12-15 23:13:08,2920,,1,,"<p>Ok I've already found an JavaScanner replacement. It does not anwser 2 questions I've asked bellow but it solves deprecation interface problem so I have decided to post an answer.</p>

<p>According to this google groups - API changed twice since <em>JavaScanner</em>.</p>

<p>First change was to <em>JavaPsiScanner</em> but they 
""didn't advertise this widely, since I already knew that we wanted to switch over to UAST (which was still in development)"" </p>

<p>Second and final change is to <strong>UastScanner. So one should use it now for Java Classes.</strong> </p>

<p>You can even find short <a href=""https://groups.google.com/forum/#!searchin/lint-dev/deprecated%7Csort:date/lint-dev/7nLiXa04baM/9q6QJpmODgAJ"" rel=""nofollow noreferrer"">documentation</a> writen by Tor Norbye (7th comment from above) </p>

<p><strong>Edit:</strong> <a href=""https://github.com/googlesamples/android-custom-lint-rules/blob/master/android-studio-3/checks/src/main/java/com/example/lint/checks/SampleCodeDetector.java"" rel=""nofollow noreferrer"">Sample UastDetector class</a></p>
",4658157,,115145,,2018-04-05 16:40:19,2018-04-05 16:40:19,,,,0,,,
Android,47861216,2,,47839512,2017-12-18 1:59:36,2922,,2,,"<p>OK, so I found the answer and it wasn't anywhere near what I thought. My translation of the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/viewmodel/GithubViewModelFactory.java"" rel=""nofollow noreferrer"">GithubViewModelFactory</a> into Kotlin included the following constructor:</p>

<pre><code>@Singleton
class MetaverseViewModelFactory @Inject constructor(
        creators: Map&lt;KClass&lt;out ViewModel&gt;, Provider&lt;ViewModel&gt;&gt;
): ViewModelProvider.Factory {
    private val creators: Map&lt;Class&lt;out ViewModel&gt;, Provider&lt;ViewModel&gt;&gt; =
            creators.mapKeys { it.key.java }
    //...
}
</code></pre>

<p>This was due to the <code>ViewModelKey</code> in Kotlin being able to use <code>KClass</code> only instead of <code>Class</code>. It turns out that kapt takes care of this and the correct factory should look like:</p>

<pre><code>@Singleton
class MetaverseViewModelFactory @Inject constructor(
        private val creators: Map&lt;Class&lt;out ViewModel&gt;, @JvmSuppressWildcards Provider&lt;ViewModel&gt;&gt;
): ViewModelProvider.Factory {
    //...
}
</code></pre>

<p>Note the additional <code>@JvmSupressWildcards</code> to also avoid turning <code>Provider&lt;ViewModel&gt;</code> into <code>Provider&lt;? extends ViewModel&gt;</code></p>
",3456952,,,,,2017-12-18 1:59:36,,,,0,,,
Android,47881098,2,,47866673,2017-12-19 6:21:46,2923,,6,,"<p><strong>ViewModel is not observing any data</strong> it just returning LiveData object of Product so you can observe the data in <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductFragment.java"" rel=""noreferrer"">ProductFragment</a></p>

<p>This is how <strong>LiveData</strong> is <strong>observed</strong> in <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductFragment.java"" rel=""noreferrer"">ProductFragment</a>, In which the <code>getObservableProduct()</code> method called on ViewModel which returns <code>LiveData&lt;ProductEntity&gt;</code></p>

<pre><code>// Observe product data
    model.getObservableProduct().observe(this, new Observer&lt;ProductEntity&gt;() {
        @Override
        public void onChanged(@Nullable ProductEntity productEntity) {
            model.setProduct(productEntity);
        }
    });
</code></pre>

<p>This method in ViewModel called from <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductFragment.java"" rel=""noreferrer"">ProductFragment</a></p>

<pre><code>public LiveData&lt;ProductEntity&gt; getObservableProduct() {
    return mObservableProduct;
}
</code></pre>

<p>In constructor of that <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/viewmodel/ProductViewModel.java"" rel=""noreferrer"">ProductViewModel</a> the member variable mObservableProduct is initialized as follows, Which get <code>LiveData&lt;ProductEntity&gt;</code> <strong>from Repository</strong></p>

<pre><code>private final LiveData&lt;ProductEntity&gt; mObservableProduct;
mObservableProduct = repository.loadProduct(mProductId);
</code></pre>

<p>If you dig deeper, in <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/DataRepository.java"" rel=""noreferrer"">DataRepository</a>, <code>LiveData&lt;ProductEntity&gt;</code> is fetched <strong>from DAO</strong></p>

<pre><code>public LiveData&lt;ProductEntity&gt; loadProduct(final int productId) {
    return mDatabase.productDao().loadProduct(productId);
}
</code></pre>

<p>And in DAO its nothing but <strong>SQL query</strong> which returns the <code>LiveData&lt;ProductEntity&gt;</code> which is implemented by <strong>RoomCompiler</strong>. As you can see DAO using @Dao annotation which used by annotation processor and Write Dao implementation in <code>ProductDao_Impl</code> class.</p>

<pre><code>@Query(""select * from products where id = :productId"")
LiveData&lt;ProductEntity&gt; loadProduct(int productId);
</code></pre>

<p>So In a <strong>nutshell</strong>, <strong>ViewModel holding References</strong> to all the data required by Activity or Fragment. Data get initialized in ViewModel and it can survive Activity <strong>configuration changes</strong>. Thus we are storing its references in ViewModel.
In our case LiveData is just wrapper around our object which is returned by DAO implementation as an Observable object. So we can observe this in any <strong>Activity or Fragment</strong>. So as soon as the data is changed at Data Source, it called <code>postValue()</code> method on LiveData and we get the <strong>callback</strong></p>

<p><strong>Flow</strong> of LiveData
<strong>DAO -> Repository -> ViewModel -> Fragment</strong></p>
",3624647,,,,,2017-12-19 6:21:46,,,,0,,,
Android,47884837,2,,47884549,2017-12-19 10:25:08,2923,,3,,"<blockquote>
  <p>What would be directory structure of Application in MVP?</p>
</blockquote>

<ul>
<li>There is no predefined structure for that. What makes your code readable or what structure you are following, you can use same for MVP also.</li>
</ul>

<blockquote>
  <p>Activity should be a Presenter or View?</p>
</blockquote>

<ul>
<li>View is the UI layer which displays the data and notifies the Presenter about user actions. So Activity will always be a view.</li>
</ul>

<hr>

<p>If you are looking for a good example of MVP implementation, there is one <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">GitHub Repo</a> for MVP developed by Android itself. Which you should look into.</p>

<p>Where </p>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">todo‑mvp</a>   </p>

<ul>
<li>Demonstrates a basic Model‑View‑Presenter (MVP) architecture and provides a foundation on which the other samples are built. This sample also acts as a reference point for comparing and contrasting the other samples in this project.</li>
</ul>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/"" rel=""nofollow noreferrer"">todo‑mvp‑clean</a> </p>

<ul>
<li>Uses concepts from Clean Architecture.</li>
</ul>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">todo‑mvp‑dagger</a></p>

<ul>
<li>Uses Dagger 2 to add support for dependency injection.</li>
</ul>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/"" rel=""nofollow noreferrer"">todo‑mvp‑rxjava</a></p>

<ul>
<li>Uses RxJava 2 to implement concurrency, and abstract the data layer.</li>
</ul>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding/"" rel=""nofollow noreferrer"">todo‑mvvm‑databinding</a>  </p>

<ul>
<li>Based on the todo-databinding sample, this version incorporates the Model‑View‑ViewModel pattern.</li>
</ul>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-live/"" rel=""nofollow noreferrer"">todo‑mvvm‑live</a> </p>

<ul>
<li>Uses ViewModels and LiveData from Architecture Components and the Data Binding library with an MVVM architecture.</li>
</ul>
",550966,,550966,,2017-12-19 11:02:05,2017-12-19 11:02:05,,,,4,,,
Android,47910511,2,,44908605,2017-12-20 16:29:13,2925,,1,,"<p>This seems to be occurring only on Oreo. It can be reproduced on an API 26 emulator using Google's sample project available here: <a href=""https://github.com/googlesamples/android-ActivitySceneTransitionBasic/#readme"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ActivitySceneTransitionBasic/#readme</a></p>

<p>I managed to fix the problem in my app by adding this:</p>

<pre><code>&lt;item name=""android:windowIsTranslucent""&gt;true&lt;/item&gt;
</code></pre>

<p>To the style of my detail activity.</p>
",1356106,,1356106,,2017-12-20 17:33:06,2017-12-20 17:33:06,,,,0,,,
Android,47967933,2,,47954616,2017-12-25 10:53:50,2929,,1,,"<p>Try this. It records an audio using the wear microphone and then plays it.
<a href=""https://github.com/googlesamples/android-WearSpeakerSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-WearSpeakerSample</a></p>

<p>This is the apk built:
<a href=""https://drive.google.com/open?id=1z6lwVoWh89gbGz43c_6PNPVS4Os6s4nu"" rel=""nofollow noreferrer"">https://drive.google.com/open?id=1z6lwVoWh89gbGz43c_6PNPVS4Os6s4nu</a></p>

<p>I have put it also in the Google Play with a watchface:
<a href=""https://play.google.com/store/apps/details?id=com.jorc.android.wearable.watchface&amp;hl=en"" rel=""nofollow noreferrer"">https://play.google.com/store/apps/details?id=com.jorc.android.wearable.watchface&amp;hl=en</a></p>
",3041972,,3041972,,2017-12-26 1:07:38,2017-12-26 1:07:38,,,,4,,,
Android,47990497,2,,47990462,2017-12-27 10:27:25,2931,,2,,"<p>You could use a custom live event that is triggered only once. This discussion has already took place on <a href=""https://github.com/googlesamples/android-architecture-components/issues/63"" rel=""nofollow noreferrer"">Android's Architecture Google Samples Repository</a>. Here's a <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">proposed solution</a> I like. </p>

<p>In case you need it in kotlin, there it goes:</p>

<pre><code>class SingleLiveEvent&lt;T&gt;: MutableLiveData&lt;T&gt;() {

    private val pending = AtomicBoolean(false)

    @MainThread
    override fun observe(owner: LifecycleOwner, observer: Observer&lt;T&gt;) {
        if (hasActiveObservers()) {
            Log.w(TAG, ""Multiple observers registered but only one will be notified of changes."")
        }

        // Observe the internal MutableLiveData
        super.observe(owner, Observer&lt;T&gt; { t -&gt;
            if (pending.compareAndSet(true, false)) {
                observer.onChanged(t)
            }
        })
    }

    @MainThread
    override fun setValue(@Nullable t: T?) {
        pending.set(true)
        super.setValue(t)
    }

    /**
     * Used for cases where T is Void, to make calls cleaner.
     */
    @MainThread
    fun call() {
        value = null
    }

    companion object {

        private val TAG = ""SingleLiveEvent""
    }
}
</code></pre>

<p>Using this it won't trigger you dialogs twice unless you call <code>yourLiveData.value = newValue</code> again.</p>

<p>Hope it helps.</p>
",4244598,,4244598,,2017-12-27 10:37:03,2017-12-27 10:37:03,,,,3,,,
Android,47992451,2,,47990608,2017-12-27 12:45:56,2932,,1,,"<p>It's not impossible (I'm doing it to run C++ tests), but it requires some custom plumbing in Gradle, that by default supports Android apps, not standalone C++ x86 apps.</p>

<p>Since Android runtime is JVM, NDK is used to create libraries callable via JNI and the build systems experience is optimized for that.</p>

<p>If you want to kickstart NDK project, I advice you to check out this Google sample:
<a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-jni"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/master/hello-jni</a>  </p>

<p>If you want to run standalone C++ binaries, I advice you to check <strong>CLion</strong> or write your app/lib as a custom CMake project not relying on NDK at all and then create a custom Gradle task to build it.</p>

<p>You probably (I can only guess) want to check hello-jni sample and CLion first.</p>
",3602072,,,,,2017-12-27 12:45:56,,,,1,,,
Android,47998727,2,,47998502,2017-12-27 21:16:42,2932,,1,,"<p>It depends. </p>

<pre><code>implementation 'com.google.dagger:dagger:2.14.1'

annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'
</code></pre>

<p>You can get away with the above just fine but if you want to use the recently introduced <a href=""https://google.github.io/dagger/android.html"" rel=""nofollow noreferrer"">dagger.android</a> you'll at least need these two as well.</p>

<pre><code>implementation 'com.google.dagger:dagger-android:2.14.1'

annotationProcessor 'com.google.dagger:dagger-android-processor:2.14.1'
</code></pre>

<p>I believe the the <code>dagger-android-suppprt</code> is just if you're using <code>DaggerAppCompatActivity</code>, <code>DaggerFragments</code>, etc like in the <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger"" rel=""nofollow noreferrer"">Todo-MVP-Dagger Android Architecture</a> example.</p>

<p>I don't think you need the last one at all, I don't have that in any my projects that use Dagger.</p>
",8217056,,8217056,,2017-12-28 3:11:36,2017-12-28 3:11:36,,,,0,,,
Android,48000850,2,,48000790,2017-12-28 2:14:12,2932,,1,,"<p>That's expected since Instant Apps are sandboxed and don't have access to the device's full capabilities (no read/write for example). You'll have to work around this depending on <a href=""https://developer.android.com/topic/instant-apps/reference.html#isinstantapp"" rel=""nofollow noreferrer"">whether or not you're an Instant App</a>. Here's the full list of <a href=""https://developer.android.com/topic/instant-apps/faqs.html#general"" rel=""nofollow noreferrer"">available permissions</a>:</p>

<ul>
<li>BILLING</li>
<li>ACCESS_COARSE_LOCATION</li>
<li>ACCESS_FINE_LOCATION</li>
<li>ACCESS_NETWORK_STATE</li>
<li>CAMERA</li>
<li>INSTANT_APP_FOREGROUND_SERVICE only in Android 8.0.</li>
<li>INTERNET</li>
<li>READ_PHONE_NUMBERS. This permission is available only in Android 8.0 (API level 26).</li>
<li>RECORD_AUDIO</li>
<li>VIBRATE</li>
</ul>

<p>PS: ADB did a <a href=""http://androidbackstage.blogspot.com/2017/11/episode-84-instant-apps.html"" rel=""nofollow noreferrer"">really cool episode</a> where they discussed how Instant Apps work (and the sandboxing).</p>

<p>Also see: <a href=""https://github.com/googlesamples/android-instant-apps/issues/12"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-instant-apps/issues/12</a></p>
",4548500,,,,,2017-12-28 2:14:12,,,,3,,,
Android,48009944,2,,27515487,2017-12-28 15:18:01,2933,,3,,"<p>I had a similar problem regarding the saved image.</p>

<p>I used something similar to what is described here <a href=""https://github.com/googlesamples/android-vision/issues/124"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision/issues/124</a> by user kinghsumit (the comment from Sep 15, 2016).</p>

<p>I'll copy it here, just in case.</p>

<pre><code>private CameraSource.PictureCallback mPicture = new CameraSource.PictureCallback() {
    @Override
    public void onPictureTaken(byte[] bytes) {
       int orientation = Exif.getOrientation(bytes);
       Bitmap   bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
       switch(orientation) {
           case 90:
               bitmapPicture= rotateImage(bitmap, 90);
               break;
           case 180:
               bitmapPicture= rotateImage(bitmap, 180);
               break;
           case 270:
               bitmapPicture= rotateImage(bitmap, 270);
               break;
           case 0:
               // if orientation is zero we don't need to rotate this
           default:
               break;
       }
       //write your code here to save bitmap 
   }
}

public static Bitmap rotateImage(Bitmap source, float angle) {
    Matrix matrix = new Matrix();
    matrix.postRotate(angle);
    return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(), matrix, true);
}
</code></pre>

<p>Below class is used to get orientation from byte[] data.</p>

<pre><code>public class Exif {
    private static final String TAG = ""CameraExif"";

    // Returns the degrees in clockwise. Values are 0, 90, 180, or 270.
    public static int getOrientation(byte[] jpeg) {
        if (jpeg == null) {
            return 0;
        }

        int offset = 0;
        int length = 0;

        // ISO/IEC 10918-1:1993(E)
        while (offset + 3 &lt; jpeg.length &amp;&amp; (jpeg[offset++] &amp; 0xFF) == 0xFF) {
            int marker = jpeg[offset] &amp; 0xFF;

            // Check if the marker is a padding.
            if (marker == 0xFF) {
                continue;
            }
            offset++;

            // Check if the marker is SOI or TEM.
            if (marker == 0xD8 || marker == 0x01) {
                continue;
            }
            // Check if the marker is EOI or SOS.
            if (marker == 0xD9 || marker == 0xDA) {
                break;
            }

            // Get the length and check if it is reasonable.
            length = pack(jpeg, offset, 2, false);
            if (length &lt; 2 || offset + length &gt; jpeg.length) {
                Log.e(TAG, ""Invalid length"");
                return 0;
            }

            // Break if the marker is EXIF in APP1.
            if (marker == 0xE1 &amp;&amp; length &gt;= 8 &amp;&amp;
                    pack(jpeg, offset + 2, 4, false) == 0x45786966 &amp;&amp;
                    pack(jpeg, offset + 6, 2, false) == 0) {
                offset += 8;
                length -= 8;
                break;
            }

            // Skip other markers.
            offset += length;
            length = 0;
        }

        // JEITA CP-3451 Exif Version 2.2
        if (length &gt; 8) {
            // Identify the byte order.
            int tag = pack(jpeg, offset, 4, false);
            if (tag != 0x49492A00 &amp;&amp; tag != 0x4D4D002A) {
                Log.e(TAG, ""Invalid byte order"");
                return 0;
            }
            boolean littleEndian = (tag == 0x49492A00);

            // Get the offset and check if it is reasonable.
            int count = pack(jpeg, offset + 4, 4, littleEndian) + 2;
            if (count &lt; 10 || count &gt; length) {
                Log.e(TAG, ""Invalid offset"");
                return 0;
            }
            offset += count;
            length -= count;

            // Get the count and go through all the elements.
            count = pack(jpeg, offset - 2, 2, littleEndian);
            while (count-- &gt; 0 &amp;&amp; length &gt;= 12) {
                // Get the tag and check if it is orientation.
                tag = pack(jpeg, offset, 2, littleEndian);
                if (tag == 0x0112) {
                    // We do not really care about type and count, do we?
                    int orientation = pack(jpeg, offset + 8, 2, littleEndian);
                    switch (orientation) {
                        case 1:
                            return 0;
                        case 3:
                            return 180;
                        case 6:
                            return 90;
                        case 8:
                            return 270;
                    }
                    Log.i(TAG, ""Unsupported orientation"");
                    return 0;
                }
                offset += 12;
                length -= 12;
            }
        }

        Log.i(TAG, ""Orientation not found"");
        return 0;
    }

    private static int pack(byte[] bytes, int offset, int length, boolean littleEndian) {
        int step = 1;
        if (littleEndian) {
            offset += length - 1;
            step = -1;
        }

        int value = 0;
        while (length-- &gt; 0) {
            value = (value &lt;&lt; 8) | (bytes[offset] &amp; 0xFF);
            offset += step;
        }
        return value;
    }
}
</code></pre>

<p>It worked for me, except for the Nexus 5x, but that's because that device has a peculiar issue due to its construction.</p>

<p>I hope this helps you!</p>
",7829835,,,,,2017-12-28 15:18:01,,,,3,,,
Android,48032418,2,,48023752,2017-12-30 8:59:37,2934,,5,,"<p>Of course this is supported, otherwise it would be very limited to use Instant Apps. </p>

<p>You must use AppLinks to open feature modules. After you made the call, Android will be downloading that feature if required.</p>

<p>For example this is the flow of opening <em>detail</em> feature from <em>main</em> feature used in <a href=""https://github.com/googlesamples/android-instant-apps/blob/master/multi-feature-module/main/src/main/java/com/example/android/unsplash/MainActivity.java"" rel=""noreferrer"">Google Samples</a>.</p>

<p>Creating the Intent:</p>

<pre><code>@NonNull
private static Intent getDetailActivityStartIntent(Context context,
                                                   int position,
                                                   PhotoViewHolder holder) {
    final Intent intent = new Intent(Intent.ACTION_VIEW,
            Uri.parse(""https://multi-feature.instantappsample.com/detail/"" + position));
    intent.setPackage(context.getPackageName());
    intent.addCategory(Intent.CATEGORY_BROWSABLE);

    TextView author =
            holder.itemView.findViewById(com.example.android.unsplash.base.R.id.author);

    // Working around unboxing issues with multiple dex files on platforms prior to N.
    intent.putExtra(IntentUtil.SELECTED_ITEM_POSITION, position);
    intent.putExtra(IntentUtil.FONT_SIZE, author.getTextSize());
    intent.putExtra(IntentUtil.PADDING,
            new Rect(author.getPaddingLeft(),
                    author.getPaddingTop(),
                    author.getPaddingRight(),
                    author.getPaddingBottom()));
    intent.putExtra(IntentUtil.TEXT_COLOR, author.getCurrentTextColor());
    return intent;
}
</code></pre>

<p>Starting it:</p>

<pre><code>final Intent intent = getDetailActivityStartIntent(activity, position, pvh);
final ActivityOptions activityOptions = getActivityOptions(pvh);
activity.startActivityForResult(intent, IntentUtil.REQUEST_CODE, 
    activityOptions.toBundle());
</code></pre>

<p>Finishing for result is just the same as non Instant Apps.</p>

<p>Set the result in DetailActivity and finish it. Get the result in onActivityResult of MainActivity.</p>
",2708768,,,,,2017-12-30 8:59:37,,,,0,,,
Android,48055881,2,,48023752,2018-01-02 5:14:58,2937,,1,,"<p>Yes, Android Instant Applications support navigation from one sub instant feature module to another instant feature module. <br><em>(Example: details feature -> payment feature)</em><br> <br>
You can refer <a href=""https://developer.android.com/topic/instant-apps/overview.html"" rel=""nofollow noreferrer"">google developers webpage</a> :</p>

<ul>
<li>Always consider your entry points.</li>
<li>Each feature within the instant app has at least one Activity that acts as the entry-point for that feature.</li>
<li>Also, an activity cannot launch another activity directly within an instant app; rather, it must request the URL address that corresponds to that activity.</li>
<li>You can navigate by building an INTENT(request URL address); to open <em>payment feature</em>(feature2) you may call this from <em>details feature</em>(feature1).</li>
<li>When users request a feature from an instant app, they receive only the code necessary to run that specific feature, no more and no less.</li>
<li>By doing this, you are following the entry point concept.</li>
</ul>

<p>Sample code examples related to feature navigation can be checked at this <a href=""https://github.com/googlesamples/android-instant-apps/blob/master/multi-feature-module/main/src/main/java/com/example/android/unsplash/MainActivity.java"" rel=""nofollow noreferrer"">GitHub</a> link.</p>
",8782189,,8782189,,2018-01-02 6:29:42,2018-01-02 6:29:42,,,,0,,,
Android,48091649,2,,30305217,2018-01-04 8:48:54,2939,,7,,"<p>You can use the following helper functions to use Mockito's any(), eq() and capture() matchers in Kotlin:</p>

<pre><code>/**
 * Returns Mockito.eq() as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 *
 * Generic T is nullable because implicitly bounded by Any?.
 */
fun &lt;T&gt; eq(obj: T): T = Mockito.eq&lt;T&gt;(obj)

/**
 * Returns Mockito.any() as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 */
fun &lt;T&gt; any(): T = Mockito.any&lt;T&gt;()

/**
 * Returns ArgumentCaptor.capture() as nullable type to avoid java.lang.IllegalStateException
 * when null is returned.
 */
fun &lt;T&gt; capture(argumentCaptor: ArgumentCaptor&lt;T&gt;): T = argumentCaptor.capture()
</code></pre>

<p>See <a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvp-kotlin/todoapp/app/src/test/java/com/example/android/architecture/blueprints/todoapp/MockitoKotlinHelpers.kt"" rel=""nofollow noreferrer"">MockitoKotlinHelpers.kt</a> from the Android Architecture Blueprints repository by Google.</p>
",1552622,,1552622,,2018-03-16 15:56:41,2018-03-16 15:56:41,,,,2,,,
Android,48101811,2,,48099870,2018-01-04 18:57:34,2940,,4,,"<p>In the <a href=""https://github.com/googlesamples/android-architecture-components/"" rel=""nofollow noreferrer"">android-architecture-components</a> samples on Github Google have an interesting solution.</p>

<p>They <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/di/AppInjector.java"" rel=""nofollow noreferrer"">inject</a> the activities trough <a href=""https://developer.android.com/reference/android/app/Application.ActivityLifecycleCallbacks.html"" rel=""nofollow noreferrer"">ActivityLifecycleCallbacks</a>. For instrumented tests they use a <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/TestApp.java"" rel=""nofollow noreferrer"">TestApp</a> that does not register ActivityLifecycleCallbacks so it injects nothing. </p>

<p>Just like in your example the <code>ViewModel.Factory</code> is package private so in the test you can assign it yourself.</p>

<p>For <code>Fragments</code> there is <a href=""https://developer.android.com/reference/android/support/v4/app/FragmentManager.FragmentLifecycleCallbacks.html"" rel=""nofollow noreferrer"">FragmentManager.FragmentLifecycleCallbacks</a> class which can be used. Instead of the <code>Fragment</code> injecting itself in <code>onActivityCreated</code> your production activity injects the <code>Fragment</code> using <code>FragmentLifecycleCallbacks</code>. You can create a testing activity which does not inject the fragment and you can create a mock factory yourself.</p>
",1011435,,,,,2018-01-04 18:57:34,,,,6,,,
Android,48155550,2,,48150006,2018-01-08 17:52:44,2944,,1,,"<p>First of all, this is a good question, a lot of developers had/have the same question and currently there isn't an official solution to this.</p>

<p>The only sure thing is:</p>

<blockquote>
  <p>A <code>ViewModel</code> <strong>should not</strong> have references to Activities or Views in general.</p>
</blockquote>

<p>What you should do is reading all this thread in GitHub <a href=""https://github.com/googlesamples/android-architecture-components/issues/63"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/issues/63</a>, a lot of solutions have been posted and probably there is at least one good for you.</p>

<p>About the link you posted on <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-rxjava/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksViewModel.java"" rel=""nofollow noreferrer"">googlesamples and blueprint</a>, their <code>Navigator</code> is not good as you can think. It's still an example app and probably they removed some complexity to make the sample easier to understand for a wider set of developers.</p>

<p>I think a better approach is the one provided in <a href=""https://github.com/fabioCollini/ArchitectureComponentsDemo"" rel=""nofollow noreferrer"">this sample repo</a> which completely remove references to Activities. (It's made in Kotlin, I don't know if you can emulate the same behaviours with Java but you could try at least).</p>
",2910520,,1916449,,2018-05-18 23:43:18,2018-05-18 23:43:18,,,,4,,,
Android,48184858,2,,48176187,2018-01-10 10:06:39,2945,,1,,"<p>There are complete code samples and documentation for doing this in Java <a href=""https://developers.google.com/android-publisher/libraries"" rel=""nofollow noreferrer"">here</a></p>

<p>In the <a href=""https://github.com/googlesamples/android-play-publisher-api/blob/master/v2/java/src/com/google/play/developerapi/samples/AndroidPublisherHelper.java"" rel=""nofollow noreferrer"">Java source code</a> this authorizes like this</p>

<pre><code>private static Credential authorizeWithServiceAccount(String serviceAccountEmail)
            throws GeneralSecurityException, IOException {
        log.info(String.format(""Authorizing using Service Account: %s"", serviceAccountEmail));

        // Build service account credential.
        GoogleCredential credential = new GoogleCredential.Builder()
                .setTransport(HTTP_TRANSPORT)
                .setJsonFactory(JSON_FACTORY)
                .setServiceAccountId(serviceAccountEmail)
                .setServiceAccountScopes(
                        Collections.singleton(AndroidPublisherScopes.ANDROIDPUBLISHER))
                .setServiceAccountPrivateKeyFromP12File(new File(SRC_RESOURCES_KEY_P12))
                .build();
        return credential;
    }
</code></pre>
",7635471,,7635471,,2018-01-11 11:00:22,2018-01-11 11:00:22,,,,4,,,
Android,48210130,2,,2480288,2018-01-11 15:06:36,2947,,5,,"<p>So that's how you request a phone number through the Play Services API without the permission and hacks. <a href=""https://android-developers.googleblog.com/2017/10/effective-phone-number-verification.html"" rel=""noreferrer"">Source</a> and <a href=""https://github.com/googlesamples/android-credentials/blob/master/sms-verification/android/app/src/main/java/com/google/samples/smartlock/sms_verify/ui/PhoneNumberActivity.java"" rel=""noreferrer"">Full example</a>.</p>

<p>In your build.gradle (version 10.2.x and higher required):</p>

<pre><code>compile ""com.google.android.gms:play-services-auth:$gms_version""
</code></pre>

<p>In your activity (the code is simplified):</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    // ...
    googleApiClient = new GoogleApiClient.Builder(this)
            .addApi(Auth.CREDENTIALS_API)
            .build();
    requestPhoneNumber(result -&gt; {
        phoneET.setText(result);
    });
}

public void requestPhoneNumber(SimpleCallback&lt;String&gt; callback) {
    phoneNumberCallback = callback;
    HintRequest hintRequest = new HintRequest.Builder()
            .setPhoneNumberIdentifierSupported(true)
            .build();

    PendingIntent intent = Auth.CredentialsApi.getHintPickerIntent(googleApiClient, hintRequest);
    try {
        startIntentSenderForResult(intent.getIntentSender(), PHONE_NUMBER_RC, null, 0, 0, 0);
    } catch (IntentSender.SendIntentException e) {
        Logs.e(TAG, ""Could not start hint picker Intent"", e);
    }
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == PHONE_NUMBER_RC) {
        if (resultCode == RESULT_OK) {
            Credential cred = data.getParcelableExtra(Credential.EXTRA_KEY);
            if (phoneNumberCallback != null){
                phoneNumberCallback.onSuccess(cred.getId());
            }
        }
        phoneNumberCallback = null;
    }
}
</code></pre>

<p>This will generate a dialog like this:</p>

<p><a href=""https://i.stack.imgur.com/96V13.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/96V13.png"" alt=""enter image description here""></a></p>
",2093236,,,,,2018-01-11 15:06:36,,,,3,,,
Android,48242576,2,,48242382,2018-01-13 17:47:13,2949,,1,,"<p>You can't use <code>this</code> when you are calling Glide from inside another class in this case <code>AllUsersViewHolder</code>. You need to pass the context somehow and use that in place of <code>this</code>. You can technically get the context from <code>mView.getContext()</code>. Regardless of all that, you are using the <code>ViewHolder</code> pattern wrong. All the text assigning that you are doing needs to be done in <code>populateViewHolder</code> function using <code>viewHolder.&lt;layout&gt;.setText(text)</code>. Look at this recycler view <a href=""https://github.com/googlesamples/android-RecyclerView"" rel=""nofollow noreferrer"">sample</a> for help</p>
",9119277,,,,,2018-01-13 17:47:13,,,,1,,,
Android,48248557,2,,47051069,2018-01-14 10:13:59,2949,,3,,"<p>It's definitely weird.  I observed that many (but not all) of those fonts don't have a ""latin"" or ""latin-ext"" subset, so that seemed a way to auto-filter them.  I threw together a little python2 script that asks the API for the whole font list, then filters them for ""latin"" and outputs whats left as a new font-families resource file, which you can redirect to <code>family_names.xml</code>.</p>

<p>Usage:     <code>fontlist.py &lt;API_KEY&gt;</code></p>

<pre><code>#!/usr/bin/python
# fontlist.py by fat-tire
#
# Collects Google provider latin &amp; latin-ext font families and creates a replacement for
# https://github.com/googlesamples/android-DownloadableFonts/blob/master/app/src/main/res/values/family_names.xml
#
# See https://developers.google.com/fonts/docs/developer_api for more info on the Google Fonts API
#
# Usage:     fontlist.py &lt;API_KEY&gt; &gt; family_names.xml

import sys, urllib2, json

if len(sys.argv) != 2:
    print ""Usage:""
    print ""  fontlist.py &lt;API_KEY&gt; &gt; family_names.xml""
    print ""No Google Fonts API key?  Get one at https://developers.google.com/fonts/docs/developer_api#APIKey""
    sys.exit(0)

APIKEY=sys.argv[1]
url=""https://www.googleapis.com/webfonts/v1/webfonts?key=""

opener = urllib2.build_opener()
try:
    request = urllib2.Request(url + APIKEY)
    conn = opener.open(request)
except Exception, e:
    print ""Whoopsie.  Got a "" + str(e.code) + "" "" + str(e.reason) + "" error.  You sure that API is legit?""
    sys.exit(1)
data = json.loads(conn.read())

count = 0
items = data[""items""]

print ""&lt;?xml version=\""1.0\"" encoding=\""utf-8\""?&gt;""
print ""&lt;!-- Collected from "" + url+APIKEY + "" --&gt;""
print """"""&lt;resources&gt;
    &lt;string-array name=""family_names""&gt;""""""
for key in items:
    if ""latin"" in key[""subsets""]:
        print "" ""*10 + ""&lt;item&gt;"" + key[""family""] + ""&lt;/item&gt;""
        count = count + 1
print """"""    &lt;!--Total:  """""" + str(count) + """"""--&gt;
    &lt;/array&gt;
&lt;/resources&gt;""""""
sys.exit(0)
</code></pre>

<p>This script outputs a <a href=""https://gist.github.com/fat-tire/fb5a4e3617c4738e73af9318ed6720d5"" rel=""nofollow noreferrer"">family_names.xml</a> which is interesting.  If you compare it to the <a href=""https://github.com/googlesamples/android-DownloadableFonts/blob/master/app/src/main/res/values/family_names.xml"" rel=""nofollow noreferrer"">one provided by google</a>, it does black-out most of the fonts listed in the question. But it doesn't get all of them, including the ""Zilla"", ""Ubuntu"", ""Barcode"" and ""Encode"" fonts.  Maybe there's something these fonts also have in common that can be used to filter the list further?</p>

<p>Interestingly, the generated list also includes new fonts NOT in the github list, including:</p>

<ul>
<li>VolKorn SC</li>
<li>Spectral</li>
<li>Spectral SC</li>
<li>Sedgewick Ave</li>
<li>Sedgewick Ave Display</li>
</ul>

<p>....""Barlow"", ""Bellefair"", and a bunch more.  And some of these fonts do seem to work with Android.</p>

<p>So I'm guessing that the list in that demo file is just old.  Maybe there were licensing issues or technical issues that made it necessary to switch up the list. </p>

<p>Regardless it might be worth submitting a pull request with a newer and more up-to-date list that removes the no-longer provided fonts and adds in the ones that the API does offer that are tested and known to work with the provider.</p>
",3035127,,3035127,,2018-01-14 10:20:10,2018-01-14 10:20:10,,,,1,,,
Android,48273831,2,,48273544,2018-01-16 3:49:55,2951,,1,,"<p>Yes. <code>Dagger2</code> works in unit tests and instrumented tests. An example is here: <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger</a></p>

<p>Here is an example of a module used in a mock variant which can be used for unit/ui testing:</p>

<pre><code>@Module
abstract public class TasksRepositoryModule {

    private static final int THREAD_COUNT = 3;

    @Singleton
    @Binds
    @Local
    abstract TasksDataSource provideTasksLocalDataSource(TasksLocalDataSource dataSource);

    @Singleton
    @Binds
    @Remote
    abstract TasksDataSource provideTasksRemoteDataSource(FakeTasksRemoteDataSource dataSource);

    @Singleton
    @Provides
    static ToDoDatabase provideDb(Application context) {
        return Room.databaseBuilder(context.getApplicationContext(), ToDoDatabase.class, ""Tasks.db"")
                .build();
    }

    @Singleton
    @Provides
    static TasksDao provideTasksDao(ToDoDatabase db) {
        return db.taskDao();
    }

    @Singleton
    @Provides
    static AppExecutors provideAppExecutors() {
        return new AppExecutors(new DiskIOThreadExecutor(),
                Executors.newFixedThreadPool(THREAD_COUNT),
                new AppExecutors.MainThreadExecutor());
    }
}
</code></pre>

<p><a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvp-dagger/todoapp/app/src/mock/java/com/example/android/architecture/blueprints/todoapp/data/source/TasksRepositoryModule.java#L24"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/blob/todo-mvp-dagger/todoapp/app/src/mock/java/com/example/android/architecture/blueprints/todoapp/data/source/TasksRepositoryModule.java#L24</a></p>
",3268303,,5164673,,2018-01-27 16:58:54,2018-01-27 16:58:54,,,,0,,,
Android,48274819,2,,48005850,2018-01-16 5:45:13,2951,,4,,"<p>There's an invalid <code>settings.gradle</code> file, which only <a href=""https://github.com/googlesamples/android-RuntimePermissions/blob/master/settings.gradle#L1"" rel=""nofollow noreferrer"">tries to import</a> <code>Application</code> module (which yet is not valid gradle module, as long as it does not have its own <code>build.gradle</code> file).</p>

<p>Inside root folder <code>settings.gradle</code> file put following line:</p>

<pre><code>include ':kotlinApp'
</code></pre>

<p>Now instead of importing <code>build.gradle</code> import <code>kotlinApp</code> folder:</p>

<blockquote>
  <p>File -> Open... -> android-RuntimePermissions-master/kotlinApp</p>
</blockquote>
",1083957,,,,,2018-01-16 5:45:13,,,,0,,,
Android,48288676,2,,48285281,2018-01-16 19:41:31,2952,,5,,"<p>TL;DR:</p>

<pre><code>InstantApps.showInstallPrompt(activity, 
                              postInstallIntent, 
                              Constants.INSTALL_INSTANT_APP_REQUEST_CODE, 
                              referrerString);
</code></pre>

<hr>

<p>At Vimeo we're using Branch for our web -> mobile app install as well as our instant app -> mobile app install (since it gives some additional metrics and lets us compare the referrers a little better).</p>

<p>If you're interested in using Branch, the documentation for the install prompt can be found <a href=""https://github.com/BranchMetrics/android-branch-deep-linking#instant-app-deep-linking-and-attribution-support"" rel=""noreferrer"">here</a>. And the usage looks like:</p>

<pre><code>if (Branch.isInstantApp(this)) {
  myFullAppInstallButton.setVisibility(View.VISIBLE);
  myFullAppInstallButton.setOnClickListener(new OnClickListener() {
    @Override
    public void onClick(View v) {
       BranchUniversalObject branchUniversalObject = new BranchUniversalObject()
           .setCanonicalIdentifier(""item/12345"")
           .setTitle(""My Content Title"")
           .setContentDescription(""My Content Description"")
           .setContentImageUrl(""https://example.com/mycontent-12345.png"")
           .setContentMetadata(new ContentMetadata()
                 .addCustomMetadata(""property1"", ""blue"")
                 .addCustomMetadata(""property2"", ""red""));

      Branch.showInstallPrompt(myActivity, activity_ret_code, branchUniversalObject);
    }
  });
} else {
  myFullAppInstallButton.setVisibility(View.GONE);
}
</code></pre>

<p>Branch's implementation ultimately calls through to the API mentioned in the other answer <a href=""https://developer.android.com/topic/instant-apps/reference.html#showinstallprompt"" rel=""noreferrer"">here</a>.</p>

<p>Which looks like:</p>

<pre><code>public static boolean showInstallPrompt(Activity activity, 
                                        Intent postInstallIntent, 
                                        int requestCode, 
                                        String referrer)
</code></pre>

<blockquote>
  <p>Shows a dialog that allows the user to install the current instant app. This method is a no-op if the current running process is an installed app. You must provide a post-install intent, which the system uses to start the application after install is complete.</p>
</blockquote>

<p>You can find an example usage <a href=""https://github.com/googlesamples/android-instant-apps/blob/master/install-api/features/install/src/main/java/com/instantappsamples/feature/install/InstallApiActivity.kt"" rel=""noreferrer"">here</a>. And looks like the following:</p>

<pre><code>class InstallApiActivity : AppCompatActivity() {


    /**
     * Intent to launch after the app has been installed.
     */
    private val postInstallIntent = Intent(Intent.ACTION_VIEW,
            Uri.parse(""https://install-api.instantappsample.com/"")).
            addCategory(Intent.CATEGORY_BROWSABLE).
            putExtras(Bundle().apply {
                putString(""The key to"", ""sending data via intent"")
            })

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_install)

        val isInstantApp = InstantApps.isInstantApp(this)

        findViewById&lt;Button&gt;(R.id.start_installation).apply {
            isEnabled = isInstantApp
            // Show the installation prompt only for an instant app.
            if (isInstantApp) {
                setOnClickListener {
                    InstantApps.showInstallPrompt(this@InstallApiActivity,
                            postInstallIntent,
                            REQUEST_CODE,
                            REFERRER)
                }
            }
        }
    }

    companion object {
        private val REFERRER = ""InstallApiActivity""
        private val REQUEST_CODE = 7
    }
}
</code></pre>

<p>It's not recommended because it's deprecated, but you can technically get the dialog to show using the following code:</p>

<pre><code>InstantApps.showInstallPrompt(activity, Constants.INSTALL_INSTANT_APP_REQUEST_CODE, null);
</code></pre>

<p>See also: <a href=""https://stackoverflow.com/a/47666873/1759443"">https://stackoverflow.com/a/47666873/1759443</a></p>
",1759443,,,,,2018-01-16 19:41:31,,,,0,,,
Android,48375721,2,,48005850,2018-01-22 6:26:15,2957,,1,,"<p><a href=""https://github.com/googlesamples/android-RuntimePermissions/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-RuntimePermissions/</a></p>

<p>is the root directory of one android project which has <code>Application</code> as module.
Open root android project as show as below</p>

<p><a href=""https://i.stack.imgur.com/UfjsX.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UfjsX.png"" alt=""Click ok button to open root project""></a></p>

<p>Click <strong>ok</strong> button to open <code>root project</code></p>

<p>But the issue is Application module doesn't have build.gradle file. So it won't load as a module.
Create one build.gradle file inside Application folder and paste the below code</p>

<pre><code>    apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion ""26.0.2""
    defaultConfig {
        applicationId ""com.example.android.system.runtimepermissions""
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName ""1.0""
        testInstrumentationRunner ""android.support.test.runner.AndroidJUnitRunner""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile ""com.android.support:support-v13:26.0.0""
    compile ""com.android.support:appcompat-v7:26.0.0""
    compile 'com.android.support:design:26.0.0'
    testCompile 'junit:junit:4.12'
}
repositories {
    mavenCentral()
}
</code></pre>

<p>There are some error inside styles.xml about resource not found. Please correct it and use.</p>

<p><a href=""https://github.com/googlesamples/android-RuntimePermissions/tree/master/kotlinApp"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-RuntimePermissions/tree/master/kotlinApp</a></p>

<p><code>kotlinApp</code> is another folder which have no connection with above project. It is another android project which have <code>app</code> as module
Open kotlinApp android project as show as below :</p>

<p><a href=""https://i.stack.imgur.com/XHfy2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XHfy2.png"" alt=""Open kotlinApp project""></a></p>

<p>Click <strong>ok</strong> button to open <code>kotlinApp</code> android project</p>

<p>In short, this repository consist of two android project. One is <strong>root folder</strong> and another is <strong>kotlinApp</strong> <strong>folder</strong>.</p>
",3451344,,3451344,,2018-01-22 6:51:33,2018-01-22 6:51:33,,,,0,,,
Android,48389346,2,,48355277,2018-01-22 19:59:36,2958,,2,,"<p>As mentioned by keyboardsurfer, your dependency assumption is in the right direction.</p>

<ul>
<li><p><strong>Base</strong> is at the root and acts like a library shared by all the
non-base feature modules, so its shared dependencies should be set with
<code>api</code> so that modules that depend on it can also access them. (though, base doesn't have to act only like a library, it can
also be a feature APK itself)</p></li>
<li><p><strong>Features</strong>, as an instant app, each one extends out to the end as its own APK, so there's no reason it should be leaking its dependencies to any other modules and therefore dependencies should be set with <code>implementation</code> here.</p></li>
</ul>

<p>Within the <a href=""https://github.com/googlesamples/android-instant-apps"" rel=""nofollow noreferrer"">Google Samples</a>, the cookie-api and install-api are some samples that more clearly demonstrate the <a href=""https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#new_configurations"" rel=""nofollow noreferrer"">dependency configuration usage</a> as how I explained above.</p>
",6668797,,6668797,,2018-09-21 21:28:06,2018-09-21 21:28:06,,,,0,,,
Android,48417998,2,,48168544,2018-01-24 8:34:34,2959,,8,,"<p>This is primarily a design problem. As you stated that there is already a large amount of code in the project, one approach would be to analyse the UML diagram for the entire project structure. The goal is to identify regions of the architecture where the interactions are closely coupled between a few classes, groups may also be formed based on which classes have the same external dependencies. </p>

<p>With this approach, you reduce the complexity of the large project, de-coupling classes from external dependencies which they do not use in the large project. The invididual modules which you split the project into will have faster build times. The modules which you split the project into can then be referenced in the main project as dependencies. The additional benefit is that only the modified modules in the main project will be rebuilt each time you make changes.</p>

<p><a href=""https://stackoverflow.com/questions/17123384/how-to-generate-class-diagram-uml-on-android-studio/36823007#36823007"">This Stack Overflow post</a> discusses many UML diagram generator plugins for Android Studio. <strong>Code Iris</strong> is a good option that you can install via the Android Studio plugin menu. As an example, here is the output from Code Iris on a <a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/FaceTracker"" rel=""noreferrer"">sample <code>FaceTracker</code> Android application</a> (click on the diagram to enlarge):</p>

<p><a href=""https://i.stack.imgur.com/3ipeo.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/3ipeo.png"" alt=""enter image description here""></a></p>

<p>The diagram here shows the grouping of packages and projects. You can see that different projects are split into separate green boxes, within these boxes, are boxes for the packages and then finally classes and interactions. By analysing the UML, you can first identify how to best group your classes and create individual projects. Once you split the main project into modules, you can then use Code Iris again to visualise interactions after changes have been made to the structure. </p>
",1897312,,1897312,,2018-01-24 11:58:04,2018-01-24 11:58:04,,,,0,,,
Android,48433139,2,,48422327,2018-01-24 23:02:19,2960,,1,,"<p>I already had this doubt one day and I was not finding a solution for that (I was getting crazy), so I found the solution reading the <a href=""https://developer.android.com/guide/index.html?hl=pt-br"" rel=""nofollow noreferrer"">android developer official guide</a>. I noticed I was doing something like your question and I was on the wrong road, cause any looping running on the currently Activity will always blocks the UI interation.</p>

<p><strong>Solution:</strong></p>

<p>The solution for this problem is creat at least two runnable classes (extends Threads), to be both runnable in a new Thread different from the currently Activity.</p>

<p>Create the first runnable class only to management the lifecycle of the connection and another to exchange of messages between the rfid devices and the smartphone.</p>

<p>I recommend you to study this simple <a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow noreferrer"">BluetoothChat example</a> and maybe you will have your questions answereds.</p>

<p>I hope this tips helps you!</p>

<p>Regards,
Renan Schroeder</p>
",8868923,,,,,2018-01-24 23:02:19,,,,1,,,
Android,48439022,2,,48438754,2018-01-25 8:57:29,2960,,2,,"<p>The <code>Presenter</code> acts as the bridge or the middle man between <code>View</code> and <code>Model</code>, so <strong>it must be called on the View</strong>. </p>

<p><code>onActivityResult</code> will be as is on your <code>fragment</code>. and then, if you need to save the result from the scan, that's the time you need to call the <code>presenter</code>.</p>

<blockquote>
  <p>A presenter typically hosts business logic associated with a particular feature, and the corresponding view handles the Android UI work. The view contains almost no logic; it converts the presenter's commands to UI actions, and listens for user actions, which are then passed to the presenter.</p>
</blockquote>

<p><em>Reference: <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/tree/todo-mvp/</a></em></p>

<p>You might be mistaken the <code>onActivityResult</code> is where the business logic is, <strong>it is not</strong>. That's why you need to pass it to the <code>presenter</code> when you get the result so the presenter will process (business logic) it and then give it to your repository that will save it.</p>
",9038584,,9038584,,2018-01-25 9:03:46,2018-01-25 9:03:46,,,,5,,,
Android,48471158,2,,48416405,2018-01-26 23:49:13,2962,,1,,"<p>I would create a device policy controller app that is provisioned on the device as a device owner using Android Enterprise (Android for Work) APIs.
<a href=""https://developers.google.com/android/work/dpc/build-dpc"" rel=""nofollow noreferrer"">https://developers.google.com/android/work/dpc/build-dpc</a></p>

<p>As a device owner, you can set your app in lock task mode which is generally used for kiosks.
<a href=""https://developer.android.com/work/cosu.html"" rel=""nofollow noreferrer"">https://developer.android.com/work/cosu.html</a></p>

<p>Then, you can set user restrictions:<br>
<a href=""https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addUserRestriction(android.content.ComponentName,%20java.lang.String)"" rel=""nofollow noreferrer"">addUserRestriction</a> api<br>
<a href=""https://developer.android.com/reference/android/os/UserManager.html#Constants"" rel=""nofollow noreferrer"">user restrictions list</a><br>
The user restrictions don't cover everything in the settings app, but the coverage is pretty good.</p>

<p>Then I would provision it using NFC or QR code reader from the Google Setup Wizard welcome screen.
<a href=""https://github.com/googlesamples/android-NfcProvisioning"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-NfcProvisioning</a></p>

<p>You might want to also look at existing open source EMM/MDM implementations that already exist such as WSO2.</p>

<p>Other references:<br>
<a href=""https://stackoverflow.com/questions/46727461/how-to-enable-task-locking-in-android-5-0-production-devices/"">How to enable task locking in Android 5.0 production devices</a><br>
<a href=""https://stackoverflow.com/questions/46811159/how-to-make-sure-there-is-only-one-app/"">How to make sure there is only one app</a></p>
",6917917,,,,,2018-01-26 23:49:13,,,,1,,,
Android,48539101,2,,47830338,2018-01-31 9:50:17,2966,,1,,"<p>From your question it appears you want to have a font available to your app which is downloaded programmatically when the app is run (rather than being bundled with the app).</p>

<p>You also said you are aware of the new <a href=""https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts.html"" rel=""nofollow noreferrer"">Downloadable Fonts</a> feature, but that ""that applies only to google fonts"".  This is not correct.  The <a href=""https://github.com/googlesamples/android-DownloadableFonts/tree/master/app"" rel=""nofollow noreferrer"">sample app</a> does use Google Play Services' built-in font provider.  However, according to the documentation, you can also use your <em>own</em> font provider backed by your <em>own</em> online font-providing server.</p>

<p>I haven't tried this, but I imagine your custom ""<code>FontsProvider</code>"" class (an extended <a href=""https://developer.android.com/reference/android/content/ContentProvider.html"" rel=""nofollow noreferrer""><code>ContentProvider</code></a>) would honor the <a href=""https://developer.android.com/reference/android/provider/FontsContract.html"" rel=""nofollow noreferrer""><code>FontsContract</code></a> introduced in API 26.  When it received a <a href=""https://developer.android.com/reference/android/provider/FontRequest.html"" rel=""nofollow noreferrer""><code>FontRequest</code></a>, it would find the font from its local cache (or alternatively on a server you're running), then return a <a href=""https://developer.android.com/reference/android/graphics/Typeface.html"" rel=""nofollow noreferrer""><code>Typeface</code></a> through a <a href=""https://developer.android.com/reference/android/provider/FontsContract.FontRequestCallback.html"" rel=""nofollow noreferrer""><code>FontsContract.FontRequestCallback</code></a> exactly as the Google Play Services one does.  (Again, look at the docs-- you have the option to require or not require a certificate.)</p>

<p>A custom <code>FontProvider</code> could be bundled within a third-party app (say a typeface company that provides fonts).  But I don't see why you couldn't add your own <code>FontProvider</code> within your own app, and have it contact your server and handle all the caching stuff yourself.</p>

<p>Incidentally, if you're curious about the API the Google Font service uses to offer information about the fonts (including links to the actual files), see <a href=""https://developers.google.com/fonts/docs/developer_api"" rel=""nofollow noreferrer"">here</a>.  In answering another font-related question, I wrote a <a href=""https://stackoverflow.com/questions/47051069/downloadable-fonts-cant-download-some-google-fonts/48248557#48248557"">very simple python program</a> that gets a list of all the fonts, then parses and filters it, which may be slightly helpful if you decide to write your own back end font provider service.</p>
",3035127,,,,,2018-01-31 9:50:17,,,,1,,,
Android,48582961,2,,47870971,2018-02-02 12:42:07,2969,,1,,"<p>The Guide to App Architecture shows an example of <a href=""https://developer.android.com/topic/libraries/architecture/guide.html#addendum"" rel=""nofollow noreferrer"">how to expose network status</a>. I guess you can modify the following generic class by adding your progress percentage while loading.</p>

<pre><code>//a generic class that describes a data with a status
public class Resource&lt;T&gt; {
    @NonNull public final Status status;
    @Nullable public final T data;
    @Nullable public final String message;
    private Resource(@NonNull Status status, @Nullable T data, @Nullable String message) {
        this.status = status;
        this.data = data;
        this.message = message;
    }

    public static &lt;T&gt; Resource&lt;T&gt; success(@NonNull T data) {
        return new Resource&lt;&gt;(SUCCESS, data, null);
    }

    public static &lt;T&gt; Resource&lt;T&gt; error(String msg, @Nullable T data) {
        return new Resource&lt;&gt;(ERROR, data, msg);
    }

    public static &lt;T&gt; Resource&lt;T&gt; loading(@Nullable T data) {
        return new Resource&lt;&gt;(LOADING, data, null);
    }
}
</code></pre>

<p>Also, you can check a full implementation <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt"" rel=""nofollow noreferrer"">here</a>.</p>
",3185230,,1245166,,2018-07-02 14:29:17,2018-07-02 14:29:17,,,,1,,,
Android,48586767,2,,6181704,2018-02-02 16:18:17,2969,,1,,"<p>I scoured the internet for an updated (past year) answer using the latest location pulling methods suggested by google (to use FusedLocationProviderClient).  I finally landed on this:</p>

<p><a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/tree/master/LocationUpdates</a></p>

<p>I created a new project and copied in most of this code.  Boom.  It works.  And I think without any deprecated lines.  </p>

<p>Also, the simulator doesn't seem to get a GPS location, that I know of.  It did get as far as reporting this in the log:  ""All location settings are satisfied.""</p>

<p>And finally, in case you wanted to know (I did), you DO NOT need a google maps api key from the google developer console, if all you want is the GPS location.</p>

<p>Also useful is their tutorial.  But I wanted a full one page tutorial/code example, and that.  Their tutorial stacks but is confusing when you're new to this because you don't know what pieces you need from earlier pages. </p>

<p><a href=""https://developer.android.com/training/location/index.html"" rel=""nofollow noreferrer"">https://developer.android.com/training/location/index.html</a> </p>

<p>And finally, remember things like this:</p>

<p>I not only had to modify the mainActivity.Java.  I also had to modify Strings.xml, androidmanifest.xml, AND the correct build.gradle.  And also your activity_Main.xml (but that part was easy for me).</p>

<p>I needed to add dependencies like this one: implementation 'com.google.android.gms:play-services-location:11.8.0', and update the settings of my android studio SDK to include google play services. (file   settings  appearance   system settings   android SDK   SDK Tools     check google play services).   </p>

<p>update:  the android simulator did seem to get a location and location change events (when I changed the value in the settings of the sim).  But my best and first results were on an actual device.  So it's probably easiest to test on actual devices.</p>
",125062,,125062,,2018-02-07 15:32:14,2018-02-07 15:32:14,,,,0,,,
Android,48594233,2,,48277743,2018-02-03 5:26:22,2969,,1,,"<p>Great Question this was what i was looking for and I get one that might be useful</p>

<p>(Its all about Intent) </p>

<p><a href=""https://github.com/googlesamples/android-AppShortcuts"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-AppShortcuts</a></p>

<p><strong>Note: If your app is static its simple to implement.</strong></p>

<p><strong>Updated:::</strong></p>

<p>Here is a link that will show you the difference of dynamic or static shortcuts and its implementation if you like it please up vote.</p>

<p><a href=""https://www.novoda.com/blog/exploring-android-nougat-7-1-app-shortcuts/"" rel=""nofollow noreferrer"">https://www.novoda.com/blog/exploring-android-nougat-7-1-app-shortcuts/</a></p>
",9287163,,9287163,,2018-02-03 9:00:07,2018-02-03 9:00:07,,,,3,,,
Android,48604573,2,,48602979,2018-02-04 4:03:03,2970,,5,,"<p>After a little more digging I've found a utility method Google provided through their Architecture Components examples on GitHub.</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/androidTest/java/com/example/android/persistence/LiveDataTestUtil.java"" rel=""nofollow noreferrer"">LiveDataTestUtil</a></p>

<pre><code>public class LiveDataTestUtil {

    /**
     * Get the value from a LiveData object. We're waiting for LiveData to emit, for 2 seconds.
     * Once we got a notification via onChanged, we stop observing.
     */
    public static &lt;T&gt; T getValue(final LiveData&lt;T&gt; liveData) throws InterruptedException {
        final Object[] data = new Object[1];
        final CountDownLatch latch = new CountDownLatch(1);
        Observer&lt;T&gt; observer = new Observer&lt;T&gt;() {
            @Override
            public void onChanged(@Nullable T o) {
                data[0] = o;
                latch.countDown();
                liveData.removeObserver(this);
            }
        };
        liveData.observeForever(observer);
        latch.await(2, TimeUnit.SECONDS);
        //noinspection unchecked
        return (T) data[0];
    }
}
</code></pre>

<p>This allows you to pass the LiveData instance and get back the value it holds.</p>

<p><strong>Update:</strong>
You can also use the <a href=""https://developer.android.com/reference/android/arch/core/executor/testing/InstantTaskExecutorRule"" rel=""nofollow noreferrer"">InstantTaskExecutorRule</a> combined with <a href=""https://developer.android.com/reference/android/arch/lifecycle/LiveData.html#observeforever"" rel=""nofollow noreferrer"">observeForever</a> to test your LiveData. In Kotlin you set <code>@get:Rule val instantTaskExecutorRule = InstantTaskExecutorRule()</code> at the top of your test class to ensure LiveData is handled synchronously, then inside your test cases <code>myLiveData.observeForever { /* Do something when event emitted */ }</code> to get the LiveData value.</p>
",5057537,,5057537,,2018-10-20 5:37:37,2018-10-20 5:37:37,,,,3,,,
Android,48666213,2,,48665795,2018-02-07 14:25:36,2974,,1,,"<p>You can disable your EditText fields using the following instructions:</p>

<p><a href=""https://stackoverflow.com/a/33582335/3268303"">https://stackoverflow.com/a/33582335/3268303</a></p>

<p>Applications will normally share add/edit screens, but not necessarily view/edit.</p>

<p>An example of add/edit sharing is here:</p>

<p><a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/addedittask"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/tree/todo-mvp/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/addedittask</a></p>

<pre><code>public class AddEditTaskPresenter implements AddEditTaskContract.Presenter,
    TasksDataSource.GetTaskCallback {

@NonNull
private final TasksDataSource mTasksRepository;

@NonNull
private final AddEditTaskContract.View mAddTaskView;

@Nullable
private String mTaskId;

private boolean mIsDataMissing;

/**
 * Creates a presenter for the add/edit view.
 *
 * @param taskId ID of the task to edit or null for a new task
 * @param tasksRepository a repository of data for tasks
 * @param addTaskView the add/edit view
 * @param shouldLoadDataFromRepo whether data needs to be loaded or not (for config changes)
 */
public AddEditTaskPresenter(@Nullable String taskId, @NonNull TasksDataSource tasksRepository,
        @NonNull AddEditTaskContract.View addTaskView, boolean shouldLoadDataFromRepo) {
    mTaskId = taskId;
    mTasksRepository = checkNotNull(tasksRepository);
    mAddTaskView = checkNotNull(addTaskView);
    mIsDataMissing = shouldLoadDataFromRepo;

    mAddTaskView.setPresenter(this);
}

@Override
public void start() {
    if (!isNewTask() &amp;&amp; mIsDataMissing) {
        populateTask();
    }
}

@Override
public void saveTask(String title, String description) {
    if (isNewTask()) {
        createTask(title, description);
    } else {
        updateTask(title, description);
    }
}

@Override
public void populateTask() {
    if (isNewTask()) {
        throw new RuntimeException(""populateTask() was called but task is new."");
    }
    mTasksRepository.getTask(mTaskId, this);
}

@Override
public void onTaskLoaded(Task task) {
    // The view may not be able to handle UI updates anymore
    if (mAddTaskView.isActive()) {
        mAddTaskView.setTitle(task.getTitle());
        mAddTaskView.setDescription(task.getDescription());
    }
    mIsDataMissing = false;
}

@Override
public void onDataNotAvailable() {
    // The view may not be able to handle UI updates anymore
    if (mAddTaskView.isActive()) {
        mAddTaskView.showEmptyTaskError();
    }
}

@Override
public boolean isDataMissing() {
    return mIsDataMissing;
}

private boolean isNewTask() {
    return mTaskId == null;
}

private void createTask(String title, String description) {
    Task newTask = new Task(title, description);
    if (newTask.isEmpty()) {
        mAddTaskView.showEmptyTaskError();
    } else {
        mTasksRepository.saveTask(newTask);
        mAddTaskView.showTasksList();
    }
}

private void updateTask(String title, String description) {
    if (isNewTask()) {
        throw new RuntimeException(""updateTask() was called but task is new."");
    }
    mTasksRepository.saveTask(new Task(title, description, mTaskId));
    mAddTaskView.showTasksList(); // After an edit, go back to the list.
}
}
</code></pre>
",3268303,,3268303,,2018-02-07 14:34:15,2018-02-07 14:34:15,,,,3,,,
Android,48666854,2,,48527171,2018-02-07 14:58:17,2974,,47,,"<p><strong>Nougat and Above:</strong>
We have to use JobScheduler and JobService for Connection Changes. </p>

<p>All I can divide this into three steps. </p>

<blockquote>
  <p>Register JobScheduler inside activity. Also, Start JobService( 
  Service to handle callbacks from the JobScheduler. Requests scheduled
  with the JobScheduler ultimately land on this service's ""onStartJob""
  method.)</p>
</blockquote>

<pre><code>public class NetworkConnectionActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_network_connection);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        scheduleJob();

    }


    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    private void scheduleJob() {
        JobInfo myJob = new JobInfo.Builder(0, new ComponentName(this, NetworkSchedulerService.class))
                .setRequiresCharging(true)
                .setMinimumLatency(1000)
                .setOverrideDeadline(2000)
                .setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY)
                .setPersisted(true)
                .build();

        JobScheduler jobScheduler = (JobScheduler) getSystemService(Context.JOB_SCHEDULER_SERVICE);
        jobScheduler.schedule(myJob);
    }

    @Override
    protected void onStop() {
        // A service can be ""started"" and/or ""bound"". In this case, it's ""started"" by this Activity
        // and ""bound"" to the JobScheduler (also called ""Scheduled"" by the JobScheduler). This call
        // to stopService() won't prevent scheduled jobs to be processed. However, failing
        // to call stopService() would keep it alive indefinitely.
        stopService(new Intent(this, NetworkSchedulerService.class));
        super.onStop();
    }

    @Override
    protected void onStart() {
        super.onStart();
        // Start service and provide it a way to communicate with this class.
        Intent startServiceIntent = new Intent(this, NetworkSchedulerService.class);
        startService(startServiceIntent);
    }
}
</code></pre>

<blockquote>
  <p>The service to start and finish the job.</p>
</blockquote>

<pre><code>public class NetworkSchedulerService extends JobService implements
        ConnectivityReceiver.ConnectivityReceiverListener {

    private static final String TAG = NetworkSchedulerService.class.getSimpleName();

    private ConnectivityReceiver mConnectivityReceiver;

    @Override
    public void onCreate() {
        super.onCreate();
        Log.i(TAG, ""Service created"");
        mConnectivityReceiver = new ConnectivityReceiver(this);
    }



    /**
     * When the app's NetworkConnectionActivity is created, it starts this service. This is so that the
     * activity and this service can communicate back and forth. See ""setUiCallback()""
     */
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.i(TAG, ""onStartCommand"");
        return START_NOT_STICKY;
    }


    @Override
    public boolean onStartJob(JobParameters params) {
        Log.i(TAG, ""onStartJob"" + mConnectivityReceiver);
        registerReceiver(mConnectivityReceiver, new IntentFilter(Constants.CONNECTIVITY_ACTION));
        return true;
    }

    @Override
    public boolean onStopJob(JobParameters params) {
        Log.i(TAG, ""onStopJob"");
        unregisterReceiver(mConnectivityReceiver);
        return true;
    }

    @Override
    public void onNetworkConnectionChanged(boolean isConnected) {
        String message = isConnected ? ""Good! Connected to Internet"" : ""Sorry! Not connected to internet"";
        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();

    }
}
</code></pre>

<blockquote>
  <p>Finally, The receiver class which checks the network connection
  changes.</p>
</blockquote>

<pre><code>public class ConnectivityReceiver extends BroadcastReceiver {

    private ConnectivityReceiverListener mConnectivityReceiverListener;

    ConnectivityReceiver(ConnectivityReceiverListener listener) {
        mConnectivityReceiverListener = listener;
    }


    @Override
    public void onReceive(Context context, Intent intent) {
        mConnectivityReceiverListener.onNetworkConnectionChanged(isConnected(context));

    }

    public static boolean isConnected(Context context) {
        ConnectivityManager cm = (ConnectivityManager)
                context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        return activeNetwork != null &amp;&amp; activeNetwork.isConnectedOrConnecting();
    }

    public interface ConnectivityReceiverListener {
        void onNetworkConnectionChanged(boolean isConnected);
    }
}
</code></pre>

<blockquote>
  <p>Don't forget to add permission and service inside manifest file.</p>
</blockquote>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest xmlns:android=""http://schemas.android.com/apk/res/android""
          package=""com.yourpackagename""&gt;

    &lt;uses-permission android:name=""android.permission.INTERNET""/&gt;
    &lt;uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/&gt;


    &lt;!-- Always required on api &lt; 21, needed to keep a wake lock while your job is running --&gt;
    &lt;uses-permission android:name=""android.permission.WAKE_LOCK""/&gt;
    &lt;!-- Required on api &lt; 21 if you are using setRequiredNetworkType(int) --&gt;
    &lt;uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/&gt;
    &lt;!-- Required on all api levels if you are using setPersisted(true) --&gt;
    &lt;uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED""/&gt;

    &lt;application
        android:allowBackup=""true""
        android:icon=""@mipmap/ic_launcher""
        android:label=""@string/app_name""
        android:roundIcon=""@mipmap/ic_launcher_round""
        android:supportsRtl=""true""
        android:theme=""@style/AppTheme""&gt;
        &lt;activity
            android:name="".connectivity.NetworkConnectionActivity""
            android:theme=""@style/AppTheme.NoActionBar""&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.MAIN""/&gt;

                &lt;category android:name=""android.intent.category.LAUNCHER""/&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;


        &lt;!-- Define your service, make sure to add the permision! --&gt;
        &lt;service
            android:name="".connectivity.NetworkSchedulerService""
            android:exported=""true""
            android:permission=""android.permission.BIND_JOB_SERVICE""/&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</code></pre>

<p>Please refer below links for more info. </p>

<p><a href=""https://github.com/jiteshmohite/Android-Network-Connectivity"" rel=""noreferrer"">https://github.com/jiteshmohite/Android-Network-Connectivity</a></p>

<p><a href=""https://github.com/evant/JobSchedulerCompat"" rel=""noreferrer"">https://github.com/evant/JobSchedulerCompat</a></p>

<p><a href=""https://github.com/googlesamples/android-JobScheduler"" rel=""noreferrer"">https://github.com/googlesamples/android-JobScheduler</a></p>

<p><a href=""https://medium.com/@iiro.krankka/its-time-to-kiss-goodbye-to-your-implicit-broadcastreceivers-eefafd9f4f8a"" rel=""noreferrer"">https://medium.com/@iiro.krankka/its-time-to-kiss-goodbye-to-your-implicit-broadcastreceivers-eefafd9f4f8a</a></p>
",5106574,,5106574,,2018-02-07 18:00:44,2018-02-07 18:00:44,,,,22,,,
Android,48669966,2,,48669622,2018-02-07 17:31:28,2974,,1,,"<p>I believe the google example is flawed. The sample will result in a memory leak if activity is destroyed. A better approach would be using a local broadcast receiver or an Event Bus or RxJava/RxAndroid<br>
<a href=""https://github.com/googlesamples/android-play-location/issues/60"" rel=""nofollow noreferrer"">Issue is already reported here</a></p>
",7639117,,,,,2018-02-07 17:31:28,,,,1,,,
Android,48671621,2,,48671257,2018-02-07 19:14:15,2974,,2,,"<p>On delete/update click you will need to update your model (your repository). The repository will emit a new <code>LiveData</code> item, the adapter will be updated and <code>DiffUtils</code> will do it's job. It will either remove or update the item.</p>

<p>For example a delete action:</p>

<ul>
<li>Set a click listener to the Delete button</li>
<li>From the listener call <code>viewModel.deleteItem(id)</code> (this is your <code>ZoneListViewModel</code>)</li>
<li>In the <code>ViewModel</code> call <code>repository.deleteItem(id)</code></li>
<li>In the repository use Room to delete the item</li>
<li>Room will emit a new value with the updated list (without the deleted item).</li>
<li>The Adapter observes this list and together with <code>DiffUtils</code> will remove the item.</li>
</ul>

<p>Here is an example from <a href=""https://github.com/googlesamples/android-architecture/tree/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks"" rel=""nofollow noreferrer"">android-architecture-blueprints</a></p>
",1011435,,,,,2018-02-07 19:14:15,,,,0,,,
Android,48680929,2,,39022845,2018-02-08 8:32:41,2974,,8,,"<p>After looking at MrOnyszko answer i followed a slightly different approach: </p>

<p>In the <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""noreferrer"">Camera2Basic</a> Tutorial a lens facing direction is used to set up the right camera, so i changed this direction before closing and reopening the camera. </p>

<pre><code>private void switchCamera() {
    if (mCameraLensFacingDirection == CameraCharacteristics.LENS_FACING_BACK) {
        mCameraLensFacingDirection = CameraCharacteristics.LENS_FACING_FRONT;
        closeCamera();
        reopenCamera();

    } else if (mCameraLensFacingDirection == CameraCharacteristics.LENS_FACING_FRONT) {
        mCameraLensFacingDirection = CameraCharacteristics.LENS_FACING_BACK;
        closeCamera();
        reopenCamera();
    }
}

private void reopenCamera() {
    if (mTextureView.isAvailable()) {
        openCamera(mTextureView.getWidth(), mTextureView.getHeight());
    } else {
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
    }
}


private void setUpCameraOutputs(int width, int height) {
    Activity activity = getActivity();
    CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
    try {
        for (String cameraId : manager.getCameraIdList()) {
            CameraCharacteristics characteristics
                    = manager.getCameraCharacteristics(cameraId);

            Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
            if (facing != null &amp;&amp; facing != mCameraLensFacingDirection) {
                continue;
            }
            ...
</code></pre>
",8820628,,8820628,,2018-02-08 8:39:38,2018-02-08 8:39:38,,,,1,,,
Android,48712165,2,,48712071,2018-02-09 18:39:52,2976,,1,,"<blockquote>
  <p>i see some people using asyncTask but i dont think this is the corret way or using another library like RXjava</p>
</blockquote>

<p>It is correct </p>

<blockquote>
  <p>where i can call it? </p>
</blockquote>

<p>On a separate thread. The simplest non-Android example would be</p>

<pre><code>// works (pre-java8)
Thread t = new Thread() {
    @Override
    public void run() {
        mAppDatabase.userDao().insert(u);
    }
};
t.start();
</code></pre>

<p>The <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/BasicRxJavaSample"" rel=""nofollow noreferrer"">Android example architecture</a> code is a good starting point for doing RX work. </p>

<p>Kotlin also provides simpler threading syntax</p>
",2308683,,,,,2018-02-09 18:39:52,,,,3,,,
Android,48723201,2,,48611150,2018-02-10 16:52:58,2977,,1,,"<p>Using a listener is not recommended. The android-architecture project uses a <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">SingleLiveEvent</a> class for events like navigation or displaying a <code>Snackbar</code>. You can use the same class for showing a dialog.</p>

<p>In your <code>OverviewViewModel</code> you can add another field:</p>

<pre><code>final SingleLiveEvent&lt;Void&gt; tokenLiveData = SingleLiveEvent&lt;Void&gt;();
</code></pre>

<p>in your <code>onFaliure</code> callback you can use:</p>

<pre><code>tokenLiveData.call()
</code></pre>

<p>instead of the callback.</p>

<p>In your activity subscribe to <code>tokenLiveData</code> and show a dialog when it emits a value.</p>
",1011435,,,,,2018-02-10 16:52:58,,,,0,,,
Android,48735981,2,,48723474,2018-02-11 20:15:15,2978,,1,,"<p>Let's say from ActivityA you click a button which starts ActivityB:</p>

<pre><code>Intent intent = new Intent(this, ActivityB.class);
                intent.putExtra(""MY_EXTRA"", ""MY EXTRA VALUE"");
</code></pre>

<p>A test which checks that you're sending the right data to ActivityB would be:</p>

<pre><code>@Rule
public IntentsTestRule&lt;ActivityA&gt; intentsTestRule = new IntentsTestRule&lt;&gt;(ActivityA.class);

@Test
public void testIntents() {
    //from ActivityA, click the button which starts the ActivityB
    onView(withText(""ClickMe"")).perform(click());

    //validate intent and check its data
    intended(allOf(
            toPackage(""com.your.package.name""),
            hasExtra(""MY_EXTRA"", ""MY EXTRA VALUE"")
    ));
}
</code></pre>

<p>Check out the examples provided by google: <a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IntentsBasicSample</a> </p>

<p>and some documentation here: <a href=""https://developer.android.com/training/testing/espresso/intents.html"" rel=""nofollow noreferrer"">https://developer.android.com/training/testing/espresso/intents.html</a>.</p>
",5940488,,5940488,,2018-02-12 9:00:07,2018-02-12 9:00:07,,,,0,,,
Android,48773125,2,,48687470,2018-02-13 18:16:38,2980,,5,,"<p>Synchronising audio for karaoke apps is tough. The main issue you seem to be facing is variable latency in the output stream. </p>

<p>This is almost certainly caused by ""warm up"" latency: the time it takes from hitting ""play"" on your backing track to the first frame of audio data being rendered by the audio device (e.g. headphones). This can have large variance and is difficult to measure. </p>

<p>The first (and easiest) thing to try is to use <code>MODE_STREAM</code> when constructing your <code>AudioTrack</code> and prime it with <code>bufferSizeInBytes</code> of data prior to calling play (<a href=""https://developer.android.com/reference/android/media/AudioTrack.html#play()"" rel=""noreferrer"">more here</a>). This should result in lower, more consistent ""warm up"" latency. </p>

<p>A better way is to use the <a href=""https://developer.android.com/ndk/guides/audio/index.html"" rel=""noreferrer"">Android NDK</a> to have a continuously running audio stream which is just outputting silence until the moment you hit play, then start sending audio frames immediately. The only latency you have here is the <em>continuous output latency</em>. </p>

<p>If you decide to go down this route I recommend taking a look at the <a href=""https://github.com/google/oboe"" rel=""noreferrer"">Oboe library</a> (full disclosure: I am one of the authors).</p>

<p>To answer one of your specific questions... </p>

<p><strong>Is there a way to calculate the latency of the audio output stream programatically?</strong> </p>

<p>Yes. The easiest way to explain this is with a <a href=""https://github.com/googlesamples/android-audio-high-performance/blob/master/aaudio/hello-aaudio/src/main/cpp/PlayAudioEngine.cpp#L288"" rel=""noreferrer"">code sample</a> (this is C++ for the AAudio API but the principle is the same using Java AudioTrack): </p>

<pre><code>// Get the index and time that a known audio frame was presented for playing
int64_t existingFrameIndex;
int64_t existingFramePresentationTime;
AAudioStream_getTimestamp(stream, CLOCK_MONOTONIC, &amp;existingFrameIndex, &amp;existingFramePresentationTime);

// Get the write index for the next audio frame
int64_t writeIndex = AAudioStream_getFramesWritten(stream);

// Calculate the number of frames between our known frame and the write index
int64_t frameIndexDelta = writeIndex - existingFrameIndex;

// Calculate the time which the next frame will be presented
int64_t frameTimeDelta = (frameIndexDelta * NANOS_PER_SECOND) / sampleRate_;
int64_t nextFramePresentationTime = existingFramePresentationTime + frameTimeDelta;

// Assume that the next frame will be written into the stream at the current time
int64_t nextFrameWriteTime = get_time_nanoseconds(CLOCK_MONOTONIC);

// Calculate the latency
*latencyMillis = (double) (nextFramePresentationTime - nextFrameWriteTime) / NANOS_PER_MILLISECOND;
</code></pre>

<p>A caveat: This method relies on accurate timestamps being reported by the audio hardware. I know this works on Google Pixel devices but have heard reports that it isn't so accurate on other devices so YMMV. </p>
",824903,,,,,2018-02-13 18:16:38,,,,2,,,
Android,48802151,2,,48781647,2018-02-15 7:42:10,2981,,1,,"<p>Another way to do this so that the instant app APKs have the desired <strong><em><code>minSdkVersion</code></em></strong> is with this:</p>

<p><strong>App (com.android.instant.application) manifest:</strong></p>

<pre><code>&lt;uses-sdk tools:overrideLibrary=""com.example.feature""/&gt;
</code></pre>

<p><strong>App (com.android.instant.application) <code>gradle</code>:</strong></p>

<pre><code>minSdkVersion rootProject.minSdk
</code></pre>

<p><strong>Feature (com.android.instant.feature) <code>gradle</code>:</strong></p>

<pre><code>minSdkVersion rootProject.minSdkInstant
</code></pre>

<p><strong>This allowed me to build</strong></p>

<ul>
<li><em>Installed</em> app with <code>minSdk</code></li>
<li><em>Instant app</em> APKs with <code>minSdkInstant</code></li>
</ul>

<p>The only recommended way is to use <a href=""https://developer.android.com/studio/build/build-variants.html#flavor-dimensions"" rel=""nofollow noreferrer"">flavors</a>.</p>

<p>Besides the <code>tools:overrideLibrary</code> method, there are no other ways to do this.</p>

<p>The APKs are generated from the <strong><em>feature plugin</em></strong> and not from the <strong><em>instant App plugin</em></strong>.</p>

<p>Can you check <a href=""https://github.com/googlesamples/android-instant-apps/blob/master/configuration-apks/features/build.gradle"" rel=""nofollow noreferrer""><strong><em>android-instant-apps/configuration-apks/features/build.gradle</em></strong></a>
and this <a href=""https://stackoverflow.com/questions/46975251/use-of-configuration-apks-while-still-targeting-pre-lollipop-devices"">SO Question</a></p>
",2638235,,2638235,,2018-02-15 7:54:16,2018-02-15 7:54:16,,,,0,,,
Android,48834992,2,,44880841,2018-02-16 21:18:19,2983,,1,,"<p>To use MVVM with dagger check out <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample"" rel=""nofollow noreferrer"">this sample code</a> from google</p>

<p>It really did it very well and it uses the latest trends in dagger as well, like defining submodules and using new <code>AndroidInjection</code> for injecting activities and fragments. It also uses a custom factory for creating your view model that takes care of injecting the constructor fields. </p>
",2390217,,5457853,,2018-07-18 12:59:13,2018-07-18 12:59:13,,,,0,,,
Android,48837581,2,,44712248,2018-02-17 3:24:23,2983,,5,,"<p>You can enable constructor injection for your ViewModels. You can check out <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/ui/user/UserViewModel.java"" rel=""nofollow noreferrer"">Google samples</a> to see how to do it in Java. (Update: looks like they converted the project to Kotlin so this URL no longer works)</p>

<p>Here is how to do a similar thing in Kotlin:</p>

<p>Add ViewModelKey annotation:</p>

<pre><code>import android.arch.lifecycle.ViewModel

import java.lang.annotation.Documented
import java.lang.annotation.ElementType
import java.lang.annotation.Retention
import java.lang.annotation.RetentionPolicy
import java.lang.annotation.Target

import dagger.MapKey
import kotlin.reflect.KClass

@Suppress(""DEPRECATED_JAVA_ANNOTATION"")
@Documented
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@MapKey
internal annotation class ViewModelKey(val value: KClass&lt;out ViewModel&gt;)
</code></pre>

<p>Add ViewModelFactory:</p>

<pre><code>import android.arch.lifecycle.ViewModel
import android.arch.lifecycle.ViewModelProvider

import javax.inject.Inject
import javax.inject.Provider
import javax.inject.Singleton

@Singleton
class ViewModelFactory @Inject constructor(
    private val creators: Map&lt;Class&lt;out ViewModel&gt;, @JvmSuppressWildcards Provider&lt;ViewModel&gt;&gt;
) : ViewModelProvider.Factory {

    @Suppress(""UNCHECKED_CAST"")
    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {
        var creator: Provider&lt;out ViewModel&gt;? = creators[modelClass]

        if (creator == null) {
            for ((key, value) in creators) {
                if (modelClass.isAssignableFrom(key)) {
                    creator = value
                    break
                }
            }
        }

        if (creator == null) {
            throw IllegalArgumentException(""unknown model class "" + modelClass)
        }

        try {
            return creator.get() as T
        } catch (e: Exception) {
            throw RuntimeException(e)
        }
    }
}
</code></pre>

<p>Add ViewModelModule:</p>

<pre><code>import dagger.Module
import android.arch.lifecycle.ViewModel
import dagger.multibindings.IntoMap
import dagger.Binds
import android.arch.lifecycle.ViewModelProvider
import com.bubelov.coins.ui.viewmodel.EditPlaceViewModel

@Module
abstract class ViewModelModule {
    @Binds
    @IntoMap
    @ViewModelKey(EditPlaceViewModel::class) // PROVIDE YOUR OWN MODELS HERE
    internal abstract fun bindEditPlaceViewModel(editPlaceViewModel: EditPlaceViewModel): ViewModel

    @Binds
    internal abstract fun bindViewModelFactory(factory: ViewModelFactory): ViewModelProvider.Factory
}
</code></pre>

<p>Register your ViewModelModule in your component</p>

<p>Inject ViewModelProvider.Factory in your activity:</p>

<pre><code>@Inject lateinit var modelFactory: ViewModelProvider.Factory
private lateinit var model: EditPlaceViewModel
</code></pre>

<p>Pass your modelFactory to each ViewModelProviders.of method:</p>

<pre><code>model = ViewModelProviders.of(this, modelFactory)[EditPlaceViewModel::class.java]
</code></pre>

<p>Here is the sample commit which contains all of the required changes: <a href=""https://github.com/bubelov/coins-android/commit/56629d75569bc2937889b71299c21b9579ad96c4"" rel=""nofollow noreferrer"">Support constructor injection for view models</a></p>
",1042342,,1042342,,2018-05-31 5:45:16,2018-05-31 5:45:16,,,,3,,,
Android,48913928,2,,48892551,2018-02-21 19:26:04,2988,,2,,"<p>If you have a <code>BaseFragment</code> defined like this:</p>

<pre><code>public class BaseFragment&lt;T extends ViewModel&gt; extends Fragment {

    @Inject
    protected T viewModel;

}
</code></pre>

<p>You can use the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/util/ViewModelUtil.java"" rel=""nofollow noreferrer"">ViewModelUtils</a> class from the Architecture Components's Github browser sample to create <code>ViewModel</code> factories.</p>

<pre><code>/**
 * Creates a one off view model factory for the given view model instance.
 */
public class ViewModelUtil {
    private ViewModelUtil() {}
    public static &lt;T extends ViewModel&gt; ViewModelProvider.Factory createFor(T model) {
        return new ViewModelProvider.Factory() {
            @Override
            public &lt;T extends ViewModel&gt; T create(Class&lt;T&gt; modelClass) {
                if (modelClass.isAssignableFrom(model.getClass())) {
                    return (T) model;
                }
                throw new IllegalArgumentException(""unexpected model class "" + modelClass);
            }
        };
    }
}
</code></pre>

<p>In the <code>onActivityCreated</code> method of the <code>BaseFragment</code> you can add</p>

<pre><code>    @Override
    public void onActivityCreated(@Nullable final Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        ViewModelProvider.Factory viewModelFactory = ViewModelUtil.createFor(viewModel);
        ViewModelProviders.of(this, viewModelFactory).get(viewModel.getClass());
    }
</code></pre>

<p>The code for this technique is from <a href=""https://mag.n26.com/reducing-viewmodel-provision-boilerplate-in-googles-githubbrowsersample-549818ee72f0"" rel=""nofollow noreferrer"">this blog post</a>.</p>
",1011435,,,,,2018-02-21 19:26:04,,,,1,,,
Android,49000792,2,,47515997,2018-02-27 3:48:24,2993,,8,,"<p>In <a href=""https://developer.android.com/topic/libraries/architecture/viewmodel.html"" rel=""noreferrer"">ViewModel</a> documentation</p>

<blockquote>
  <p>However ViewModel objects must never observe changes to lifecycle-aware observables, such as LiveData objects.</p>
</blockquote>

<p>Another way is for the data to implement RxJava rather than LiveData, then it won't have the benefit of being lifecycle-aware.</p>

<p>In google sample of <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-live-kotlin/"" rel=""noreferrer"">todo-mvvm-live-kotlin</a>, it uses a callback without LiveData in ViewModel.  </p>

<p>I am guessing if you want to comply with the whole idea of being lifecycle-ware, we need to move observation code in Activity/Fragment. Else, we can use callback or RxJava in ViewModel.</p>

<p>Another compromise is implement MediatorLiveData (or Transformations) and observe (put your logic here) in ViewModel. Notice MediatorLiveData observer won't trigger (same as Transformations) unless it's observed in Activity/Fragment. What we do is we put a blank observe in Activity/Fragment, where the real work is actually done in ViewModel.</p>

<pre><code>// ViewModel
fun start(id : Long) : LiveData&lt;User&gt;? {
    val liveData = MediatorLiveData&lt;User&gt;()
    liveData.addSource(dataSource.getById(id), Observer {
        if (it != null) {
            // put your logic here
        }
    })
}

// Activity/Fragment
viewModel.start(id)?.observe(this, Observer {
    // blank observe here
})
</code></pre>

<p>PS: I read <a href=""https://medium.com/google-developers/viewmodels-and-livedata-patterns-antipatterns-21efaef74a54"" rel=""noreferrer"">ViewModels and LiveData: Patterns + AntiPatterns</a> which suggested that Transformations. I don't think it work unless the LiveData is observed (which probably require it to be done at Activity/Fragment).</p>
",561259,,306876,,2018-06-27 18:17:10,2018-06-27 18:17:10,,,,2,,,
Android,49001651,2,,49001395,2018-02-27 5:22:26,2993,,1,,"<p>You can achieve this by Google's <a href=""https://developers.google.com/android/reference/com/google/android/gms/location/ActivityRecognitionApi"" rel=""nofollow noreferrer"">ActivityRecognitionApi</a> API. It tells you about user's current activity, such as walking, driving, or standing still.</p>

<p>You can check out sample code here:
<a href=""https://github.com/googlesamples/android-play-location/tree/master/ActivityRecognition"" rel=""nofollow noreferrer"">ActivityRecognition</a></p>

<blockquote>
  <p>The Activity Recognition API is built on top of the sensors available in a device. Device sensors provide insights into what users are currently doing. However, with dozens of signals from multiple sensors and slight variations in how people do things, detecting what users are doing is not easy.</p>
  
  <p>The Activity Recognition API automatically detects activities by
  periodically reading short bursts of sensor data and processing them
  using machine learning models.</p>
</blockquote>
",6313469,,,,,2018-02-27 5:22:26,,,,0,,,
Android,49074185,2,,48126427,2018-03-02 17:19:21,2997,,3,,"<p>I had exactly the same problem. I have ""sign in with Facebook"" functionality in my app and I want to move this functionality into separate class <code>AuthManager</code> that implements <code>LifecycleObserver</code>.</p>

<p>I have checked <code>Lifecycle.Event</code> class that contains all the available lifecycle events. Looks like at the moment (android.arch version 1.1.0) there is no event for hading <code>onActivityResult()</code> with <code>LifecycleObserver</code>.</p>

<p>Opened an issue about this: <a href=""https://github.com/googlesamples/android-architecture-components/issues/317"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/issues/317</a></p>
",4260554,,4260554,,2018-03-02 17:26:03,2018-03-02 17:26:03,,,,0,,,
Android,49090472,2,,49076587,2018-03-03 23:48:51,2998,,1,,"<p>So, from the comments it seems you actually want to take a screenshot. Please state exactly your problem next time, don't make people guess.</p>

<p>As for your question, it actually seems to be possible using the <code>MediaProjectionManager</code> and a service. See <a href=""https://github.com/googlesamples/android-ScreenCapture"" rel=""nofollow noreferrer"">this example project on github</a>.</p>

<p>This only works on Android 5.0+.</p>
",1737624,,,,,2018-03-03 23:48:51,,,,1,,,
Android,49134052,2,,49127661,2018-03-06 15:10:19,3001,,2,,"<p>Dagger is a dependency injection framework. While being useful for implementing different architecture approaches it is rarely a required component. If you want to get familiar with Dagger 2 basics I'd recommend you this <a href=""https://android.jlelse.eu/dagger-2-part-i-basic-principles-graph-dependencies-scopes-3dfd032ccd82"" rel=""nofollow noreferrer"">article</a>.</p>

<p>A good example of MVVM on Android is <a href=""https://developer.android.com/topic/libraries/architecture/index.html"" rel=""nofollow noreferrer"">architecture components</a> library.</p>

<p>Here is a <a href=""https://github.com/googlesamples/android-architecture-components"" rel=""nofollow noreferrer"">repository</a> with a number of sample apps, going from <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/BasicSample"" rel=""nofollow noreferrer"">Basic Sample</a>, that is not using Dagger to more complex examples with Dagger and other useful technologies. </p>
",1735198,,,,,2018-03-06 15:10:19,,,,0,,,
Android,49152722,2,,49148801,2018-03-07 13:06:38,3002,,5,,"<p>Mockito often returns null when you call <code>any()</code> and that breaks kotlin's not null parameters.</p>

<p>In mockito-kotlin they have a separate function for it, called <a href=""https://github.com/nhaarman/mockito-kotlin/blob/1.x/mockito-kotlin/src/main/kotlin/com/nhaarman/mockito_kotlin/Mockito.kt#L47"" rel=""noreferrer"">anyOrNull()</a>.</p>

<p>You can also create your own function, <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvp-kotlin/todoapp/app/src/test/java/com/example/android/architecture/blueprints/todoapp/MockitoKotlinHelpers.kt#L38"" rel=""noreferrer"">here</a> they say that this should also work.</p>

<pre><code>/**
 * Returns Mockito.any() as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 */
fun &lt;T&gt; any(): T = Mockito.any&lt;T&gt;()  
</code></pre>
",1735198,,,,,2018-03-07 13:06:38,,,,2,,,
Android,49168930,2,,41826478,2018-03-08 8:47:16,3002,,5,,"<p>While you do not need to manually unsubscribe from a terminated stream, you can still create a memory leak using RxJava2 if you are not careful.</p>

<p>Consider the following code:</p>

<pre><code>repository.getData()
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(data -&gt; myTextView.setText(data.toString()));
</code></pre>

<p>The lambda parameter in the subscribe is ""syntatic sugar"" over an anonymous inner class:</p>

<pre><code>subscribe(new Consumer&lt;Data&gt;() {
    @Override
    public void accept(final Data data) {
        myTextView.setText(data.toString());
    }
});
</code></pre>

<p>On the JVM, an anonymous inner class maintains a reference to the outer class. </p>

<p>Assume that for the above naive code, the outer class is an Activity (this would also follow for a Fragment, Service, BroadcastReceiver or any class whose lifecycle is controlled by the Android OS). </p>

<p>The Activity subscribes to the Observer but then is destroyed by the Android OS in conditions of low-memory (you can mimic this effect by turning on Developer Options/Don't Keep Activities). If the work on <code>Schedulers.io()</code> is still running when the Activity is destroyed, a reference will still be maintained to the Activity through the anonymous inner class. This means a memory leak that prevents the Activity from being finalized by the garbage collector. If the Activity has a number of Views or, say, a Bitmap object then the memory leak can be quite substantial.</p>

<p>There are a number of solutions here but one of them is to maintain a <code>CompositeDisposable</code> object and to clear this in the <code>onDestroy()</code> lifecycle method of the Android Activity:</p>

<pre><code>public class MyActivity extends Activity {

   DataRepository dataRepository;
   CompositeDisposable disposables;

   @Override
   public void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       disposables = new CompositeDisposable();
   }

   public void onButtonClick(View v) {
       repository.getData()             
          .subscribeOn(Schedulers.io())
          .observeOn(AndroidSchedulers.mainThread())
          .doOnSubscribe(disposable -&gt; disposables.add(disposable))
          .subscribe(data -&gt; myTextView.setText(data.toString()));
   }

   @Override
   public void onDestroy() {
       disposables.clear();
       super.onDestroy();
   }
}
</code></pre>

<p>You can refer to a good example of how to use RxJava in an Android app in the official <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/"" rel=""noreferrer"">Google Android Architecture Blueprints</a>.  </p>
",5241933,,5241933,,2018-03-08 9:02:56,2018-03-08 9:02:56,,,,2,,,
Android,49268772,2,,48455844,2018-03-14 2:13:05,3008,,3,,"<p>The Transaction Object with Payee in it, will be produced by the @Embedded annotation, independently of being additional columns in your DAO query.</p>

<p>There are other scenarios related to your question:</p>

<ul>
<li>Entities that need completely independent queries. A MediatorLiveData with more than one Source will be required.</li>
<li>Entities with one-to-many relation that cannot be fulfilled with the default SELECT * FROM query, generated by the @Relation annotation. A Transformations.switchMap can be used as explained below (I found your question while searching for this).</li>
</ul>

<p>Using global executor pools, as demonstrated in Google GithubBrowserSample sample with the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/AppExecutors.java"" rel=""nofollow noreferrer"">AppExecutor</a> class, the nested query in the repository class will end up like this:</p>

<pre><code>public LiveData&lt;QuotationCustomer&gt; loadQuotationDetails(int quotationId) {
    LiveData&lt;QuotationCustomer&gt; quotationLiveData =
            quotationDao.getQuotationCustomer(quotationId);
    LiveData&lt;QuotationCustomer&gt; result =
            Transformations.switchMap(quotationLiveData, quotation -&gt; {
        MutableLiveData&lt;QuotationCustomer&gt; mutableResult = new MutableLiveData&lt;&gt;();
        appExecutors.diskIO().execute(() -&gt; {
            quotation.quotationDetList = 
                    quotationDetDao.getQuotationDetsByQuotationIdSync(quotationId);
            mutableResult.postValue(quotation);
        });
        return mutableResult;
    });
    return result;
}
</code></pre>

<p>In the previous code sample, the getQuotationDetsByQuotationIdSync DAO method is returning a plain List (not a LiveData>) and the QuotationCustomer POJO extends an @Entity annotated class and has the quotationDetList property defined as follows:</p>

<pre><code>@Ignore
public List&lt;QuotationDetProductUnit&gt; quotationDetList;
</code></pre>

<p>In your case, replace QuotationCustomer by Payee and QuotationDetProductUnit by Transaction.</p>
",8228407,,,,,2018-03-14 2:13:05,,,,2,,,
Android,49274559,2,,46180564,2018-03-14 9:55:26,3008,,1,,"<p>Answer to your question, <a href=""https://developers.google.com/nearby/messages/android/get-beacon-messages#subscribe_in_the_background"" rel=""nofollow noreferrer"">on the official documentation</a></p>

<p>Sample <a href=""https://github.com/googlesamples/android-nearby/tree/master/messages/NearbyDevices"" rel=""nofollow noreferrer"">GitHub Google</a></p>

<h1>Google Solution</h1>

<pre><code>// Subscribe to messages in the background.
private void backgroundSubscribe() {
    Log.i(TAG, ""Subscribing for background updates."");
    SubscribeOptions options = new SubscribeOptions.Builder()
            .setStrategy(Strategy.BLE_ONLY)
            .build();
    Nearby.getMessagesClient(this).subscribe(getPendingIntent(), options);
}

private PendingIntent getPendingIntent() {
    return PendingIntent.getBroadcast(this, 0, new Intent(this, BeaconMessageReceiver.class),
            PendingIntent.FLAG_UPDATE_CURRENT);
}
</code></pre>

<p>The following code snippet demonstrates handling the intent in the BeaconMessageReceiver class.</p>

<pre><code>@Override
public void onReceive(Context context, Intent intent) {
    Nearby.getMessagesClient(context).handleIntent(intent, new MessageListener() {
        @Override
        public void onFound(Message message) {
            Log.i(TAG, ""Found message via PendingIntent: "" + message);
        }

        @Override
        public void onLost(Message message) {
            Log.i(TAG, ""Lost message via PendingIntent: "" + message);
        }
    });
}
</code></pre>

<p>When the subscription is no longer required, your app should unsubscribe by calling Nearby.getMessagesClient(Activity).unsubscribe(PendingIntent).</p>

<h1>A solution to use BLE</h1>

<pre><code>SubscribeOptions.Builder builder = new SubscribeOptions.Builder();

if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
    builder.setStrategy(Strategy.BLE_ONLY);
} else {
    builder.setStrategy(new Strategy.Builder().setDistanceType(Strategy.DISTANCE_TYPE_EARSHOT).build());
    Toast.makeText(this, ""BLE NOT SUPPORTED"", Toast.LENGTH_SHORT).show();
}

mOptions = builder.build();
</code></pre>

<h1>Publish</h1>

<pre><code>Strategy s = new Strategy.Builder()
                    .setDistanceType(Strategy.DISTANCE_TYPE_EARSHOT)
                    .build();
PublishOptions options = new PublishOptions.Builder()
                                .setStrategy(s)
                                .build();
Nerby.getMessagesClient(this).publish(mMessageName, options);
</code></pre>
",6831069,,,,,2018-03-14 9:55:26,,,,0,,,
Android,49280718,2,,47459523,2018-03-14 14:46:12,3009,,9,,"<p>I think the concept behind the ViewModel was that it is supposed to be related to a single ""<strong>Screen</strong>"" rather than a ""<strong>View</strong>"". So going by that logic, I think you can use the same ViewModel if multiple fragments reference the same ViewModel because they technically belong to the same ""<strong>Screen</strong>"".</p>

<p>In the fragments, you could request the activity for the ViewModel which holds the instance of LiveData and could give you the updates as needed.</p>

<p>Hope this answers your question. </p>

<p>Update: I found <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/addedittask/AddEditTaskFragment.java#L64"" rel=""nofollow noreferrer"">a link to a sample fragment in Google samples</a>. Check out onCreateView() method. Pasting code below for reference: </p>

<pre><code>@Nullable
@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    final View root = inflater.inflate(R.layout.addtask_frag, container, false);
    if (mViewDataBinding == null) {
        mViewDataBinding = AddtaskFragBinding.bind(root);
    }

    mViewModel = AddEditTaskActivity.obtainViewModel(getActivity());

    mViewDataBinding.setViewmodel(mViewModel);

    setHasOptionsMenu(true);
    setRetainInstance(false);

    return mViewDataBinding.getRoot();
}
</code></pre>

<p>P.S. If you have found a better solution/answer/practice, lemme know. </p>
",4267697,,4267697,,2018-10-09 18:16:22,2018-10-09 18:16:22,,,,2,,,
Android,49280941,2,,49232559,2018-03-14 14:55:50,3009,,4,,"<p>This does look like a problem with <code>ConstraintSet</code>, but let's see. The following analysis is based upon the <a href=""https://github.com/googlesamples/android-ConstraintLayoutExamples"" rel=""nofollow noreferrer""><code>sample project</code></a> with the link that you supplied.</p>

<p>In the sample project, I have updated <code>ConstraintLayout</code> to the most recent version:</p>

<pre><code>compile 'com.android.support.constraint:constraint-layout:1.1.0-beta5'
</code></pre>

<p>I did this in case we are trying to track down an issue that has already been addressed. I also updated the layout <code>constraintset_example_big</code> and replaced all left/right constraints with start/end constraints as follows:</p>

<p><strong>constraintset_example_big.xml</strong></p>

<pre><code>&lt;android.support.constraint.ConstraintLayout 
    android:id=""@+id/activity_constraintset_example""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"" &gt;

    &lt;ImageView
        android:id=""@+id/imageView""
        android:layout_width=""0dp""
        android:layout_height=""0dp""
        android:layout_marginEnd=""24dp""
        android:layout_marginStart=""24dp""
        android:layout_marginTop=""24dp""
        android:onClick=""toggleMode""
        android:scaleType=""centerCrop""
        android:src=""@drawable/lake""
        app:layout_constraintDimensionRatio=""h,16:9""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""
        app:layout_constraintTop_toTopOf=""parent""
        android:contentDescription=""@string/lake_tahoe_image"" /&gt;

    &lt;TextView
        android:id=""@+id/textView9""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/lake_tahoe_title""
        android:textSize=""30sp""
        app:layout_constraintStart_toStartOf=""@+id/imageView""
        android:layout_marginTop=""8dp""
        app:layout_constraintTop_toBottomOf=""@+id/imageView"" /&gt;

    &lt;TextView
        android:id=""@+id/textView11""
        android:layout_width=""0dp""
        android:layout_height=""0dp""
        android:text=""@string/lake_discription""
        app:layout_constraintStart_toStartOf=""@+id/textView9""
        android:layout_marginTop=""8dp""
        app:layout_constraintTop_toBottomOf=""@+id/textView9""
        app:layout_constraintEnd_toEndOf=""@+id/imageView""
        app:layout_constraintBottom_toBottomOf=""parent""
        android:layout_marginBottom=""16dp""
        app:layout_constraintHorizontal_bias=""0.0""
        app:layout_constraintVertical_bias=""0.0"" /&gt;

&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<p>With these changes in place, this is what we see.</p>

<p><a href=""https://i.stack.imgur.com/Rd5Bv.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Rd5Bv.gif"" alt=""enter image description here""></a></p>

<p>This is clearly not right. It is supposed to look like <a href=""https://raw.githubusercontent.com/googlesamples/android-ConstraintLayoutExamples/master/screenshots/constraint_set_example.png"" rel=""nofollow noreferrer""><code>this</code></a> after the transition. </p>

<p>After some debugging, I tracked the issue down to this line in <code>ConstraintSetExampleActivity.java</code>:</p>

<pre><code>mConstraintSetBig.load(this, R.layout.constraintset_example_big);
</code></pre>

<p><a href=""https://developer.android.com/reference/android/support/constraint/ConstraintSet.html#load(android.content.Context,%20int)"" rel=""nofollow noreferrer""><code>ConstraintSet#load()</code></a> seems to be straightforward, but if we replace the code above with an explicit inflation of the layout followed by a clone of the <code>ConstraintSet</code> on the inflated layout as follows:</p>

<pre><code>// mConstraintSetBig.load(this, R.layout.constraintset_example_big);
ConstraintLayout cl = (ConstraintLayout) getLayoutInflater().inflate(R.layout.constraintset_example_big,null);
mConstraintSetBig.clone(cl);
</code></pre>

<p>We see this behavior in the app which is much better.</p>

<p><a href=""https://i.stack.imgur.com/iQpht.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iQpht.gif"" alt=""enter image description here""></a></p>

<p>So my takeaway is that <code>ConstraintSet#load()</code> has a problem with start/end constraints. The workaround is to inflate the <code>ConstraintLayout</code> then do a clone.</p>

<p><strong>ConstraintSetExampleActivity#onCreate()</strong></p>

<pre><code>protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.constraintset_example_main);

    mRootLayout = (ConstraintLayout) findViewById(R.id.activity_constraintset_example);
    // Note that this can also be achieved by calling
    // `mConstraintSetNormal.load(this, R.layout.constraintset_example_main);`
    // Since we already have an inflated ConstraintLayout in `mRootLayout`, clone() is
    // faster and considered the best practice.
    mConstraintSetNormal.clone(mRootLayout);
    // Load the constraints from the layout where ImageView is enlarged.

    // Toggle the comment status on the following three lines to fix/break.
    // mConstraintSetBig.load(this, R.layout.constraintset_example_big);
    ConstraintLayout cl = (ConstraintLayout) getLayoutInflater().inflate(R.layout.constraintset_example_big,null);
    mConstraintSetBig.clone(cl);

    if (savedInstanceState != null) {
        boolean previous = savedInstanceState.getBoolean(SHOW_BIG_IMAGE);
        if (previous != mShowBigImage) {
            mShowBigImage = previous;
            applyConfig();
        }
    }
}
</code></pre>
",6287910,,6287910,,2018-03-14 20:30:37,2018-03-14 20:30:37,,,,1,,,
Android,49298080,2,,49292200,2018-03-15 11:18:26,3009,,6,,"<p>I would go for navigation inside activities/fragments but of course most case you wanna trigger your navigation from view model.
So you need to use a command from you view model to notify your view (activity/fragment) to navigate elsewhere.
You can do this kind of ""command"" using LiveData and more specificly <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""noreferrer"">SingleLiveEvent</a>.</p>

<p>SingleLiveEvent is like any LiveData but trigger an event only when you explicity set a value to it, for example you won't receive its value when starting observing it from your view (activity/fragment)</p>
",6245697,,6245697,,2018-03-15 20:13:33,2018-03-15 20:13:33,,,,3,,,
Android,49329396,2,,49329197,2018-03-16 20:57:48,3011,,2,,"<p>I´ve worked a lot in this field (in getting frequent location updates ""forever""). If you need several location updates per hour, the only way to do this is to make your service to be in Foreground (with START_STICKY - see sample for this). The service can live almost ""forever"" if it keeps in the foreground (even in <a href=""https://developer.android.com/training/monitoring-device-state/doze-standby.html?hl=es-419"" rel=""nofollow noreferrer"">Doze Mode</a>). In Doze Mode is possible that the location updates stops because some sensors ""sleep"" but the service must not be affected in Doze Mode.</p>

<p>You can refer to the next google sample: <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesForegroundService"" rel=""nofollow noreferrer"">Location Updates in Foreground Sample</a></p>

<p><strong>NOTE:</strong> Keep in mind that a foreground service can also be killed by Android if it needs too (low memory, etc), but a foreground will be one last things to be shutdown by Android.</p>
",9444065,,9444065,,2018-03-16 21:16:24,2018-03-16 21:16:24,,,,2,,,
Android,49373871,2,,49353779,2018-03-19 23:11:03,3014,,2,,"<p>I was not properly computing my App's Hash String:</p>

<p><a href=""https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string"" rel=""nofollow noreferrer"">https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string</a></p>

<p>This is a six-step process:</p>

<ol>
<li><p>Get your app's public key certificate as a lower-case hex string.
For example, to get the hex string from your keystore, type the
following command: </p>

<p><code>keytool -alias MyAndroidKey -exportcert -keystore MyProduction.keystore | xxd -p | tr -d ""[:space:]""</code></p></li>
<li><p>Append the hex
string to your app's package name, separated by a single space.</p></li>
<li><p>Compute the SHA-256 sum of the combined string. Be sure to remove
any leading or trailing whitespace from the string before computing
the SHA-256 sum. </p></li>
<li>Base64-encode the binary value of the SHA-256 sum.
You might need to decode the SHA-256 sum from its output format
first. </li>
<li>Your app's hash string is the first 11 characters of the
base64-encoded hash.</li>
</ol>

<p>Once computed, you have to send a specially-crafted SMS message to your device starting with a <code>&lt;#&gt;</code> and ending with this app hash string; just any old SMS message will not do.</p>

<p>Note that the command-line steps using <code>keytool</code> above to extract my App's hash string never did work for me; I had to use the <a href=""https://github.com/googlesamples/android-credentials/blob/master/sms-verification/android/app/src/main/java/com/google/samples/smartlock/sms_verify/AppSignatureHelper.java"" rel=""nofollow noreferrer"">helper class Google provided</a>.</p>
",61072,,,,,2018-03-19 23:11:03,,,,3,,,
Android,49378133,2,,49298112,2018-03-20 7:04:20,3014,,1,,"<p>You can make use of <a href=""https://developer.android.com/reference/android/view/ViewOutlineProvider.html"" rel=""nofollow noreferrer""><code>ViewOutlineProvider</code></a> API. As an example usage see <a href=""https://github.com/googlesamples/android-ClippingBasic"" rel=""nofollow noreferrer"">ClippingBasic</a> project.</p>

<p>Having defined outline provider class as such:</p>

<pre>
<code>
    private class OvalOutlineProvider extends ViewOutlineProvider {
        @Override
        public void getOutline(View view, Outline outline) {
            outline.setOval(0, 0, view.getWidth(), view.getHeight());
        }
    }
</code>
</pre>

<p>Then apply view outline to parent:</p>

<pre>
<code>
    View parent = findViewById(R.id.parent);
    parent.setOutlineProvider(new OvalOutlineProvider());
    parent.setClipToOutline(true);
</code>
</pre>

<p><code>ViewOutlineProvider</code> is accessible starting from API 21. Not sure, whether the solution is applicable for Xamarin (hope it does).</p>
",1083957,,,,,2018-03-20 7:04:20,,,,0,,,
Android,49395289,2,,49395231,2018-03-20 22:39:58,3015,,3,,"<p>You might want to implement Autofill Service <a href=""https://developer.android.com/guide/topics/text/autofill-services.html"" rel=""nofollow noreferrer"">https://developer.android.com/guide/topics/text/autofill-services.html</a></p>

<p>There is a ready to use sample app which will get you started <a href=""https://github.com/googlesamples/android-AutofillFramework"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-AutofillFramework</a></p>

<p>Android will invoke <code>onFillRequest()</code> method giving your service a chance to show autofill suggestions. Here is a sample code from above link:</p>

<pre><code>@Override
public void onFillRequest(FillRequest request, CancellationSignal cancellationSignal, FillCallback callback) {
    // Get the structure from the request
    List&lt;FillContext&gt; context = request.getFillContexts();
    AssistStructure structure = context.get(context.size() - 1).getStructure();

    // Traverse the structure looking for nodes to fill out.
    ParsedStructure parsedStructure = parseStructure(structure);

    // Fetch user data that matches the fields.
    UserData userData = fetchUserData(parsedStructure);

    // Build the presentation of the datasets
    RemoteViews usernamePresentation = new RemoteViews(getPackageName(), android.R.layout.simple_list_item_1);
    usernamePresentation.setTextViewText(android.R.id.text1, ""my_username"");
    RemoteViews passwordPresentation = new RemoteViews(getPackageName(), android.R.layout.simple_list_item_1);
    passwordPresentation.setTextViewText(android.R.id.text1, ""Password for my_username"");

    // Add a dataset to the response
    FillResponse fillResponse = new FillResponse.Builder()
            .addDataset(new Dataset.Builder()
                    .setValue(parsedStructure.usernameId,
                            AutofillValue.forText(userData.username), usernamePresentation)
                    .setValue(parsedStructure.passwordId,
                            AutofillValue.forText(userData.password), passwordPresentation)
                    .build())
            .build();

    // If there are no errors, call onSuccess() and pass the response
    callback.onSuccess(fillResponse);
}

class ParsedStructure {
    AutofillId usernameId;
    AutofillId passwordId;
}

class UserData {
    String username;
    String password;
}
</code></pre>
",826606,,826606,,2018-03-20 22:45:40,2018-03-20 22:45:40,,,,1,,,
Android,49403467,2,,48968213,2018-03-21 10:10:18,3015,,1,,"<p>To run specific AndroidJUnit4 tests providing instrumentation runner is necessary to gradle.</p>

<p>try this format:</p>

<pre><code>./gradlew app:connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.example.android.testing.blueprint.ui.espresso.EspressoTest
</code></pre>

<p>Here is the list of all useful gradle commands <a href=""https://github.com/googlesamples/android-testing-templates/blob/master/AndroidTestingBlueprint/README.md#custom-gradle-command-line-arguments"" rel=""nofollow noreferrer"">{LINK}</a></p>
",1597616,,,,,2018-03-21 10:10:18,,,,1,,,
Android,49475881,2,,49470466,2018-03-25 12:33:07,3020,,1,,"<p>I faced the same issue. Basically you want to write logic in the <code>Repository</code> which decides if to fetch data from server or local database. 
Fortunately this is very common issue, hence Google made <a href=""https://github.com/googlesamples/android-architecture-components/blob/88747993139224a4bb6dbe985adf652d557de621/GithubBrowserSample/app/src/main/java/com/android/example/github/repository/NetworkBoundResource.kt"" rel=""nofollow noreferrer"">NetworkBoundResource</a> class.</p>

<p><code>NetworkBoundResource</code> is a plain class which does the job of data flow between local database and your web-service using the power of <code>MediatorLiveData</code>. </p>

<p>Read more at: <a href=""https://proandroiddev.com/building-modern-apps-using-the-android-architecture-guidelines-3238fff96f14"" rel=""nofollow noreferrer"">https://proandroiddev.com/building-modern-apps-using-the-android-architecture-guidelines-3238fff96f14</a></p>

<p>and official document: <a href=""https://developer.android.com/jetpack/docs/guide"" rel=""nofollow noreferrer"">https://developer.android.com/jetpack/docs/guide</a></p>
",1904141,,10121709,,2018-11-02 11:23:38,2018-11-02 11:23:38,,,,5,,,
Android,49476165,2,,49476044,2018-03-25 13:05:56,3020,,2,,"<p>Try making the id non-nullable:</p>

<pre><code> @PrimaryKey(autoGenerate = true)
    var wID: Long = 0
</code></pre>

<p><strong>EDIT:</strong>
I've found this in the sample code <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PersistenceContentProviderSample/app/src/main/java/com/example/android/contentprovidersample/data/CheeseDao.java"" rel=""nofollow noreferrer"">here</a>.
you can make your @Insert methods return the id of the inserted row object, so you could do this:</p>

<p>In your Dao:</p>

<pre><code>@Insert(onConflict = OnConflictStrategy.REPLACE)
fun insert(weatherEntry: WeatherEntry) : Long
</code></pre>

<p>In your refresh data method:</p>

<pre><code>private fun refreshData(location: String): Flowable&lt;MutableList&lt;WeatherEntry&gt;&gt; {

        return remoteDataSource.getWeatherEntries(location,true).doOnNext({

            // Clear cache
            caches.clear()
            // Clear data in local storage
            localDataSource.deleteAllWeatherEntries()
        }).flatMap(({ Flowable.fromIterable(it) })).doOnNext({ entry -&gt;

            val entryID = localDataSource.insertWeatherEntry(entry)
            entry.wID = entryID
            caches.add(entry)
        }).toList().toFlowable()
    }
</code></pre>
",7765139,,7295614,,2018-03-26 9:50:05,2018-03-26 9:50:05,,,,16,,,
Android,49512524,2,,49512408,2018-03-27 12:10:02,3021,,1,,"<p>You can't directly set emoji in <code>TextView</code> 
Either you can use this  <a href=""https://developer.android.com/guide/topics/ui/look-and-feel/emoji-compat.html"" rel=""nofollow noreferrer"">https://developer.android.com/guide/topics/ui/look-and-feel/emoji-compat.html</a> </p>

<p>add this in gradle </p>

<pre><code>dependencies {
    ...
    compile ""com.android.support:support-emoji:27.1.0""
}
</code></pre>

<p>Implement this in your application code </p>

<pre><code>  public class MyApplication extends Application {
  @Override
   public void onCreate() {
     super.onCreate();
     FontRequest fontRequest = new FontRequest(
       ""com.example.fontprovider"",
       ""com.example"",
       ""emoji compat Font Query"", CERTIFICATES);
       EmojiCompat.Config config = new FontRequestEmojiCompatConfig(this, fontRequest);
       EmojiCompat.init(config);
   }
}
</code></pre>

<p>and change your <code>TextView</code> to  <code>android.support.text.emoji.widget.EmojiTextView</code></p>

<p>You can check this if you have any doubts <a href=""https://github.com/googlesamples/android-EmojiCompat"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-EmojiCompat</a> </p>

<p>or </p>

<p>You can try unicode directly like this </p>

<p><a href=""https://stackoverflow.com/a/26894146/3111083"">https://stackoverflow.com/a/26894146/3111083</a></p>
",3111083,,3111083,,2018-03-27 12:46:09,2018-03-27 12:46:09,,,,14,,,
Android,49530498,2,,49510515,2018-03-28 9:13:10,3022,,2,,"<p>In Camera2Basic example, the <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/kotlinApp/Application/src/main/java/com/example/android/camera2basic/ImageSaver.kt"" rel=""nofollow noreferrer"">ImageSaver</a> does not rotate the captured JPEG with regards to device orientation. Instead, <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/59b9889259b31189469709216b6b1363e96281c2/kotlinApp/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.kt#L619"" rel=""nofollow noreferrer"">Camera2BasicFragment.captureStillPicture()</a> sets <a href=""https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html#JPEG_ORIENTATION"" rel=""nofollow noreferrer"">CaptureRequest.JPEG_ORIENTATION</a>, which is only a <em>recommendation</em> for the camera firmware.</p>

<blockquote>
  <p>Camera devices may either encode this value into the JPEG EXIF header, or rotate the image data to match this orientation. When the image data is rotated, the thumbnail data will also be rotated.</p>
</blockquote>

<p>Most often, this recommendation 'only' sets the header, but some devices miss even that. See a recent <a href=""https://medium.com/@kenodoggy/solving-image-rotation-on-android-using-camera2-api-7b3ed3518ab6"" rel=""nofollow noreferrer"">article</a> on this feature and its reliability.</p>

<p>Please note that the EXIF orientation tag is not respected by all viewer software, therefore often the stock Camera applications do rotate the actual JPEG to default orientation.</p>

<p>Your code that loads the captured picture to <strong>ImageView</strong> currently ignores this tag. You can use <a href=""https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeInt(java.lang.String,%20int)"" rel=""nofollow noreferrer"">ExifInterface.getAttributeInt(TAG_ORIENTATION)</a> to extract the orientation from the file or input stream. Or, if you capture an image and immediately display it, you can get device orientation directly from the sensor. Now it's time to decide if the camera stored the image as portrait (i.e. width is smaller than height), or as landscape, in which case it's your duty to rotate it for display. Don't rotate the bitmap according to this orientation. Instead, you can call <strong>imagePreview</strong>.<a href=""https://developer.android.com/reference/android/widget/ImageView.html#setImageMatrix(android.graphics.Matrix)"" rel=""nofollow noreferrer"">setImageMatrix()</a> to display the image correctly.</p>

<p>By the way, please don't decode the JPEG to full-scale bitmap in memory if you only need it to be passed to your <strong>ImageView</strong>: this may consume too much RAM. The easiest one-liner is to call <a href=""https://developer.android.com/reference/android/widget/ImageView.html#setImageURI(android.net.Uri)"" rel=""nofollow noreferrer"">setImageURI()</a> instead.</p>
",192373,,192373,,2018-03-29 12:47:40,2018-03-29 12:47:40,,,,2,,,
Android,49547765,2,,49541019,2018-03-29 3:54:34,3023,,1,,"<p>It looks like your trying to access the <a href=""https://developers.google.com/android-publisher/api-ref/reviews/list"" rel=""nofollow noreferrer"">Review.list()</a> method.</p>

<p>Try putting this after your value for <code>service</code></p>

<pre><code>reviews_list = service.reviews().list(packageName=package_name).execute()
</code></pre>

<p>For reference there is a similar example in the python directory of the <a href=""https://github.com/googlesamples/android-play-publisher-api/tree/master/v2/python"" rel=""nofollow noreferrer"">android-play-publisher-api</a> repository.</p>

<p>A similar method is run at <a href=""https://github.com/googlesamples/android-play-publisher-api/blob/master/v2/python/basic_list_apks_service_account.py#L66"" rel=""nofollow noreferrer"">this point</a> in the code for the <a href=""https://developers.google.com/android-publisher/api-ref/edits/apks/list"" rel=""nofollow noreferrer"">Edits.apks: list</a> method</p>
",1844376,,,,,2018-03-29 3:54:34,,,,3,,,
Android,49637333,2,,48170499,2018-04-03 19:00:04,3029,,2,,"<p>Pushed up a kotlin fork of <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesPendingIntent"" rel=""nofollow noreferrer"">this</a> google android/java example project using Kotlin instead of java <a href=""https://github.com/googlesamples/android-play-location/pull/141"" rel=""nofollow noreferrer"">here</a> (Untested, could have bugs)</p>

<p>Strings and dimension value files are excluded below. Hardcode your own or look at <a href=""https://github.com/googlesamples/android-play-location/pull/141"" rel=""nofollow noreferrer"">fork</a></p>

<p>MainActivity.kt
    </p>

<pre><code>    /**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.gms.location.sample.locationupdatespendingintent

import android.Manifest
import android.app.PendingIntent
import android.content.Intent
import android.content.SharedPreferences
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.preference.PreferenceManager
import android.provider.Settings
import android.support.design.widget.Snackbar
import android.support.v4.app.ActivityCompat
import android.support.v4.app.FragmentActivity
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.TextView

import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationServices


/**
 * The only activity in this sample. Displays UI widgets for requesting and removing location
 * updates, and for the batched location updates that are reported.
 *
 * Location updates requested through this activity continue even when the activity is not in the
 * foreground. Note: apps running on ""O"" devices (regardless of targetSdkVersion) may receive
 * updates less frequently than the interval specified in the [LocationRequest] when the app
 * is no longer in the foreground.
 */
class MainActivity : FragmentActivity(), SharedPreferences.OnSharedPreferenceChangeListener {

    /**
     * Stores parameters for requests to the FusedLocationProviderApi.
     */
    val mLocationRequest = LocationRequest()

    /**
     * Provides access to the Fused Location Provider API.
     */
    private var mFusedLocationClient: FusedLocationProviderClient? = null

    // UI Widgets.
    private var mRequestUpdatesButton: Button? = null
    private var mRemoveUpdatesButton: Button? = null
    private var mLocationUpdatesResultView: TextView? = null


    // Note: for apps targeting API level 25 (""Nougat"") or lower, either
    // PendingIntent.getService() or PendingIntent.getBroadcast() may be used when requesting
    // location updates. For apps targeting API level O, only
    // PendingIntent.getBroadcast() should be used. This is due to the limits placed on services
    // started in the background in ""O"".
    // TODO(developer): uncomment to use PendingIntent.getService().
    //        Intent intent = new Intent(this, LocationUpdatesIntentService.class);
    //        intent.setAction(LocationUpdatesIntentService.ACTION_PROCESS_UPDATES);
    //        return PendingIntent.getService(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
    private val pendingIntent: PendingIntent
        get() {
            val intent = Intent(this, LocationUpdatesBroadcastReceiver::class.java)
            intent.action = LocationUpdatesBroadcastReceiver.ACTION_PROCESS_UPDATES
            return PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this)

        mRequestUpdatesButton = findViewById(R.id.remove_updates_button)
        mRemoveUpdatesButton = findViewById(R.id.request_updates_button)
        mLocationUpdatesResultView = findViewById(R.id.location_updates_result)

        // Check if the user revoked runtime permissions.
        if (!checkPermissions()) {
            requestPermissions()
        }


        createLocationRequest()
    }

    override fun onStart() {
        super.onStart()
        PreferenceManager.getDefaultSharedPreferences(this)
                .registerOnSharedPreferenceChangeListener(this)
    }


    override fun onResume() {
        super.onResume()
        updateButtonsState(Utils.getRequestingLocationUpdates(this))
        mLocationUpdatesResultView?.text = Utils.getLocationUpdatesResult(this)
    }

    override fun onStop() {
        PreferenceManager.getDefaultSharedPreferences(this)
                .unregisterOnSharedPreferenceChangeListener(this)
        super.onStop()
    }

    /**
     * Sets up the location request. Android has two location request settings:
     * `ACCESS_COARSE_LOCATION` and `ACCESS_FINE_LOCATION`. These settings control
     * the accuracy of the current location. This sample uses ACCESS_FINE_LOCATION, as defined in
     * the AndroidManifest.xml.
     *
     *
     * When the ACCESS_FINE_LOCATION setting is specified, combined with a fast update
     * interval (5 seconds), the Fused Location Provider API returns location updates that are
     * accurate to within a few feet.
     *
     *
     * These settings are appropriate for mapping applications that show real-time location
     * updates.
     */
    private fun createLocationRequest() {

        // Sets the desired interval for active location updates. This interval is
        // inexact. You may not receive updates at all if no location sources are available, or
        // you may receive them slower than requested. You may also receive updates faster than
        // requested if other applications are requesting location at a faster interval.
        // Note: apps running on ""O"" devices (regardless of targetSdkVersion) may receive updates
        // less frequently than this interval when the app is no longer in the foreground.
        mLocationRequest.interval = UPDATE_INTERVAL

        // Sets the fastest rate for active location updates. This interval is exact, and your
        // application will never receive updates faster than this value.
        mLocationRequest.fastestInterval = FASTEST_UPDATE_INTERVAL

        mLocationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY

        // Sets the maximum time when batched location updates are delivered. Updates may be
        // delivered sooner than this interval.
        mLocationRequest.maxWaitTime = MAX_WAIT_TIME
    }

    /**
     * Return the current state of the permissions needed.
     */
    private fun checkPermissions(): Boolean {
        val permissionState = ActivityCompat.checkSelfPermission(this,
                Manifest.permission.ACCESS_FINE_LOCATION)
        return permissionState == PackageManager.PERMISSION_GRANTED
    }

    private fun requestPermissions() {
        val shouldProvideRationale = ActivityCompat.shouldShowRequestPermissionRationale(this,
                Manifest.permission.ACCESS_FINE_LOCATION)

        // Provide an additional rationale to the user. This would happen if the user denied the
        // request previously, but didn't check the ""Don't ask again"" checkbox.
        if (shouldProvideRationale) {
            Log.i(TAG, ""Displaying permission rationale to provide additional context."")
            Snackbar.make(
                    findViewById(R.id.activity_main),
                    R.string.permission_rationale,
                    Snackbar.LENGTH_INDEFINITE)
                    .setAction(R.string.ok) {
                        // Request permission
                        ActivityCompat.requestPermissions(this@MainActivity,
                                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                                REQUEST_PERMISSIONS_REQUEST_CODE)
                    }
                    .show()
        } else {
            Log.i(TAG, ""Requesting permission"")
            // Request permission. It's possible this can be auto answered if device policy
            // sets the permission in a given state or the user denied the permission
            // previously and checked ""Never ask again"".
            ActivityCompat.requestPermissions(this@MainActivity,
                    arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                    REQUEST_PERMISSIONS_REQUEST_CODE)
        }
    }

    /**
     * Callback received when a permissions request has been completed.
     */
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;,
                                            grantResults: IntArray) {
        Log.i(TAG, ""onRequestPermissionResult"")
        if (requestCode == REQUEST_PERMISSIONS_REQUEST_CODE) {
            if (grantResults.size &lt;= 0) {
                // If user interaction was interrupted, the permission request is cancelled and you
                // receive empty arrays.
                Log.i(TAG, ""User interaction was cancelled."")
            } else if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission was granted.
                requestLocationUpdates(null)
            } else {
                // Permission denied.

                // Notify the user via a SnackBar that they have rejected a core permission for the
                // app, which makes the Activity useless. In a real app, core permissions would
                // typically be best requested during a welcome-screen flow.

                // Additionally, it is important to remember that a permission might have been
                // rejected without asking the user for permission (device policy or ""Never ask
                // again"" prompts). Therefore, a user interface affordance is typically implemented
                // when permissions are denied. Otherwise, your app could appear unresponsive to
                // touches or interactions which have required permissions.
                Snackbar.make(
                        findViewById(R.id.activity_main),
                        R.string.permission_denied_explanation,
                        Snackbar.LENGTH_INDEFINITE)
                        .setAction(R.string.settings) {
                            // Build intent that displays the App settings screen.
                            val intent = Intent()
                            intent.action = Settings.ACTION_APPLICATION_DETAILS_SETTINGS
                            val uri = Uri.fromParts(""package"",
                                    BuildConfig.APPLICATION_ID, null)
                            intent.data = uri
                            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
                            startActivity(intent)
                        }
                        .show()
            }
        }
    }

    override fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences, s: String) {
        if (s == Utils.KEY_LOCATION_UPDATES_RESULT) {
            mLocationUpdatesResultView?.text = Utils.getLocationUpdatesResult(this)
        } else if (s == Utils.KEY_LOCATION_UPDATES_REQUESTED) {
            updateButtonsState(Utils.getRequestingLocationUpdates(this))
        }
    }

    /**
     * Handles the Request Updates button and requests start of location updates.
     */
    fun requestLocationUpdates(view: View?) {
        try {
            Log.i(TAG, ""Starting location updates"")
            Utils.setRequestingLocationUpdates(this, true)
            mFusedLocationClient?.requestLocationUpdates(mLocationRequest, pendingIntent)
        } catch (e: SecurityException) {
            Utils.setRequestingLocationUpdates(this, false)
            e.printStackTrace()
        }

    }

    /**
     * Handles the Remove Updates button, and requests removal of location updates.
     */
    fun removeLocationUpdates(view: View) {
        Log.i(TAG, ""Removing location updates"")
        Utils.setRequestingLocationUpdates(this, false)
        mFusedLocationClient?.removeLocationUpdates(pendingIntent)
    }

    /**
     * Ensures that only one button is enabled at any time. The Start Updates button is enabled
     * if the user is not requesting location updates. The Stop Updates button is enabled if the
     * user is requesting location updates.
     */
    private fun updateButtonsState(requestingLocationUpdates: Boolean) {
        if (requestingLocationUpdates) {
            mRequestUpdatesButton?.isEnabled = false
            mRemoveUpdatesButton?.isEnabled = true
        } else {
            mRequestUpdatesButton?.isEnabled = true
            mRemoveUpdatesButton?.isEnabled = false
        }
    }

    companion object {

        private val TAG = MainActivity::class.java.getSimpleName()
        private val REQUEST_PERMISSIONS_REQUEST_CODE = 34
        /**
         * The desired interval for location updates. Inexact. Updates may be more or less frequent.
         */
        private val UPDATE_INTERVAL: Long = 60000 // Every 60 seconds.

        /**
         * The fastest rate for active location updates. Updates will never be more frequent
         * than this value, but they may be less frequent.
         */
        private val FASTEST_UPDATE_INTERVAL: Long = 30000 // Every 30 seconds

        /**
         * The max time before batched results are delivered by location services. Results may be
         * delivered sooner than this interval.
         */
        private val MAX_WAIT_TIME = UPDATE_INTERVAL * 5 // Every 5 minutes.
    }
}
</code></pre>

<p>activity_main.xml listeners here triggers methods in MainActivity.kt
    </p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/activity_main""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:paddingBottom=""@dimen/activity_vertical_margin""
    android:paddingLeft=""@dimen/activity_horizontal_margin""
    android:paddingRight=""@dimen/activity_horizontal_margin""
    android:paddingTop=""@dimen/activity_vertical_margin""
    tools:context=""com.google.android.gms.location.sample.locationupdatespendingintent.MainActivity""&gt;

    &lt;TextView
        android:id=""@+id/using_batched_location_view""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/batched_location_updates""
        android:layout_marginBottom=""@dimen/default_margin""
        android:textSize=""@dimen/text_large"" /&gt;

    &lt;Button
        android:id=""@+id/request_updates_button""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:onClick=""requestLocationUpdates""
        android:text=""@string/request_updates"" /&gt;

    &lt;Button
        android:id=""@+id/remove_updates_button""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:onClick=""removeLocationUpdates""
        android:layout_marginBottom=""@dimen/default_margin""
        android:text=""@string/remove_updates"" /&gt;

    &lt;TextView
        android:id=""@+id/location_updates_result""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content"" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>LocationUpdatesIntentService.kt
    </p>

<pre><code>   /**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.android.gms.location.sample.locationupdatespendingintent

import android.app.IntentService
import android.content.Context
import android.content.Intent
import android.location.Location
import android.util.Log

import com.google.android.gms.location.LocationResult


/**
 * Handles incoming location updates and displays a notification with the location data.
 *
 * For apps targeting API level 25 (""Nougat"") or lower, location updates may be requested
 * using [android.app.PendingIntent.getService] or
 * [android.app.PendingIntent.getBroadcast]. For apps targeting
 * API level O, only `getBroadcast` should be used.
 *
 * Note: Apps running on ""O"" devices (regardless of targetSdkVersion) may receive updates
 * less frequently than the interval specified in the
 * [com.google.android.gms.location.LocationRequest] when the app is no longer in the
 * foreground.
 */
class LocationUpdatesIntentService : IntentService(TAG) {

    override fun onHandleIntent(intent: Intent?) {
        if (intent != null) {
            val action = intent.action
            if (ACTION_PROCESS_UPDATES == action) {
                val result = LocationResult.extractResult(intent)
                if (result != null) {
                    val locations = result.locations
                    Utils.setLocationUpdatesResult(this, locations)
                    Utils.sendNotification(this, Utils.getLocationResultTitle(this, locations))
                    Log.i(TAG, Utils.getLocationUpdatesResult(this))
                }
            }
        }
    }

    companion object {

        private val ACTION_PROCESS_UPDATES = ""com.google.android.gms.location.sample.locationupdatespendingintent.action"" + "".PROCESS_UPDATES""
        private val TAG = LocationUpdatesIntentService::class.java.simpleName
    }
}
</code></pre>

<p>LocationUpdatesBroadcastReceiver.kt
    </p>

<pre><code>    /**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.gms.location.sample.locationupdatespendingintent

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.location.Location
import android.util.Log

import com.google.android.gms.location.LocationResult

/**
 * Receiver for handling location updates.
 *
 * For apps targeting API level O
 * [android.app.PendingIntent.getBroadcast] should be used when
 * requesting location updates. Due to limits on background services,
 * [android.app.PendingIntent.getService] should not be used.
 *
 * Note: Apps running on ""O"" devices (regardless of targetSdkVersion) may receive updates
 * less frequently than the interval specified in the
 * [com.google.android.gms.location.LocationRequest] when the app is no longer in the
 * foreground.
 */
class LocationUpdatesBroadcastReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent?) {
        if (intent != null) {
            val action = intent.action
            if (ACTION_PROCESS_UPDATES == action) {
                val result = LocationResult.extractResult(intent)
                if (result != null) {
                    val locations = result.locations
                    Utils.setLocationUpdatesResult(context, locations)
                    Utils.sendNotification(context, Utils.getLocationResultTitle(context, locations))
                    Log.i(TAG, Utils.getLocationUpdatesResult(context))
                }
            }
        }
    }

    companion object {
        private val TAG = ""LUBroadcastReceiver""

        internal val ACTION_PROCESS_UPDATES = ""com.google.android.gms.location.sample.locationupdatespendingintent.action"" + "".PROCESS_UPDATES""
    }
}
</code></pre>

<p>AndroidManifest.xml define service and receiver here.</p>

<pre><code>   &lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.google.android.gms.location.sample.locationupdatespendingintent""&gt;

    &lt;uses-permission android:name=""android.permission.ACCESS_FINE_LOCATION"" /&gt;

    &lt;application
        android:allowBackup=""true""
        android:icon=""@mipmap/ic_launcher""
        android:label=""@string/app_name""
        android:supportsRtl=""true""
        android:theme=""@style/AppTheme""&gt;
        &lt;activity android:name="".MainActivity""&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""android.intent.action.MAIN"" /&gt;

                &lt;category android:name=""android.intent.category.LAUNCHER"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

        &lt;service
            android:name="".LocationUpdatesIntentService""
            android:exported=""false"" /&gt;

        &lt;receiver android:name="".LocationUpdatesBroadcastReceiver""
            android:exported=""true""&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=""com.google.android.gms.location.sample.locationupdatespendingintent.LocationUpdatesBroadcastReceiver.ACTION_PROCESS_UPDATES"" /&gt;
            &lt;/intent-filter&gt;
        &lt;/receiver&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</code></pre>
",2333802,,2333802,,2018-04-04 22:10:14,2018-04-04 22:10:14,,,,0,,,
Android,49683266,2,,49637797,2018-04-05 23:57:13,3031,,1,,"<p>Play Billing 1.0 does not have the concept of purchase states (anymore), so there currently is no way to get this information using the Play Billing library.
My understanding is that <code>queryPurchases</code> is supposed to return actual valid purchases only. However, it gets the information from a long living cache and you have no way of updating it manually.</p>

<p><code>onBillingClientSetupFinished</code> is completely unrelated.</p>

<p>Here is an active discussion on the subject: <a href=""https://github.com/googlesamples/android-play-billing/issues/122"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/issues/122</a></p>
",2168965,,2168965,,2018-04-06 0:07:12,2018-04-06 0:07:12,,,,1,,,
Android,49686495,2,,48972343,2018-04-06 6:14:00,3031,,2,,"<p>Firstly, thanks to <a href=""https://stackoverflow.com/users/3624647/adityakamble49"">@adityakamble49</a> for answering to my question, credit goes to him !
You can maintain abstraction using Repository by giving LiveData as return value and using <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/repository/NetworkBoundResource.java"" rel=""nofollow noreferrer"">NetworkBoundResource</a> you can decide if you need to fetch from Network or you can use cached data (DB / DataHolder). NetworkBoundResource is a clean way to implement common functionality (using Generics) in abstract class and provide explicit behavior in extended class(es). </p>

<p>Sharing my viewPoint on <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/repository/NetworkBoundResource.kt"" rel=""nofollow noreferrer""><strong>NetworkBoundResource</strong></a> class vs <a href=""https://github.com/yigit/android-priority-jobqueue"" rel=""nofollow noreferrer""><strong>android-priority-jobqueue</strong></a> so it helps us decide which one to use in vairous scenarios.</p>

<p><strong>NetworkBoundResource</strong> - Use when app need to fetch data from local DB or network but also display error to user when fetch fails (e.g. no network). Pull to Refrsh on a screen is a good use case where user expects to see updated data or otherwise see error toast/dialog if fetch fails.</p>

<p><strong>android-priority-jobqueue</strong> - There are many scenarios when an action need to be preserved until it completes successfully (rather than display error and forget). JobQueue helps a lot in such scenarios to maintain pending jobs (for associated triggers) in background queue and later process them when network is avialable. E.g. A note created by user in offline mode is added to JobQueue which gets synched later when device comes online. Such scenario can't be addressed with NetworkBoundResource. </p>

<p>A NetworkBoundResource candidate operation shouldn't be handled using JobQueue (and vice versa) as it could flood the JobQueue with too many operations and many of them could be duplicate e.g. multiple Pull To Refresh actions on same screen leading to multiple Jobs, which is wrong. Welcoming others viewpoints !!!</p>
",1992013,,1992013,,2018-12-23 13:40:27,2018-12-23 13:40:27,,,,2,,,
Android,49704739,2,,49689151,2018-04-07 6:50:12,3032,,1,,"<p>I assume you are trying to search for that line in order to override the Dagger 2 request for injection and inject your own test doubles.</p>

<p>This is probably the wrong way to do things. </p>

<p>The best way to perform automated UI tests against Activities and Fragments is to isolate the depenedencies you want inside Dagger 2 modules and then use build variants to swap these with test doubles. </p>

<p>There is an example of this in the <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">Google Android Architecture Blueprints</a></p>

<p>If this doesn't work, you could try using a setter on the injector like in <a href=""https://duckduckgo.com/?q=daggermock&amp;atb=v41-4&amp;ia=software"" rel=""nofollow noreferrer"">DaggerMock</a></p>
",5241933,,,,,2018-04-07 6:50:12,,,,1,,,
Android,49750725,2,,49750462,2018-04-10 9:58:00,3035,,4,,"<pre><code>public class NavigationController {
    private final int containerId;
    private final FragmentManager fragmentManager;
    @Inject
    public NavigationController(MainActivity mainActivity) {
</code></pre>

<p>We see that it has an Inject constructor, so Dagger2 will see it. We also see that there is no scope annotation on this class, so unless this is bound in a module to a given scope, it'll be unscoped. And it receives MainActivity as an argument, so it'll be instantiated by a component that knows about MainActivity. </p>

<p>There is only a single activity in the app and there are multiple fragments, so all it takes is to use Activity scoped subcomponent to inject the activity.</p>

<p>This is automatic, as it is done by the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/di/AppInjector.java#L44"" rel=""nofollow noreferrer"">AppInjector</a> when the Activity is created, and calls <code>AndroidInjection.inject(activity)</code> which looks up the Activity scoped component that can inject MainActivity.</p>

<pre><code>public class AppInjector {
    private AppInjector() {}
        public static void init(GithubApp githubApp) {
            DaggerAppComponent.builder().application(githubApp)
                  .build().inject(githubApp);
            githubApp
                  .registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {
                      @Override
                      public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                          handleActivity(activity);
                      }
</code></pre>

<p>And it is initialized in Application class.</p>

<pre><code>public class GithubApp extends Application implements HasActivityInjector {

    @Inject
    DispatchingAndroidInjector&lt;Activity&gt; dispatchingAndroidInjector;

    @Override
    public void onCreate() {
        super.onCreate();
        if (BuildConfig.DEBUG) {
            Timber.plant(new Timber.DebugTree());
        }
        AppInjector.init(this); // &lt;--
    }
</code></pre>

<p>The definition of the subcomponent that binds the instance of <code>MainActivity</code> is in <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/di/MainActivityModule.java#L26"" rel=""nofollow noreferrer"">MainActivityModule</a>.</p>

<pre><code>@Module
public abstract class MainActivityModule {
    @ContributesAndroidInjector(modules = FragmentBuildersModule.class)
    abstract MainActivity contributeMainActivity();
}
</code></pre>

<p>Which is added to the global component.</p>

<pre><code>@Singleton
@Component(modules = {
        AndroidInjectionModule.class,
        AppModule.class,
        MainActivityModule.class
})
</code></pre>
",2413303,,2413303,,2018-04-10 10:36:17,2018-04-10 10:36:17,,,,8,,,
Android,49756310,2,,49756166,2018-04-10 14:32:14,3036,,1,,"<p>If I take the <a href=""https://github.com/googlesamples/android-architecture-components/blob/5ec49a4bcdada748b4968138c4182deef3741123/GithubBrowserSample/app/build.gradle"" rel=""nofollow noreferrer"">Google GithubBrowserSample into account which has the following task in its build.gradle</a>:</p>

<pre><code>task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: ""${buildDir}/intermediates/classes/debug"", excludes: fileFilter)
    def mainSrc = ""${project.projectDir}/src/main/java""

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: ""$buildDir"", includes: [
            ""jacoco/testDebugUnitTest.exec"",
            ""outputs/code-coverage/connected/*coverage.ec""
    ])
}
</code></pre>

<p>You could most likely add a file filter such as <code>io.realm.*RealmProxy.class</code>.</p>
",2413303,,,,,2018-04-10 14:32:14,,,,0,,,
Android,49767546,2,,47283709,2018-04-11 5:59:05,3036,,3,,"<p>I improved googles example app ""barcode-reader"" to detect both inverted colored barcodes and regular ones.</p>

<p>here is a link to googles example app:</p>

<p><a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/barcode-reader"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-vision/tree/master/visionSamples/barcode-reader</a></p>

<p>I did so by editing ""CameraSource"" class, 
package: <code>""com.google.android.gms.samples.vision.barcodereader.ui.camera""</code>.</p>

<p>I added a parameter: <code>private boolean isInverted = false;</code></p>

<p>and changed function <code>void setNextFrame(byte[] data, Camera camera)</code>:</p>

<pre><code>void setNextFrame(byte[] data, Camera camera) {
            synchronized (mLock) {
                if (mPendingFrameData != null) {
                    camera.addCallbackBuffer(mPendingFrameData.array());
                    mPendingFrameData = null;
                }

                if (!mBytesToByteBuffer.containsKey(data)) {
                    Log.d(TAG,
                            ""Skipping frame.  Could not find ByteBuffer associated with the image "" +
                                    ""data from the camera."");
                    return;
                }

                mPendingTimeMillis = SystemClock.elapsedRealtime() - mStartTimeMillis;
                mPendingFrameId++;
                if (!isInverted){
                    for (int y = 0; y &lt; data.length; y++) {
                        data[y] = (byte) ~data[y];
                    }
                    isInverted = true;
                } else {
                    isInverted = false;
                }
                mPendingFrameData = mBytesToByteBuffer.get(data);

                // Notify the processor thread if it is waiting on the next frame (see below).
                mLock.notifyAll();
            }
        }
</code></pre>
",9112590,,,,,2018-04-11 5:59:05,,,,0,,,
Android,49828362,2,,49785873,2018-04-14 5:46:14,3039,,1,,"<p>Thanks to user <a href=""https://stackoverflow.com/users/6668797/twl"">TWL</a> who pointed me towards <a href=""https://github.com/googlesamples/android-instant-apps/tree/master/flavors"" rel=""nofollow noreferrer"">google samples for instant apps, with an example for flavors</a>. </p>

<p>We need flavor declarations in all the feature modules, application module and instant-app module as well. Library modules can be skipped as of today with plugin version 3.1.1. In other words, have this section in all feature and installed/instant modules:</p>

<pre><code>flavorDimensions ""dim""
productFlavors{
    a{
        dimension ""dim""
    }
    b{
        dimension ""dim""
    }
}
</code></pre>
",3117656,,,,,2018-04-14 5:46:14,,,,0,,,
Android,49854520,2,,26689961,2018-04-16 10:00:37,3041,,1,,"<p>To include <strong>ttf</strong> file in your app is lead to increase your app size.</p>

<p><strong>Downloadable Font</strong> is best solution to use other fonts.
Use following references:</p>

<p><strong>document:</strong>
<a href=""https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts.html"" rel=""nofollow noreferrer"">https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts.html</a></p>

<p><strong>sample:</strong>
<a href=""https://github.com/googlesamples/android-DownloadableFonts"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-DownloadableFonts</a></p>

<p>and still you want to include fontFile then use following answer:
<a href=""https://stackoverflow.com/a/27588966/8240915"">https://stackoverflow.com/a/27588966/8240915</a></p>
",8240915,,,,,2018-04-16 10:00:37,,,,0,,,
Android,49865438,2,,49864119,2018-04-16 20:09:02,3042,,3,,"<p>Your approach to passing bitmap data to another activity is wrong. First of all, you should check <a href=""https://developer.android.com/guide/components/activities/activity-lifecycle.html"" rel=""nofollow noreferrer"">Android Activity Lifecycle</a>. When you start different Activity, let's call it B from A, the A Activity will be destroyed and all resources will be destroyed. On the Android Activity LifeCycle documentation, they mentioned this: </p>

<blockquote>
  <p>The onDestroy() callback releases all resources that have not yet been
  released by earlier callbacks such as onStop().</p>
</blockquote>

<p>So, you cannot access the variables after activity destroyed. What you should do is, you should save the bitmap to the file and pass the file URI via the intent extra and get the URI from another activity's onCreate callback.</p>

<p>You can use FileProvider to save the file, and pass the provider URI via intent which is the best ""<strong><em>Android kind</em></strong>"" approach, or you can save the file's path to the shared preferences, and read it from another activity which is not stable and not the best practice.</p>

<p>Let's use FileProvider: 
You can check the <a href=""https://developer.android.com/reference/android/support/v4/content/FileProvider.html#ProviderDefinition"" rel=""nofollow noreferrer"">Android Documentation about FileProvider</a> to define it. </p>

<pre><code>// Assume that you added Captures path to your FileProvider's paths.
// Create temporary image file.
String fileName = ""IMG_"" + new SimpleDateFormat(""yyyyMMdd-HHmmss"").format(new Date()) + "".jpg"";  
File captureDirectory = new File(getFilesDir(), ""Captures"");
if( !captureDirectory.isDirectory() ) captureDirectory.mkdirs();
File mediaFile = new File(captureDirectory, fileName);

Uri fileUri = FileProvider.getUriForFile(this,
                    ""com.mydomain.fileprovider"",
                    mediaFile);  

// Save the Bitmap.
public void onImageAvailable(ImageReader imageReader) {
    Image mImage = imageReader.acquireLatestImage();
    ByteBuffer buffer = mImage.getPlanes()[0].getBuffer();
    byte[] bytes = new byte[buffer.remaining()];
    buffer.get(bytes);
    OutputStream output = null;
    try {
        output = getContentResolver().openOutputStream(fileUri);
        output.write(bytes);
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        mImage.close();
        if (output != null) {
            try {
                output.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

// Pass the file uri via intent.
Intent displayIntent = new Intent(this, DisplayActivity.class);
displayIntent.putExtra(""FILE_URI"", mediaFile);
startActivity(displayIntent);

// Read the uri from started activity and show the bitmap
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_display);

    ... 
    bundleExtras = getIntent().getExtras();
    if(bundleExtras != null){
        Uri savedBitmapUri = bundleExtras.getParcelable(""FILE_URI"");
        mImageView_Preview.setImageURI(savedBitmapUri);
    }
    else{
        // Uri not inside the intent data.
    }
    ...
}
</code></pre>

<p>You should not load all bytes to the memory as a Bitmap. You can just save the captured image to the file and pass its file Uri created from your application's FileProvider and show the file Uri with one line code. </p>

<p>Basic optimizations: 
 - You can create the file in the cache directory<br>
 - You can remove the file after completing your task with using <a href=""https://developer.android.com/reference/android/support/v4/content/FileProvider.html#Permissions"" rel=""nofollow noreferrer"">FileProvider
   permissions</a>.
 - You can do the saving job on the background thread like Google did in <a href=""https://github.com/googlesamples/android-Camera2Basic"" rel=""nofollow noreferrer"">android-Camera2Basic</a> sample. 
 - And more...</p>
",2774420,,,,,2018-04-16 20:09:02,,,,13,,,
Android,49872728,2,,49814894,2018-04-17 7:58:33,3042,,3,,"<p>I have read the google samples here (<a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding</a>) and find the solution:</p>

<ol>
<li><p>create a interface to implement:</p>

<pre><code>public interface TaskItemNavigator {
    void openTaskDetails(String taskId);
}
</code></pre></li>
<li><p>have a weak reference in view model:</p>

<pre><code>@Nullable
private WeakReference&lt;TaskItemNavigator&gt; mNavigator;
</code></pre></li>
<li><p>implement it in activity:</p>

<pre><code>public class TasksActivity extends AppCompatActivity implements TaskItemNavigator{
    ...
    @Override
    public void openTaskDetails(String taskId) {
        Intent intent = new Intent(this, TaskDetailActivity.class);
        intent.putExtra(TaskDetailActivity.EXTRA_TASK_ID, taskId);
        startActivityForResult(intent, AddEditTaskActivity.REQUEST_CODE);
    }
}
</code></pre></li>
</ol>
",2206827,,,,,2018-04-17 7:58:33,,,,0,,,
Android,49895540,2,,47636886,2018-04-18 9:04:55,3043,,2,,"<p>Check out <a href=""https://www.youtube.com/watch?v=4L4fLrWDvAU&amp;feature=youtu.be"" rel=""nofollow noreferrer"">this video from Google I/O</a>, and <a href=""https://github.com/googlesamples/android-unsplash"" rel=""nofollow noreferrer"">sample app on GitHub</a></p>

<p><a href=""https://github.com/googlesamples/android-unsplash/blob/master/app/src/main/java/com/example/android/unsplash/ui/DetailSharedElementEnterCallback.java"" rel=""nofollow noreferrer"">DetailSharedElementEnterCallback</a> contains remapping</p>
",3801650,,,,,2018-04-18 9:04:55,,,,0,,,
Android,49960414,2,,4749593,2018-04-21 21:32:11,3047,,2,,"<p>This is an ancient question but I noticed that the directory MimeType had not actually been specified properly in any of the answers.  I found this in the Google code sample for SAF (Storage Access Framework) <a href=""https://github.com/googlesamples/android-StorageProvider"" rel=""nofollow noreferrer"">android-StorageProvider</a>:</p>

<pre><code>DocumentsContract.Document.MIME_TYPE_DIR
</code></pre>

<p>Which is this string:</p>

<pre><code>vnd.android.document/directory
</code></pre>

<p>So for the initial question:</p>

<pre><code>    Uri uri = Uri.parse(getFilesDir().getPath());
    int OPEN_REQUEST = 1337;
    Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
    intent.addCategory(Intent.CATEGORY_OPENABLE);
    intent.setDataAndType(uri, DocumentsContract.Document.MIME_TYPE_DIR);

    startActivityForResult(intent, OPEN_REQUEST);
</code></pre>

<p>But the Storage Access Framework will navigate through the directories for you. So you may only need to do this:</p>

<pre><code>    int OPEN_REQUEST = 1337;
    Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
    intent.addCategory(Intent.CATEGORY_OPENABLE);
    intent.setType(""*/*"");

    startActivityForResult(intent, OPEN_REQUEST);
</code></pre>
",7949386,,,,,2018-04-21 21:32:11,,,,0,,,
Android,50004075,2,,49994694,2018-04-24 14:20:58,3050,,1,,"<p>If you do it properly it will allow you in Developer console to upload both.
Read this for general requirements:
<a href=""https://developer.android.com/google/play/publishing/multiple-apks.html"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/publishing/multiple-apks.html</a></p>

<p>This is also an example, note the application folder which is for the mobile and wearable folder which is for the Wear device. See the details in Android manifest and build gradle files, you need to follow them exactly.</p>

<p><a href=""https://github.com/googlesamples/android-WatchFace"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-WatchFace</a></p>
",3041972,,,,,2018-04-24 14:20:58,,,,0,,,
Android,50025685,2,,50014807,2018-04-25 15:08:05,3051,,1,,"<p>Yes, <a href=""https://developer.android.com/reference/android/media/MediaCodec.html#configure(android.media.MediaFormat,%20android.view.Surface,%20android.media.MediaCrypto,%20int)"" rel=""nofollow noreferrer"">you can configure</a> a MediaCodec decoder with an output surface and use GLSurfaceView to apply changes through shaders, this is the best way because you use just the necessary memory, especially for color transformation (you can't know in advance what color your decoder use), and for YUV2RGB transformation.</p>

<p>You can take a look <a href=""https://developer.android.com/reference/android/media/MediaCodec.html"" rel=""nofollow noreferrer"">here</a> or <a href=""https://github.com/googlesamples/android-ndk/tree/master/native-codec"" rel=""nofollow noreferrer"">here</a> if you want to do it in native</p>
",5458344,,,,,2018-04-25 15:08:05,,,,0,,,
Android,50065157,2,,50063467,2018-04-27 14:59:24,3053,,1,,"<p>Note: This error can happen if the resource directory name is incorrect.</p>

<p>Best procedure for creating the directory name:</p>

<ol>
<li>Doing: File -> New -> Android Resource Directory</li>
<li>Choose: Smallest Screen Width</li>
<li>Tap "">>"" and enter [The number of dips]</li>
</ol>

<p>Also, adding this line to the Gradle file solves similar errors:</p>

<pre><code>
dependencies {
    ...
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
}
</code></pre>

<p>Followed by a resync.</p>

<p><a href=""https://dl.google.com/dl/android/maven2/com/android/support/constraint/group-index.xml"" rel=""nofollow noreferrer"">Constraint Layout Versions</a></p>

<p><a href=""https://github.com/googlesamples/android-ConstraintLayoutExamples/archive/master.zip"" rel=""nofollow noreferrer"">Google Constraint Layout Sample</a></p>

<p><a href=""https://i.stack.imgur.com/yUYqW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yUYqW.png"" alt=""Project Downloaded from Google Drive""></a></p>

<p><a href=""https://i.stack.imgur.com/aYrWW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aYrWW.png"" alt=""Project Modified Layout Directory""></a></p>
",1600332,,1600332,,2018-04-28 12:16:50,2018-04-28 12:16:50,,,,4,,,
Android,50138447,2,,50066035,2018-05-02 15:36:18,3058,,2,,"<p>CameraSource.java is available <a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/ui/camera/CameraSource.java"" rel=""nofollow noreferrer"">on GitHub</a> under a permissive <a href=""http://www.apache.org/licenses/LICENSE-2.0"" rel=""nofollow noreferrer"">Apache license</a>. Feel free to add auto-focus and zoom.</p>
",192373,,192373,,2018-05-03 6:28:08,2018-05-03 6:28:08,,,,2,,,
Android,50175492,2,,50111818,2018-05-04 12:54:51,3060,,1,,"<p>This might be related to the fact that the attestation API has been marked as deprecated. The new one doesn't depend on the google client API, you should check <a href=""https://developer.android.com/training/safetynet/attestation"" rel=""nofollow noreferrer"">this</a>. Also Google released an example app using the new api, you can check <a href=""https://github.com/googlesamples/android-play-safetynet"" rel=""nofollow noreferrer"">here</a>.</p>
",3109410,,,,,2018-05-04 12:54:51,,,,0,,,
Android,50202803,2,,50201721,2018-05-06 17:50:19,3062,,1,,"<p>Changing from MutableLiveData which always resends the previous set values to new subscribers, to SingleLiveEvent which doesn't have this behaviour, solved the problem.</p>

<p>The class can be found here: <a href=""https://github.com/googlesamples/android-architecture/tree/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/tree/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp</a></p>
",4020474,,,,,2018-05-06 17:50:19,,,,0,,,
Android,50258894,2,,50256122,2018-05-09 17:22:12,3065,,2,,"<p>There are still steps to take to make the app available as an instant app. See <a href=""http://g.co/instantapps"" rel=""nofollow noreferrer"">http://g.co/instantapps</a></p>

<p>For a sample of a single feature module instant app <a href=""https://github.com/googlesamples/android-instant-apps/tree/master/hello-kotlin"" rel=""nofollow noreferrer"">see this sample</a>.</p>

<p>But the app size doesn't have to be reduced further.</p>
",422060,,,,,2018-05-09 17:22:12,,,,0,,,
Android,50264568,2,,50264477,2018-05-10 2:23:45,3065,,1,,"<p>You can refer source of camera2 basic:
<a href=""https://github.com/googlesamples/android-Camera2Basic/tree/master/kotlinApp"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Basic/tree/master/kotlinApp</a></p>

<p>Or
<a href=""https://stackoverflow.com/questions/49547673/why-camera2-api-working-not-correct"">Why Camera2 API working not correct?</a></p>
",1497597,,,,,2018-05-10 2:23:45,,,,0,,,
Android,50270376,2,,50270375,2018-05-10 10:05:32,3065,,5,,"<p>The above includes both <strong>constructor and field injection</strong>, but <strong>neither done right</strong>. The example would behave the same if we removed all the <code>@Inject</code> annotations from <code>MyPresenter</code> since we're not using any of them.</p>

<pre><code>@Provides
MyPresenter provideMyPresenter(MyView view) {
  // no constructor injection, we create the object ourselves!
  return new MyPresenter(view);
}

// also no mention anywhere of component.inject(presenter)
// so the fields won't be injected either
</code></pre>

<p>Make sure to use <em>either</em> constructor injection <em>or</em> field injection. Mixing both will usually indicate an error in your setup or understanding.</p>

<ul>
<li><code>@Inject</code> on a field is a marker for <em>field injection</em></li>
<li><code>@Inject</code> on a constructor is a marker for <em>constructor injection</em></li>
</ul>

<p>This means your class should have <em>either of</em></p>

<ul>
<li>a <strong>single</strong> <code>@Inject</code> on the constructor, or</li>
<li>a <code>@Inject</code> on <strong>all the fields to initialize</strong>, but <em>none on the constructor</em>!</li>
</ul>

<p><strong>Don't sprinkle <code>@Inject</code> everywhere and expect things to work!</strong> Make sure to place the annotation where needed. Don't mix field and constructor injection!</p>

<p><strong>Constructor injection should be favored over field injection</strong> as it creates an initialized and usable object. Field injection is to be used with Framework components where the Framework creates the objects. You have to manually call <code>component.inject(object)</code> for field injection to be performed, or any annotated fields <em>will be null</em> when you try to use them.</p>

<h2>Constructor Injection</h2>

<p>As the name suggests you <strong>put your dependencies</strong> as parameters <strong><em>in the constructor</em></strong>. The annotation on the constructor tells Dagger about the object and it can then <em>create the object for you</em> by calling it with all the required dependencies. Dagger will also inject any annotated fields or methods after creating the object, but plain constructor injection should usually be favored as it doesn't hide any dependencies.</p>

<p>Dagger creating the object also means there is <strong>no need for a <code>@Provides</code> method in your module</strong> that creates the object. All you need to do is add <code>@Inject</code> to the constructor and declare the dependencies.</p>

<pre><code>class MyPresenter {

  private Context context;
  private MyView view;

  @Inject
  MyPresenter(MyView view, Context context) {
    this.view = view;
    this.context = context
  }
}
</code></pre>

<p>If you want to bind your implementation to an interface, there is still no need to create the object yourself.</p>

<pre><code>@Module class MyModule {

  @Provides
  MyPresenter providePresenter(MyPresenterImpl presenter) {
    // Dagger creates the object, we return it as a binding for the interface!
    return presenter;
  }
}
</code></pre>

<p>And there is even a shorter (and more performant) version of the above use-case:</p>

<pre><code>@Module interface MyModule {

  @Binds
  MyPresenter providePresenter(MyPresenterImpl presenter)
}
</code></pre>

<p>Constructor injection should be your default way of using Dagger. Make sure that you <em>don't call <code>new</code> yourself</em> or you misunderstood the concept.</p>

<h2>Field Injection</h2>

<p>There are times when you <em>can't</em> use constructor injection, e.g. an Activity in Android gets created by the Framework and you shouldn't override the constructor. In this case we can use <em>field injection</em>.</p>

<p>To use field injection you annotate all the fields that you want initialized with <code>@Inject</code> and add a <code>void inject(MyActivity activity)</code> method to the component that should handle the injection.</p>

<pre><code>@Component
interface MyComponent {
  void inject(MyActivity activity);
}
</code></pre>

<p>And somewhere in your code <strong>you have to call <code>component.inject(myActivity)</code></strong> <em>or the fields will not be initialized.</em> e.g. in <code>onCreate(..)</code></p>

<pre><code>void onCreate(..) {
  // fields still null / uninitialized
  myComponent.inject(this);
  // fields are now injected!

  // ...
}
</code></pre>

<p><em>Field injection is not transitive</em>. Just because you inject an Activity this does not mean that Dagger will also inject the fields of the presenter it injected. You have to inject every object manually, which is one reason why you should favor constructor injection.</p>

<p>There are tools that help mitigate the boilerplate of creating components and injecting your objects like <code>AndroidInjection.inject()</code> which will do this for you, but it still has to be done. Another example is <a href=""https://github.com/googlesamples/android-architecture-components/blob/8e77a8b90bec775bfdf9fa2244686f73265cdad2/GithubBrowserSample/app/src/main/java/com/android/example/github/di/AppInjector.kt"" rel=""nofollow noreferrer""><code>AppInjector</code></a> which adds various lifecycle listeners to inject your Activities and Fragments, but it will still call <code>AndroidInjection</code> which then creates your component and injects the object.</p>

<p><strong>Make sure that you inject the object before using it</strong> and that there is no constructor annotated with <code>@Inject</code> to avoid confusion.</p>

<h2>What else?</h2>

<p>There is also the lesser used <a href=""https://stackoverflow.com/q/39338870/1837367"">method injection</a> and of course Dagger can't inject third party libraries, which you have to construct and provide in your modules.</p>
",1837367,,1837367,,2018-12-21 16:03:12,2018-12-21 16:03:12,,,,2,,,
Android,50314958,2,,48173679,2018-05-13 10:06:32,3068,,3,,"<p>There is great sample @yigit related to the Paging library which also shows how to handle progress bar, error and Retry in Recyclerview. So Basically he is creating a <code>Listing.kt</code> data class which consist of the <code>NetworkState</code> and <code>PagedList</code> Like below</p>

<p><strong>Listing.kt</strong>
</p>

<pre><code>data class Listing&lt;T&gt;(
        // the LiveData of paged lists for the UI to observe
        val pagedList: LiveData&lt;PagedList&lt;T&gt;&gt;,
        // represents the network request status to show to the user
        val networkState: LiveData&lt;NetworkState&gt;,
        // represents the refresh status to show to the user. Separate from networkState, this
        // value is importantly only when refresh is requested.
        val refreshState: LiveData&lt;NetworkState&gt;,
        // refreshes the whole data and fetches it from scratch.
        val refresh: () -&gt; Unit,
        // retries any failed requests.
        val retry: () -&gt; Unit)
</code></pre>

<p><strong>NetworkState.kt</strong>
</p>

<pre><code>enum class Status {
    RUNNING,
    SUCCESS,
    FAILED
}

@Suppress(""DataClassPrivateConstructor"")
data class NetworkState private constructor(
        val status: Status,
        val msg: String? = null) {
    companion object {
        val LOADED = NetworkState(Status.SUCCESS)
        val LOADING = NetworkState(Status.RUNNING)
        fun error(msg: String?) = NetworkState(Status.FAILED, msg)
    }
}
</code></pre>

<p><strong>RedditPostRepository.kt</strong>
</p>

<pre><code>interface RedditPostRepository {
    fun postsOfSubreddit(subReddit: String, pageSize: Int): Listing&lt;RedditPost&gt;

    enum class Type {
        IN_MEMORY_BY_ITEM,
        IN_MEMORY_BY_PAGE,
        DB
    }
}
</code></pre>

<p>The <code>SubRedditViewModel.k</code> observe the <code>Listing&lt;RedditPost&gt;</code> from <code>RedditPostRepository.kt</code> notify to UI about the state and data and UI updates the view accordingly. To know more about how the <code>NetworkState</code> propagate from  <strong>Datasource to ViewModel</strong> Look at the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PagingWithNetworkSample/app/src/main/java/com/android/example/paging/pagingwithnetwork/reddit/repository/inMemory/byPage/PageKeyedSubredditDataSource.kt"" rel=""nofollow noreferrer"">PageKeyedSubredditDataSource.kt</a> and <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PagingWithNetworkSample/app/src/main/java/com/android/example/paging/pagingwithnetwork/reddit/repository/inMemory/byPage/SubRedditDataSourceFactory.kt"" rel=""nofollow noreferrer"">SubRedditDataSourceFactory.kt</a>  </p>

<p>Here is the <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample"" rel=""nofollow noreferrer"">Link</a> to the Google sample by @yigit.</p>
",3983816,,3983816,,2018-12-04 2:41:11,2018-12-04 2:41:11,,,,3,,,
Android,50320073,2,,50317074,2018-05-13 19:52:43,3069,,1,,"<blockquote>
  <p>Handler: The handler on which the callback should be invoked, or null to use the current thread's looper.</p>
</blockquote>

<p>In the camera2basic sample, <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java#L692"" rel=""nofollow noreferrer"">using</a> the current (Main) looper for preview CameraCaptureSession is good enough, because its callback is not involved in expensive tasks, and is called only once. The other callbacks that use backgroundThread, must be scheduled off the Main (UI) thread.</p>
",192373,,,,,2018-05-13 19:52:43,,,,0,,,
Android,50332808,2,,49834875,2018-05-14 14:28:53,3070,,9,,"<p>I just remembered I asked this question a few weeks ago.
Meanwhile, I found a solution to the problem and TensorflowLite is now nicely embedded into my Android Project, where I do all the programming using the C++ API!</p>

<p>The problem was that the Tensorflow shared library I built did not contain a soname. So, during build process, the library was stripped and as no name was found, the path was used as the ""name"". I noticed that while I further investigated my native-lib.so (the NDK C++ library which is then loaded by the App) using linux ""strings"" tool. Here I found out that indeed the path to load the library from ""/home/User/tensorflowtest/app/src/main/cpp/../../../../distribution/tensorflow/lib/x86/libtensorflowLite.so"" was set.
Adding a ""-Wl,-soname=libtensorflowLite.so"" to the build options in the BUILD file fixed this issue! You can find the whole rule I used below.</p>

<p>As it was a pain to get everything set up due to the lack of explanations (it seems TensorflowLite is mostly used via Java API on Android ?), I want to give a short guidance on how use the C++ API of TensorflowLite in Android Studio (from within an Android NDK project).</p>

<h1>1. <strong>Build the library for your architecture</strong></h1>

<p>To use the C++ API, you first need to build the TensorflowLite library. For this, add the following rule to the BUILD file in tensorflow/contrib/lite:</p>

<p>cc_binary(</p>

<pre><code>name = ""libtensorflowLite.so"",
linkopts=[
    ""-shared"", 
    ""-Wl,-soname=libtensorflowLite.so"",
],
linkshared = 1,
copts = tflite_copts(),
deps = [
    "":framework"",
    ""//tensorflow/contrib/lite/kernels:builtin_ops"",
],
</code></pre>

<p>)</p>

<p>Note: With this, a <strong>shared</strong> library can be built! A static one might also work.</p>

<p>Now you can build the library using</p>

<pre><code>bazel build //tensorflow/contrib/lite:libtensorflowLite.so --crosstool_top=//external:android/crosstool --cpu=arm64-v8a --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --cxxopt=""-std=c++11""
</code></pre>

<p>If you want to support multiple architectures, you will have to build the library several times and change the --cpu flag correspondingly.</p>

<p><strong>NOTE:</strong> This works fine at least for arm64-v8a and the armeabi-v7a (haven't tested it with MIPS so this might work aswell). However on an x86 device, I get the ""atomic_store_8"" error already adressed in this topic: <a href=""https://github.com/tensorflow/tensorflow/issues/16589"" rel=""noreferrer"">https://github.com/tensorflow/tensorflow/issues/16589</a></p>

<h1>2. <strong>Add the library and the needed headers to be included in your Android Studio project</strong></h1>

<p>Having built the library, you now need to make sure it also is linked into your Application (more specifically: Into your Android NDK library, which in my case is named ""native-lib""). I will give a short overview on how to do this, however if you need a more detailed explanation you may refer to the github link I provided in my initial question: <a href=""https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs"" rel=""noreferrer"">https://github.com/googlesamples/android-ndk/tree/840858984e1bb8a7fab37c1b7c571efbe7d6eb75/hello-libs</a></p>

<p>2.1. In your Android Studio Project, open the CMakeLists.txt</p>

<p>2.2. Add the following:</p>

<pre><code>    # This will create a new ""variable"" holding the path to a directory
    # where we will put our library and header files.
    # Change this to your needs
    set(distribution_DIR ${CMAKE_SOURCE_DIR}/distribution)

    # This states that there exists a shared library called libtensorflowLite
    # which will be imported (means it is not built with the rest of the project!)
    add_library(libtensorflowLite SHARED IMPORTED)

    # This indicates where the libtensorflowLite.so for each architecture is found relative to our distribution directory
    set_target_properties(libtensorflowLite PROPERTIES IMPORTED_LOCATION
        ${distribution_DIR}/lib/${ANDROID_ABI}/libtensorflowLite.so)

    # This indicates where the header files are found relative to our distribution dir
    target_include_directories(native-lib PRIVATE
                       ${distribution_DIR}/include)

    # Finally, we make sure our libtensorflowLite.so is linked to our native-lib and loaded during runtime 
    target_link_libraries( # Specifies the target library.
                   native-lib
                   libtensorflowLite
                   # Links the target library to the log library
                   # included in the NDK.
                   ${log-lib} )
</code></pre>

<p>2.3. Open the build.gradle for your Module: App (not the project one!)</p>

<p>2.4. Make sure our library will be packed into your APK</p>

<p>Add this inside the Android section:</p>

<pre><code>    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jni.srcDirs = []
            jniLibs.srcDirs = ['distribution/lib']
        }
    }
</code></pre>

<p>You may have to edit the path accoding to your needs: The files here will be packed in to your .apk inside the lib directory.</p>

<h1>3. Include flatbuffers</h1>

<p>TensorflowLite uses the flatbuffers serialization library. I guess this will be added automatically if you build your project using bazel. But this is not the case when using Android Studio. 
Of course, you could also add a static or shared library too.
However, for me it was easiest to just let flatbuffers compile each time with the rest of my app (it is not that big). 
I copied all of the flatbuffers <strong>*.cpp</strong> source files to my project and added them to the CMakeLists.</p>

<h1>4. Copy the needed headers for TensorflowLite and flatbuffers</h1>

<p>In 3. I just copied the cpp files to my project. 
However, the header files need to be located in the directory we set in target_include_directories in step 2.2.</p>

<p>So go ahead and copy all of the flatbuffers (from the flatbuffers repository) *.h files to this directory.
Next, from the TensorflowLite repository, you need all header files inside the tensorflow/contrib/lite directory. However you should <strong>keep the folder structure</strong></p>

<p>For me it looks like this:</p>

<ul>
<li>distribution

<ul>
<li>lib

<ul>
<li>arm64-v8a

<ul>
<li>libtensorflowLite</li>
</ul></li>
<li>armeabi-v7a

<ul>
<li>libtensorflowLite</li>
</ul></li>
</ul></li>
<li>include

<ul>
<li>flatbuffers</li>
<li>tensorflow

<ul>
<li>contrib

<ul>
<li>lite

<ul>
<li>kernels</li>
<li>nnapi</li>
<li>schema</li>
<li>tools </li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p>So, if I haven't forgotten anything everything should be set up correctly by now! 
Hopefully this helped and it worked for you as it did for me ;)</p>

<p>Best regards,</p>

<p>Martin</p>
",9646450,,,,,2018-05-14 14:28:53,,,,4,,,
Android,50399452,2,,50399194,2018-05-17 19:44:40,3073,,1,,"<p>This is accessing data synchronously from the LiveData:</p>

<pre><code>Log.d(""LISTSIZEVM"",  String.valueOf(mViewModel.getAll().getValue().size()));
</code></pre>

<p>But this data might no have arrived yet. </p>

<p>Try adding this query to your Dao, see <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PersistenceContentProviderSample/app/src/main/java/com/example/android/contentprovidersample/data/CheeseDao.java"" rel=""nofollow noreferrer"">google samples</a>:</p>

<pre><code>@Query(""SELECT COUNT(column) FROM table"")
int getDataCount();
</code></pre>

<p>As pointed out by @CommonsWare this cannot be called from the main UI thread because it's a database opearation that will block the UI thread and will throw an error. You can either call this off the main thread, or return a <code>LiveData&lt;Integer&gt;</code> and observe the value, like you did with the list of data.</p>

<pre><code>@Query(""SELECT COUNT(column) FROM table"")
LiveData&lt;Integer&gt; getDataCount();
</code></pre>
",7765139,,7765139,,2018-05-17 19:56:31,2018-05-17 19:56:31,,,,12,,,
Android,50402901,2,,50217980,2018-05-18 2:20:30,3073,,1,,"<p>You cannot play NAL units or raw H.264 stream with ExoPlayer. <br>The picture data must exist within a <a href=""https://google.github.io/ExoPlayer/supported-formats.html"" rel=""nofollow noreferrer""><strong>supported</strong> container/format</a>.</p>

<p>It's not clear what your mysterious C++ code is doing, is it an <a href=""https://developer.android.com/studio/projects/add-native-code"" rel=""nofollow noreferrer""><strong>NDK</strong></a> setup? What's its role in Android decoding? Are you saying you're unable to pass <em>[from the C++ function]</em> a data array into some Android function as function parameter? Is it something like this <a href=""https://stackoverflow.com/questions/31878117/write-int-to-binary-buffer-android-and-read-with-c""><strong>Java to C++</strong> setup</a>? It's not clear what your real problem is...</p>

<p>If you insist on Exoplayer, I can tell you that FLV is the one (on containers list) that might be the best option since it can be built in real-time (re-muxing). You first create an FLV header that holds <code>SPS</code> and <code>PPS</code> data then followed by keyframe (extracted H264 data from the first NAL). You'll have to get familiar with FLV bytes structure, but each frame header is around 13 bytes followed by NAL data, repeat for each frame until end. This woud be realtime transcoding.</p>

<p>As a second option, for Android, you could just use <a href=""https://developer.android.com/reference/android/media/MediaCodec"" rel=""nofollow noreferrer""><strong><code>MediaCodec</code></strong></a> to decode the H264 as extracted from the NAL units. Here is a <a href=""https://github.com/googlesamples/android-BasicMediaDecoder"" rel=""nofollow noreferrer""><strong>useful example source</strong></a>. Just use as:</p>

<pre><code>MediaCodec.createDecoderByType(""video/avc""); //then later give NAL units
</code></pre>

<p>Study also functions of this other <a href=""https://github.com/Consti10/myMediaCodecPlayer-for-FPV/blob/master/Android%204.4/MyMediaCodecFPVPlayer/app/src/main/java/com/example/wilson/mymediacodecfpvplayer/UdpReceiverDecoderThread.java"" rel=""nofollow noreferrer""><strong>source</strong></a> for ideas of how it works to via Android's own decoder.</p>

<p>Other starting points:</p>

<ul>
<li><p><a href=""https://stackoverflow.com/questions/32739047/android-decode-raw-h264-stream-with-mediacodec"">Android Decode raw h264 stream with MediaCodec
(NAL units)</a>.</p></li>
<li><p><a href=""https://stackoverflow.com/questions/49444446/decode-h264-raw-stream-using-mediacodec"">Decode H264 raw stream using mediacodec
</a></p></li>
</ul>
",2057709,,2057709,,2018-05-18 2:25:35,2018-05-18 2:25:35,,,,7,,,
Android,50427206,2,,50426051,2018-05-19 16:15:06,3075,,1,,"<p>I'd definitely recommend a bit of research before starting any piece of code. Today Android offers many interesting app architectures, and even though it's not trivial to chose the best one that suits you, that journey will make you learn a lot.</p>

<p>A good starting point for that is the Google's official <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">architecture sample projects</a> on GitHub. Not only you have many different architectures like MVP, MVVM, MVI, but also some interesting variants within each architecture.</p>

<p>On the other hand, Android is doing a great work trying to simplify that creating a great collection of libraries. That's called Android Architecture Components, and <a href=""https://github.com/googlesamples/android-architecture-components"" rel=""nofollow noreferrer"">here you have some of their samples</a> to start playing and adopting their patterns.</p>

<p>Finally, if you still decide to go with MVP, there're a few things you'll have to do in your example:</p>

<ol>
<li>Your <code>MainActivity</code> (the View) should implement a contract of that View (e.g: <code>MainViewContract</code>).</li>
<li>Within that View, you should get the reference to your <code>MainPresenter</code> passing the reference of the View which implements <code>MainViewContract</code>.</li>
<li>The MainPresenter will also implement a contract (e.g: <code>MainPresenterContract</code>).</li>
</ol>

<p>Basically all connections you need are stablished. The <code>MainPresenter</code> will be responsible of the business handling View inputs and outputs. In your case, the inputs and outputs very straightforward:</p>

<p>Inputs (<code>MainPresenterContract</code>):</p>

<ul>
<li><code>void copyText(String textToCopy);</code></li>
</ul>

<p>Outputs (<code>MainViewContract</code>):</p>

<ul>
<li><code>void showCopiedText(String copiedText);</code></li>
</ul>

<p>When the user clicks the button, you'll send the message <code>copyText</code> through the presenter local instance. Then, the presenter will get that and perform the output invoking <code>showCopiedText</code>. Since the main view <code>MainActivity</code> implements the <code>MainViewContract</code>, you'll receive the output message in a local method of the view where you just paint the text on the <code>Textview</code>.</p>
",812598,,,,,2018-05-19 16:15:06,,,,0,,,
Android,50457516,2,,14292863,2018-05-21 22:47:39,3077,,2,,"<p>Time saver for people who are facing the same issue (Mockito + Final Class) on Android + Kotlin. As in Kotlin classes are final by default. I found a solution in one of Google Android samples with Architecture component. Solution picked from here : <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample</a></p>

<p>Create following annotations :</p>

<pre><code>/**
 * This annotation allows us to open some classes for mocking purposes while they are final in
 * release builds.
 */
@Target(AnnotationTarget.ANNOTATION_CLASS)
annotation class OpenClass

/**
 * Annotate a class with [OpenForTesting] if you want it to be extendable in debug builds.
 */
@OpenClass
@Target(AnnotationTarget.CLASS)
annotation class OpenForTesting
</code></pre>

<p>Modify your gradle file. Take example from here : <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/build.gradle"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/build.gradle</a></p>

<pre><code>apply plugin: 'kotlin-allopen'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.android.example.github.testing.OpenClass'
}
</code></pre>

<p>Now you can annotate any class to make it open for testing :</p>

<pre><code>@OpenForTesting
class RepoRepository 
</code></pre>
",940841,,,,,2018-05-21 22:47:39,,,,2,,,
Android,50465218,2,,50236778,2018-05-22 10:18:01,3077,,1,,"<p>This is what happens under the hood:</p>

<pre><code>ViewModelProviders.of(getActivity())
</code></pre>

<p>As you are using <strong>getActivity()</strong> this retains your NoteViewModel while the scope of MainActivity is alive so is your trashedNotesLiveData.</p>

<p>When you first open your TrashFragment room queries the db and your trashedNotesLiveData is populated with the trashed value (At the first opening there is only one onChange() call). So this value is cached in trashedNotesLiveData.</p>

<p>Then you come to the main fragment add a few trashed notes and go to the TrashFragment again. This time you are first served with the cached value in
trashedNotesLiveData while room makes async query. When query finishes you are
brought the latest value. This is why you get two onChange() calls.</p>

<p>So the solution is you need to clean the trashedNotesLiveData before opening
TrashFragment. This can either be done in your getTrashedNotesLiveData() method.</p>

<pre><code>public LiveData&lt;List&lt;Note&gt;&gt; getTrashedNotesLiveData() {
    return NoteplusRoomDatabase.instance().noteDao().getTrashedNotes();
}
</code></pre>

<p>Or you can use something like this <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">SingleLiveEvent</a></p>

<p>Or you can use a MediatorLiveData which intercepts the Room generated one and returns only distinct values.</p>

<pre><code>final MediatorLiveData&lt;T&gt; distinctLiveData = new MediatorLiveData&lt;&gt;();
    distinctLiveData.addSource(liveData, new Observer&lt;T&gt;() {
        private boolean initialized = false;
        private T lastObject = null;

        @Override
        public void onChanged(@Nullable T t) {
            if (!initialized) {
                initialized = true;
                lastObject = t;
                distinctLiveData.postValue(lastObject);
            } else if (t != null &amp;&amp; !t.equals(lastObject)) {
                lastObject = t;
                distinctLiveData.postValue(lastObject);
            }

        }
    });
</code></pre>
",6232541,,6232541,,2018-05-22 13:21:50,2018-05-22 13:21:50,,,,0,,,
Android,50535140,2,,44485631,2018-05-25 18:40:54,3081,,1,,"<p>I had this problem with an entity (all fields were properly-initialized <code>var</code>s like a lot of the answers here are suggesting) that included a list of related, non-primitive items like the OP in this <a href=""https://stackoverflow.com/q/44580702/1145905"">SO question</a> had. For example:</p>

<pre><code>@Entity(tableName = ""fruits"")
data class CachedFruitEntity(
        @PrimaryKey var id: Long = 0L,
        @Embedded(prefix = ""buyer_"") var buyerEntity: CachedBuyerEntity? = null
        @TypeConverters(VendorsConverter::class)
        var vendorEntities: List&lt;CachedVendorEntity?&gt; = listOf()))
</code></pre>

<p>That is, it has an embedded field, and it took me a while to realize that what I actually needed was a type converter for the vendor entity list instead (the compiler wasn't throwing the usual <code>Error:(58, 31) error: Cannot figure out how to save this field into database. You can consider adding a type converter for it.</code> So my solution was very similar to <a href=""https://stackoverflow.com/a/48260739/1145905"">this answer</a></p>

<p>This <a href=""https://github.com/googlesamples/android-architecture-components/issues/43"" rel=""nofollow noreferrer"">google architecture components github thread</a> has more info on this misleading error, but not sure if the issue has been fixed yet. </p>
",1145905,,,,,2018-05-25 18:40:54,,,,0,,,
Android,50553324,2,,50535969,2018-05-27 14:47:17,3083,,1,,"<p>I think I've identified the source of the confusion on Developer Payload now. Years back when I was coding with <code>InAppPurchasing</code> developer payloads was an additional parameter in the <code>launchPurchaseFlow</code> function, but the new <strong>Billing Library</strong> with its <code>launchBillingFlow</code> does not support the developer payload any more. It is apparently now classed as a legacy field. <a href=""https://github.com/googlesamples/android-play-billing/issues/78#issuecomment-332881979"" rel=""nofollow noreferrer"">See here for example.</a> And in <a href=""https://issuetracker.google.com/issues/63381481"" rel=""nofollow noreferrer"">this Google post</a>, we have confirmation:</p>

<blockquote>
  <p>Hi</p>
  
  <p>The field developerPayload is a legacy field, kept to maintain the compatibility with old implementations, but as mentioned on Purchasing In-app Billing Products page (<a href=""https://developer.android.com/training/in-app-billing/purchase-iab-products.html"" rel=""nofollow noreferrer"">https://developer.android.com/training/in-app-billing/purchase-iab-products.html</a>), this field isn't always available when completing tasks related to In-app Billing.
  And since the library was designed to represent the most updated development model, we decided to don't support developerPayload in our implementation and we have no plans to include this field into the library.</p>
  
  <p>If you rely any important implementation of your in-app billing logic on the developerPayload, we recommend you change this approach, because this field will be deprecated at some point (or soon).
  The recommended approaches is to use your own backend to validate and track important details about your orders. For more details, check the Security and Design page (<a href=""https://developer.android.com/google/play/billing/billing_best_practices.html"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_best_practices.html</a>).</p>
  
  <p>Thanks</p>
</blockquote>
",1300214,,,,,2018-05-27 14:47:17,,,,0,,,
Android,50600010,2,,50599873,2018-05-30 8:35:33,3085,,1,,"<p>Don't put multiple activities in a single navigation xml file. Navigation is meant to solve in-activity navigation, meaning it only supports fragments gracefully. To start another activity, just do it the good old way like <code>context.startActivity(intent)</code>. You can find more details in this google sample: </p>

<p><a href=""https://github.com/googlesamples/android-sunflower"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-sunflower</a></p>
",2235972,,,,,2018-05-30 8:35:33,,,,1,,,
Android,50625719,2,,50352358,2018-05-31 13:40:06,3087,,3,,"<p>I'm doing exactly an exercise about endless scroll on apps and learning <strong>RxJava</strong>.</p>

<p>I was <em>gandalfing</em> around StackOverflow and other site, in search of a good samples and guides.</p>

<p>So far I found <a href=""https://gist.github.com/dustin-graham/52eaaab1cb3a41aba444"" rel=""nofollow noreferrer"">this one</a>, which I also report here (of course, copyright goes to the gist owner).</p>

<p><strong>ApiService.class</strong></p>

<pre><code>public static Observable&lt;List&lt;String&gt;&gt; paginatedThings(final Observable&lt;Void&gt; onNextObservable) {
        return Observable.create(new Observable.OnSubscribe&lt;List&lt;String&gt;&gt;() {
            @Override
            public void call(final Subscriber&lt;? super List&lt;String&gt;&gt; subscriber) {

            onNextObservable.subscribe(new Observer&lt;Void&gt;() {
                int latestPage = -1;
                @Override
                public void onCompleted() {
                    subscriber.onCompleted();
                }

                @Override
                public void onError(Throwable e) {
                    subscriber.onError(e);
                }

                @Override
                public void onNext(Void aVoid) {
                    latestPage++;
                    List&lt;String&gt; pageItems = new ArrayList&lt;String&gt;();
                    for (int i = 0; i &lt; 10; i++) {
                        pageItems.add(""page "" + latestPage + "" item "" + i);
                    }
                    subscriber.onNext(pageItems);
                }
            });
        }
    });
}
</code></pre>

<p><strong>ReactiveList.java</strong></p>

<pre><code>import android.app.Activity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.example.rxandroid.api.RepresentativeApi;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import butterknife.ButterKnife;
import butterknife.InjectView;
import rx.Observable;
import rx.Observer;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.subscriptions.CompositeSubscription;
import timber.log.Timber;

import static rx.android.app.AppObservable.bindActivity;

/**
 * Created by Dustin on 2/14/15.
 */
public class ReactiveList extends Activity {

    @InjectView(R.id.reactiveList)
    RecyclerView reactiveList;

    private ReactiveRecyclerAdapter adapter = new ReactiveRecyclerAdapter();
    private LinearLayoutManager layoutManager;

    private CompositeSubscription subscriptions = new CompositeSubscription();

    private List&lt;String&gt; mockItems = new ArrayList&lt;&gt;();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.reactive_list);
        ButterKnife.inject(this);

        for (int i = 0; i &lt; 100; i++) {
            mockItems.add(String.valueOf(i));
        }

        reactiveList.setHasFixedSize(true);
        reactiveList.setAdapter(adapter);
        layoutManager = new LinearLayoutManager(this);
        reactiveList.setLayoutManager(layoutManager);

        adapter.addAll(mockItems);

        Observable&lt;Void&gt; pageDetector = Observable.create(new Observable.OnSubscribe&lt;Void&gt;() {
            @Override
            public void call(final Subscriber&lt;? super Void&gt; subscriber) {
                reactiveList.setOnScrollListener(new RecyclerView.OnScrollListener() {
                    int pastVisibleItems, visibleItemCount, totalItemCount;
                    @Override
                    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                        visibleItemCount = layoutManager.getChildCount();
                        totalItemCount = layoutManager.getItemCount();
                        pastVisibleItems = layoutManager.findFirstVisibleItemPosition();

                        if ((visibleItemCount+pastVisibleItems) &gt;= totalItemCount) {
                            subscriber.onNext(null);
                        }
                    }
                });
            }
        }).debounce(400, TimeUnit.MILLISECONDS);

        bindActivity(this, pageDetector);
        Observable&lt;List&lt;String&gt;&gt; listItemObservable = RepresentativeApi.paginatedThings(pageDetector);
        bindActivity(this, listItemObservable);
        subscriptions.add(listItemObservable.observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer&lt;List&lt;String&gt;&gt;() {
            @Override
            public void onCompleted() {
                Timber.d(""completed"");
            }

            @Override
            public void onError(Throwable e) {
                Timber.e(""error: "" + e.getMessage());
            }

            @Override
            public void onNext(List&lt;String&gt; strings) {
                adapter.addAll(strings);
            }
        }));
    }

    public static class ReactiveRecyclerAdapter extends RecyclerView.Adapter&lt;ReactiveRecyclerAdapter.ReactiveViewHolder&gt; {

        private List&lt;String&gt; items = new ArrayList&lt;&gt;();

        public void addAll(List&lt;String&gt; moreItems) {
            items.addAll(moreItems);
            notifyDataSetChanged();
        }

        @Override
        public ReactiveViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View v = LayoutInflater.from(parent.getContext()).inflate(android.R.layout.simple_list_item_1,parent,false);
            ReactiveViewHolder vh = new ReactiveViewHolder(v);
            return vh;
        }

        @Override
        public void onBindViewHolder(ReactiveViewHolder holder, int position) {
            String item = items.get(position);
            holder.label.setText(item);
        }

        @Override
        public int getItemCount() {
            return items.size();
        }

        public static class ReactiveViewHolder extends RecyclerView.ViewHolder {

            TextView label;
            public ReactiveViewHolder(View itemView) {
                super(itemView);
                label = (TextView) itemView.findViewById(android.R.id.text1);
            }
        }
    }
}
</code></pre>

<p>And if you are interested on other tools, give a look at <a href=""https://developer.android.com/topic/libraries/architecture/"" rel=""nofollow noreferrer"">Google Architecture</a>.</p>

<p>The goal is to simplify app code (and why not, coders life): you will find the <a href=""https://developer.android.com/topic/libraries/architecture/paging/"" rel=""nofollow noreferrer"">Paging library</a> which you can use to solve endless scroll (I'm currently studying this too). By the way, it uses <strong>RxJava2</strong>.</p>

<p>If you want, there is an example on this <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample"" rel=""nofollow noreferrer"">GitHub repo</a> and it is done with Kotlin(!).</p>

<p>Conclusion: endless scroll can be very tricky and I strongly advice to take your time to learn and understand how it works, be it with libraries or not.</p>
",2013835,,,,,2018-05-31 13:40:06,,,,1,,,
Android,50629533,2,,50618369,2018-05-31 17:12:35,3087,,1,,"<p>Let's go by parts:</p>

<blockquote>
  <p>Now how do I notify from Repository.kt to MainViewModel that I have
  latest data to update ?</p>
</blockquote>

<p>You can use an observer pattern, just like the one you're using from the MainViewModel to the UI. If your using retrofit you can use a call adapter to return RxJava's Observables (or Singles, Flowables and so on) from your Retrofit calls, so for example you could have something like this:</p>

<pre><code>  @Headers({""Content-Type: application/json"", ""Accept: application/json""})
  @POST(""/sign_in"")
  Single&lt;Response&lt;LoginResponse&gt;&gt; traditionalLoginUser(
            @Body LoginRequest request,
            @Header(""Authorization"") String authToken);
</code></pre>

<p>This is a typical Retrofit interface that returns a Single, you can then observe this single in your repository or simply pass it along to the ViewModel to be observed there.</p>

<p>You can also add a call adapter for LiveData (there's one implemented by google <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/util/LiveDataCallAdapterFactory.kt"" rel=""nofollow noreferrer"">here</a>) and use LiveData instead of RxJava. I personally don't like to use LiveData for the Network Layer, though.</p>

<blockquote>
  <p>do I need to use RXJava to pass the data from Repository.KT to
  MainViewModel.KT, in that case how do I use it to pass user data?</p>
</blockquote>

<p>You can use RxJava, yes. I've actually been working in a sample app that does exactly that. The basic idea is that you use the repository to get the data from your API and pass the Observable along to the ViewModel. What I like to do in the ViewModel is to treat any possible erros by subscribing to the observable (or other rx entity) in there and receiving the data. As we can't necessarily treat erros on LiveData as we do with RxJava we can wrap the LiveData to propagate the error to the view as a state of our wrapper(this is actually found in this google <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt"" rel=""nofollow noreferrer"">sample</a>).</p>

<p>So for example, in my repository I have this:</p>

<pre><code>fun getUsersNotPaged(page: Int, pageSize: Int): Single&lt;SOResponse&lt;User&gt;&gt; {
        return remoteDataSource.apiService.getTopUsers(page, pageSize)

    }
</code></pre>

<p>Then in my View model I do like this:</p>

<pre><code>var userList: MutableLiveData&lt;LiveResource&lt;SOResponse&lt;User&gt;&gt;&gt; = MutableLiveData()

 fun getUserListNotPaged(page: Int, pageSize: Int): MutableLiveData&lt;LiveResource&lt;SOResponse&lt;User&gt;&gt;&gt; {
        val result = usersRepository
                .getUsersNotPaged(page, pageSize)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe({ result -&gt;
                    userList.postValue(LiveResource(LiveResourceStatus.SUCCESS, result, null))
                }, { error -&gt;
                    userList.postValue(LiveResource(LiveResourceStatus.ERROR, null, error.localizedMessage))
                })


        return userList
    }
</code></pre>

<p>And in my view:</p>

<pre><code> viewModel.getUserListNotPaged(1, 20).observe(this, Observer {
            it?.data?.let {
                Toast.makeText(this.context, ""Here"", Toast.LENGTH_SHORT).show()

            }
        })
</code></pre>

<p>I've used LiveResource to wrap my RxJava response and errors. </p>

<p>You can also use the <code>ReactiveStrems</code> extension to convert an Rx <code>Publisher</code> into a <code>LiveData</code>, but you need to handle the cases when an error happens in the <code>ViewModel</code> and guarantee there's no error to the resulting <code>LiveData</code>. Something like this:</p>

<pre><code>fun getUserListNotPaged(page: Int, pageSize: Int): LiveData&lt;SOResponse&lt;User&gt;&gt; {
        val result = usersRepository
                .getUsersNotPaged(page, pageSize)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .onErrorReturn {
                   SOResponse&lt;User&gt;()
                }
                .toFlowable()

        return LiveDataReactiveStreams.fromPublisher(result)
    }
</code></pre>

<p>In this case, whenever there is an error I simply return an empty response.</p>

<blockquote>
  <p>Does Android Latest Architecture do support any observer to accomplish
  this?</p>
</blockquote>

<p>Yeah, as you could see you can use <code>LiveData</code> all over the place or only half way through the process (from the VM to the UI only). Some people don't agree on using <code>LiveData</code> with HTTP calls <a href=""https://github.com/square/retrofit/issues/2354"" rel=""nofollow noreferrer"">though</a> (I'm one of them lol).</p>
",7765139,,7765139,,2018-05-31 17:18:36,2018-05-31 17:18:36,,,,7,,,
Android,50675200,2,,50673266,2018-06-04 7:18:34,3090,,4,,"<p>The answer is based on <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/viewmodel/GithubViewModelFactory.kt"" rel=""nofollow noreferrer"">android-architecture-components</a>.</p>

<p>You can use Map multibinding in Dagger.</p>

<p>First, to declare map key like this.</p>

<pre><code>@MustBeDocumented
@Target(
    AnnotationTarget.FUNCTION,
    AnnotationTarget.PROPERTY_GETTER,
    AnnotationTarget.PROPERTY_SETTER
)
@Retention(AnnotationRetention.RUNTIME)
@MapKey
annotation class ViewModelKey(val value: KClass&lt;out ViewModel&gt;)
</code></pre>

<p>Second, to create map.</p>

<pre><code>@Module
abstract class ViewModelModule {
    @Binds
    @IntoMap
    @ViewModelKey(UserViewModel::class)
    abstract fun bindUserViewModel(userViewModel: UserViewModel): ViewModel

    @Binds
    @IntoMap
    @ViewModelKey(SearchViewModel::class)
    abstract fun bindSearchViewModel(searchViewModel: SearchViewModel): ViewModel
}
</code></pre>

<p>Next, to create the factory file to handle the map which uses key to choose ViewModel.</p>

<pre><code>@Singleton
class GithubViewModelFactory @Inject constructor(
    private val creators: Map&lt;Class&lt;out ViewModel&gt;, @JvmSuppressWildcards Provider&lt;ViewModel&gt;&gt;
) : ViewModelProvider.Factory {
    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {
        val creator = creators[modelClass] ?: creators.entries.firstOrNull {
            modelClass.isAssignableFrom(it.key)
        }?.value ?: throw IllegalArgumentException(""unknown model class $modelClass"")
        try {
            @Suppress(""UNCHECKED_CAST"")
            return creator.get() as T
        } catch (e: Exception) {
            throw RuntimeException(e)
        }
    }
}
</code></pre>

<p>Finally, to inject factory in your activity or fragment.</p>

<pre><code>class SearchFragment : Fragment(), Injectable {

    @Inject
    lateinit var viewModelFactory: ViewModelProvider.Factory

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        searchViewModel = ViewModelProviders.of(this, viewModelFactory)
            .get(SearchViewModel::class.java)
}
</code></pre>

<p>By this way, you can inject repository in your ViewModel.</p>

<pre><code>class SearchViewModel @Inject constructor(repoRepository: RepoRepository) : ViewModel() {
}
</code></pre>
",9101749,,,,,2018-06-04 7:18:34,,,,0,,,
Android,50679302,2,,50678667,2018-06-04 11:14:33,3090,,3,,"<p>The problem is the one stated in the error, you can't have dynamically defined arguments for your <code>@Query</code> annotation. If you want to define the name of the table somewhere else, use string concatenation. You can do it like this:</p>

<pre><code>@Query(""SELECT * FROM "" + Table.USER_TABLE)
fun getAll(): List&lt;User&gt;
</code></pre>

<p>This is how they do it in this <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PersistenceContentProviderSample/app/src/main/java/com/example/android/contentprovidersample/data/CheeseDao.java"" rel=""nofollow noreferrer"">google</a> sample.</p>
",7765139,,,,,2018-06-04 11:14:33,,,,2,,,
Android,50739616,2,,50507202,2018-06-07 11:04:18,3093,,2,,"<p>At time of writing, Slices are not displayed anywhere in the Android system or Google apps yet as per the <a href=""https://developer.android.com/guide/slices/"" rel=""nofollow noreferrer"">docs</a>:</p>

<blockquote>
  <p>Slices will start appearing soon for users, but you can start building today.</p>
</blockquote>

<p>As you noted, the actual implementation to render/display a Slice, called <a href=""https://developer.android.com/reference/androidx/slice/widget/SliceView"" rel=""nofollow noreferrer""><code>SliceView</code></a>, is already available, however no apps have actually implemented this yet (at least not to my knowledge). You could implement this yourself but there isn't much point if you only intend to display your own Slices (you could just use regular views then). The main use-case to implement <code>SliceView</code> yourself would be if you were a launcher type app and were looking to display Slices from other applications.</p>

<p>The <a href=""https://github.com/googlesamples/android-SliceViewer"" rel=""nofollow noreferrer"">Slice Viewer app</a> demonstrates an implementation of <code>SliceView</code> but its main purpose for now is to let you build and test your Slices in preparation for other apps implementing <code>SliceView</code>.</p>

<p>At Google I/O 2018, in the <a href=""https://youtu.be/a7IVH5aNwwc?t=2m53s"" rel=""nofollow noreferrer"">Slices session</a>, it was announced that the first system area for Slices to show will be Google Search to enhance app predictions. In the session, it was announced that this will be launching some time in 2018.</p>
",268156,,,,,2018-06-07 11:04:18,,,,0,,,
Android,50746378,2,,50740757,2018-06-07 16:43:48,3094,,1,,"<blockquote>
  <p>How can I navigate from ViewModel?</p>
</blockquote>

<p>The answer is please don't. ViewModel is designed to store and manage UI-related data. </p>

<p><strong>New Answer</strong></p>

<p>In my previous answers, I said that we shouldn't navigate from ViewModel, and the reason is because to navigate, ViewModel must have references to Activities/Fragments, which I believe (maybe not the best, but still I believe it) is never a good idea.</p>

<p>But, in recommended app architecture from Google, it mentions that we <strong>should drive UI from model</strong>. And after I think, what do they mean with this?</p>

<p>So I check a sample from ""android-architecture"", and I found some interesting way how Google did it.</p>

<p>Please check here: <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-databinding"" rel=""nofollow noreferrer"">todo-mvvm-databinding</a></p>

<p>As it turns out, they indeed <strong>drive UI from model</strong>. But how?</p>

<ol>
<li>They created an interface <a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvvm-databinding/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksNavigator.java"" rel=""nofollow noreferrer"">TasksNavigator</a> that basically just a navigation interface.</li>
<li>Then in the <a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvvm-databinding/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/tasks/TasksViewModel.java"" rel=""nofollow noreferrer"">TasksViewModel</a>, they have this reference to TaskNavigator so they can drive UI without having reference to Activities / Fragments directly.</li>
<li>Finally, TasksActivity implemented TasksNavigator to provide detail on each navigation action, and then set navigator to TasksViewModel.</li>
</ol>
",8667412,,8667412,,2018-10-03 0:37:21,2018-10-03 0:37:21,,,,6,,,
Android,50766407,2,,48851904,2018-06-08 18:21:38,3095,,1,,"<p>This can be your login class, maybe extending ViewModel, so it keeps alive on configuration changes:</p>

<pre><code> class LoginClass
    {
        var loginEvent = SingleLiveEvent&lt;LoginEvent&gt;()
        fun startLogin(user: String, password: String)
        {
            loginEvent.value= LoginEvent(LoginStatus.LoginStart,null,null)
            launch(UI) { 
                try{
                    bg{
                        //do login process
                    }.await()
                    loginEvent.value= LoginEvent(LoginStatus.LoginOk,null,null)
                }
                catch (error: Exception){
                    loginEvent.value= LoginEvent(LoginStatus.LoginFailed,error.message,null)
                }
            }
        }
        data class LoginEvent(var loginStatus: LoginStatus, var errorMessage: String?, var loginExtraData: Any?) 
        enum class LoginStatus
        {
            LoginStart,
            LoginOk,
            LoginFailed
        }
    }
</code></pre>

<p>You can observe the login status to react and change your UI accordingly:</p>

<pre><code>val myLoginClass = LoginClass()
myLoginClass.loginEvent.observe(this@LifecycleOwner, Observer {
    if(it==null)
        return@Observer
    when(it.loginStatus)
    {

        LoginClass.LoginStatus.LoginStart -&gt; {
            //show indeterinate progress bar, disable inputs, etc
        }
        LoginClass.LoginStatus.LoginOk -&gt; {
            //go to logged in activity
        }

        LoginClass.LoginStatus.LoginFailed -&gt; {
            //show login failed toast, hide progress bar, enable input, etc
        }
    }
})
</code></pre>

<p>To start login simply call the login method of your class:</p>

<pre><code>loginButton.onClick {
    myLoginClass.startLogin(""user"", ""password"")
}
</code></pre>

<p>Logically, you will need more than this, but you can use it as a skeleton.</p>

<p>SingleLiveEvent can be found here: <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java</a></p>
",7117454,,,,,2018-06-08 18:21:38,,,,0,,,
Android,50781937,2,,50781163,2018-06-10 8:36:05,3096,,2,,"<p>There are a number of problems here:</p>

<pre><code>class MainTripsFragmentAdapter @Inject constructor(
    fragmentManager: FragmentManager,
    private val mainCurrentTripsFragment: MainCurrentTripsFragment,
    private val mainHistoryTripsFragment: MainHistoryTripsFragment
) : FragmentPagerAdapter(fragmentManager) {

    override fun getItem(position: Int) = when (position) { 
        0 -&gt; mainCurrentTripsFragment  //no!!
        1 -&gt; mainHistoryTripsFragment
        else -&gt; mainCurrentTripsFragment
    }

    override fun getCount() = 2
}
</code></pre>

<p><code>getItem</code> in the <code>PagerAdapter</code> means ""create item"". When you use a <code>PagerAdapter</code> you delegate <em>creation</em> of Fragments to the adapter. You shouldn't write code to cache and store the Fragments, this is the job of the <code>FragmentManager</code>.</p>

<p>Instead your <code>FragmentAdapter</code> should look something like this:</p>

<pre><code>    override fun getItem(position: Int) = when (position) { 
        0 -&gt; MainCurrentTripsFragment.instantiate()
        1 -&gt; MainHistoryTripsFragment.instantiate()
        else -&gt; MainCurrentTripsFragment.instantiate()
    }
</code></pre>

<p>Where the <code>instantiate</code> method is declared inside a companion object inside your Fragments:</p>

<pre><code>class MainCurrentTripsFragment: Fragment() {
    companion object {
        @JvmStatic
        fun instantiate(args: Bundle?) {
            val frag = MainCurrentTripsFragment()
            frag.arguments = args
        }
    }
}
</code></pre>

<p>That is the standard idiom for using a <code>PagerAdapter</code> with Fragments in Android. You shouldn't provide PagerAdapters or Fragments as dependencies in your object graph. In fact, many Android classes controlled by the OS like <code>FragmentManager</code>, <code>Activity</code>, <code>Fragment</code>, <code>BroadcastReceiver</code>, <code>Service</code> are not good candidates for becoming dependencies in your object graph using Dagger 2.</p>

<p>A common error when starting to use Dagger 2 is try and inject <em>everything</em>, as if newing up anything manually is wrong. This is just not possible in Android. </p>

<p>Please take the Fragments, the FragmentManager, the PagerAdapter etc out of your modules. Don't try to provide these or bind these using Dagger 2. Then use Dagger 2 to inject domain layer or data layer objects like repositories, Retrofit services etc. If you get stuck, you can always post another question. </p>

<p>And have a look at the offical <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger/"" rel=""nofollow noreferrer"">Google Android Architecture blueprints</a>. Your solution should, ideally, look something like them.</p>
",5241933,,,,,2018-06-10 8:36:05,,,,3,,,
Android,50793392,2,,50792908,2018-06-11 8:29:14,3097,,2,,"<p>I would suggest you use the <strong>native feature <code>PdfRenderer</code> instead of <code>webview</code>.</strong><br>
From android <strong>OS 5.0(lollipop)</strong> on-wards you can use this class to show pdf's within the app. If you want to support OS lower than that you can use a library as there is no native support</p>

<p>Read more about the class from the docs <a href=""https://developer.android.com/reference/android/graphics/pdf/PdfRenderer"" rel=""nofollow noreferrer"">here</a>, you can  also refer this <a href=""https://github.com/googlesamples/android-PdfRendererBasic"" rel=""nofollow noreferrer"">example</a> provided by google</p>
",3114032,,,,,2018-06-11 8:29:14,,,,4,,,
Android,50870340,2,,50869969,2018-06-15 6:39:55,3101,,6,,"<p>In the repository you mentioned, Dagger 2 knows how to inject <code>TasksRepository</code> through the constructor being marked with <code>@Inject</code>. From the <a href=""https://github.com/googlesamples/android-architecture/blob/082bd72d62472f9caadd2979046067fb928bbfef/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/data/source/TasksRepository.java#L83"" rel=""noreferrer"">source</a>:</p>

<pre><code>@Inject
TasksRepository(@Remote TasksDataSource tasksRemoteDataSource,
        @Local TasksDataSource tasksLocalDataSource) {
    mTasksRemoteDataSource = tasksRemoteDataSource;
    mTasksLocalDataSource = tasksLocalDataSource;
}
</code></pre>

<p>Since the constructor is annotated with <code>@Inject</code>, Dagger 2 will attempt to use the constructor to inject <code>TasksRepository</code> into consumers like <code>TodoApplication</code>.</p>

<p>Since <code>TasksDataSource</code> are already bound in <code>TasksRepositoryModule</code> there is enough information for Dagger 2 to perform injection without the burden of extra <code>@Provides</code> or <code>@Binds</code> methods.</p>

<p>Similarly, you can do the following:</p>

<pre><code>class Foo {

   private final Bar bar;

   @Inject
   Foo(Bar bar) {
       this.bar = bar;
   }
}

class Bar {

    @Inject 
    Bar() {}
}

class Activity extends AppCompatActivity {

    @Inject Foo foo;

}
</code></pre>

<p>And Dagger 2 will be able to inject <code>Foo</code> inside <code>AppCompatActivity</code>. Why? </p>

<ol>
<li>Dagger 2 knows how to construct a <code>Bar</code> object (through calling the empty constructor)</li>
<li>Dagger 2 knows that when creating instances of <code>Foo</code> it must use the constructor annotated with <code>@Inject</code> with the single parameter <code>Bar</code>.</li>
<li>There are no other dependencies for <code>Foo</code>, in other words the complete object graph is available.</li>
</ol>
",5241933,,5241933,,2018-06-15 6:46:57,2018-06-15 6:46:57,,,,1,,,
Android,50886150,2,,50885434,2018-06-16 8:10:00,3102,,2,,"<p>You can use the official <a href=""https://github.com/googlesamples/android-ndk/tree/master/hello-libs"" rel=""nofollow noreferrer"">hello-libs sample</a>.</p>

<p>In the nutshell, you use </p>

<pre><code>add_library(libexample_static)
…
add_library(mynativelib SHARED main_jni.cpp)
target_link_libraries(mynativelib
                      libexample_static
                      log)
</code></pre>
",192373,,,,,2018-06-16 8:10:00,,,,0,,,
Android,50909630,2,,50909248,2018-06-18 12:33:53,3105,,4,,"<p>Most Architecture Components examples are available <a href=""https://github.com/googlesamples/android-architecture-components"" rel=""nofollow noreferrer"">here</a>.
In your case, I couldn't find the UserDao class but there is a database schema sample <a href=""https://github.com/googlesamples/android-architecture-components/blob/e49ba281a341c51fe0cda55e942b25f19bb14f22/PersistenceMigrationsSample/app/schemas/com.example.android.persistence.migrations.UsersDatabase/4.json"" rel=""nofollow noreferrer"">here</a>. <code>users</code> table has a <code>last_update</code> column. So you could write UserDao like this : </p>

<pre><code>@Query(""SELECT COUNT(*) FROM users WHERE userId == :userId AND last_update &gt;= :timeout)
int hasUser(int userId, long timeout)
</code></pre>

<p>It returns 0 if the user with id <code>userId</code> is not fresh enough.</p>
",7426096,,,,,2018-06-18 12:33:53,,,,2,,,
Android,50911080,2,,50794726,2018-06-18 13:52:50,3105,,1,,"<p>I'll answer your general question first:</p>

<blockquote>
  <p>And more generally , where should I put instance
  LiveData/MutableLiveData variable and why?</p>
</blockquote>

<p>The short answer is it depends. Usually, if you're working with LiveData only you'd pass the LiveData that comes from you repository straight to the ViewModel and the ViewModel would simply expose it to the View, with no need of creating an instance of it in the ViewModel. </p>

<p>But, if for any reason you'd need to modify the LiveData  in the ViewModel you should hold a reference to it in the ViewModel, you can clearly see it in this <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/DataRepository.java"" rel=""nofollow noreferrer"">google sample</a>:</p>

<pre><code> public LiveData&lt;ProductEntity&gt; loadProduct(final int productId) {
        return mDatabase.productDao().loadProduct(productId);
    }
</code></pre>

<p>The repository simply gets the LiveData provided by the Room Library and exposes it. The View model, gets the LiveData and exposes it to the View:</p>

<pre><code>public ProductViewModel(@NonNull Application application, DataRepository repository,
            final int productId) {
        super(application);
        mProductId = productId;
        mObservableProduct = repository.loadProduct(mProductId);
    }

public LiveData&lt;ProductEntity&gt; getObservableProduct() {
    return mObservableProduct;
}
</code></pre>

<p>You can hold to a reference of the result LiveData as seen above. But you could have passed it straight to the view:</p>

<pre><code>public LiveData&lt;ProductEntity&gt; getObservableProduct() {
    return repository.loadProduct(mProductId);
}
</code></pre>

<p>What I've been seeing lately is if you're working with Retrofit and a remote repository (or even with Room) you can work with RxJava (or Retrofit's native callbacks) and that way you'd  need an instance of LiveData in your ViewModel. </p>

<p>So the difference is that if you're working only with LiveData (from the data source to the view) you <strong>could</strong> hold a reference to your live data in the ViewModel. If your working half way through only you <strong>must</strong> have a LiveData in the view model.</p>

<p>Finally in you case you can hold the reference just like in the google sample.</p>
",7765139,,,,,2018-06-18 13:52:50,,,,2,,,
Android,50928711,2,,44697418,2018-06-19 12:40:01,3106,,7,,"<p>I tried to use the RoomDatabase.Callback as suggested by Arnav Rao, but to use a callback you cannot use the DAO as the callback is created before the database has been built. You could use db.insert and content values, but I didn't think that would have been correct. So after looking into it a bit more - took me ages lol - but I actually found the answer when going through the samples provided by Google.</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PersistenceContentProviderSample/app/src/main/java/com/example/android/contentprovidersample/data/SampleDatabase.java"" rel=""noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/PersistenceContentProviderSample/app/src/main/java/com/example/android/contentprovidersample/data/SampleDatabase.java</a></p>

<p>See line 52 and the method on line 71 - In there you can see after the build of the database instance, the next line calls a method which checks if there are any records in the database (using the DAO) and then if it’s empty it inserts the initial data (again using the DAO).</p>

<p>Hope this helps anyone else who was stuck :)</p>
",1017607,,,,,2018-06-19 12:40:01,,,,1,,,
Android,50931287,2,,16859727,2018-06-19 14:49:48,3106,,3,,"<p><strong>Follow this solution if you are using Android Studio.</strong></p>

<p><strong>First</strong>, download OpenGL Mathematics library <a href=""https://glm.g-truc.net/0.9.9/index.html"" rel=""nofollow noreferrer"">here</a></p>

<p><strong>Second</strong>, extract and copy folder ""../glm/glm"" to your project location at ""../app/src/main/cpp""</p>

<p><strong>Third</strong>, on CMakeList.txt, add the following:</p>

<pre><code># Import the CMakeLists.txt for the glm library
add_subdirectory(glm) # if your CMakeLists is at '../cpp'
# add_subdirectory(src/main/cpp/glm) # if your CMakeLists is at '../app'

# add lib dependencies
target_link_libraries(
# Specifies the target library.
native-lib
# Links the target library to the log library included in the NDK.
GLESv2
glm)
</code></pre>

<p><strong>Fourth</strong>, on 'buidl.griddle' (Mobile App), make sure you have right path to your CMakeList </p>

<pre><code> externalNativeBuild {
        cmake {
            path ""src/main/cpp/CMakeLists.txt""
        }
 }
</code></pre>

<p><strong>Fifth</strong>, include glm headers to your source file:</p>

<pre><code>// open GL libs
#include &lt;GLES2/gl2.h&gt;
#include &lt;glm/glm.hpp&gt;
#include &lt;glm/gtc/matrix_transform.hpp&gt;
#include &lt;glm/gtc/type_ptr.hpp&gt;
#include &lt;glm/gtx/rotate_vector.hpp&gt;
#include &lt;glm/gtx/closest_point.hpp&gt;
</code></pre>

<p>Sample is available at android-ndk, see <a href=""https://github.com/googlesamples/android-ndk/tree/master/endless-tunnel"" rel=""nofollow noreferrer"">Android Endless Tunnel Game</a></p>
",8209516,,,,,2018-06-19 14:49:48,,,,0,,,
Android,50941848,2,,50941681,2018-06-20 6:45:06,3106,,1,,"<p>Getting location through gps is painful to user since it consumes a lot of battery as you indicated above. You can select your provider too, that is what is source of getting location, is it network or it is gps. These all depends on your location needs and some other logics of app. well to cut short it, I must say you need to learn location strategies. This will give you better understanding. Please look this <a href=""https://developer.android.com/guide/topics/location/strategies"" rel=""nofollow noreferrer"">here</a>. </p>

<p>I will recommend you to use google's fused location API. This give you better control on locations, and the best part of this API is that it is battery efficient and it is really fast and reliable. <a href=""https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderApi"" rel=""nofollow noreferrer"">here</a> is a link if you want to learn about it. and for some more code snippts and helping material see <a href=""https://github.com/codepath/android_guides/wiki/Retrieving-Location-with-LocationServices-API"" rel=""nofollow noreferrer"">this</a>, <a href=""https://stackoverflow.com/questions/44992014/how-to-get-current-location-in-googlemap-using-fusedlocationproviderclient"">this</a> and <a href=""https://github.com/googlesamples/android-play-location/tree/master/BasicLocationSample"" rel=""nofollow noreferrer"">this</a> one is so advance also if you are using kotlin it has its demo code.  </p>

<p>Ask if there is any confusion.</p>
",6724458,,7083401,,2018-06-20 11:55:27,2018-06-20 11:55:27,,,,0,,,
Android,50946325,2,,50946050,2018-06-20 10:43:24,3106,,2,,"<p>From the <a href=""https://developer.android.com/topic/libraries/architecture/viewmodel"" rel=""nofollow noreferrer"">documentation</a>:</p>

<blockquote>
  <p>Caution: A ViewModel must never reference a view, Lifecycle, or any class that may hold a reference to the activity context.</p>
</blockquote>

<p>This is because a <code>ViewModel</code> survives configuration changes. Let's say you have an activity and you rotate the device. The activity is killed and a new instance is created. If you put views in the viewmodel, then the activity won't be garbage collected because the views hold the reference to the previous activity. Also, the views themselves will be recreated but you're keeping old views in the viewmodel. Basically don't put any views, context, activity in the viewmodel.</p>

<p>If you want a simple example showcasing MVVM with repository pattern then you can check out my sample repo on gitlab: <a href=""https://gitlab.com/rafid059/music-api-test"" rel=""nofollow noreferrer"">https://gitlab.com/rafid059/music-api-test</a></p>

<p>There's also a great sample from google: <a href=""https://github.com/googlesamples/android-sunflower/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-sunflower/</a></p>
",2235972,,,,,2018-06-20 10:43:24,,,,7,,,
Android,51026168,2,,51017541,2018-06-25 14:43:41,3112,,7,,"<p>Finally got the solution from this link: <a href=""https://github.com/googlesamples/android-architecture-components/issues/253"" rel=""noreferrer"">https://github.com/googlesamples/android-architecture-components/issues/253</a></p>

<p>As <code>MyFirebaseMessagingService</code> is a <code>Service</code> class, so for injection in <code>Service</code> class, Dagger provides a way through which we can inject dependencies into Service class. Below are the steps to enable injection in service class:</p>

<p><strong>1) Make Application implements HasServiceInjector and inject a DispatchingAndroidInjector for services.</strong></p>

<pre><code>public class App extends Application implements HasActivityInjector, HasServiceInjector {

    @Inject
    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;

    // Add this line
    @Inject
    DispatchingAndroidInjector&lt;Service&gt; dispatchingServiceInjector;

    @Override
    public void onCreate() {
        super.onCreate();
        AppInjector.init(this);
    }

    @Override
    public AndroidInjector&lt;Activity&gt; activityInjector() {
        return dispatchingActivityInjector;
    }

    // override this method after implementing HasServiceInjector
    @Override
    public AndroidInjector&lt;Service&gt; serviceInjector() {
        return dispatchingServiceInjector;
    }

}
</code></pre>

<p><strong>2) Create a new module to perform injection over your services.</strong></p>

<pre><code>@Module
abstract class ServiceBuilderModule {

    // for my case, the service class which needs injection is MyFirebaseMessagingService
    @ContributesAndroidInjector
    abstract MyFirebaseMessagingService contributeMyFirebaseMessagingService();

}
</code></pre>

<p><strong>3) Register your new module in your application's component.</strong></p>

<pre><code>@Component(modules = {
        AndroidSupportInjectionModule.class,
        AppModule.class,
        ActivityBuilderModule.class,
        // Need to define previously created module class here
        ServiceBuilderModule.class
})
@Singleton
public interface AppComponent {
    @Component.Builder
    interface Builder {
        @BindsInstance
        Builder application(App application);
        AppComponent build();
    }
    void inject(App app);
}
</code></pre>

<p><strong>4) And finally, override method onCreate of the service adding AndroidInjection.inject(this).</strong></p>

<pre><code>public class MyFirebaseMessagingService extends FirebaseMessagingService {

    //So now we are able to inject here same as we do in Activity. No need for constructor injection
    @Inject ExampleOneDao exampleOneDao

    // Override this method first
    @Override
    public void onCreate() {
        AndroidInjection.inject(this);
        super.onCreate();
    }

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        // use your dao here to store remoteMessage data payload into your database, e.g exampleOneDao.save(somethingHere)
    }


}
</code></pre>
",4855911,,4855911,,2018-06-25 16:58:54,2018-06-25 16:58:54,,,,0,,,
Android,51049978,2,,51035892,2018-06-26 19:13:40,3113,,5,,"<p>The reason why you can't communicate directly between features is because they're independent from one another. </p>

<p>The correct way to handle this is calling it with its URL, example: <a href=""https://github.com/googlesamples/android-instant-apps/blob/master/hello-feature-module/features/hello/src/main/java/com/instantappsamples/feature/hello/HelloActivity.java"" rel=""nofollow noreferrer"">android-instant-apps/hello-feature-module/HelloActivity.java</a></p>

<pre><code>Intent intent = new Intent(Intent.ACTION_VIEW,
Uri.parse(""https://hello-feature.instantappsample.com/goodbye""));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
startActivity(intent);
</code></pre>

<p>In an instant-app structure, the <em>base acts as a library</em> for the feature modules, and the features are built into <em>APKs</em>. In an installed-app structure, <em>both the base and features act as libraries</em> for the application module. Some explanation can be found here:</p>

<ul>
<li><p><a href=""https://stackoverflow.com/questions/44361335/why-use-the-new-android-feature-plugin-over-the-library-plugin/44361564#44361564"">Why use the new Android feature plugin over the library plugin?</a></p></li>
<li><p><a href=""https://stackoverflow.com/questions/47425735/android-can-you-add-activities-to-the-instant-app-module/47430978#47430978"">Android: Can you add activities to the Instant App module?</a></p></li>
</ul>

<p>There used to be a page @ <a href=""https://g.co/instantapps"" rel=""nofollow noreferrer"">https://g.co/instantapps</a> that explained the structure of instant apps, but looks like it's missing. However, you can take a look at:</p>

<ul>
<li><a href=""https://android-developers.googleblog.com/2017/08/android-instant-apps-best-practices-for.html"" rel=""nofollow noreferrer"">https://android-developers.googleblog.com/2017/08/android-instant-apps-best-practices-for.html</a></li>
<li>bottom of page @ <a href=""https://codelabs.developers.google.com/codelabs/android-multi-feature-instant-app/#3"" rel=""nofollow noreferrer"">codelabs/android-multi-feature-instant-app/#3</a></li>
</ul>

<p>And no, you won't be able to directly access activities of the application from a feature. As an installed-app, <strong><code>com.android.feature</code></strong> modules are compiled/behave as <strong><code>com.android.library</code></strong> modules, so apply the same rules here: the application depends on the library, not the other way around. To traverse that direction, you will need to use the same kind of Intent as shown above.</p>

<p>Anything in <strong><code>com.android.application</code></strong> will be isolated from the feature modules of the instant-app, and will only appear in the installed-app.</p>
",6668797,,2638235,,2018-11-15 7:15:39,2018-11-15 7:15:39,,,,0,,,
Android,51078253,2,,51076495,2018-06-28 8:34:29,3114,,1,,"<p>You can follow this sample provided by Google. It contains a chain of image processing. All related <code>Worker</code> is working under <code>ImageOperations.java</code> as a chain of work.</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/WorkManagerSample/app/src/main/java/com/example/background/ImageOperations.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/WorkManagerSample/app/src/main/java/com/example/background/ImageOperations.java</a></p>
",5311266,,,,,2018-06-28 8:34:29,,,,0,,,
Android,51113110,2,,51003326,2018-06-30 8:19:26,3116,,3,,"<p>First of all you could broaden your question scope by asking about how to show a loading indicator in the bottom of <code>RecyclerView</code> instead of narrowing it to the Paging Library..</p>

<p>Secondly, you can easily show a loading indicator in the bottom of your list by adding an extra cell to the list that is just only for showing load indicator, the similar idea is used here to show the network status:</p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PagingWithNetworkSample/app/src/main/java/com/android/example/paging/pagingwithnetwork/reddit/ui/PostsAdapter.kt"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/PagingWithNetworkSample/app/src/main/java/com/android/example/paging/pagingwithnetwork/reddit/ui/PostsAdapter.kt</a></p>
",6600000,,,,,2018-06-30 8:19:26,,,,0,,,
Android,51123695,2,,51122246,2018-07-01 13:26:33,3118,,1,,"<p>You have this problem specifically <em>because</em> your Repository implementation is incorrect.</p>

<pre><code>public LiveData&lt;List&lt;Article&gt;&gt; getArticles(int page) {
    Log.d(TAG, ""getArticles"");
    if (NetworkUtils.isOnline(mContext)) {
        Log.d(TAG, ""isOnline"");
        mArticles = loadFromNetwork(page);
    } else {
        Log.d(TAG, ""is NOT Online"");
        mArticles = loadFromDB(page);
    }
}
</code></pre>

<p>If you check the code for <a href=""https://github.com/googlesamples/android-architecture-components/blob/d7cd7a9414ef1eeba52a79ec76f6d9827cd50a36/GithubBrowserSample/app/src/main/java/com/android/example/github/repository/NetworkBoundResource.kt"" rel=""nofollow noreferrer"">NetworkBoundResource</a>, the trick is that you have a single LiveData that binds together the ability to both load from network, and to load from database.</p>

<p>In your case, you are replacing the database's auto-updating query results whenever you have network access - which is why you can't update the MainActivity.</p>

<p>The easiest way (without using a MediatorLiveData) is to have two separate functions on Repository: one for <code>fetchFromNetwork</code>, and one for <code>fetchFromDatabase</code>. The MainActivity should always fetch from database, while the Service always triggers load from network (and inserts it directly into database via a Dao).</p>

<p>This way, the <code>observe</code> function in MainActivity will receive the latest data when Service inserts the data into DB on background thread.</p>
",2413303,,,,,2018-07-01 13:26:33,,,,6,,,
Android,51145843,2,,51134284,2018-07-03 2:24:12,3119,,1,,"<p>I checked this repo <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/test/java/com/android/example/github/api/GithubServiceTest.kt"" rel=""nofollow noreferrer"">GithubBrowserSample</a> Google sample. Retrofit baseUrl needs to be set by <code>MockWebServer#url(String)</code></p>

<p>Like this, not my URL.</p>

<pre><code>val retrofit = Retrofit.Builder()
        .baseUrl(server.url(""/""))
        .client(okHttpClient)
        .addConverterFactory(GsonConverterFactory.create())
        .build()
</code></pre>
",2423899,,,,,2018-07-03 2:24:12,,,,0,,,
Android,51173521,2,,40929686,2018-07-04 12:17:25,3120,,10,,"<p>It seems like you (almost) always use a <code>CoordinatorLayout</code>, and sometimes use a <code>ConstraintLayout</code> inside. See the following resources</p>

<ul>
<li><p>The codelab at <a href=""https://codelabs.developers.google.com/codelabs/material-design-style/index.html#3"" rel=""noreferrer"">https://codelabs.developers.google.com/codelabs/material-design-style/index.html#3</a> only uses a <code>CoordinatorLayout</code></p></li>
<li><p>The example android-sunflower app (""illustrating Android development best practices"") uses neither for the top-level activity, but uses both inside its <a href=""https://github.com/googlesamples/android-sunflower/blob/master/app/src/main/res/layout/fragment_plant_detail.xml"" rel=""noreferrer""><code>fragment_plant_detail.xml</code></a>, with the <code>ConstraintLayout</code> being inside the <code>CoordinatorLayout</code>:</p>

<pre><code>&lt;layout ...&gt;
&lt;data .../&gt;
&lt;android.support.design.widget.CoordinatorLayout ...&gt;
    &lt;android.support.design.widget.AppBarLayout ...&gt;
        &lt;android.support.design.widget.CollapsingToolbarLayout ...&gt;
            &lt;ImageView... /&gt;
            &lt;android.support.v7.widget.Toolbar... /&gt;
        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;
    &lt;/android.support.design.widget.AppBarLayout&gt;
    &lt;android.support.v4.widget.NestedScrollView ...&gt;
        &lt;android.support.constraint.ConstraintLayout ...&gt;
            &lt;TextView.../&gt;
            &lt;TextView... /&gt;
        &lt;/android.support.constraint.ConstraintLayout&gt;
    &lt;/android.support.v4.widget.NestedScrollView&gt;
    &lt;android.support.design.widget.FloatingActionButton ... /&gt;
&lt;/android.support.design.widget.CoordinatorLayout&gt;
&lt;/layout&gt;
</code></pre></li>
</ul>
",1587329,,,,,2018-07-04 12:17:25,,,,1,,,
Android,51235561,2,,51234910,2018-07-08 20:02:48,3125,,1,,"<p>You can find tons of samples and examples on github. For an example checkout this fitness app.<br>
<a href=""https://github.com/googlesamples/android-fit"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-fit</a> </p>

<p>Please use those sample codes in compliance with the License.</p>
",7992142,,,,,2018-07-08 20:02:48,,,,0,,,
Android,51268335,2,,51266360,2018-07-10 14:52:15,3127,,1,,"<blockquote>
  <p>I have checked over and over and still cant find the error. What is wrong with the ""on""</p>
</blockquote>

<p>Nothing is wrong with ""on"", it's just SQLite standard (lib) doesn't have Conflict Clause.</p>

<p>You will have to run conflict clause queries via 'ContentValues' as below</p>

<pre><code>ContentValues args = new ContentValues();
args.put(""name"", name);
args.put(""token"", token);
database.insertWithOnConflict(""table_name"", ""name"", args, SQLiteDatabase.CONFLICT_REPLACE)
</code></pre>

<p>Have a look at the following links, it will help you out.</p>

<p><a href=""https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase#CONFLICT_REPLACE"" rel=""nofollow noreferrer"">SQLite Android Official</a></p>

<p><a href=""https://stackoverflow.com/questions/22644531/using-insertwithonconflict-for-update-or-insert"">Link 2</a></p>

<p><a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PersistenceMigrationsSample/app/src/androidTestRoom2/java/com/example/android/persistence/migrations/MigrationTest.java"" rel=""nofollow noreferrer"">Android Sample App</a></p>
",4825703,,,,,2018-07-10 14:52:15,,,,0,,,
Android,51329389,2,,51321167,2018-07-13 16:28:08,3130,,1,,"<p>You are using <code>LiveData</code> to fetch User Details as declared in this Dao method</p>

<pre><code>LiveData&lt;UserLoginDetails&gt; loadUserDetails(String userId);
</code></pre>

<p>You <strong>cannot</strong> directly call getValue() on <code>LiveData</code> and <strong>expect</strong> to get current value. <code>LiveData</code> needs an observer to be calculated in first place. In this case value is not fetched synchronously.
You can find same issue <a href=""https://github.com/googlesamples/android-architecture-components/issues/44#issuecomment-306966494"" rel=""nofollow noreferrer"">here</a></p>

<p>To use <code>LiveData</code> you need to observe for changes by passing <code>LifecycleOwner</code> like <code>Activity</code>, Like they have given in Architecture Component Samples - <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductFragment.java"" rel=""nofollow noreferrer"">ProductFragment</a></p>

<pre><code>// Observe product data
model.getObservableProduct().observe(this, new Observer&lt;ProductEntity&gt;() {
    @Override
    public void onChanged(@Nullable ProductEntity productEntity) {
        model.setProduct(productEntity);
    }
});
</code></pre>

<p>If you want the value without observer you can change return type to non <code>LiveData</code> like this</p>

<pre><code>UserLoginDetails loadUserDetails(String userId);
</code></pre>

<p>In this case you can't call this method on <strong>main</strong> thread. You need to call this database <strong>synchronous</strong> operation method on background thread like using <code>Schedulers.io()</code> thread using <code>RxJava</code>.</p>

<p>Possible solution can be to use RxJava with Room to return <code>Flowable</code> of the User Data, for example as they shown in Architecture Component Examples - <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicRxJavaSample/app/src/main/java/com/example/android/observability/persistence/UserDao.java"" rel=""nofollow noreferrer"">UserDao.java</a></p>

<p>Change your loadUserDetails to return <code>Flowable</code> </p>

<pre><code>Flowable&lt;UserLoginDetails?&gt; loadUserDetails(String userId);
</code></pre>

<p>Subscribe to that <code>Flowable</code> like - <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicRxJavaSample/app/src/main/java/com/example/android/observability/ui/UserViewModel.java"" rel=""nofollow noreferrer"">UserViewModel.java</a></p>

<pre><code>// Map the result to desired format
// Using RxJava operators to perform checks
// If user is null or not
public void checkUserExists(String userId) {
    dao.loadUserDetails(userId)
        .map(new Function&lt;UserLoginDetails, Boolean&gt;() {
            @Override
            public Boolean apply(UserLoginDetails userLoginDetails) throws Exception {
                if(userLoginDetails == null){
                    return false;
                } else {
                    return true;
                }
            }
        })
        .subscribe(getObserver());
}
</code></pre>

<p>So as you get <code>Flowable</code> you can apply various operators to check for your desired <strong>conditions</strong> and may convert this <strong>stream</strong> to <strong>boolean</strong> observable with value dependent on your conditions. This will be much easy and <strong>maintainable</strong> approach for this particular use case.</p>
",3624647,,3624647,,2018-07-13 16:39:25,2018-07-13 16:39:25,,,,2,,,
Android,51333674,2,,8735931,2018-07-13 22:45:14,3130,,3,,"<p>Okay this is one of those things that doesn't have very much documentation available online, so I'm going to do my best to explain everything step by step. Taken from my blog post, which is a more detailed version of this (with screenshots), <a href=""http://themillibit.com/2018/07/13/how-to-make-money-with-your-android-app/"" rel=""nofollow noreferrer"">here on The Millibit</a>. Without further ado,</p>

<p><strong>Step One:</strong> Permissions
This is the easiest step. Navigate to your manifest.xml file and add the following line under your  tag:</p>

<pre><code>&lt;uses-permission android:name=""com.android.vending.BILLING"" /&gt;
</code></pre>

<p>This will give your app the permissions to access In-App Billing. If you are targetting versions above API 22, you will need to make sure that this permission is granted at runtime.</p>

<p><strong>Step Two:</strong> Play Console
Now you need to upload your app to the Google Play Console. We are not publishing our app to the public yet (don’t worry), we are just uploading it to the BETA RELEASE section, which will allow us to test In-App Purchases. The reason we need to do this is that Google needs to have some version of your APK uploaded for the billing processes to actually work.</p>

<ol>
<li><p>Go to <a href=""https://play.google.com/apps/publish/"" rel=""nofollow noreferrer"">https://play.google.com/apps/publish/</a></p></li>
<li><p>Create the Application</p></li>
<li><p>Follow the steps to set up your app</p></li>
<li><p>Go to App Releases</p></li>
<li><p>Navigate to Beta</p></li>
<li><p>Create an APK of your app in Android studio and upload it to the Beta production in the Play Console</p></li>
</ol>

<p>(before releasing make sure that you have already filled out the Store Listing ,Content Rating and Pricing and Distribution)</p>

<ol start=""7"">
<li>Hit the magic button (publish!)</li>
</ol>

<p><strong>Step Three:</strong> Setup Project
Okay this is the part where you have to copy and paste a bunch of files.</p>

<p>First, grab <a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive/app/src/main/aidl/com/android/vending/billing/IInAppBillingService.aidl"" rel=""nofollow noreferrer"">this</a> file, download it, and place it under <code>src/main</code>It should build itself into a folder
Next, grab <a href=""https://github.com/googlesamples/android-play-billing/tree/master/TrivialDrive/app/src/main/java/com/example/android/trivialdrivesample/util"" rel=""nofollow noreferrer"">this entire</a> util folder and paste it into <code>src/java folder.</code> Then rebuild your project to resolve errors. 
The Util Folder Contains The Following Classes:</p>

<ul>
<li>IabBroadcastReceiver </li>
<li>IabException </li>
<li>IabHelper  </li>
<li>IabResult  </li>
<li>Inventory    </li>
<li>Purchase  </li>
<li>Security  </li>
<li>SkuDetails</li>
</ul>

<p><strong>Step Four:</strong> Create Products</p>

<ol>
<li><p>Create Managed Product</p></li>
<li><p>Click save and make a “pricing template”</p></li>
</ol>

<p>Here, you will select the price of this product. You can choose the price for different countries, or have it automatically adjust if you just select all countries under your price:</p>

<ol start=""3"">
<li>Make sure the in-app product is activated and linked with the correct application in the console one last time.</li>
</ol>

<p>Finally, note the ID of your product. We will use this ID in the next few steps.</p>

<ol start=""4"">
<li>Get your Base64EncodedString</li>
</ol>

<p>Head over to “Services &amp; APIs” and grab your Base64EncodedString. Copy and paste this to a notepad somewhere so that you have access to it. Do not share this with anyone, they will be able to do malicious things with it.</p>

<p><strong>Step Five:</strong> Finally! We can start coding:
We will first bind to the in-app billing library, and query for what the user has/hasn’t bought. Then, we will buy the product that we set up earlier.</p>

<p>First, import everything we set up earlier:</p>

<pre><code>import util.*;
</code></pre>

<p>Now we will use an IabHelper object called mHelper, and we will do everything with this.</p>

<pre><code>base64EncodedPublicKey = """"; //PUT YOUR BASE64KEY HERE

mHelper = new IabHelper(this, base64EncodedPublicKey);
mHelper.enableDebugLogging(false); //set to false in real app


mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {
    public void onIabSetupFinished(IabResult result) {
        if (!result.isSuccess()) {
            // Oh no, there was a problem.

            if (result.getResponse() == 3) {
                new AlertDialog.Builder(MainActivity.this)
                        .setTitle(""In app billing"")
                        .setMessage(""This device is not compatible with In App Billing, so"" +
                                "" you may not be able to buy the premium version on your phone. "")
                        .setPositiveButton(""Okay"", null)
                        .show();
            }

            Log.v(TAG, ""Problem setting up In-app Billing: "" + result);
        } else {
            Log.v(TAG, ""YAY, in app billing set up! "" + result);
            try {
                mHelper.queryInventoryAsync(mGotInventoryListener); //Getting inventory of purchases and assigning listener
            } catch (IabHelper.IabAsyncInProgressException e) {
                e.printStackTrace();
            }
        }
    }
});
</code></pre>

<p>Okay, let me break down what’s going on here. Basically, we are calling “startSetup” to initialize our “IabHelper”. If the setup is successful, we query what purchases the user already has and store the responses in <code>mGotInventoryListener</code>, which we will code next:</p>

<pre><code>IabHelper.QueryInventoryFinishedListener mGotInventoryListener
        = new IabHelper.QueryInventoryFinishedListener() {
    public void onQueryInventoryFinished(IabResult result,
                                         Inventory inventory) {

        i = inventory;

        if (result.isFailure()) {
            // handle error here

            Log.v(TAG, ""failure in checking if user has purchases"");
        } else {
            // does the user have the premium upgrade?
            if (inventory.hasPurchase(""premium_version"")) {

                premiumEditor.putBoolean(""hasPremium"", true);
                premiumEditor.commit(); 

                Log.v(TAG, ""Has purchase, saving in storage"");

            } else {

                premiumEditor.putBoolean(""hasPremium"", false);
                premiumEditor.commit();

                Log.v(TAG, ""Doesn't have purchase, saving in storage"");

            }
        }
    }
};
</code></pre>

<p>The above code is pretty self-explanatory. Basically, it just checks what purchases the user already has. Now that we know whether or not the user has already purchased our product, we know whether or not to ask them to purchase our item! If they’ve never bought our product before, let’s start a purchase request:</p>

<pre><code>public void buyPremium() {
    try {

     mHelper.flagEndAsync();//If any async is going, make sure we have it stop eventually
     mHelper.launchPurchaseFlow(this, ""premium_version"", 9, mPurchaseFinishedListener, ""SECURITYSTRING""); //Making purchase request and attaching listener
    } catch (Exception e) {
        e.printStackTrace();

mHelper.flagEndAsync();//If any async is going, make sure we have it stop eventually




        new AlertDialog.Builder(MainActivity.this)
                .setTitle(""Error"")
                .setMessage(""An error occurred in buying the premium version. Please try again."")
                .setPositiveButton(""Okay"", null)
                .show();
    }
}


    @Override

protected void onActivityResult(int requestCode, int resultCode, Intent data) {

    Log.d(TAG, ""onActivityResult("" + requestCode + "","" + resultCode + "","" + data);

    // Pass on the activity result to the helper for handling

    if (!mHelper.handleActivityResult(requestCode, resultCode, data)) {

    }

    else 
        Log.d(TAG, ""onActivityResult handled by IABUtil."");
    }

}

IabHelper.OnIabPurchaseFinishedListener mPurchaseFinishedListener
        = new IabHelper.OnIabPurchaseFinishedListener() {
    public void onIabPurchaseFinished(IabResult result, Purchase purchase) {

        Log.v(TAG, ""purchase finished"");

        if (purchase != null) {

            if (purchase.getSku().equals(""premium_version"")) {

                Toast.makeText(MainActivity.this, ""Purchase successful!"", Toast.LENGTH_SHORT).show();

                premiumEditor.putBoolean(""hasPremium"", true);
                premiumEditor.commit();
            }
        } else {
            return;
        }
        if (result.isFailure()) {
            return;
        }
    }
};
</code></pre>

<p>Here we purchase the item (with the ID we generated in the play console earlier) with the following:</p>

<pre><code> mHelper.launchPurchaseFlow(this, ""premium_version"", 9, mPurchaseFinishedListener, ""SECURITYSTRING""); //Making purchase request and attaching listener
</code></pre>

<p>Notice that we passed <code>mPurchaseFinishedListener</code> into the parameters. This means that the result of the purchase will be returned to this listener. Then, we simply check if the purchase is null, and if not, award the user with whatever feature they bought.</p>

<p>Don’t let the listeners leak! We must destroy them when the app destroys.</p>

<pre><code>@Override
public void onDestroy() {
    super.onDestroy();
    if (mHelper != null)
        try {
            mHelper.dispose();
            mHelper = null;

        } catch (IabHelper.IabAsyncInProgressException e) {
            e.printStackTrace();
        }
}
</code></pre>

<p>Finally, if you’d like to consume your purchase, making it available for purchase again, you can do so easily. An example of this is if a user bought gas for a virtual car, and it ran out. They need to purchase the same product again, and you can make it available for a second purchase by consuming it:</p>

<pre><code>public void consume(){

    //MAKING A QUERY TO GET AN ACCURATE INVENTORY
    try {
        mHelper.flagEndAsync(); //If any async is going, make sure we have it stop eventually

        mHelper.queryInventoryAsync(mGotInventoryListener); //Getting inventory of purchases and assigning listener

        if(i.getPurchase(""gas"")==null){
            Toast.makeText(this, ""Already consumed!"", Toast.LENGTH_SHORT).show();
        }
    } catch (IabHelper.IabAsyncInProgressException e) {
        e.printStackTrace();

        Toast.makeText(this, ""Error, try again"", Toast.LENGTH_SHORT).show();
        mHelper.flagEndAsync();//If any async is going, make sure we have it stop eventually
    }

    //ACTUALLY CONSUMING
    try {
        mHelper.flagEndAsync();//If any async is going, make sure we have it stop eventually

        this.mHelper.consumeAsync(this.i.getPurchase(""gas""), new IabHelper.OnConsumeFinishedListener() {
            public void onConsumeFinished(Purchase paramAnonymousPurchase, IabResult paramAnonymousIabResult) {
//resell the gas to them
            }
        });

        return;
    } catch (IabHelper.IabAsyncInProgressException localIabAsyncInProgressException) {
        localIabAsyncInProgressException.printStackTrace();
        Toast.makeText(this, ""ASYNC IN PROGRESS ALREADY!!!!"" +localIabAsyncInProgressException, Toast.LENGTH_LONG).show();
        Log.v(""myTag"", ""ASYNC IN PROGRESS ALREADY!!!"");

        mHelper.flagEndAsync();
    }
}
</code></pre>

<p>That’s it! You can now start making money. It’s really that simple!</p>

<p>Again, if you want a more detailed version of this tutorial, with screenshots and pictures, visit the <a href=""http://themillibit.com/2018/07/13/how-to-make-money-with-your-android-app/"" rel=""nofollow noreferrer"">original post here</a>. Let me know in the comments if you have any more questions.</p>
",5144855,,,,,2018-07-13 22:45:14,,,,6,,,
Android,51345841,2,,51345699,2018-07-15 6:23:28,3131,,1,,"<p><strong>NDK Package</strong></p>

<p>Android Studio only includes the default tools and SDK, so download and install the NDK package separately. There are two ways to do this. The first and easiest is the automatic installation option in the SDK Tools tab. This is a large download (~1GB) so be sure to have a good internet connection and/or patience.</p>

<p><a href=""https://i.stack.imgur.com/sdSnH.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sdSnH.png"" alt=""enter image description here""></a></p>

<p>The second way is to download the NDK manually from the <a href=""http://developer.android.com/ndk/downloads/index.html"" rel=""nofollow noreferrer"">NDK Downloads page</a>. This saves some time because of the smaller download size (&lt;.5 GB) but will need some setting up. Download the appropriate NDK package for your platform and follow the installation instructions. You can put the extracted package anywhere you want, but remember this location as you will need it later.</p>

<p><a href=""https://i.stack.imgur.com/TRNrw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TRNrw.png"" alt=""enter image description here""></a></p>

<p><strong>Hello World</strong></p>

<p>Let’s run a test project to see if the NDK installation works. The NDK package folder contains samples but they don’t seem to work out of the box in Android Studio without extra configuration. Instead we’ll import samples that work from the welcome screen. These <a href=""https://github.com/googlesamples/android-ndk"" rel=""nofollow noreferrer"">NDK samples from GitHub</a> can also be downloaded or cloned directly. This collection of samples has better compatibility with the latest version of Android Studio.</p>

<p><a href=""https://i.stack.imgur.com/JylRR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JylRR.png"" alt=""enter image description here""></a></p>

<p>Select Import an Android code sample and type hello in the search box to filter the list. Choose Hello JNI from the filtered list under the Ndk category. Click Next to edit the app name and project location, then click Finish.</p>

<p><strong>JNI</strong></p>

<p>After the code has loaded and Gradle has synced, let’s take a look at the resulting project structure. You might have noticed what appears to be a discrepancy in the project’s name. Why is it called HelloJNI and not HelloNDK? What is ‘JNI’ and how does it differ from the ‘NDK’? The ‘Java Native Interface’ is a framework that enables Java applications to interact with native code. The JNI and the NDK work together to bring native support to Android apps. The NDK is part of the Android framework while the JNI is available to any Java application, not just Android apps.</p>

<p>Inside the project is a folder named jni which will hold all the native C or C++ source code of the app. The JNI provides a two-way interface. The C/C++ code is able to call Java code, including the standard Android libraries, and the Java code is able to call native functions defined in C/C++ code. Native code is governed by the same sandbox and security rules as Java code so the app will not have full unrestricted access to hardware. For a more detailed discussion on the JNI, read the JNI articles from the <a href=""http://developer.android.com/training/articles/perf-jni.html"" rel=""nofollow noreferrer"">Android Developer website</a>.</p>
",2148964,,,,,2018-07-15 6:23:28,,,,2,,,
Android,51380884,2,,51380811,2018-07-17 12:01:32,3133,,2,,"<p>If you use LiveData to retrieve data from Room, it's executed in worker thread. For, other queries you can use Executors and Repository pattern. You can check out this page for <a href=""https://developer.android.com/jetpack/docs/guide"" rel=""nofollow noreferrer"">guide to app architecture</a>.</p>

<p>You can check out this <a href=""https://github.com/googlesamples/android-architecture-components/"" rel=""nofollow noreferrer"">link</a> for Rx and other architecture component samples.</p>

<hr>

<p>Analysis note by the question author:</p>

<p>In the sample they <strong>use a <code>Completable</code> to wrap the <em>Room</em> delete call</strong> and then <strong>schedule it onto the <code>io()</code> scheduler</strong>, reacting to the empty complete and any errors. That specific code can be found <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/BasicRxJavaSampleKotlin/app/src/main/java/com/example/android/observability"" rel=""nofollow noreferrer"">here</a>.</p>
",5457853,,3231532,,2018-07-17 16:07:09,2018-07-17 16:07:09,,,,6,,,
Android,51390062,2,,51381845,2018-07-17 20:56:03,3134,,3,,"<p>First I would like to point you to
<a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Android Architecture Blueprints</a> on GitHub:  </p>

<blockquote>
  <p>The focus of this project is on demonstrating how to structure your
  code, design your architecture, and the eventual impact of adopting
  these patterns on testing and maintaining your app. You can use the
  techniques demonstrated here in many different ways to build apps.
  Your own particular priorities will impact how you implement the
  concepts in these projects, so you should not consider these samples
  to be canonical examples.</p>
</blockquote>

<p>These are the official examples of different architectures in Android, you should definitely check that out as an inspiration for you own projects.</p>

<p>a. Your updated version is the correct way to do this - to retrieve a list of items, invoke the repository method once and store the return value in the <code>ViewModel</code>. Use <code>LiveData&lt;List&lt;Item&gt;&gt;</code> as a return value in your DAO and Room will automatically notify your <code>Observer</code> in the <code>Fragment</code> of any changes.</p>

<p>b. <code>ViewModel</code> can have the <code>updateItem(item: Item)</code> method. The <code>onClickListener</code> should be placed in the <code>Fragment</code>. You might want to do some validation in the <code>Fragment</code> as well before invoking the <code>updateItem</code> method. Also it is important to not hold any <code>View</code> references in the <code>ViewModel</code>.<br>
To notify the <code>Fragment</code> about the update status, you might consider having another <code>LiveData</code> field in the <code>ViewModel</code> (for example <code>errorMessage: LiveData&lt;Int&gt;</code>) and assign it the <code>R. id</code> of the string resource you would like to display. This way you move the logic of determining the specific message to display from the <code>Fragment</code> to the <code>ViewModel</code>.</p>

<p>c. You only need some arguments in the <code>ViewModel</code>. For instance, when you have an id extra argument passed to the <code>Fragment</code> in a <code>Bundle</code>, you would init the <code>ViewModel</code> with this id to load the item.</p>

<p>d. Passing the <code>Item</code> can definitely be a good approach. You can also consider creating a Presenter to separate some logic out of the <code>Fragment</code> (so it does not work with the <code>Item</code>). You will find more information and examples on the GitHub link above.</p>

<p>So I think there are different approaches to choose from depending on the app you are developing. Testing is very important and after implementing one approach you will find how it affects the ease of writing your tests. But this is how I see the answers for your questions.</p>
",8402591,,,,,2018-07-17 20:56:03,,,,4,,,
Android,51397179,2,,51396910,2018-07-18 8:31:29,3134,,2,,"<p>I gone through your GitHub project link, your CSV file has more than <strong>22K</strong> entries.
Other thing is you are <strong>not reading data from Room</strong>, you have just inserted those objects and updating adapter with ArrayList.</p>

<p>First of all you should <strong>not</strong> perform this <strong>CPU Intensive</strong> operation on main thread, This is <strong>blocking UI</strong> for long time. [Just tested code on my device]</p>

<p>Use worker thread or any other threading mechanism like <strong>RxJava</strong> to perform this <strong>CPU Intensive</strong> operation. Then return result to <strong>Main Thread</strong> and update your UI.</p>

<p>Taking this further, considering 22K entries you should consider using <strong>pagination</strong> provided with Android architecture libraries</p>

<p>Perform <code>private void readData()</code> operation on another thread, Create List of your objects and insert to database all at once. using another dao method like below</p>

<pre><code>@Insert
void insertAll(List&lt;BabyName&gt; babyNames);
</code></pre>

<p>Observe <code>List&lt;BabyName&gt;</code> in Activity using <code>database.babyDao().getAllData();</code> method and in that observer set BabyNames to adapter as <code>adapter.setBabyNames(names)</code> and call <code>adapter.notifyDatasetChanged()</code> </p>

<p>This is how you can observe LiveData - example <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/BasicSample/app/src/main/java/com/example/android/persistence/ui/ProductFragment.java"" rel=""nofollow noreferrer"">ProductFragment</a></p>

<pre><code>// Observe product data
model.getObservableProduct().observe(this, new Observer&lt;ProductEntity&gt;() {
    @Override
    public void onChanged(@Nullable ProductEntity productEntity) {
        model.setProduct(productEntity);
       // Update adapter data and notify dataset changed here
    }
});
</code></pre>

<p>If you want to follow <strong>Android Architecture Guidelines</strong> considering you are using <strong>Room</strong> Database, go with MVVM architecture. You will start task for CSV Processing once the app is open and UI will observe for database changes using <code>LiveData</code>. So when your csv processing is completed and Database is updated you can view all those in your UI</p>

<p>Refer this for Pagination support - <a href=""https://developer.android.com/topic/libraries/architecture/paging/"" rel=""nofollow noreferrer"">Android Pagination</a></p>

<p><strong>Edit 1</strong></p>

<p>I have create <a href=""https://github.com/vivekpanchal/BabyApp/pull/2"" rel=""nofollow noreferrer"">Pull Request</a> on <strong>GitHub</strong> which fixes this problem.
Now app is running as expected.</p>

<p><strong>It fixes following issues</strong></p>

<ul>
<li><strong>CSV Processing</strong> In Background</li>
<li>BabyDao with required <strong>LiveData</strong> Methods</li>
<li>MainActivity with Observing Baby List</li>
<li>MainActivity processing CSV in background if already not inserted</li>
<li>RecyclerView working properly - <strong>LayoutManager bug fixed</strong></li>
</ul>
",3624647,,3624647,,2018-07-18 12:01:58,2018-07-18 12:01:58,,,,17,,,
Android,51406921,2,,51405949,2018-07-18 16:29:06,3135,,1,,"<p>You might try clearing the list first and then add the new messages.</p>

<p><a href=""https://github.com/googlesamples/android-SwipeRefreshLayoutBasic/blob/7efe07bdbffd0ddd8e2ce00f24ecd555af53975c/Application/src/main/java/com/example/android/swiperefreshlayoutbasic/SwipeRefreshLayoutBasicFragment.java#L195"" rel=""nofollow noreferrer"">Android SwipeRefreshLayoutBasic</a></p>
",2592443,,,,,2018-07-18 16:29:06,,,,4,,,
Android,51420796,2,,23629148,2018-07-19 10:52:59,3135,,1,,"<p>I have tried above solution but it won't work for me and i got the solution from my another code, so i just want to share so may other will get help. For google in-app code please check this <a href=""https://github.com/googlesamples/android-play-billing"" rel=""nofollow noreferrer"">google github project</a> </p>

<p>The difference is call <code>queryInventoryAsync()</code> with some more parameter that you have to pass and make sure that below method is call inside <code>onIabSetupFinished()</code> after <code>IabHelper</code> successfully initialized.</p>

<pre><code>runOnUiThread(new Runnable() {
     @Override
     public void run() {
        refreshItemList();
     }
});
</code></pre>

<p>Prepare skurequest</p>

<pre><code>private void refreshItemList() {
    List&lt;String&gt; itemSku = new ArrayList&lt;&gt;();
    List&lt;String&gt; subSku = new ArrayList&lt;&gt;();
    subSku.add(AppConstant.InApp.SKU_ONE_ID);
    mHelper.queryInventoryAsync(true, itemSku, subSku, mQotInventoryListener);
}
</code></pre>

<p>Below is the listener where you receive your <code>SkuDetails</code></p>

<pre><code>IabHelper.QueryInventoryFinishedListener mQotInventoryListener = new IabHelper.QueryInventoryFinishedListener() {
        @Override
        public void onQueryInventoryFinished(IabResult result, Inventory inv) {
            try {
                Log.d(TAG, ""mQotInventoryListener Query inventory finished."");

                // Have we been disposed of in the meantime? If so, quit.
                if (mHelper == null) return;

                // Is it a failure?
                if (result.isFailure()) {
                    Log.e(TAG, ""mQotInventoryListener Failed to query inventory: "" + result);
                    return;
                }

                Log.d(TAG, ""mQotInventoryListener Query inventory was successful."");
                try {
                    //Here you just pass SKU_ID that you want its detail
                    SkuDetails skuDetails = inv.getSkuDetails(AppConstant.InApp.SKU_ONE_ID);
                    if (skuDetails != null) {
                      Log.d(TAG, ""skuDetails are received""); 
                    } else {
                        Log.e(TAG, ""skuDetails are null"");
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };
</code></pre>
",6533853,,,,,2018-07-19 10:52:59,,,,0,,,
Android,51434923,2,,51434652,2018-07-20 4:07:03,3136,,1,,"<p>This is how <code>ListView</code> or any <code>AdapterView</code> works . Same view will inflate for each item . Each widget which have <code>Adapter</code> implementation in android have there own way to access the item at particular position .</p>

<p>For instance if you want to get click on each position you can set <code>AdapterView.OnItemClickListener</code>.</p>

<pre><code>listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; adapterView, View view, int position, long l) {
            // position is the item clicked
        }
    });
</code></pre>

<p>Also each <code>ListAdapter</code> class have methods to access items like <code>getItem(position)</code> from which you can return the object of your dataset for particular position .</p>

<p>From my understanding you should learn about <code>ListView</code> and <code>ViewHolder</code> pattern first .
You can read <a href=""https://developer.android.com/training/improving-layouts/smooth-scrolling"" rel=""nofollow noreferrer"">This Doc</a> or some similar one . If you do not understand the concept behind <code>ListView</code> then this answer can be way too big . SO its better you should check out some samples and Documentation.</p>

<p><strong>P.S</strong>:- Ditch <code>ListView</code> now and start using <code>RecyclerView</code> . Here is the <a href=""https://github.com/googlesamples/android-RecyclerView"" rel=""nofollow noreferrer"">Google-Sample</a> for <code>RecyclerView</code>.</p>
",4168607,,,,,2018-07-20 4:07:03,,,,0,,,
Android,51458989,2,,51450215,2018-07-21 18:30:43,3138,,8,,"<p>Ok Finally found the problem and how to solve. LiveData is not designed for single events. For that reason there is a couple of ways to fix it or handle it, this two links were useful for me:</p>

<p><a href=""https://medium.com/google-developers/livedata-with-snackbar-navigation-and-other-events-the-singleliveevent-case-ac2622673150"" rel=""noreferrer"">Jose Alcérreca's post dealing with this problem</a></p>

<p><a href=""https://gist.github.com/JoseAlcerreca/e0bba240d9b3cffa258777f12e5c0ae9"" rel=""noreferrer"">Jose Alcérreca's EventObserver</a></p>

<p><a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""noreferrer"">Jose Alcérreca's SingleLiveEvent class</a></p>

<p>Basically:</p>

<p>In ViewModel:</p>

<p><code>var eventLiveData: MutableLiveData&lt;Event&lt;ErrorResponse&gt;&gt; = MutableLiveData()</code></p>

<p>and In Activity or Fragment:</p>

<pre><code>viewModel.eventLiveData.observe(this, EventObserver {
     it?.let {
          shortToast(it.message)
     }
})
</code></pre>
",682216,,682216,,2018-07-21 19:16:19,2018-07-21 19:16:19,,,,3,,,
Android,51479126,2,,51478764,2018-07-23 12:43:19,3140,,2,,"<p>you can use <a href=""https://developer.android.com/reference/android/arch/paging/PagedList.BoundaryCallback"" rel=""nofollow noreferrer"">BoundryCallback</a> to get notified on certain points of your DB list</p>

<p>here is a sample from Google <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample"" rel=""nofollow noreferrer"">link</a></p>

<p>here is my playground with paging <a href=""https://github.com/worldsnas/PagingLibraryTest"" rel=""nofollow noreferrer"">link</a></p>
",7295690,,,,,2018-07-23 12:43:19,,,,2,,,
Android,51487480,2,,51486170,2018-07-23 21:31:55,3140,,2,,"<p>1) </p>

<p>As you did not provide code details about your Service and its related components, this answer is abstract.</p>

<p>To separate the ViewModel from the Service, create an Activity that will access the ViewModel; you will have an Activity, a ViewModel, and a Service. </p>

<p>This means that you will create a bound Service (<a href=""https://developer.android.com/guide/components/services#CreatingBoundService"" rel=""nofollow noreferrer"">https://developer.android.com/guide/components/services#CreatingBoundService</a> and, more specifically, <a href=""https://developer.android.com/guide/components/bound-services"" rel=""nofollow noreferrer"">https://developer.android.com/guide/components/bound-services</a>). A bound Service provides an interface that an Activity can use to interact with the Service. </p>

<p>A good example of a bound Service is Google's Location Update Service: <a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesForegroundService/app/src/main/java/com/google/android/gms/location/sample/locationupdatesforegroundservice"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesForegroundService/app/src/main/java/com/google/android/gms/location/sample/locationupdatesforegroundservice</a> </p>

<p>In your instance, the Service will be tasked with originating data and transmitting that data to the Activity which will then provide that data to the ViewModel. </p>

<p>To transmit data from the Service to the ViewModel, I suggest using Greenrobot's EventBus (<a href=""http://greenrobot.org/eventbus/documentation/how-to-get-started/"" rel=""nofollow noreferrer"">http://greenrobot.org/eventbus/documentation/how-to-get-started/</a>). </p>

<p>Whenever you want the Service to transmit data to the ViewModel, a single-line call to EventBus in your Service will transmit the data to the Subscribers in the Activity that are listening for that type of data. </p>

<p>The Activity, upon receipt of data, will then update the ViewModel with the data. Any Observers registered with the ViewModel will then receive the latest data. </p>

<p>2) </p>

<p>The Separation of Concerns principle militates in favor of separating the ViewModel from the repository. The ViewModel should be concerned with only keeping state of data that will be displayed to the user, and keeping such state across configuration changes. </p>
",8083653,,,,,2018-07-23 21:31:55,,,,4,,,
Android,51493802,2,,51489023,2018-07-24 8:19:57,3140,,1,,"<p>Your solution is fine but as you say it won't scale well.</p>

<p>You can have a look at one of the <a href=""https://github.com/googlesamples/android-architecture-components/blob/5516724bd9f02c5bffb17945d9796e29ff95c76f/GithubBrowserSample/app/src/main/java/com/android/example/github/di/AppInjector.kt"" rel=""nofollow noreferrer"">Google Samples</a> where they implement a <code>HasSupportFragmentInjector</code> interface to determine whether they want to inject an Activity.</p>

<pre><code>private fun handleActivity(activity: Activity) {
    if (activity is HasSupportFragmentInjector) {
        AndroidInjection.inject(activity)
    }
    if (activity is FragmentActivity) {
        activity.supportFragmentManager
            .registerFragmentLifecycleCallbacks(
                object : FragmentManager.FragmentLifecycleCallbacks() {
                    override fun onFragmentCreated(
                        fm: FragmentManager,
                        f: Fragment,
                        savedInstanceState: Bundle?
                    ) {
                        if (f is Injectable) {
                            AndroidSupportInjection.inject(f)
                        }
                    }
                }, true
            )
    }
}
</code></pre>
",1837367,,,,,2018-07-24 8:19:57,,,,0,,,
Android,51494050,2,,51489023,2018-07-24 8:33:43,3140,,3,,"<p>The way to do this is quite simple.
If You look at Google Samples You will have a clear direction. Like <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample"" rel=""nofollow noreferrer"">GitHubBrowserSample</a></p>

<p>So You will create an <code>interface Injectable</code> like this, basically a marker interface.</p>

<pre><code>/**
 * Marks an activity / fragment injectable.
 */
interface Injectable
</code></pre>

<p>Each activity or fragment will implement this interface for example like this (in Kotlin)</p>

<pre><code>open class BaseActivity : AppCompatActivity(),Injectable {

@Inject
lateinit var viewModelFactory: ViewModelProvider.Factory
lateinit var baseActivityViewModel: BaseActivityViewModel

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    AndroidInjection.inject(this)
    baseActivityViewModel = ViewModelProviders.of(this, viewModelFactory)
            .get(BaseActivityViewModel::class.java)
}
</code></pre>

<p>}</p>

<p>Important lines are : </p>

<p><code>open class BaseActivity : AppCompatActivity(),Injectable</code></p>

<pre><code>AndroidInjection.inject(this)
</code></pre>

<p>Create an Activity module to contribute Activity object</p>

<pre><code>/**
 * Module to contribute all the activities.
 */
@Module
abstract class ActivityModule {

    @ContributesAndroidInjector
    internal abstract fun contributeSplashActivity(): SplashActivity

}
</code></pre>

<p>and finally <code>DaggerInjector</code> to enable injection</p>

<pre><code>/**
 * Helper to inject all the activities and fragments that are marked Injectable.
 */

object DaggerInjector {

    fun injectAll(application: TurtleApp) {
        DaggerAppComponent.builder()
                .application(application)
                .build().inject(application)
        application
                .registerActivityLifecycleCallbacks(object : Application.ActivityLifecycleCallbacks {
                    override fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {
                        injectComponents(activity)
                    }

                    override fun onActivityStarted(activity: Activity) {

                    }

                    override fun onActivityResumed(activity: Activity) {

                    }

                    override fun onActivityPaused(activity: Activity) {

                    }

                    override fun onActivityStopped(activity: Activity) {

                    }

                    override fun onActivitySaveInstanceState(activity: Activity, outState: Bundle) {

                    }

                    override fun onActivityDestroyed(activity: Activity) {

                    }
                })
    }

    private fun injectComponents(activity: Activity) {
        if (activity is Injectable) {
            AndroidInjection.inject(activity)
        }
//        (activity as? FragmentActivity)?.supportFragmentManager?.registerFragmentLifecycleCallbacks(
//                object : FragmentManager.FragmentLifecycleCallbacks() {
//                    override fun onFragmentCreated(fm: FragmentManager?, f: Fragment?,
//                                                   savedInstanceState: Bundle?) {
//                        if (f is Injectable) {
//                            AndroidSupportInjection.inject(f)
//                        }
//                    }
//                }, true)
    }
}
</code></pre>

<p>Uncomment the code to enable <code>Fragment</code> injection.</p>
",1801202,,,,,2018-07-24 8:33:43,,,,1,,,
Android,51503007,2,,51498716,2018-07-24 15:57:54,3141,,1,,"<p><code>LOCAL_LDLIBS</code> is for ndk-build but you're using CMake. A good starting place would be <a href=""https://github.com/googlesamples/android-ndk/blob/master/hello-jni/app/src/main/cpp/CMakeLists.txt"" rel=""nofollow noreferrer"">one of our samples</a> which shows you that you need to use <code>target_link_libraries</code>.</p>
",632035,,,,,2018-07-24 15:57:54,,,,2,,,
Android,51520861,2,,51365460,2018-07-25 14:00:49,3142,,1,,"<p>Looking at the source for the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/ui/common/DataBoundListAdapter.kt"" rel=""nofollow noreferrer"">DataBoundListAdapter</a> I can see that create binding is just a call from <code>onCreateViewHolder</code> which contains the information you need - <code>viewType: Int</code></p>

<p>The simplest option for you is to override what the method is doing in your own adapter, to pass the type information you need.</p>

<pre><code>@Override
DataBoundViewHolder&lt;V&gt; onCreateViewHolder(ViewGroup parent, int viewType) {
    //Note: no call to super
    V binding = createBindingByType(parent, viewType) //this is a new method
    return DataBoundViewHolder(binding)
}

private ChatMessageItemBinding createBindingByType(ViewGroup parent, int viewType) {
    @LayoutRes int layout;
    switch(viewType) {
        case ...:
            layout = R.layout.my_item;
            break;
        ...
    }
    return DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), layout, parent, false, dataBindingComponent);
}

@Override
protected ChatMessageItemBinding createBinding(ViewGroup parent) {
    throw new RuntimeException(""This method should not be called with MyAdapter"");
}
</code></pre>
",984830,,,,,2018-07-25 14:00:49,,,,0,,,
Android,51552283,2,,51548108,2018-07-27 6:52:15,3143,,3,,"<p>i dont work with room but familiar with rxjava you can design your repository like that</p>

<p>your room interfac </p>

<pre><code>@Query(“SELECT * FROM Users WHERE id = :userId”)
Single&lt;User&gt; getUserById(String userId);
</code></pre>

<p><strong>when use :</strong><br>
<strong>Maybe</strong>  When there is no user in the database and the query returns no rows, Maybe will complete.</p>

<p><strong>Flowable</strong> Every time the user data is updated, the Flowable object will emit automatically, allowing you to update the UI based on the latest dat </p>

<p><strong>Single</strong> When there is no user in the database and the query returns no rows, Single will trigger onError(EmptyResultSetException.class)</p>

<p>read more about Room and  RxJava  this <a href=""https://medium.com/google-developers/room-rxjava-acb0cd4f3757"" rel=""nofollow noreferrer"">link</a></p>

<p>to achieve "" if there is not data in db call  web services "" create your repository methode like that </p>

<pre><code>public Single&lt;User&gt; getUserById(String userId){
 return  db.getUserById(userId)
              /// if there is no user in the database get data from api
             .onErrorResumeNext(api.getUserById(userId)
              .subscribeOn(Schedulers.io())
              //check your request
              .filter(statusPojo::getStatus)
               // save data to room
              .switchMap(data -&gt; {
              //sava data to db
              return Observable.just(data)
              })
           );

}
</code></pre>

<p>finally call repository method from interactor to  passed obsrevable to interactor then to presentation layout</p>

<p>more detail : you can inject Api and DB to your repository </p>

<p><strong>update_Answer</strong> for reactive db 
if you want get last update on UI just do it :</p>

<p>your room interface: </p>

<pre><code>@Query(“SELECT * FROM Users WHERE id = :userId”)
Flowable&lt;User&gt; getUserById(String userId);
</code></pre>

<p>repository :</p>

<pre><code>   @Override
public Flowable&lt;User&gt; getUser(int id) {
    getUserFromNet(id);
         //first emit cache data in db and after request complete   emit last update from net 
        return db.getUserById(id);

 }


 private Flowable&lt;User&gt; getUserFromNet(int id){
      api.getUserById(userId)
          .subscribeOn(Schedulers.io())
          .observeOn(Schedulers.io())
          //check your request
          .filter(statusPojo::getStatus)
           // save data to room
          .subscribe(new DisposableObserver&lt;User&gt;() {
                @Override
                public void onNext(User user) {
                     // save data to room
                }

                @Override
                public void onError(Throwable e) {
                    Timber.e(e);
                }

                @Override
                public void onComplete() {


                }
            });
}
</code></pre>

<p><strong>update_Answer2</strong> for reactive db and "" if there is not data in db call web services ""
according this <a href=""https://github.com/googlesamples/android-architecture-components/issues/84"" rel=""nofollow noreferrer"">issue</a> is better use return a <code>Flowable &lt;List&lt;T&gt;&gt;</code></p>

<p>and check list size instead of <code>Flowable&lt;T&gt;</code> white <code>swichIfEmpity</code> because if don't any user in db <code>Flowable&lt;T&gt;</code> do'nt call <code>onNext()</code> and don't emite <code>FlowableEmpity();</code></p>

<pre><code>private Flowable&lt;List&lt;User&gt;&gt;  getUser(int id){
       return db.getUserById(id).
         /// if there is no user in the database get data from 
           .flatMp(userList-&gt; 
           if(userList.size==0)
          api.getUserById(userId)
          .subscribeOn(Schedulers.io())
          //check your request
          .filter(statusPojo::getStatus)
           // save data to room
          .subscribe(new DisposableObserver&lt;User&gt;() {
                @Override
                public void onNext(User user) {
                     // save data to room
                }

                @Override
                public void onError(Throwable e) {
                    Timber.e(e);
                }

                @Override
                public void onComplete() {


                }
            });
                return Flowable.just(data)
                );
}
</code></pre>
",6685154,,6685154,,2018-08-10 10:32:10,2018-08-10 10:32:10,,,,10,,,
Android,51571188,2,,51571079,2018-07-28 12:00:46,3144,,1,,"<p>I think in the <code>onBindViewHolder</code> method you should do what ever you want to do with your button.</p>

<p>Also there is no need for the list of buttons here. Make a list the data you need to be held in the Buttons RecyclerView.</p>

<p>I have a RecyclerView that will display Genres for restaurants lets say, So I will create a List of strings to hold these genres names (chickens, meats, etc,..)  </p>

<p>Setting its text </p>

<blockquote>
  <p>holder.actionButton.setText(// Make use of position here);</p>
</blockquote>

<p>Or Click Listeners.</p>

<h2>Update</h2>

<p>You can check google samples for recyclerview <a href=""https://github.com/googlesamples/android-RecyclerView/blob/master/Application/src/main/java/com/example/android/recyclerview/CustomAdapter.java"" rel=""nofollow noreferrer"">here</a></p>

<pre><code>@Override

    public void onBindViewHolder(ViewHolder viewHolder, final int position) {
        Log.d(TAG, ""Element "" + position + "" set."");

        // Get element from your dataset at this position and replace the contents of the view
        // with that element
        viewHolder.getTextView().setText(mDataSet[position]);
}
</code></pre>

<p>wheres mDataset is Array of Strings.</p>
",4695879,,4695879,,2018-07-30 10:34:10,2018-07-30 10:34:10,,,,0,,,
Android,51611720,2,,51611503,2018-07-31 10:55:03,3147,,1,,"<p>Using <a href=""https://developer.android.com/training/constraint-layout/"" rel=""nofollow noreferrer"">Android's relatively new ConstraintLayout</a> you should be able to treat the top and bottom edges of the blue layout as top and bottom constraints respectively for the red and violet ones. Aligning both of them to both of these constraints at once, while defining their heights in absolute, should render the layout you are looking for. You can refer to <a href=""https://github.com/googlesamples/android-ConstraintLayoutExamples/tree/master/constraintlayout"" rel=""nofollow noreferrer"">the official examples repository</a> to check use cases for this layout type. </p>

<p><strong>Edit:</strong> Took a moment to provide you with a simplified example. Only including tags/parameters which are relevant to the case.</p>

<pre><code>&lt;android.support.constraint.ConstraintLayout 
...
&gt;
    &lt;Layout
    android:id=""@+id/blue""
    ...
    /&gt;

    &lt;Layout
    android:id=""@+id/red""
    android:layout_height=""20dp""
    app:layout_constraintTop_toTopOf=""@+id/blue""
    app:layout_constraintBottom_toBottomOf=""@+id/blue""
    ...
    /&gt;

    &lt;Layout
    android:id=""@+id/violet""
    android:layout_height=""20dp""
    app:layout_constraintTop_toTopOf=""@+id/blue""
    app:layout_constraintBottom_toBottomOf=""@+id/blue""
    ...
    /&gt;


&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>
",4933947,,4933947,,2018-07-31 11:02:07,2018-07-31 11:02:07,,,,0,,,
Android,51669670,2,,51626868,2018-08-03 9:37:26,3150,,2,,"<p>If one of your devices isn't connected to internet, you could :</p>

<p><strong>Option 1 :</strong>
use <a href=""https://developers.google.com/nearby/connections/overview"" rel=""nofollow noreferrer"">Google Nearby Connections API</a> , the API choose the best way to communicate (eg: Bluetooth, Wifi...).</p>

<p>See <a href=""https://github.com/googlesamples/android-nearby/tree/master/connections"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-nearby/tree/master/connections</a></p>

<p><strong>Option 2 :</strong>
Use <a href=""https://developer.android.com/reference/java/net/Socket"" rel=""nofollow noreferrer"">Socket</a> to communicate but your devices need to be on the same network. If they aren't connected to the same network, you can connect them using <a href=""https://developer.android.com/reference/android/net/wifi/p2p/package-summary"" rel=""nofollow noreferrer"">WIFI P2P</a>.</p>
",7995997,,7995997,,2018-08-03 9:43:15,2018-08-03 9:43:15,,,,0,,,
Android,51742045,2,,51538443,2018-08-08 8:28:42,3155,,1,,"<p>As per the answer given by google this is intended behaviour.<br>
<a href=""https://issuetracker.google.com/issues/111819103"" rel=""nofollow noreferrer"">https://issuetracker.google.com/issues/111819103</a></p>

<p>They gave 3 options </p>

<ol>
<li>Use android.view.ViewOutlineProvider (as per example here <a href=""https://github.com/googlesamples/android-ClippingBasic"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ClippingBasic</a>).</li>
<li>Replace the ImageView with a BitmapShader, which is fast (each pixel is drawn once) and more portable way as BitmapShader is supported in API level 1.
Paint paint = new Paint();
paint.setColor(Color.BLACK);
paint.setStyle(Paint.Style.FILL);
Bitmap bm = BitmapFactory.decodeResource(getResources(), R.drawable.spiderman);
Shader shader = new BitmapShader(bm, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
paint.setShader(shader);
Path corners = new Path();
corners.addRoundRect(bounds, radii, Path.Direction.CW);
canvas.drawPath(corners, paint);</li>
<li>Draw an inverse path with SRC_OVER on top of the ImageView. This works if background is solid color and it is slower, because some pixels are drawn twice.</li>
</ol>

<p>Of these the first can't be used to render convex complex path as is answered in <a href=""https://issuetracker.google.com/issues/37064491"" rel=""nofollow noreferrer"">https://issuetracker.google.com/issues/37064491</a></p>

<p>Trying the other two options and post the results here. </p>
",944412,,,,,2018-08-08 8:28:42,,,,0,,,
Android,51777939,2,,30155227,2018-08-10 2:05:27,3157,,1,,"<pre><code>@Before
public void registerIdlingResource() {
    IdlingPolicies.setMasterPolicyTimeout(60 * 1000 * 3, TimeUnit.MILLISECONDS);
    IdlingPolicies.setIdlingResourceTimeout(60 * 1000 * 3, TimeUnit.MILLISECONDS);
    mIdlingResource = BooleanIdlingResource.getIdlingResource();
    // To prove that the test fails, omit this call:
    IdlingRegistry.getInstance().register(mIdlingResource);
}
</code></pre>

<p>I test on my project, It works.
Just setup before register idling resources.
please check:</p>

<p><a href=""https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testing/tree/master/ui/espresso/IdlingResourceSample</a>
and</p>

<p><a href=""https://developer.android.com/reference/android/support/test/espresso/IdlingPolicies"" rel=""nofollow noreferrer"">https://developer.android.com/reference/android/support/test/espresso/IdlingPolicies</a></p>
",6323891,,6323891,,2018-08-13 3:51:16,2018-08-13 3:51:16,,,,3,,,
Android,51788659,2,,51781176,2018-08-10 14:27:29,3158,,5,,"<p>Looking at <a href=""https://developer.android.com/reference/android/arch/lifecycle/LiveData"" rel=""noreferrer"">Live data and its Parent/Children inheritance</a> there is no such thing as SingleLiveData. Reading link provided by @Raghu, I find statement:</p>

<blockquote>
  <p>The <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""noreferrer"">SingleLiveEvent</a> class was created for a sample as a solution that worked for that particular scenario. It is a LiveData that will only send an update once.</p>
</blockquote>

<p>So to answer your questions:</p>

<blockquote>
  <p>Is SingleLiveData is actually part of the Android Architecture Components?</p>
</blockquote>

<p>No, it is not!</p>

<blockquote>
  <p>Is it a good idea to use it?</p>
</blockquote>

<p>This depends on many factors. Since I haven't used it I will give general idea. Using classes that you find in demo app or other way might not be guaranteed to be updated or bug-fixed. So if you understand the class so well that you can fix any bug you might find, and if it fits your need, then use it.</p>

<p>But generally I would avoid that if I can find something that is well maintained and does the same job. </p>

<p>Since from skimming the article I get impression he is trying to make some sort of observer pattern, I will suggest you check out rxjava</p>
",709683,,,,,2018-08-10 14:27:29,,,,1,,,
Android,51869841,2,,51869389,2018-08-16 4:55:56,3163,,6,,"<p>Per the <a href=""https://medium.com/google-developers/livedata-with-snackbar-navigation-and-other-events-the-singleliveevent-case-ac2622673150"" rel=""noreferrer"">LiveData with SnackBar, Navigation, and other events blog post</a>:</p>

<blockquote>
  <p>Some data should be consumed only once, like a Snackbar message, a navigation event or a dialog trigger.</p>
  
  <p>Instead of trying to solve this with libraries or extensions to the Architecture Components, it should be faced as a design problem. <strong>We recommend you treat your events as part of your state.</strong></p>
</blockquote>

<p>They detail the use of a <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""noreferrer"">SingleLiveEvent</a> class which ensures that each Navigation event is only received once by an Observer (i.e., your Fragment that has access to your <code>NavController</code>).</p>

<p>The other alternative is to use an 'Event wrapper' model where the event must be explicitly marked as handled.</p>
",1676363,,,,,2018-08-16 4:55:56,,,,2,,,
Android,51886545,2,,51884303,2018-08-16 23:24:12,3164,,1,,"<p>These are two different kinds generated classes. They are generated automatically during the build (and on the fly when using Android Studio). The naming follow the names that are defined in .xml resource files with a suffix corresponding to their component. </p>

<p><strong>1.</strong> <code>ListItemPlantBinding</code></p>

<p><code>ListItemPlantBinding</code> is a class generated for data-binding, see <a href=""https://developer.android.com/topic/libraries/data-binding/generated-binding"" rel=""nofollow noreferrer"">generated data-binding documentation</a></p>

<blockquote>
  <p>The above layout filename is <strong>activity_main.xml</strong> so the corresponding generated class is <strong>ActivityMainBinding</strong></p>
</blockquote>

<p>This means <code>ListItemPlantBinding</code> is generated for <a href=""https://github.com/googlesamples/android-sunflower/blob/master/app/src/main/res/layout/list_item_plant.xml"" rel=""nofollow noreferrer"">list_item_plant.xml</a></p>

<p>Data-binding is enabled by </p>

<pre><code>dataBinding {
     enabled = true
}
</code></pre>

<p>in <a href=""https://github.com/googlesamples/android-sunflower/blob/356b192d38900f638e985cc293b0020fced2870d/app/build.gradle#L26"" rel=""nofollow noreferrer"">build.gradle</a></p>

<p><strong>2.</strong> <code>PlantListFragmentDirections</code></p>

<p><a href=""https://developer.android.com/topic/libraries/architecture/navigation/navigation-implementing"" rel=""nofollow noreferrer"">Navigation Architecture Component docs</a> points to the second answer.</p>

<blockquote>
  <p>A class for the destination where the action originates, appended with the word ""Directions"".</p>
</blockquote>

<p>Therefore <code>PlantListFragmentDirections</code> originates from <a href=""https://github.com/googlesamples/android-sunflower/blob/356b192d38900f638e985cc293b0020fced2870d/app/src/main/res/navigation/nav_garden.xml#L30"" rel=""nofollow noreferrer"">nav_garden.xml</a>:</p>

<pre><code> &lt;fragment
    android:id=""@+id/plant_list_fragment""
    android:name=""com.google.samples.apps.sunflower.PlantListFragment""
    android:label=""@string/plant_list_title""
    tools:layout=""@layout/fragment_plant_list""&gt;

    &lt;action
        android:id=""@+id/action_plant_list_fragment_to_plant_detail_fragment""
        app:destination=""@id/plant_detail_fragment""
        app:enterAnim=""@anim/slide_in_right""
        app:exitAnim=""@anim/slide_out_left""
        app:popEnterAnim=""@anim/slide_in_left""
        app:popExitAnim=""@anim/slide_out_right"" /&gt;
&lt;/fragment&gt;
</code></pre>

<p>Note the <code>&lt;fragment&gt;</code> element with the enclosed <code>&lt;action&gt;</code></p>

<p>For how to enable navigation please refer to <a href=""https://developer.android.com/topic/libraries/architecture/navigation/navigation-implementing"" rel=""nofollow noreferrer"">Navigation Architecture Component docs</a> </p>
",4265739,,4265739,,2018-08-16 23:37:45,2018-08-16 23:37:45,,,,1,,,
Android,51917612,2,,51917487,2018-08-19 12:21:57,3166,,1,,"<p>Call the parent method <code>super.onRequestPermissionsResult(requestCode,permissions,grantResults);</code>
just if there's not a match with the request code you're receiving:</p>

<pre><code>switch (requestCode) {
        case GALLERY_PERMISSIONS_REQ_CODE:

            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    openGallery();
            }
            imgGalleryCV.setClickable(true);
            break;

        default:
            super.onRequestPermissionsResult(requestCode,permissions,grantResults);
            break; 
}
</code></pre>

<p>Here you have an example of RuntimePermissions usage: <a href=""https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-RuntimePermissions/blob/master/Application/src/main/java/com/example/android/system/runtimepermissions/MainActivity.java</a></p>
",10211290,,,,,2018-08-19 12:21:57,,,,3,,,
Android,51923768,2,,51921674,2018-08-20 3:21:07,3167,,1,,"<p>I haven't done this myself - it's quite likely that nobody has, it's a real corner case - but I have no doubt that it's doable.</p>

<p>Getting the heart rate data on Wear is pretty easy; there's an API to do just that. Here's a SO Q&amp;A with some basic code to do so: <a href=""https://stackoverflow.com/questions/36760344"">How to read Heart rate from Android Wear</a></p>

<p>Transferring that data to your RasPi is going to be more work, but it's still eminently possible. Both devices support a full Bluetooth stack, but there's no simple API for this, so you'll have to build this piece more-or-less from scratch. On the Android side, a good starting point is Google's Bluetooth Chat sample: <a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BluetoothChat</a></p>

<p>In summary: Anything's possible. Many things are difficult.</p>
",252080,,,,,2018-08-20 3:21:07,,,,0,,,
Android,52011770,2,,47529737,2018-08-24 21:10:32,3172,,1,,"<p>I was also getting</p>

<blockquote>
  <p>VariantInputs initialized with no merged manifest report on: DEFAULT.</p>
</blockquote>

<p>Then I followed exactly what is outlined in the <a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint</a></p>

<p>The error went away when I <strong>removed <code>release</code> buildType from the `buildTypes' block</strong> in the test module's Gradle file.
From this:</p>

<pre><code>buildTypes {
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}
</code></pre>

<p>to</p>

<pre><code>buildTypes {
}
</code></pre>
",2196906,,2196906,,2018-08-24 21:19:52,2018-08-24 21:19:52,,,,2,,,
Android,52034489,2,,52032384,2018-08-27 7:26:11,3174,,2,,"<p>Try using a <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">SingleLiveEvent</a> </p>

<p>Here is the code for it from <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Googles architecture samples repo</a> (in case it ever gets removed from the repo):</p>

<pre><code>import android.arch.lifecycle.LifecycleOwner;
import android.arch.lifecycle.MutableLiveData;
import android.arch.lifecycle.Observer;
import android.support.annotation.MainThread;
import android.support.annotation.Nullable;
import android.util.Log;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * A lifecycle-aware observable that sends only new updates after subscription, used for events like
 * navigation and Snackbar messages.
 * &lt;p&gt;
 * This avoids a common problem with events: on configuration change (like rotation) an update
 * can be emitted if the observer is active. This LiveData only calls the observable if there's an
 * explicit call to setValue() or call().
 * &lt;p&gt;
 * Note that only one observer is going to be notified of changes.
 */
public class SingleLiveEvent&lt;T&gt; extends MutableLiveData&lt;T&gt; {

    private static final String TAG = ""SingleLiveEvent"";

    private final AtomicBoolean mPending = new AtomicBoolean(false);

    @MainThread
    public void observe(LifecycleOwner owner, final Observer&lt;T&gt; observer) {

        if (hasActiveObservers()) {
            Log.w(TAG, ""Multiple observers registered but only one will be notified of changes."");
        }

        // Observe the internal MutableLiveData
        super.observe(owner, new Observer&lt;T&gt;() {
            @Override
            public void onChanged(@Nullable T t) {
                if (mPending.compareAndSet(true, false)) {
                    observer.onChanged(t);
                }
            }
        });
    }

    @MainThread
    public void setValue(@Nullable T t) {
        mPending.set(true);
        super.setValue(t);
    }

    /**
     * Used for cases where T is Void, to make calls cleaner.
     */
    @MainThread
    public void call() {
        setValue(null);
    }
}
</code></pre>
",2590478,,,,,2018-08-27 7:26:11,,,,0,,,
Android,52051577,2,,43917823,2018-08-28 6:39:38,3175,,3,,"<p>I've been struggling with the same sort of problem, as I want to implement a camera preview stream into a <em>square</em> TextureView.</p>

<p>Working with the <code>SCALER_CROP_REGION</code> seemed like the obvious place to resolve issues with incompatible aspect ratios, but I don't think that operation will ever actually change the aspect ratio of the result, hence it doesn't prevent stretching/warping behaviour. (<a href=""https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html#SCALER_CROP_REGION"" rel=""nofollow noreferrer"">the docs talk about this</a>)</p>

<p>I've made progress by implementing a similar transform to the one in the Camera2Basic example project - see the function <code>configureTransform</code> in <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow noreferrer"">Camera2BasicFragment</a>).</p>

<p>Using this sort of view-level scaling matrix, you can manage the scaling/cropping of the camera preview without altering the size of your view.</p>
",3268060,,,,,2018-08-28 6:39:38,,,,0,,,
Android,52058582,2,,52029984,2018-08-28 13:01:17,3176,,3,,"<p><strong>Here is a knowledge base to get started, you should make your own project and implement these software architectures in order to adopt the one that works for you and your project:</strong></p>

<p><a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">Android Architecture Blueprints</a></p>

<p><a href=""https://i.stack.imgur.com/72yfM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/72yfM.png"" alt=""Android Architecture Blueprints""></a></p>

<p><a href=""http://hannesdorfmann.com/android/mosby3-mvi-1"" rel=""nofollow noreferrer"">Reactive Apps with MODEL-VIEW-INTENT - PART1 - Model</a></p>

<p><a href=""https://i.stack.imgur.com/ItwJT.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ItwJT.gif"" alt=""enter image description here""></a></p>
",7668027,,,,,2018-08-28 13:01:17,,,,0,,,
Android,52089111,2,,52087947,2018-08-30 4:11:02,3177,,2,,"<p>It's always a good idea to isolate your code depending on the responsibilities. It's gives us several advantages when it's come to code  readability and maintainability.</p>

<p>Since you have asked for MVC pattern but here we have a very good example of MVP pattern which is explained on the following link of Google samples regarding clean architecture in Android projects.</p>

<p>Link: <a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvp/README.md"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/blob/todo-mvp/README.md</a></p>

<p><img src=""https://i.stack.imgur.com/QhVU2.png"" alt=""enter image description here""></p>

<p>Components:</p>

<p>Model: More of your business entities/Pojo
Views: More of your fragments and activities
Repository: Data source for the information. It can be one of your database, cache, remote server, file system etc.
Presentor: It's a layer which get data from one of your repository and send result back to your views.</p>

<p>I have tried to implement similar pattern in one of my learning project.</p>

<p>Link: <a href=""https://github.com/amol-kamble/movie-finder/tree/master/app/src/main"" rel=""nofollow noreferrer"">https://github.com/amol-kamble/movie-finder/tree/master/app/src/main</a></p>
",3148606,,,,,2018-08-30 4:11:02,,,,1,,,
Android,52103533,2,,52087976,2018-08-30 18:45:59,3178,,2,,"<p><a href=""https://stackoverflow.com/a/52090287/1426891"">As Thomas Broyer described</a>, you've got two separate directions to set up: You want the Dagger graph to know how to get to your Application instance, and you want to get access to certain bindings out of the dependency graph.</p>

<p>The <code>@BindsInstance</code> line in the Builder creates a binding for Application set to the instance you pass in. It sounds like you understand this part.</p>

<p>However, after you've created your Component, presumably you want to <em>use</em> it. Let's say you want to get fully-injected instances of classes Dep1, Dep2, and Dep3 out of your graph. One way you could do this is to create methods on your Component that get the instances:</p>

<pre><code>@Singleton @Component(/* ... */) interface AppComponent {
    // [builder snipped out here]

    fun getDep1(): Dep1
    fun getDep2(): Dep2
    fun getDep3(): Dep3
}
</code></pre>

<p>And then you call those as part of your App creation.</p>

<pre><code>var appComponent = DaggerAppComponent.builder().application(githubApp).build()
var dep1 = appComponent.getDep1()
var dep2 = appComponent.getDep2()
var dep3 = appComponent.getDep3()
// Use dep1, dep2, and dep3 here.
</code></pre>

<p>However, you can also create a single-arg method, which is typically a <code>void</code> method called <code>inject</code>. This populates all of the <code>@Inject</code>-annotated fields and calls all of the <code>@Inject</code>-annotated methods on the instance you pass in. If GitHubApp has <code>@Inject</code>-annotated-fields (<a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/GithubApp.kt#L28-L30"" rel=""nofollow noreferrer"">and it does</a>), the call to <code>inject</code> lets you skip defining all of the getters on the Component. That reduces all of the above code to:</p>

<pre><code>DaggerAppComponent.builder().application(githubApp)
    .build().inject(githubApp)
</code></pre>

<p>...which is what you see in the demo.</p>
",1426891,,,,,2018-08-30 18:45:59,,,,3,,,
Android,52146506,2,,51707889,2018-09-03 9:06:08,3181,,3,,"<p><strong>EDIT 2:</strong> Though still no first class support (as of writing this), Google has now updated their samples with an example of how they think this should be solved for now: <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/NavigationAdvancedSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/tree/master/NavigationAdvancedSample</a></p>

<hr>

<p>The major reason is you only use one <code>NavHostFragment</code> to hold the whole back stack of the app.</p>

<p>The solution is that each tab should hold its own back stack.</p>

<ul>
<li>In your main layout, wrap each tab fragment with a <code>FrameLayout</code>.</li>
<li>Each tab fragment is a <code>NavHostFragment</code> and contains its own navigation graph in order to make each tab fragment having its own back stack.</li>
<li>Add a <code>BottomNavigationView.OnNavigationItemSelectedListener</code> to <code>BottomNavigtionView</code> to handle the visibility of each FrameLayout.</li>
</ul>

<p>This also takes care of your ""...I don't like to keep all this fragment in memory..."", because a Navigation with <code>NavHostFragment</code> by default uses <code>fragmentTransaction.replace()</code>, i.e. you will always only have as many fragments as you have <code>NavHostFragment</code>s. The rest is just in the back stack of your navigation graph.</p>

<p><strong>Edit:</strong> Google is working on a native implementation <a href=""https://issuetracker.google.com/issues/80029773#comment25"" rel=""nofollow noreferrer"">https://issuetracker.google.com/issues/80029773#comment25</a></p>

<hr>

<p><strong>More in detail</strong></p>

<p>Let's say you have a <code>BottomNavigationView</code> with 2 menu choices, <code>Dogs</code> and <code>Cats</code>.</p>

<pre><code>&lt;menu xmlns:android=""http://schemas.android.com/apk/res/android""&gt;
    &lt;item android:id=""@+id/dogMenu""
        .../&gt;

    &lt;item android:id=""@+id/catMenu""
        .../&gt;
&lt;/menu&gt;
</code></pre>

<p>Then you need 2 navigation graphs, say <code>dog_navigation_graph.xml</code> and <code>cat_navigation_graph.xml</code>.</p>

<p>The <code>dog_navigation_graph</code> might look like</p>

<pre><code>&lt;navigation
    xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    android:id=""@+id/dog_navigation_graph""
    app:startDestination=""@id/dogMenu""&gt;
&lt;/navigation&gt;
</code></pre>

<p>and the corresponding for <code>cat_navigation_graph</code>.</p>

<p>In your <code>activity_main.xml</code>, add 2 <code>NavHostFragment</code>s</p>

<pre><code>&lt;FrameLayout
    android:id=""@+id/frame_dog""
    ...&gt;

    &lt;fragment
        android:id=""@+id/dog_navigation_host_fragment""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:name=""androidx.navigation.fragment.NavHostFragment""
        app:navGraph=""@navigation/dog_navigation_graph""
        app:defaultNavHost=""true""/&gt;
&lt;/FrameLayout&gt;
</code></pre>

<p>and underneath add the corresponding for your cat <code>NavHostFragment</code>. On your cat frame layout, set <code>android:visibility=""invisible""</code></p>

<p>Now, in your <code>MainActivity</code>'s <code>onCreateView</code> you can</p>

<pre><code>bottom_navigation_view.setOnNavigationItemSelectedListener { item -&gt;
    when (item.itemId) {
        R.id.dogMenu -&gt; showHostView(host = 0)
        R.id.catMenu -&gt; showHostView(host = 1)
    }
    return@setOnNavigationItemSelectedListener true
}
</code></pre>

<p>All that <code>showHostView()</code> is doing is toggling the visibility of your <code>FrameLayout</code>s that are wrapping the <code>NavHostFragment</code>s. So make sure to save them in some way, e.g. in <code>onCreateView</code></p>

<pre><code>val hostViews = arrayListOf&lt;FrameLayout&gt;()  // Member variable of MainActivity
hostViews.apply {
    add(findViewById(R.id.frame_dog))
    add(findViewById(R.id.frame_cat))
}
</code></pre>

<p>Now it's easy to toggle which <code>hostViews</code> should be visible and invisible.</p>
",3499145,,3499145,,2019-03-20 7:28:44,2019-03-20 7:28:44,,,,5,,,
Android,52154674,2,,51797699,2018-09-03 18:23:56,3182,,2,,"<p>Apps targeting Android 7.0+ do not receive CONNECTIVITY_ACTION broadcasts if they register to receive them in their manifest, and processes that depend on this broadcast will not start.</p>

<p>So, if you want to do some work when internet connection is available. You can use <a href=""https://developer.android.com/topic/performance/background-optimization#sched-jobs"" rel=""nofollow noreferrer"">Job scheduler</a> or <a href=""https://developer.android.com/topic/libraries/architecture/workmanager/"" rel=""nofollow noreferrer"">work manager</a>.</p>

<p>For example, here is sample code for job scheduler.</p>

<pre><code>public static final int MY_BACKGROUND_JOB = 0;
...
public static void scheduleJob(Context context) {
  JobScheduler js =
      (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
  JobInfo job = new JobInfo.Builder(
    MY_BACKGROUND_JOB,
    new ComponentName(context, MyJobService.class))
      .setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)
      .setRequiresCharging(true)
      .build();
  js.schedule(job);
}
</code></pre>

<p>When the conditions for your job are met, your app receives a callback to run the onStartJob() method in the specified JobService.class</p>

<p><a href=""https://github.com/googlesamples/android-jobscheduler"" rel=""nofollow noreferrer"">Android JobScheduler Sample</a></p>

<p>Also, registering broadcasts in the activity's onCreate and unregistering it in onDestroy will not work for your case as you will not receive the broadcast after the app is killed.</p>
",6393514,,6393514,,2018-09-05 1:37:41,2018-09-05 1:37:41,,,,1,,,
Android,52200027,2,,52193684,2018-09-06 8:44:22,3184,,1,,"<p>MVP pattern in Android suggests that your View classes (Fragments, Activities) don't contain any presentation or business logic, but all logic is delegated to a Presenter class. The Presenter in turn calls usually <code>void</code> methods provided by the View when the View is initialised, an event occurs, or the View is destroyed. </p>

<p>So imagine a View and a Presenter implementing the following interfaces:</p>

<pre><code>public interface Contract {

    interface View {

        void initView();

        void setTextColor();

    }

    interface Presenter {

        void init();

        void onButtonClicked();

    }
} 
</code></pre>

<p>In our simplistic example the View would initialise the Presenter (dependency injection is out of scope of this post) and then call Presenter's <code>initView</code> method. The Presenter would be responsible for all initialisation logic like fetching data from network / storage and, if need be, update the View. When in turn the user clicks a button the View would delegate action to the Presenter by calling Presenter's <code>onButtonClicked()</code> method. The Presenter can do some processing and depending on the outcome maybe call View's <code>setTextColor()</code> method.</p>

<p>The most important reason for using MVP is to be able to test your logic with Junit and a mocking framework like Mockito. Your Presenter should be written in pure Java or Kotlin without any dependencies on the Android framework library. Then you can just test your Presenter by using the JVM and not having to hook up a device. This is all part of uncle Bob's <a href=""https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html"" rel=""nofollow noreferrer"">clean architecture guidelines</a>. </p>

<p>The two best resources for MVP are the Antonio Leiva's blog <a href=""https://antonioleiva.com/mvp-android/"" rel=""nofollow noreferrer"">post</a> and Google's architecture samples in <a href=""https://github.com/googlesamples/android-architecture"" rel=""nofollow noreferrer"">github</a> </p>
",2583402,,,,,2018-09-06 8:44:22,,,,0,,,
Android,52220355,2,,52219302,2018-09-07 10:14:17,3185,,1,,"<p>You can take a look at the <a href=""https://github.com/googlesamples/android-dynamic-features"" rel=""nofollow noreferrer"">dynamic features sample on GitHub</a>.</p>

<p>The sample uses a <code>BaseSplitActivity</code> which overrides <code>onAttachBaseContext</code> like this:</p>

<pre><code>override fun attachBaseContext(newBase: Context?) {
    super.attachBaseContext(newBase)
    SplitCompat.install(this)
}
</code></pre>

<p>This makes sure that the newly downloaded split is properly installed when the activity launches.</p>

<p>In case of assets you'll have to create a new package context <a href=""https://github.com/googlesamples/android-dynamic-features/blob/master/app/src/main/java/com/google/android/samples/dynamicfeatures/MainActivity.kt#L151"" rel=""nofollow noreferrer"">like this</a></p>

<pre><code>private fun displayAssets() {
    // Get the asset manager with a refreshed context, to access content of newly installed apk.
    val assetManager = createPackageContext(packageName, 0).assets
    // Now treat it like any other asset file.
    val assets = assetManager.open(""assets.txt"")
    // ...
}
</code></pre>
",422060,,,,,2018-09-07 10:14:17,,,,2,,,
Android,52303562,2,,52264580,2018-09-12 21:13:01,3191,,1,,"<p>A TextureView will by default just stretch whatever images you give it into its view dimensions.  So if you give it a 1920x1080 buffer (16:9 aspect ratio) but its dimensions are 1600x1200 (4:3), you'll get a vertically squished image shown.</p>

<p>Take a look at the <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/AutoFitTextureView.java"" rel=""nofollow noreferrer"">AutoFitTextureView</a> in the Camera2Basic sample from Google.
It tries to ensure that its aspect ratio matches that of the camera, but it does require you to set its layout parameters correctly (and it has to be in a layout container that allows its children some flexibility in sizing).</p>
",1344825,,,,,2018-09-12 21:13:01,,,,0,,,
Android,52332687,2,,52332326,2018-09-14 13:07:15,3193,,1,,"<p>You can check google sample project, specifically this class </p>

<p><a href=""https://github.com/googlesamples/android-architecture/blob/todo-mvvm-databinding/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/addedittask/AddEditTaskViewModel.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture/blob/todo-mvvm-databinding/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/addedittask/AddEditTaskViewModel.java</a></p>

<p>Usually you would trigger the network operation in the model view, while the code for implementing the network logic is written in a different class (<code>ApiManager</code> for example), and then get the results in your ViewModel </p>

<ul>
<li><p><code>LoginViewModel</code> will have an object of some network manager class </p></li>
<li><p>When you click login, the viewmodel will call <code>networkManager.performLogin()</code></p></li>
<li><p>Results are then passed to the viewmodel (RxJava is handy in here). </p></li>
<li><p>In your ViewModel do whatever processing you need when you receive the results </p></li>
</ul>
",1380466,,,,,2018-09-14 13:07:15,,,,3,,,
Android,52366143,2,,52364938,2018-09-17 10:55:21,3195,,1,,"<p>The approach the Google team came up with in the architecture components samples is to use a custom annotation in order to provide ViewModel classes through dagger.</p>

<p>In Java the Annotation looks as follows.</p>

<pre><code>import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import androidx.lifecycle.ViewModel;
import dagger.MapKey;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@MapKey
@interface ViewModelKey {
    Class&lt;? extends ViewModel&gt; value();
}
</code></pre>

<p>This uses MapKey from Dagger, where any annotated ViewModel will be composed into a Map which can then be used in your ViewModelFactory.</p>

<p>In the Google samples the ViewModelFactory looks as follows, where using constructor injection you can access the map of ViewModel providers.</p>

<pre><code>public class ViewModelFactory implements ViewModelProvider.Factory {

    private final Map&lt;Class&lt;? extends ViewModel&gt;, Provider&lt;ViewModel&gt;&gt; viewModels;

    @Inject
    public ViewModelFactory(Map&lt;Class&lt;? extends ViewModel&gt;, Provider&lt;ViewModel&gt;&gt; viewModels) {
        this.viewModels = viewModels;
    }

    @NonNull
    @Override
    public &lt;T extends ViewModel&gt; T create(@NonNull Class&lt;T&gt; modelClass) {
        Provider&lt;ViewModel&gt; viewModelProvider = viewModels.get(modelClass);

        if (viewModelProvider == null) {
            throw new IllegalArgumentException(""model class "" + modelClass + "" not found"");
        }

        //noinspection unchecked
        return (T) viewModelProvider.get();
    }
}
</code></pre>

<p>In your example your would end up with the following in order to provide the MyCatchViewModel. Other ViewModels could then be provided by following the same pattern.</p>

<pre><code>@Module
public abstract class ViewModelModule {
    @Binds
    @IntoMap
    @ViewModelKey(MyCatchViewModel.class)
    abstract ViewModel myCatchViewModel(MyCatchViewModel myCatchViewModel);
}
</code></pre>

<p>For a complete example you can check out the GithubBrowserSample sample from Google. <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/di/ViewModelModule.kt"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/di/ViewModelModule.kt</a></p>
",9549299,,,,,2018-09-17 10:55:21,,,,4,,,
Android,52390905,2,,40703567,2018-09-18 16:24:46,3197,,11,,"<p>Espresso does <code>waitForIdle</code> before executing view checks. <code>waitForIdle</code> goes thought <code>IdlingRegistry</code> and waits until every <code>IdlingResource</code> is idle. </p>

<p><code>LoopingIdlingResource</code> is used in Espresso by default. It waits until looper doesn't have messages in queue, which means that it is idle.</p>

<p>However <code>DataBinding</code> uses different approach to schedule an update, it uses <code>Choreographer.postFrameCallback</code>. So updates are not posted into looper queue and Espresso will not wait for them.</p>

<p>In such cases you should register your own <a href=""https://developer.android.com/reference/android/support/test/espresso/IdlingResource"" rel=""noreferrer""><code>IdlingResource</code></a>. You can find in <code>googlesamples/android-architecture-components</code> nice sample how to implement custom <a href=""https://github.com/googlesamples/android-architecture-components/blob/7f861fd45d158e6277a3c35163c7f663e135b2cf/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/util/DataBindingIdlingResource.kt"" rel=""noreferrer""><code>DataBindingIdlingResource</code></a> and <a href=""https://github.com/googlesamples/android-architecture-components/blob/7f861fd45d158e6277a3c35163c7f663e135b2cf/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/util/DataBindingIdlingResourceRule.kt"" rel=""noreferrer""><code>DataBindingIdlingResourceRule</code></a> that will sets the idle resource before executing tests.</p>

<p>So you have to copy these classes <a href=""https://github.com/googlesamples/android-architecture-components/blob/7f861fd45d158e6277a3c35163c7f663e135b2cf/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/util/DataBindingIdlingResourceRule.kt"" rel=""noreferrer""><code>DataBindingIdlingResourceRule</code></a> and <a href=""https://github.com/googlesamples/android-architecture-components/blob/7f861fd45d158e6277a3c35163c7f663e135b2cf/GithubBrowserSample/app/src/androidTest/java/com/android/example/github/util/DataBindingIdlingResource.kt"" rel=""noreferrer""><code>DataBindingIdlingResource</code></a> into your tests.</p>

<p>And add the following rule into your test class:</p>

<pre><code>@Rule
@JvmField
val dataBindingIdlingResourceRule = DataBindingIdlingResourceRule(activityRule)
</code></pre>
",5090578,,5090578,,2018-09-19 8:19:39,2018-09-19 8:19:39,,,,1,,,
Android,52396338,2,,52381029,2018-09-19 0:34:05,3197,,2,,"<p>The <a href=""https://github.com/googlesamples/android-BasicAndroidKeyStore/blob/master/Application/src/main/java/com/example/android/basicandroidkeystore/BasicAndroidKeyStoreFragment.java#L213"" rel=""nofollow noreferrer"">example code</a> that you pointed to from <a href=""https://github.com/googlesamples/android-BasicAndroidKeyStore/"" rel=""nofollow noreferrer"">BasicAndroidKeyStore</a> does not log the public key as <a href=""https://developer.android.com/reference/java/security/KeyPair.html#getPublic()"" rel=""nofollow noreferrer"">getPublic()</a> from the KeyPair class only returns a reference the the public key object, not the public key itself.</p>

<pre><code>Log.d(TAG, ""Public Key reference is: "" + kp.getPublic().toString());
</code></pre>

<p>Logs:</p>

<blockquote>
  <p>D/KeyStoreFragment: Public Key reference is: android.security.keystore.AndroidKeyStoreRSAPublicKey@b8004e8f</p>
</blockquote>

<p>The same goes for <a href=""https://developer.android.com/reference/java/security/KeyPair.html#getPrivate()"" rel=""nofollow noreferrer"">getPrivate()</a>.</p>

<pre><code>Log.d(TAG, ""Private Key reference is: "" + kp.getPrivate().toString());
</code></pre>

<p>Logs:</p>

<blockquote>
  <p>D/KeyStoreFragment: Private Key reference is
  android.security.keystore.AndroidKeyStoreRSAPrivateKey@5da42c27</p>
</blockquote>

<hr>

<p>Now, as you point out in your comment, <code>kp.getPublic().getEncoded()</code> will return the actual public key, but a public key's original purpose is not meant to be secret.</p>

<p>The private key is meant to be secret and while using a hardware-backed keystore with keys supported in the device's secure hardware, the secret keys are stored safely in the TEE/SE and cannot be extracted by the app itself or another bad actor with root privileges. You can see it in this example:</p>

<pre><code>Log.d(TAG, ""Private Key is "" + Arrays.toString(kp.getPrivate().getEncoded()));
</code></pre>

<p>Logs:</p>

<blockquote>
  <p>D/KeyStoreFragment: Private Key is null</p>
</blockquote>

<hr>

<p>To verify your keys are supported by your device's secure hardware, you can use some variation of this code to suit your needs. You can paste this snippet after the same <a href=""https://github.com/googlesamples/android-BasicAndroidKeyStore/blob/master/Application/src/main/java/com/example/android/basicandroidkeystore/BasicAndroidKeyStoreFragment.java#L213"" rel=""nofollow noreferrer"">Log.d</a> mentioned above in the example app's createKeys() method.</p>

<pre><code>    KeyFactory factory = KeyFactory.getInstance(kp.getPrivate().getAlgorithm(), ""AndroidKeyStore"");
    KeyInfo keyInfo = null;
    try {
        keyInfo = factory.getKeySpec(kp.getPrivate(), KeyInfo.class);
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }
    if (keyInfo.isInsideSecureHardware())
        Log.d(TAG, ""Key is supported in secure hardware"");
    else
        Log.d(TAG, ""Key is not supported in secure hardware"");
</code></pre>
",6917917,,6917917,,2018-09-24 4:04:01,2018-09-24 4:04:01,,,,5,,,
Android,52405455,2,,10106837,2018-09-19 12:03:44,3197,,1,,"<p>Since API level 21 there is <code>KeyguardManager.createConfirmDeviceCredentialIntent</code> that can be used to authenticate current user with the device lock pin.</p>

<p>See the <a href=""https://github.com/googlesamples/android-ConfirmCredential"" rel=""nofollow noreferrer"">usage example</a>.</p>
",1064513,,,,,2018-09-19 12:03:44,,,,0,,,
Android,52421704,2,,52289534,2018-09-20 9:23:40,3198,,1,,"<p>Why don't you try out this sample: <a href=""https://github.com/googlesamples/android-Camera2Video"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-Camera2Video</a></p>

<p>I think it will definitely fulfill all of your requirements and you can always reach out to me if you're unable to relate to the code in the sample mentioned above.</p>

<p><strong>This sample uses the Camera2 API as well as what you want is the conversion from raw YUV frames, which can be done using it. So, I hope that you wont have any issues or problems if you would go through the given sample once and use its code for recording MP4 videos in your desired app.</strong></p>

<p><strong>For instance -</strong>
<strong>a)</strong> In this, you will have to implement a <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraDevice.StateCallback"" rel=""nofollow noreferrer"">CameraDevice.StateCallback</a> to receive events about changes of the state of the camera device. Override its methods to set your CameraDevice instance, start the preview, and stop and release the camera.</p>

<p><strong>b)</strong> When starting the preview, set up the <strong>MediaRecorder</strong> to accept video format.</p>

<p><strong>c)</strong> Then, set up a <a href=""https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.Builder"" rel=""nofollow noreferrer"">CaptureRequest.Builder</a> using createCaptureRequest(CameraDevice.TEMPLATE_RECORD) on your CameraDevice instance.</p>

<p><strong>d)</strong> Then, implement a <a href=""https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback"" rel=""nofollow noreferrer"">CameraCaptureSession.StateCallback</a>, using the method createCaptureSession(surfaces, new CameraCaptureSession.StateCallback(){}) on your CameraDevice instance, where surfaces is a list consisting of the surface view of your TextureView and the surface of your <strong>MediaRecorder</strong> instance.</p>

<p><strong>e)</strong> Use start() and stop() methods on your <strong>MediaRecorder</strong> instance to actually start and stop the recording.</p>

<p><strong>f)</strong> Lastly, set up and clean up your camera device in onResume() and onPause().</p>

<p>Happy coding.</p>
",9008357,,9008357,,2018-09-20 14:09:33,2018-09-20 14:09:33,,,,9,,,
Android,52442239,2,,52441736,2018-09-21 10:57:00,3199,,1,,"<p>Your issue is that <code>SeedDatabaseWorker</code> is still based on <strong><code>Worker()</code></strong> which is deprecated now, so you need to use <strong><code>Worker(Context, WorkerParameters)</code></strong> this constructor.</p>

<p>Check my answer from <a href=""https://stackoverflow.com/a/52432391/10271334"">another post</a>, it'll help you understand <code>WorkManager</code> library.</p>

<h2>Edit :</h2>

<p>You can now check <a href=""https://github.com/googlesamples/android-sunflower/blob/master/app/src/main/java/com/google/samples/apps/sunflower/workers/SeedDatabaseWorker.kt"" rel=""nofollow noreferrer"">Worker</a> from that Sunflower demo, it's updated.</p>
",10271334,,,,,2018-09-21 10:57:00,,,,4,,,
Android,52467435,2,,52467319,2018-09-23 15:10:27,3202,,1,,"<p>Have a MutableLiveData</p>

<pre><code>final MutableLiveData&lt;List&lt;Ipe&gt;&gt; data = new MutableLiveData&lt;&gt;();
</code></pre>

<p>In onSucess</p>

<pre><code> public MutableLiveData&lt;List&lt;Ipe&gt;&gt; getStaticIps() {
   ipInterface= ApiConnection.getClient().create(IpStaticInterface.class);
   ipInterface.getIpes()
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribeWith(new SingleObserver&lt;IpStaticList&gt;() {
            @Override
            public void onSubscribe(Disposable d) {

            }

            @Override
            public void onSuccess(IpStaticList ipStaticList) {
                List&lt;Ipe&gt;ips=ipStaticList.getIpes();
                data.setValue(ips);
            }

            @Override
            public void onError(Throwable e) {
                Log.v(""this"",""Eror ""+ e.getMessage());
            }
        });
        return data;
  }
</code></pre>

<p>In repository expose this to viewmodel</p>

<pre><code> public LiveData&lt;List&lt;Ipe&gt;&gt; getIpStatics() {
 return repository.getStaticIps();
 }
</code></pre>

<p>In Activity you observe the livedata</p>

<pre><code> IpStaticViewModel viewmodel = ViewModelProviders.of(this
            .get(IpStaticViewModel.class)
  viewModel.getIpStatics().observe(this, new Observer&lt;List&lt;Ipe&gt;&gt;() {
        @Override
        public void onChanged(@Nullable List&lt;Ipe&gt; ipes) {
            if (ipes != null) {
                 // dosomething
            }
        }
    });
</code></pre>

<p>If you want to generalize your response in case you have a error or something have a look at <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt</a></p>
",653856,,,,,2018-09-23 15:10:27,,,,0,,,
Android,52489690,2,,52489638,2018-09-25 2:19:35,3203,,1,,"<p>The Sign in on the phone flow is available for OAuth 2.0 apps as per the <a href=""https://developer.android.com/training/wearables/apps/auth-wear#OAuth"" rel=""nofollow noreferrer"">documentation</a>:</p>

<blockquote>
  <p>Wear provides OAuth 2.0 support for third-party apps to authenticate a user with a web service. Considering the limited screen real estate on wear devices, Wear OS OAuth support enables standalone watch apps to complete the OAuth authentication flow via a phone. Standalone apps use a request and response URL model to authenticate a user and receive an OAuth token to access the service.</p>
</blockquote>

<p>This is done by using the <a href=""https://developer.android.com/reference/android/support/wearable/authentication/OAuthClient"" rel=""nofollow noreferrer""><code>OAuthClient</code></a> and <a href=""https://developer.android.com/reference/android/support/wearable/authentication/OAuthClient#sendAuthorizationRequest(android.net.Uri,%20android.support.wearable.authentication.OAuthClient.Callback)"" rel=""nofollow noreferrer""><code>sendAuthorizationRequest()</code></a> to open up a WebView on the phone to your OAuth page. The <a href=""https://github.com/googlesamples/android-WearOAuth"" rel=""nofollow noreferrer"">Wear OAuth sample</a> provides a full example of how this works.</p>
",1676363,,,,,2018-09-25 2:19:35,,,,3,,,
Android,52577475,2,,52577362,2018-09-30 11:32:36,3208,,1,,"<p>I would say that this is possible after the introduction of Android <a href=""https://developer.android.com/reference/android/app/NativeActivity"" rel=""nofollow noreferrer""><code>NativeActivity</code></a></p>

<p>This is the example Google provides on how this is done:
<a href=""https://github.com/googlesamples/android-ndk/tree/master/native-activity"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ndk/tree/master/native-activity</a></p>

<p>It depends though what you want to achieve because there are some Android API's that are not available in C/C++. But more and more are added check <a href=""https://developer.android.com/ndk/reference/"" rel=""nofollow noreferrer"">here</a>.</p>

<p>For more NDK related staff go thourgh <a href=""https://developer.android.com/ndk"" rel=""nofollow noreferrer"">Android NDK Documentation</a></p>
",944070,,944070,,2019-03-04 18:02:55,2019-03-04 18:02:55,,,,0,,,
Android,52607257,2,,52607101,2018-10-02 11:16:20,3210,,1,,"<p>In <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationUpdatesPendingIntent/app/src/main/java/com/google/android/gms/location/sample/locationupdatespendingintent/MainActivity.java"" rel=""nofollow noreferrer"">LocationUpdatesPendingIntent</a> there is a small disclaimer:</p>

<pre><code>    // Sets the maximum time when batched location updates are delivered. Updates may be
    // delivered sooner than this interval.
    mLocationRequest.setMaxWaitTime(MAX_WAIT_TIME);
</code></pre>
",6748991,,,,,2018-10-02 11:16:20,,,,1,,,
Android,52643751,2,,52474488,2018-10-04 9:49:40,3212,,1,,"<p>one can pass arguments with <a href=""https://developer.android.com/studio/command-line/adb#am"" rel=""nofollow noreferrer"">adb am instrument</a>:</p>

<pre><code>adb push ./app/build/outputs/apk/debug/com.&lt;package_name&gt;-debug.apk /data/local/tmp/com.&lt;package_name&gt;.debug
adb shell pm install -t -r ""/data/local/tmp/com.&lt;package_name&gt;.debug""
adb push ./app/build/outputs/apk/androidTest/debug/com.&lt;package_name&gt;-debug-androidTest.apk /data/local/tmp/com.&lt;package_name&gt;.debug.test
adb shell pm install -t -r ""/data/local/tmp/com.&lt;package_name&gt;.debug.test""
adb shell am instrument -w -r -e debug true -e class 'com.&lt;package_name&gt;.ExampleInstrumentedTest' com.&lt;package_name&gt;.debug.test/android.support.test.runner.AndroidJUnitRunner
Waiting for application to come online: com.&lt;package_name&gt;.debug.test | com.&lt;package_name&gt;.debug
Connecting to com.&lt;package_name&gt;.debug
</code></pre>

<p>maybe better use a <a href=""https://developer.android.com/training/testing/junit-rules"" rel=""nofollow noreferrer"">TestRule</a> to mock parameter input. </p>

<p>one can also pass <code>android.testInstrumentationRunnerArguments.class</code> alike:</p>

<pre><code>./gradlew app:connectedAndroidTest -P android.testInstrumentationRunnerArguments.class=com.&lt;package_name&gt;.ExampleInstrumentedTest#someMethodToTest
</code></pre>

<p>or pass further arguments alike</p>

<pre><code>-Pandroid.testInstrumentationRunnerArguments.argument1=make_test_fail
</code></pre>

<p>while one can run whole groups of tests (eg. <code>EspressoTest</code>) alike:</p>

<pre><code>./gradlew app:connectedAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=com.example.android.testing.blueprint.ui.espresso.EspressoTest
</code></pre>

<p>see the <a href=""https://github.com/googlesamples/android-testing-templates/tree/master/AndroidTestingBlueprint"" rel=""nofollow noreferrer"">Android Testing Blueprint</a>.</p>
",549372,,549372,,2018-10-05 1:48:42,2018-10-05 1:48:42,,,,0,,,
Android,52700117,2,,52699729,2018-10-08 10:18:45,3216,,1,,"<p>You can check google samples: <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/test/java/com/android/example/github/api/GithubServiceTest.kt"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/test/java/com/android/example/github/api/GithubServiceTest.kt</a></p>

<p>You can use product flavors for mock your response or user MockWebServer library or replace your retrofit interface with you implementation what return json from assets</p>

<p>upd: I misunderstood the question. I agree with Phowner Biring</p>
",8331109,,,,,2018-10-08 10:18:45,,,,0,,,
Android,52752045,2,,52208752,2018-10-11 4:07:40,3219,,2,,"<p>This location update gets varies as per the android version. Recently Android introduce <a href=""https://developer.android.com/about/versions/oreo/background-location-limits"" rel=""nofollow noreferrer"">background location limits</a> in <strong>oreo</strong> which says: </p>

<blockquote>
  <p>While your app is in the foreground, you should receive location
  updates as frequently as you requested. When your app goes in the
  background, your app will receive location updates only a few times
  each hour (the location update interval may be adjusted in the future
  based on system impact and feedback from developers).</p>
</blockquote>

<p>Android recommend to use fused location APIs for below reason, you must consider it for your scenario which says:</p>

<blockquote>
  <p>If your app needs access to location history that contains
  time-frequent updates, use the batched version of the Fused Location
  Provider API elements, such as the FusedLocationProviderApi interface.
  When your app is running in the background, this API receives the
  user's location more frequently than the non-batched API. Keep in
  mind, however, that your app still receives updates in batches only a
  few times each hour.</p>
</blockquote>

<p>Please refer below links for and better approach:</p>

<p><a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesForegroundService/app"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesForegroundService/app</a></p>

<p><a href=""https://codelabs.developers.google.com/codelabs/background-location-updates-android-o/index.html#0"" rel=""nofollow noreferrer"">https://codelabs.developers.google.com/codelabs/background-location-updates-android-o/index.html#0</a></p>

<p><strong>Note: The ""O"" background location limits only kick in when your app is no longer in the foreground.</strong></p>

<p>Please let me know if above two links not working for you.</p>
",5106574,,,,,2018-10-11 4:07:40,,,,2,,,
Android,52756343,2,,45456592,2018-10-11 9:10:38,3219,,2,,"<p>You can migrate data from InstantApp to installed app using StorageApi, example is here: <a href=""https://github.com/googlesamples/android-instant-apps/blob/master/storage-api/features/storage/src/main/java/com/instantappsample/feature/storage/storage/StorageApiActivity.kt"" rel=""nofollow noreferrer"">google sample storage api</a>. Just access 
<code>InstantApps.getInstantAppsClient(this).instantAppData</code> and you have it, <code>addOnSuccessListener</code> and here you go. </p>
",5904585,,,,,2018-10-11 9:10:38,,,,0,,,
Android,52833633,2,,52833331,2018-10-16 10:43:37,3224,,2,,"<p>Use Broadcast receiver to get location in version 8.0...i have test it was working for me       </p>

<pre><code> private PendingIntent getPendingIntent() {
        // Note: for apps targeting API level 25 (""Nougat"") or lower, either
        // PendingIntent.getService() or PendingIntent.getBroadcast() may be used when requesting
        // location updates. For apps targeting API level O, only
        // PendingIntent.getBroadcast() should be used. This is due to the limits placed on services
        // started in the background in ""O"".

        // TODO(developer): uncomment to use PendingIntent.getService().
//        Intent intent = new Intent(this, LocationUpdatesIntentService.class);
//        intent.setAction(LocationUpdatesIntentService.ACTION_PROCESS_UPDATES);
//        return PendingIntent.getService(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);

        Intent intent = new Intent(this, LocationUpdatesBroadcastReceiver.class);
        intent.setAction(LocationUpdatesBroadcastReceiver.ACTION_PROCESS_UPDATES);
        return PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
    }
</code></pre>

<blockquote>
  <p><strong>Reference :</strong> <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationUpdatesPendingIntent/app/src/main/java/com/google/android/gms/location/sample/locationupdatespendingintent/MainActivity.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/blob/master/LocationUpdatesPendingIntent/app/src/main/java/com/google/android/gms/location/sample/locationupdatespendingintent/MainActivity.java</a></p>
  
  <p><strong>Note:</strong> Some of device is not working like OPPO,Vivo, due to security reason.. In this case you have to go to <code>Security permissions</code> ->
  <code>autostart</code> -> then enable autostart from there.</p>
</blockquote>
",6473867,,,,,2018-10-16 10:43:37,,,,3,,,
Android,52933360,2,,52917472,2018-10-22 15:58:32,3231,,1,,"<blockquote>
  <p>How can I create a complication slot to be displayed on my what face?</p>
</blockquote>

<p>The easiest way is to use a <a href=""https://developer.android.com/reference/android/support/wearable/complications/rendering/ComplicationDrawable"" rel=""nofollow noreferrer"">ComplicaitonDrawable</a>. It will handle all the logic of what to display (tilte, text, icon, etc) for you. It can also be styled to blend in with your watch face. Make sure to populate it with complication data whenever your watch face receives a callback:</p>

<pre><code>@Override
public void onComplicationDataUpdate(int id, ComplicationData data) {
    mComplicationDrawable.setComplicationData(data);
}
</code></pre>

<blockquote>
  <p>How can I set its position on the watch face?</p>
</blockquote>

<p>The <code>ComplicationDrawable</code> can easily be drawn anywhere on a canvas:</p>

<pre><code>mComplicationDrawable.setBounds(myComplicationBounds);
mComplicationDrawable.draw(canvas, currentTimeMillis);
</code></pre>

<blockquote>
  <p>Will I have to create an activity for that?</p>
</blockquote>

<p>You don't need an activity to set the position of the complication slot (unless you want the user to be able to select/change the position). </p>

<p>You do need a settings activity to let the user select a data provider for your complication slot. Google has been kind enough to provide a sample watch face that shows the recommended way to do this. It's available on <a href=""https://github.com/googlesamples/android-WatchFace"" rel=""nofollow noreferrer"">GitHub</a>.</p>
",543136,,,,,2018-10-22 15:58:32,,,,1,,,
Android,52963515,2,,52963418,2018-10-24 7:48:24,3232,,1,,"<p>The Fingerprint Authentication is offered from Android 6.0+. It is not supported for lower versions. </p>

<p>Refer this example for Fingerprint Authentication (for above android 6.0)</p>

<p><a href=""https://github.com/googlesamples/android-FingerprintDialog"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-FingerprintDialog</a></p>

<p>I also found a easy tutorial that might help you in this regard.</p>

<p><a href=""https://dzone.com/articles/android-fingerprint-authentication-tutorial"" rel=""nofollow noreferrer"">https://dzone.com/articles/android-fingerprint-authentication-tutorial</a></p>

<p>For previous android version each company such as Samsung, Motorola, HTC created its own API and SDK to access to fingerprint sensor.</p>

<p>For instance Samsung provide a SDK <a href=""http://developer.samsung.com/galaxy#pass"" rel=""nofollow noreferrer"">http://developer.samsung.com/galaxy#pass</a></p>

<blockquote>
  <p>Pass SDK allows you to use fingerprint recognition features in your application. With Pass SDK, you can provide reinforced security, since you can identify whether the current user actually is the authentic owner of the device.</p>
</blockquote>
",8850875,,,,,2018-10-24 7:48:24,,,,1,,,
Android,53023213,2,,51438926,2018-10-27 15:03:14,3236,,2,,"<p>Don't change the <code>object</code> keyword to <code>class</code>. The <a href=""https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations"" rel=""nofollow noreferrer"">object declaration</a> guarantees the Singleton pattern.</p>

<p>After automatics conversion of <code>TypeConverter</code> java file to kotlin file, you should mark all inner converter functions with <a href=""https://kotlinlang.org/docs/reference/java-to-kotlin-interop.html#static-methods"" rel=""nofollow noreferrer""><code>@JvmStatic</code></a> so <em>Room</em> can use them as regular static functions.</p>

<p>Take a look at the official <a href=""https://github.com/googlesamples/android-architecture-components"" rel=""nofollow noreferrer"">Android Architecture Components samples</a>, specifically the <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/db/GithubTypeConverters.kt"" rel=""nofollow noreferrer"">GithubTypeConverters.kt</a>. Also, <a href=""https://gist.github.com/tinmegali/d4a477785f01e57066915a44543db6ed"" rel=""nofollow noreferrer"">this discussion</a> can be useful. And this is my <code>DateTypeConverter.kt</code>:</p>

<pre><code>object DateTypeConverter {

    @TypeConverter
    @JvmStatic
    fun toDate(timestamp: Long?) = timestamp?.let { Date(timestamp) }

    @TypeConverter
    @JvmStatic
    fun toTimestamp(date: Date?) = date?.time

}
</code></pre>
",4071001,,,,,2018-10-27 15:03:14,,,,1,,,
Android,53078867,2,,49808178,2018-10-31 8:07:34,3239,,1,,"<p>I was also getting this exact error ""Failed to find class com/google/ar/core/SessionCreateJniHelper using custom class loader"" followed by ""Failed to load SessionCreateJniHelper class"", when embedding <a href=""https://github.com/google-ar/arcore-android-sdk/tree/master/samples/hello_ar_c"" rel=""nofollow noreferrer"">arore-android-sdk/samples/hello_ar_c</a> sample over to the <a href=""https://github.com/googlesamples/android-ndk/tree/master/native-activity"" rel=""nofollow noreferrer"">android-ndk/native-activity</a> sample framework (while using Android Studio).</p>

<p>The issue in this scenario was the android:hasCode=""false"" directive in AndroidManifest.xml that the <a href=""https://github.com/googlesamples/android-ndk/blob/master/native-activity/app/src/main/AndroidManifest.xml#L14"" rel=""nofollow noreferrer"">NativeActivity sample adds</a>. Even if one does not have any Java code in a NativeActivity-based application, linking in ARCore does add Java code, so in that case android:hasCode=""false"" directive needs to be removed.</p>
",10584598,,,,,2018-10-31 8:07:34,,,,0,,,
Android,53091560,2,,53090722,2018-10-31 20:35:30,3240,,2,,"<p>Yes, you definitely can get the date and time of purchase, order id, state, purchase token and so on. All information about purchase data is described here: </p>

<p>(Table 7) <a href=""https://developer.android.com/google/play/billing/billing_reference"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_reference</a>  </p>

<p>Concerning server verification, official doc says</p>

<blockquote>
  <p>Successful purchases also generate a purchase token, which is a unique identifier representing the user and the product ID for the in-app product they purchased. Your apps can store the purchase token locally or, ideally, pass it to your secure backend server where it can be used to verify the purchase and protect against fraud.</p>
</blockquote>

<p>The process steps of server verification you need to implement:
<a href=""https://developer.android.com/google/play/billing/billing_library_overview#Verify-purchase"" rel=""nofollow noreferrer"">https://developer.android.com/google/play/billing/billing_library_overview#Verify-purchase</a></p>

<p>Google Play In-app Billing samples for more clarity:
<a href=""https://github.com/googlesamples/android-play-billing"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing</a> </p>
",4715901,,,,,2018-10-31 20:35:30,,,,2,,,
Android,53162076,2,,53129294,2018-11-05 20:55:04,3245,,1,,"<p><strong>Permissions</strong></p>

<p>If you do not want to inject JS I think your solution isn't far off. Just a bit of state management can help this.</p>

<p>You need to have the AndroidManifiest and Android Permission checks at compile time and the first runtime a user uses your app because you want to allow a user to specifically allow/deny this functionality dynamically during the experience. Not constantly fiddle around with Android app settings / permissions. Going to and from settings would be rather tedious. I also presume this UX is what you are trying to avoid.</p>

<p>Thus you should do runtime checking on permissions within WebChromeClients onPermissionRequest (which is basically what you have) for when each time this is fired. You can use a state variable, or a white list of domains stored in the state to allow a user allows to limit this functionality and even lock it to specific domains. You can also check specifically for RESOURCE_VIDEO_CAPTURE, etc.</p>

<p>For an example you can see how I do domain locking in my GitHub example here: <a href=""https://github.com/marcusbelcher/android-getUserMedia-test"" rel=""nofollow noreferrer"">https://github.com/marcusbelcher/android-getUserMedia-test</a> see line 106 and 116. You can use a variable/state logic to block specific requests here. This is the request per session when someone fires off getUserMedia. </p>

<p>This is the only place at runtime you can deny/allow. More info is here: </p>

<p><a href=""https://github.com/googlesamples/android-PermissionRequest"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-PermissionRequest</a></p>

<p><a href=""https://developer.android.com/reference/android/webkit/PermissionRequest"" rel=""nofollow noreferrer"">https://developer.android.com/reference/android/webkit/PermissionRequest</a></p>

<p><strong>JS Overrides</strong></p>

<p>If you can / want to inject JS you can inject and override getUserMedia inside the DOM via <code>navigator.mediaDevices.getUserMedia = undefined</code>. You could move the reference temporarily <code>window.t = navigator.mediaDevices.getUserMedia; navigator.mediaDevices.getUserMedia = null;</code> and reverse this when you would like. </p>

<p>More info is here:</p>

<p><a href=""https://stackoverflow.com/questions/5649111/android-webview-loading-javascript-file-in-assets-folder"">Android webview, loading javascript file in assets folder</a></p>

<p><a href=""https://medium.com/appunite-edu-collection/webview-with-injected-js-script-13eb1e0257c9"" rel=""nofollow noreferrer"">https://medium.com/appunite-edu-collection/webview-with-injected-js-script-13eb1e0257c9</a></p>
",1336754,,1336754,,2018-11-05 21:23:18,2018-11-05 21:23:18,,,,1,,,
Android,53276685,2,,53274574,2018-11-13 8:23:15,3252,,1,,"<p>Your start is like you need.</p>

<pre><code>FusedLocationProviderClient fusedLocationProviderClient; //Global variable
fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this); //initiate in onCreate
</code></pre>

<p>For getting location from another app as googlemaps you can use <code>mFusedLocationClient.getLastLocation()</code> it have listeners, <code>addOnSuccessListener</code> gives to you location, <code>addOnCompleteListener</code> and <code>task.getResult() == null</code> means that you need to do your own request like <code>mFusedLocationClient.requestLocationUpdates(getLocationRequest(), mLocationCallback, null);</code></p>

<p>and you need to remove your listener for example in onPause like <code>mFusedLocationClient.removeLocationUpdates(mLocationCallback)</code></p>

<p>you can look this examples <a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location</a>
and <a href=""https://developer.android.com/training/location/receive-location-updates?hl=es"" rel=""nofollow noreferrer"">https://developer.android.com/training/location/receive-location-updates?hl=es</a></p>
",7917629,,,,,2018-11-13 8:23:15,,,,2,,,
Android,53276863,2,,53276698,2018-11-13 8:35:39,3252,,3,,"<p>Basically it means that you try to retrieve location via <code>mFusedLocationClient.getLastLocation()</code> and there is no location on device at this time. So you need to request location updates , like <code>mFusedLocationClient.requestLocationUpdates</code>.
This links will be useful <a href=""https://developer.android.com/training/location/receive-location-updates?hl=es"" rel=""nofollow noreferrer"">https://developer.android.com/training/location/receive-location-updates?hl=es</a> and <a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location</a></p>
",7917629,,,,,2018-11-13 8:35:39,,,,9,,,
Android,53307250,2,,50158868,2018-11-14 19:12:54,3254,,3,,"<p>I understand that this answer is probably too late, but maybe it can help someone in future.</p>

<p>Position of item in RecyclerView is determined by the position of corresponding data object (of type T) inside PagedList&lt;T&gt;. PagedList is designed to look alike good old List&lt;T&gt;, but can be thought of as an ""endless"" list of elements.</p>

<p>PagedList gets its elements by pages on demand through something called DataSource.Factory. A Factory is used because DataSource by itself can only grow in one direction. If you need to prepend elements in PagedList, or change or remove existing elements you must invalidate the DataSource and a new instance will be created through DataSource.Factory.</p>

<p>So, to insert your data elements where you want them you should implement your own DataSource and DataSource.Factory by subclassing these base classes. </p>

<p>Note: Room, data persistence library from AndroidX, provides facilities to automatically generate instances of these classes for your data. You can write SQL query like this:</p>

<pre><code>SELECT * FROM messages WHERE threadId=:threadId ORDER BY timestamp DESC
</code></pre>

<p>then get DataSource.Factory from this, use the factory to create LivaData&lt;PagedList&lt;Message&gt;&gt; and finally use the paged list to display messages in a RecyclerView in a chat application. Then, when you insert, update or remove data inside DB these changes will automatically propagate to the UI. This can be very useful. </p>

<p>I recommend you to read a few related examples a do codelabs:</p>

<ul>
<li><a href=""https://codelabs.developers.google.com/codelabs/android-paging/#0"" rel=""nofollow noreferrer"">https://codelabs.developers.google.com/codelabs/android-paging/#0</a></li>
<li><a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/tree/master/PagingSample</a></li>
<li><a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample</a></li>
</ul>
",3378767,,,,,2018-11-14 19:12:54,,,,0,,,
Android,53364590,2,,48826312,2018-11-18 19:20:41,3258,,1,,"<p>I've just seen your question whilst having to implement a QR code scanner myself.</p>

<p>What worked easily for me was to place everything in a RelativeLayout and simply stack views on top of the SurfaceView. By doing this you can obtain the required overlay effect. </p>

<pre><code>&lt;RelativeLayout
    xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    tools:context="".view.activity.QRActivity""&gt;

&lt;SurfaceView android:id=""@+id/surfaceViewBarcode""
             android:layout_width=""match_parent""
             android:layout_height=""match_parent""/&gt;

&lt;View   android:layout_width=""match_parent""
        android:layout_height=""match_parent""
        android:alpha=""0.5""
        android:background=""@android:color/black"" /&gt;

&lt;TextView android:text=""@string/qr_scanText""
          android:gravity=""center""
          android:textColor=""@android:color/white""
          android:textStyle=""bold""
          android:layout_centerInParent=""true""
          android:layout_width=""match_parent""
          android:layout_height=""wrap_content""
          android:layout_alignBottom=""@+id/surfaceViewBarcode""
          android:layout_alignParentTop=""true""/&gt;
</code></pre>

<p></p>

<p>The only inconvenience is the fact that the bar code scanner will pickup the QR code even if it's not placed in the designated area. </p>

<p>After following <strong><a href=""https://github.com/googlesamples/android-vision/issues/155"" rel=""nofollow noreferrer"">this thread</a></strong>, I've found out that you have multiple options for achieving the required result. 
One would be by implementing a <strong><a href=""https://stackoverflow.com/questions/36405717/android-vision-reduce-bar-code-tracking-window/36428822#36428822"">custom processor</a></strong> </p>

<p>Another way is by <strong><a href=""https://stackoverflow.com/questions/32299947/mobile-vision-api-concatenate-new-detector-object-to-continue-frame-processing/32314136#32314136"">BoxDetector</a></strong>. </p>

<p>I think <strong><a href=""https://github.com/googlesamples/android-vision/blob/master/visionSamples/barcode-reader/app/src/main/java/com/google/android/gms/samples/vision/barcodereader/BarcodeCaptureActivity.java"" rel=""nofollow noreferrer"">this example</a></strong> may come also come in handy</p>
",6320865,,6320865,,2018-11-18 20:34:03,2018-11-18 20:34:03,,,,0,,,
Android,53396573,2,,53278707,2018-11-20 15:42:36,3260,,3,,"<p>Currently the only way to test your implementation of onDemand delivery is by uploading the .aab to the PlayStore.</p>

<p>The standard deployment from Android Studio deploys all modules to the attached device.</p>

<p>In a development environment the flow is correct, that the module is already installed when it's deployed to device.</p>

<p>As for code, take a look at the <a href=""https://github.com/googlesamples/android-dynamic-features"" rel=""nofollow noreferrer"">sample app</a>, in particular the download and listener implementation of <a href=""https://github.com/googlesamples/android-dynamic-features/blob/master/app/src/main/java/com/google/android/samples/dynamicfeatures/MainActivity.kt"" rel=""nofollow noreferrer"">MainActivity</a>.</p>
",422060,,422060,,2018-11-21 11:18:33,2018-11-21 11:18:33,,,,2,,,
Android,53414410,2,,52816240,2018-11-21 14:36:01,3261,,1,,"<p>It seems there actually is no real solution to your problem. But after going through some Google articles it actually seems that in-app purchases are not intended to be refunded, except in some very rare edge-cases. This would mean refund-behavior is not intended as far as I can tell.</p>

<p>Source: <a href=""https://github.com/googlesamples/android-play-billing/issues/113"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/issues/113</a></p>
",8573969,,,,,2018-11-21 14:36:01,,,,0,,,
Android,53467081,2,,53459165,2018-11-25 11:42:51,3264,,1,,"<ul>
<li><p>For App Engine <strong>Standard</strong> environment:</p>

<p>You can generate a Service Account key file from default service
account. Follow the link <a href=""https://github.com/googlesamples/android-play-publisher-api/tree/master/v3/java"" rel=""nofollow noreferrer"">sample code</a> you provided, then click on
the <a href=""https://console.developers.google.com/"" rel=""nofollow noreferrer"">link</a> shown in the ""Getting Started"" section, you'll get in
the Google Developer Console. If logged in with the correct account
(you should see your project name at the top), then go to Credentials
-> Create credentials -> Service Account key. In the service account dropdown list, choose ""App Engine Default Service Account"", choose
JSON as key type and you should be good to go to follow the last
instructions on the Github <a href=""https://github.com/googlesamples/android-play-publisher-api/tree/master/v3/java#first-request-using-oauth2-service-accounts"" rel=""nofollow noreferrer"">page</a>.</p></li>
<li><p>For App Engine <strong>Flexible</strong> environment:</p>

<p>The default service account isn't listed in the Service Account page, as explained <a href=""https://cloud.google.com/appengine/docs/flexible/python/service-account"" rel=""nofollow noreferrer"">here</a>. You can't generate a service account key with it. You'd need to use a custom service account.</p></li>
</ul>
",4926605,,,,,2018-11-25 11:42:51,,,,1,,,
Android,53469484,2,,53469126,2018-11-25 16:24:07,3265,,1,,"<p>Your class <code>PlayerLifePoints_Functions</code> cannot use <code>findViewById</code> because it does not have content. Usually activities are started with <a href=""https://developer.android.com/reference/android/content/Intent"" rel=""nofollow noreferrer"">Intents</a> and they inflate a layout by overriding the <a href=""https://developer.android.com/guide/components/activities/intro-activities#oncreate"" rel=""nofollow noreferrer"">onCreate</a> method.</p>

<h1>If you just want to make it work, you can use:</h1>

<pre><code>v.getRootView().findViewById(v.getId()).getId());
</code></pre>

<p>In that case you do not need to extend from <code>AppCompatActivity</code></p>

<h2>Or better just get rid of the class:</h2>

<pre><code>view_lifepoints.setOnClickListener( View.OnClickListener {

  @Override
  public void onClick(View v) {

      TextView textView = (TextView) v;

      String lp = textView.getText().toString();
      int id = textView.getId();
      int playernumber =  Character.getNumericValue(String.valueOf(id).charAt(0));

      Log.d(""Test"", ""ID: "" + findViewById(v.getId()).getId());
  }

);
</code></pre>

<hr>

<p>In general:
I would recommend not putting your whole logic into a view, but more down into a lower layer. Having it in the activity would already be an improvement for prototyping. If your code grows, it may make sense to switch to <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvp/"" rel=""nofollow noreferrer"">MVP</a> or <a href=""https://github.com/googlesamples/android-architecture/tree/todo-mvvm-live"" rel=""nofollow noreferrer"">MVVM</a>.</p>

<p>Google has some great resources to get you started:
<a href=""https://developer.android.com/guide/components/activities/intro-activities"" rel=""nofollow noreferrer"">https://developer.android.com/guide/components/activities/intro-activities</a>
<a href=""https://developer.android.com/topic/libraries/architecture/"" rel=""nofollow noreferrer"">https://developer.android.com/topic/libraries/architecture/</a></p>
",10702512,,,,,2018-11-25 16:24:07,,,,0,,,
Android,53573907,2,,53573598,2018-12-01 18:39:09,3271,,2,,"<p>You can't access SD cards and other removable media even with File permission granted. If I remember correctly since KitKat unless user enabled access in built-in documents app.</p>

<p>You need to use <a href=""https://developer.android.com/guide/topics/providers/document-provider#client"" rel=""nofollow noreferrer"">DocumentsProvider</a> or obtain yet another permission/uri through <a href=""https://developer.android.com/reference/android/os/storage/StorageVolume.html#createAccessIntent(java.lang.String)"" rel=""nofollow noreferrer"">StorageVolume</a> and parse it with <a href=""https://developer.android.com/reference/android/provider/DocumentsContract"" rel=""nofollow noreferrer"">DocumentsContract</a> (<a href=""https://github.com/googlesamples/android-ScopedDirectoryAccess"" rel=""nofollow noreferrer"">sample project</a>).</p>

<p>Edit: based on your exception:</p>

<pre><code> /storage/emulated/03b3d97bd-5186-4506-97dc-9994b7ce0761
</code></pre>

<p>Default external directory is <code>/storage/emulated/0</code>, looks like You forgot to add a separator after directory name:</p>

<pre><code>output = new FileOutputStream(Environment.getExternalStorageDirectory() +""/""+ image_uuid);
</code></pre>
",9241978,,9241978,,2018-12-01 18:59:01,2018-12-01 18:59:01,,,,8,,,
Android,53607016,2,,46900310,2018-12-04 6:38:09,3273,,2,,"<p>The HintRequest api provided by google has not fully accomplished its feature and is quite buggy , Its works fine in  google devices as said by developers ""OEM issue that their pixel or nexus phone working well."" </p>

<p><a href=""https://issuetracker.google.com/issues/77884951"" rel=""nofollow noreferrer"">https://issuetracker.google.com/issues/77884951</a> .</p>

<p><a href=""https://github.com/googlesamples/android-credentials/issues/27"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-credentials/issues/27</a></p>

<p>Many apps are still using it with handling the exceptional cases with own logic such as myntra verify number feature which is there on the profile page. </p>
",6496837,,,,,2018-12-04 6:38:09,,,,2,,,
Android,53686081,2,,53685773,2018-12-08 19:20:49,3278,,2,,"<p>I believe that's a typo in the documentation. Instead, you should use <code>BillingResponse.OK</code>: <a href=""https://developer.android.com/reference/com/android/billingclient/api/BillingClient.BillingResponse#ok"" rel=""nofollow noreferrer"">https://developer.android.com/reference/com/android/billingclient/api/BillingClient.BillingResponse#ok</a></p>

<p>You can see it in use in this example:
<a href=""https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/src/main/java/com/example/billingmodule/billing/BillingManager.java#L126"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-billing/blob/master/TrivialDrive_v2/shared-module/src/main/java/com/example/billingmodule/billing/BillingManager.java#L126</a></p>
",8298909,,,,,2018-12-08 19:20:49,,,,0,,,
Android,53775872,2,,43410175,2018-12-14 8:23:29,3283,,1,,"<p>I've declared a method in <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer/blob/master/app/src/main/java/com/example/android/uamp/MediaSessionConnection.kt"" rel=""nofollow noreferrer""><code>MediaSessionConnection</code></a>:</p>

<pre>
<code>
    class MediaSessionConnection(
        val context: Context,
        private val serviceComponent: ComponentName
    ) {
      ...
      fun release() {
        mediaBrowser.disconnect()
        mediaController.sendCommand(""disconnect"", null, null)
      }
      ...
    }
</code>
</pre>

<p>And in <code>MusicService</code>:</p>

<pre>
<code>
    class MusicService : MediaBrowserServiceCompat() {

        override fun onCreate() {
            super.onCreate()
            ...
            mediaSessionConnector = MediaSessionConnector(mediaSession, object : DefaultPlaybackController() {
              override fun onCommand(player: Player?, command: String?, extras: Bundle?, cb: ResultReceiver?) {
                if (command == ""disconnect"") {
                  stopForeground(true)
                  stopSelf()
                }
              }

              override fun getCommands(): Array {
                return arrayOf(""disconnect"")
              }
            })
        }
    }
</code>
</pre>

<p>I do not claim,  that this is the correct way of stopping the service completely, but this is the solution that I've came up to after struggling some hours. </p>

<p>If <code>mediaBrowser.disconnect()</code> is not executed, then <code>stopSelf()</code> won't destroy the service (by telling <em>""destroy the service""</em> I anticipate <code>onDestroy()</code> to be called).</p>

<p>Without explicitly performing <code>stopForeground()</code> and <code>stopSelf()</code> simply performing <code>mediaBrowser.disconnect()</code> wouldn't destroy the service.</p>
",1083957,,1083957,,2018-12-14 11:24:19,2018-12-14 11:24:19,,,,0,,,
Android,53874815,2,,53874556,2018-12-20 19:21:39,3290,,2,,"<p>You should checkout out the <a href=""https://github.com/googlesamples/android-vision/tree/master/visionSamples/ocr-reader"" rel=""nofollow noreferrer"">ocr-reader</a> Google sample. It's quick to run and not too difficult to get what you're looking for. What you would need to do is modify the <code>OcrDetectorProcess</code> that comes with the sample to break down the text into individual words, then you can easily calculate the boundaries and center points of each word. Here's some code to get you started:</p>

<pre><code>@Override
public void receiveDetections(Detector.Detections&lt;TextBlock&gt; detections) {
    mGraphicOverlay.clear();

    // Get all detected items.
    SparseArray&lt;TextBlock&gt; items = detections.getDetectedItems();
    for (int i = 0; i &lt; items.size(); ++i) {
        TextBlock item = items.valueAt(i);

        // Get individual lines in each item.
        List&lt;Line&gt; lines = (List&lt;Line&gt;) item.getComponents();
        for (Line line : lines) {

            // Get individual ""words"" in each line.
            List&lt;Element&gt; elements = (List&lt;Element&gt;) line.getComponents();
            for (Element e : elements) {

                // Now get the position of each element.
                Rect rect = e.getBoundingBox();
                Point[] points = e.getCornerPoints();
                int centerX = (points[0].x + points[2].x) / 2;
                int centerY = (points[0].y + points[2].y) / 2;

                // DO STUFF

            }
        }
    }
}
</code></pre>
",2694189,,,,,2018-12-20 19:21:39,,,,1,,,
Android,53887929,2,,27969384,2018-12-21 16:21:21,3291,,4,,"<p><strong>Google</strong> has provided code to implement banner ad in <code>RecycleView</code>. </p>

<p>You can get it from GITHUB : <a href=""https://github.com/googlesamples/android-ads/tree/master/advanced/BannerRecyclerViewExample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-ads/tree/master/advanced/BannerRecyclerViewExample</a></p>
",2032823,,,,,2018-12-21 16:21:21,,,,0,,,
Android,53895953,2,,53895716,2018-12-22 13:15:07,3292,,1,,"<p>Yes, you can do that and it is actually the recommended way. In order to do so, I think you should leverage the use of two other Architecture Components that were introduced with Android Jetpack, not only <code>Room</code> database: <a href=""https://developer.android.com/topic/libraries/architecture/viewmodel"" rel=""nofollow noreferrer"">ViewModel</a> and <a href=""https://developer.android.com/topic/libraries/architecture/livedata"" rel=""nofollow noreferrer"">LiveData</a>, but it is not mandatory. </p>

<p>The important thing is to add an extra layer to your app called <code>Repository</code>:</p>

<blockquote>
  <p><strong>Repository</strong> modules handle data operations. They provide a clean API so
  that the rest of the app can retrieve this data easily. They know
  where to get the data from and what API calls to make when data is
  updated. You can consider repositories to be mediators between
  different data sources, such as persistent models, web services, and
  caches.</p>
</blockquote>

<p>So basically, the suggested architecture to handle this will look something like this:</p>

<p><a href=""https://i.stack.imgur.com/VCdAM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VCdAM.png"" alt=""Android recommended architecture""></a></p>

<p>With that in mind, an example of a Repository that retrieves User data from a web service and save it to a local Room Database will look something like this:</p>

<pre><code>public class UserRepository {
    private final Webservice webservice;
    private final UserDao userDao;
    private final Executor executor;

    public UserRepository(Webservice webservice, UserDao userDao, Executor executor) {
        this.webservice = webservice;
        this.userDao = userDao;
        this.executor = executor;
    }

    public LiveData&lt;User&gt; getUser(String userId) {
        refreshUser(userId);
        // Returns a LiveData object directly from the database.
        return userDao.load(userId);
    }

    private void refreshUser(final String userId) {
        // Runs in a background thread.
        executor.execute(() -&gt; {
            // Check if user data was fetched recently.
            boolean userExists = userDao.hasUser(FRESH_TIMEOUT);
            if (!userExists) {
                // Refreshes the data.
                Response&lt;User&gt; response = webservice.getUser(userId).execute();

                // Check for errors here.

                // Updates the database. The LiveData object automatically
                // refreshes, so we don't need to do anything else here.
                userDao.save(response.body());
            }
        });
    }
}
</code></pre>

<p>Then, your ViewModel will get the User Live Data doing something like this:</p>

<pre><code>...
user = userRepo.getUser(userId);
...
</code></pre>

<p>And it will provide that LiveData to the UI layer with a public method:</p>

<pre><code>...
public LiveData&lt;User&gt; getUser() {
        return this.user;
}
...
</code></pre>

<p>Finally, from your UI layer (an Activity or Fragment) you can <strong>observe</strong> the LiveData in the ViewModel and adapt the UI accordingly.</p>

<pre><code>viewModel.getUser().observe(this, user -&gt; {
      // Update UI.
});
</code></pre>

<p>For a more complete explanation I suggest that you take a look to:</p>

<ol>
<li><a href=""https://developer.android.com/jetpack/docs/guide"" rel=""nofollow noreferrer"">Guide to app architecture in Android`s Developers website.</a></li>
<li><a href=""https://github.com/googlesamples/android-architecture-components/tree/master/BasicSample"" rel=""nofollow noreferrer"">This Github project with a basic example.</a></li>
<li><a href=""https://github.com/googlesamples/android-architecture-components/tree/master/GithubBrowserSample"" rel=""nofollow noreferrer"">This other Github project with a more complex example.</a></li>
</ol>
",10648865,,10648865,,2018-12-22 14:34:44,2018-12-22 14:34:44,,,,5,,,
Android,53914543,2,,53797110,2018-12-24 14:16:02,3294,,1,,"<p>I had similar problem. You could try to use <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">SingleLiveEvent</a></p>

<p>Or, in my, more complicated case, i had to use custom observer. It would looks like this:</p>

<pre><code>public class CustomObserver implements Observer&lt;YourType&gt; {
    private MyViewModel mViewModel;

    public CustomObserver (){}

    public void setViewModel(MyViewModel model) {
        mViewModel = model;
    }

    @Override
    public void onChanged(@Nullable YourType object) {
        mViewModel.AddTicket(id).removeObserver(this); // removing previous 
        mmViewModel.refreshTickets(); // refreshing Data/UI
        // ... do the job here
        // in your case it`s: dismissLoadingAnimation();
    } 
}
</code></pre>

<p>And using it like: </p>

<pre><code>public void addTicket(View view){

     ticketViewModel.AddTicket(id).observe(this, myCustomObserver);
}
</code></pre>
",9381524,,9381524,,2018-12-24 14:30:44,2018-12-24 14:30:44,,,,0,,,
Android,53928702,2,,53927058,2018-12-26 7:16:06,3295,,2,,"<p>This is the <code>AutoFitTextView</code> class which I pulled from Google sample. You can take a look at <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/AutoFitTextureView.java"" rel=""nofollow noreferrer"">here</a>. It aims to show <strong>camera view</strong> and config the ratio base on the physical size of device.</p>

<pre><code>public class AutoFitTextureView extends TextureView {

    private int mRatioWidth = 0;
    private int mRatioHeight = 0;

    // Some codes here...

    public void setAspectRatio(int width, int height) {
        if (width &lt; 0 || height &lt; 0) {
            throw new IllegalArgumentException(""Size cannot be negative."");
        }
        mRatioWidth = width;
        mRatioHeight = height;
        requestLayout();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int width = MeasureSpec.getSize(widthMeasureSpec);
        int height = MeasureSpec.getSize(heightMeasureSpec);
        if (0 == mRatioWidth || 0 == mRatioHeight) {
            setMeasuredDimension(width, height);
        } else {
            if (width &lt; height * mRatioWidth / mRatioHeight) {
                setMeasuredDimension(width, width * mRatioHeight / mRatioWidth);
            } else {
                setMeasuredDimension(height * mRatioWidth / mRatioHeight, height);
            }
        }
    }
}
</code></pre>

<p>There are 2 points in this class:</p>

<ol>
<li><strong>You can't ensure the ratio works properly in every device</strong>. However, we are able to choose optimized size which is already defined in this <a href=""https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java"" rel=""nofollow noreferrer"">class</a>.</li>
<li><strong>This condition is wrong:</strong> <code>if (width &lt; height * mRatioWidth / mRatioHeight)</code>. It should be <em>></em> because when width is bigger than height, we calculate and set measure dimension base on width (not height).</li>
</ol>

<p><strong>UPDATED</strong></p>

<p>If you just want every device will work properly in a particular ratio, then set hard ratio for it (for instance: 4/3)</p>

<p>You can achieve that by replacing those lines of code:</p>

<pre><code>mPreviewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture.class),
                        rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
                        maxPreviewHeight, largest);

-&gt; previewSize = Size(4, 3)
</code></pre>
",5460066,,5460066,,2018-12-26 8:26:44,2018-12-26 8:26:44,,,,10,,,
Android,53969863,2,,53968778,2018-12-29 13:11:20,3299,,1,,"<p>There is quite some code going into using those Android tutorials that is not mentioned there. I suggest using the import sample from menu from Android Studio. This one is possibly what you need to play with:</p>

<p><a href=""https://github.com/googlesamples/android-BasicGestureDetect/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-BasicGestureDetect/</a></p>

<p>I have embedded that Android Tutorial code below in BasicGestureDetectFragment.java if you use the guthyb code above. In ""moveLog"" method you can do whathever you like with the dx values. I have also put a code under this that shows you how to creat an app dragging a picture. Just add ""ic_launcher.png"" to image folder under res folder so that you can have an image and move it. I suggest coding with Corona SDK that is a lot simpler than Android.</p>

<pre><code>/*
* Copyright (C) 2013 The Android Open Source Project
*
* Licensed under the Apache License, Version 2.0 (the ""License"");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an ""AS IS"" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.example.android.basicgesturedetect;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.view.MotionEventCompat;
import android.view.GestureDetector;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;

import com.example.android.common.logger.Log;
import com.example.android.common.logger.LogFragment;

import static android.view.MotionEvent.INVALID_POINTER_ID;

public class BasicGestureDetectFragment extends Fragment{
    private int mActivePointerId = INVALID_POINTER_ID;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(true);
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        View gestureView = getActivity().findViewById(R.id.sample_output);

        gestureView.setFocusable(true);

        // BEGIN_INCLUDE(init_detector)

        // First create the GestureListener that will include all our callbacks.
        // Then create the GestureDetector, which takes that listener as an argument.
        GestureDetector.SimpleOnGestureListener gestureListener = new GestureListener();
        final GestureDetector gd = new GestureDetector(getActivity(), gestureListener);

        /* For the view where gestures will occur, create an onTouchListener that sends
         * all motion events to the gesture detector.  When the gesture detector
         * actually detects an event, it will use the callbacks you created in the
         * SimpleOnGestureListener to alert your application.
        */


        gestureView.setOnTouchListener(new View.OnTouchListener() {
            float mLastTouchX;
            float mLastTouchY;
            float mPosX;
            float mPosY;
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                gd.onTouchEvent(motionEvent);

                //**********
                final int action = MotionEventCompat.getActionMasked(motionEvent);
                switch (action) {
                    case MotionEvent.ACTION_DOWN: {
                        final int pointerIndex = MotionEventCompat.getActionIndex(motionEvent);
                        final float x = MotionEventCompat.getX(motionEvent, pointerIndex);
                        final float y = MotionEventCompat.getY(motionEvent, pointerIndex);

                        // Remember where we started (for dragging)
                        mLastTouchX = x;
                        mLastTouchY = y;
                        // Save the ID of this pointer (for dragging)
                        mActivePointerId = MotionEventCompat.getPointerId(motionEvent, 0);
                        break;
                    }
                    case MotionEvent.ACTION_MOVE: {
                        // Find the index of the active pointer and fetch its position
                        final int pointerIndex =
                                MotionEventCompat.findPointerIndex(motionEvent, mActivePointerId);

                        final float x = MotionEventCompat.getX(motionEvent, pointerIndex);
                        final float y = MotionEventCompat.getY(motionEvent, pointerIndex);

                        // Calculate the distance moved
                        final float dx = x - mLastTouchX;
                        final float dy = y - mLastTouchY;

                        mPosX += dx;
                        mPosY += dy;
                        moveLog(dx);

                        //invalidate();

                        // Remember this touch position for the next move event
                        mLastTouchX = x;
                        mLastTouchY = y;

                        break;
                    }

                    case MotionEvent.ACTION_UP: {
                        mActivePointerId = INVALID_POINTER_ID;
                        break;
                    }

                    case MotionEvent.ACTION_CANCEL: {
                        mActivePointerId = INVALID_POINTER_ID;
                        break;
                    }

                    case MotionEvent.ACTION_POINTER_UP: {

                        final int pointerIndex = MotionEventCompat.getActionIndex(motionEvent);
                        final int pointerId = MotionEventCompat.getPointerId(motionEvent, pointerIndex);

                        if (pointerId == mActivePointerId) {
                            // This was our active pointer going up. Choose a new
                            // active pointer and adjust accordingly.
                            final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
                            mLastTouchX = MotionEventCompat.getX(motionEvent, newPointerIndex);
                            mLastTouchY = MotionEventCompat.getY(motionEvent, newPointerIndex);
                            mActivePointerId = MotionEventCompat.getPointerId(motionEvent, newPointerIndex);
                        }
                        break;
                    }
                }

                //**********
                return false;
            }
        });
        // END_INCLUDE(init_detector)
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.sample_action) {
            clearLog();
        }
        return true;
    }

    public void clearLog() {
        LogFragment logFragment =  ((LogFragment) getActivity().getSupportFragmentManager()
                .findFragmentById(R.id.log_fragment));
        logFragment.getLogView().setText("""");
    }
    public void moveLog(float x) {
        //do whatever you like
    }
}
</code></pre>

<ul>
<li>Image Drag App</li>
</ul>

<p>Just start a blank app under Android Studio:
1 - Change activity_main.xml to this:</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/main""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"" &gt;

    &lt;ImageView
        android:id=""@+id/image""
        android:layout_width=""150dp""
        android:layout_height=""150dp""
        android:layout_alignParentLeft=""true""
        android:layout_alignParentTop=""true""
        android:contentDescription=""@string/app_name""
        android:src=""@drawable/ic_launcher"" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>and MainActivity.java to this. 
(Leave the package name as your own: package com.jorc.move.myapplication;)</p>

<pre><code>package com.jorc.move.myapplication;

import android.annotation.SuppressLint;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {
    private ViewGroup mainLayout;
    private ImageView image;

    private int xDelta;
    private int yDelta;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mainLayout = (RelativeLayout) findViewById(R.id.main);
        image = (ImageView) findViewById(R.id.image);

        image.setOnTouchListener(onTouchListener());
    }

    private View.OnTouchListener onTouchListener() {
        return new View.OnTouchListener() {

            @SuppressLint(""ClickableViewAccessibility"")
            @Override
            public boolean onTouch(View view, MotionEvent event) {

                final int x = (int) event.getRawX();
                final int y = (int) event.getRawY();

                switch (event.getAction() &amp; MotionEvent.ACTION_MASK) {

                    case MotionEvent.ACTION_DOWN:
                        RelativeLayout.LayoutParams lParams = (RelativeLayout.LayoutParams)
                                view.getLayoutParams();

                        xDelta = x - lParams.leftMargin;
                        yDelta = y - lParams.topMargin;
                        break;

                    case MotionEvent.ACTION_UP:
                        Toast.makeText(MainActivity.this,
                                ""thanks for new location!"", Toast.LENGTH_SHORT)
                                .show();
                        break;

                    case MotionEvent.ACTION_MOVE:
                        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view
                                .getLayoutParams();
                        layoutParams.leftMargin = x - xDelta;
                        layoutParams.topMargin = y - yDelta;
                        layoutParams.rightMargin = 0;
                        layoutParams.bottomMargin = 0;
                        view.setLayoutParams(layoutParams);
                        break;
                }
                mainLayout.invalidate();
                return true;
            }
        };
    }
}
</code></pre>
",3041972,,3041972,,2018-12-30 9:32:17,2018-12-30 9:32:17,,,,6,,,
Android,53995394,2,,51687173,2019-01-01 12:22:38,3301,,4,,"<p>From your code it seems that your recyclerview is the root element of the XML, and is missing the reference from xmlns:tools</p>

<p>Try to use another root element, as a constraint layout or even just layout as per example of <a href=""https://github.com/googlesamples/android-sunflower"" rel=""nofollow noreferrer"">google sunflowerapp</a>:</p>

<pre><code>&lt;layout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    xmlns:tools=""http://schemas.android.com/tools""&gt;

    &lt;androidx.recyclerview.widget.RecyclerView
            android:id=""@+id/plant_list""
            android:layout_width=""match_parent""
            android:layout_height=""match_parent""
            android:clipToPadding=""false""
            android:paddingLeft=""@dimen/margin_normal""
            android:paddingRight=""@dimen/margin_normal""
            app:layoutManager=""androidx.recyclerview.widget.LinearLayoutManager""
            tools:context=""com.google.samples.apps.sunflower.GardenActivity""
            tools:listitem=""@layout/list_item_plant"" /&gt;

&lt;/layout&gt;
</code></pre>
",9407524,,,,,2019-01-01 12:22:38,,,,0,,,
Android,54005982,2,,54005880,2019-01-02 12:01:09,3302,,2,,"<p>have you tried using a <code>WorkManager</code> instead of having to use the Broadcast Receivers? See details <a href=""https://developer.android.com/topic/libraries/architecture/workmanager/"" rel=""nofollow noreferrer"">here</a>. And an app demo <a href=""https://github.com/googlesamples/android-sunflower"" rel=""nofollow noreferrer"">here</a>.</p>
",6769882,,,,,2019-01-02 12:01:09,,,,3,,,
Android,54060828,2,,34288925,2019-01-06 10:57:07,3306,,1,,"<p>In <strong>androidx library</strong>, EditTextPreference has <strong>app:useSimpleSummaryProvider</strong> attribute. Using the attribute you won't need to extend any class or listen any changes on SharedPreferences. You can check the sample code at <a href=""https://github.com/googlesamples/android-preferences/blob/master/app/src/main/res/xml/dialogs.xml"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-preferences/blob/master/app/src/main/res/xml/dialogs.xml</a></p>
",10673554,,,,,2019-01-06 10:57:07,,,,1,,,
Android,54080196,2,,54028535,2019-01-07 18:56:58,3308,,1,,"<p>First of all, as you can see in <a href=""https://github.com/googlesamples/android-PictureInPicture"" rel=""nofollow noreferrer"">google sample codes</a>, it does not need to make the launch mode of PIP <code>Activity</code> singleTask. However, you need to move the launcher task to front which is not in PIP mode, in order to disabling PIP state.</p>

<p>By calling bellow snippet in the <code>onCreate()</code> method of the target <code>Activity</code> which is called from notifications, you can achieve this.</p>

<pre><code>public static void moveLauncherTaskToFront(Context context) {
    ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
    assert activityManager != null;
    final List&lt;ActivityManager.AppTask&gt; appTasks = activityManager.getAppTasks();
    for (ActivityManager.AppTask task : appTasks) {
        final Intent baseIntent = task.getTaskInfo().baseIntent;
        final Set&lt;String&gt; categories = baseIntent.getCategories();
        if (categories != null &amp;&amp; categories.contains(Intent.CATEGORY_LAUNCHER)) {
            task.moveToFront();
            return;
        }
    }
}
</code></pre>

<p>---------------------- <strong>Before</strong> ---------------------------------------------- <strong>After</strong> ------------------------</p>

<p><a href=""https://i.stack.imgur.com/xxgr7.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xxgr7.gif"" alt=""enter image description here""></a>   <a href=""https://i.stack.imgur.com/chLyQ.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/chLyQ.gif"" alt=""enter image description here""></a></p>
",1631967,,,,,2019-01-07 18:56:58,,,,1,,,
Android,54097352,2,,54080801,2019-01-08 18:06:49,3309,,1,,"<blockquote>
  <p>In other words, can I declare the allowed permissions in the manifest
  file of the instant app module (instant/AndroidManifest.xml) even
  though the base app uses many more permissions?</p>
</blockquote>

<p>Yes, you can declare permissions that only exist in your com.android.feature modules. It is done no different than in your main manifest, see an example from <a href=""https://github.com/googlesamples/android-instant-apps/blob/e4d4087004ca63fe40dcfb9b6fcbb205fe690501/analytics/feature/src/main/AndroidManifest.xml"" rel=""nofollow noreferrer"">googlesamples/android-instant-apps/analytics/feature/AndroidManifest.xml</a></p>

<p><em>note: if this feature is also a part of the installed-app via <code>implementation project(':feature')</code> in the application module's gradle, then its manifest contents will be merged, permissions included, so you don't need to duplicate those permissions.</em></p>

<p>But as your permissions diversify between your instant and installed apps, you may run into <a href=""https://stackoverflow.com/questions/45975231/google-play-console-error-non-upgradable-to-installed-app"">Google Play Console error - Non-upgradable to installed app</a> errors that you'll have to watch out for. Just make sure that your permissions, uses-feature, and uses-implied-feature (ie <a href=""https://developer.android.com/google/play/filters#manifest-filters"" rel=""nofollow noreferrer"">Play filters</a>) are synced between them so that the targetable devices for your installed app is not narrower than your instant app.</p>
",6668797,,,,,2019-01-08 18:06:49,,,,0,,,
Android,54220660,2,,54219704,2019-01-16 15:46:40,3317,,2,,"<p>You can create an app with instant experience without associated URL.
<a href=""https://github.com/googlesamples/android-instant-apps/tree/master/urlless"" rel=""nofollow noreferrer"">This sample</a>.</p>

<p>For an app with instant experience you no longer need the <code>com.android.instantapp</code> plugin unless you want to use dynamic feature modules at this point.</p>

<p>When onDemand modules leave beta, you can start using the <code>com.android.dynamic-feature</code> plugin in combination with the <a href=""https://developer.android.com/guide/app-bundle/playcore"" rel=""nofollow noreferrer"">PlayCore API</a> to download a module.</p>

<p>Until then you'll have to use the <code>com.android.feature</code> and <code>com.android.instantapp</code> plugin to download multiple feature modules.</p>
",422060,,,,,2019-01-16 15:46:40,,,,5,,,
Android,54261334,2,,52590101,2019-01-18 20:56:51,3319,,1,,"<p>Even though <a href=""https://developer.android.com/training/testing/unit-testing/local-unit-tests"" rel=""nofollow noreferrer"">the documentation</a> says </p>

<blockquote>
  <p>In your app's top-level build.gradle file, specify the following libraries as dependencies:</p>
</blockquote>

<p>... I haven't found an example that works that way. </p>

<p>In fact, <a href=""https://github.com/googlesamples/android-testing/blob/master/unit/BasicUnitAndroidTest/build.gradle"" rel=""nofollow noreferrer"">this GoogleSamples Android Unit Test example</a> specifies: </p>

<blockquote>
  <p>// NOTE: Do not place your application dependencies here; they belong in the individual module build.gradle files</p>
</blockquote>

<p>So, move that line to the <strong>module</strong> build.gradle, <strong>not the top-level</strong> build.gradle</p>
",1703677,,,,,2019-01-18 20:56:51,,,,0,,,
Android,54409448,2,,54194629,2019-01-28 20:03:37,3329,,1,,"<p>I have been working with GeoFence for such a long time, I had the same question and I got the answer by myself after trying different solutions, So basically, GeoFence only get triggers if any app in the phone is fetching the location for some x duration. If you test the GeoFence sample app provided by google then you can see that the app works only when you open the Google maps application, its because Google Maps is the only app in the device that requests locations passively.</p>

<p>For Prove you can clone GeoFence sample and the LocationUpdateForGroundService sample from this below link <a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location</a> Run both of them GeoFence and LocationUpdateForGroundService at the same time, You will notice by changing the lat and long from the emulator that now you dont need to open Google maps any more because now there is another app which is requesting location.</p>

<p>So do create a foreground service in the GeoFence application and use Fuse Location Client to request location updates for some x duration.</p>
",10980981,,,,,2019-01-28 20:03:37,,,,2,,,
Android,54465349,2,,54465215,2019-01-31 16:44:09,3332,,1,,"<p>You are missing the line</p>

<pre><code>apply plugin: 'com.android.application'
</code></pre>

<p>at the very beginning of your app-level <code>build.gradle</code> file.</p>

<p><a href=""https://developer.android.com/studio/build/#module-level"" rel=""nofollow noreferrer"">More info</a></p>

<p>An <a href=""https://github.com/googlesamples/android-AppShortcuts/blob/master/app/build.gradle"" rel=""nofollow noreferrer"">example on github</a></p>

<p>You should also have this dependency in the project-level <code>build.gradle</code>:</p>

<pre><code>dependencies {
    ...
    classpath 'com.android.tools.build:gradle:3.3.0'
    ...
}
</code></pre>

<p>UPDATE #1</p>

<p>You must add the google repository:</p>

<pre><code>allprojects {
    repositories {
        google()
        jcenter()
    }
}
</code></pre>
",6271180,,6271180,,2019-02-05 15:50:36,2019-02-05 15:50:36,,,,12,,,
Android,54486846,2,,24258574,2019-02-01 20:38:11,3333,,2,,"<p>This question is quite old however it comes first when you search for ""Best way to reorder list items in Android"" and it remained without an answer.</p>

<p>The OP asked for <code>ListView</code> as at the time of the question they were the most commonly used. Today, it is better to use the <code>RecyclerView</code> as it offers many advantages over the <code>ListView</code>. One of these advantages is what we need to implement the reordering, ie. <code>ItemTouchHelper</code>.</p>

<p>To see how the <code>RecyclerView</code> is implemented you can have a look at this example :
<a href=""https://github.com/googlesamples/android-RecyclerView"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-RecyclerView</a></p>

<p>The part to implement the reordering is to attach to the <code>RecyclerView</code> as follow:</p>

<pre><code>mRecyclerView = (RecyclerView) rootView.findViewById(R.id.recyclerView);

ItemTouchHelper touchHelper = new ItemTouchHelper(new ItemTouchHelper.Callback() {
            public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {

                Collections.swap(dataList, viewHolder.getAdapterPosition(), target.getAdapterPosition());
                mAdapter.notifyItemMoved(viewHolder.getAdapterPosition(), target.getAdapterPosition());
                return true;
            }

            @Override
            public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
                // no-op
            }

            @Override
            public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
                return makeFlag(ItemTouchHelper.ACTION_STATE_DRAG,
                        ItemTouchHelper.DOWN | ItemTouchHelper.UP | ItemTouchHelper.START | ItemTouchHelper.END);
            }
});
touchHelper.attachToRecyclerView(mRecyclerView);
</code></pre>
",1382540,,,,,2019-02-01 20:38:11,,,,1,,,
Android,54508853,2,,54508117,2019-02-04 0:10:17,3335,,1,,"<p>I think it depends on project size. Also in different companies team use different approaches. </p>

<blockquote>
  <p>I prefer to use in a small project <a href=""https://github.com/googlesamples/android-architecture-components"" rel=""nofollow noreferrer"">second type</a> of package managing.</p>
</blockquote>

<p>If you want to reuse ModelView component, just keep them in feature packages. And maybe with this type:</p>

<pre><code>/db
    feature1/
    feature2/
/model
    feature1/
    feature2/
/ui
/persistence
    feature1/
    feature2/
</code></pre>
",7750432,,7750432,,2019-02-05 20:14:00,2019-02-05 20:14:00,,,,0,,,
Android,54541901,2,,54541118,2019-02-05 19:42:47,3337,,1,,"<p>If you try the official video recording sample, <a href=""https://github.com/googlesamples/android-Camera2Video"" rel=""nofollow noreferrer"">Camera2Video</a>, does it also record poor video?  </p>

<p>If so, there's likely a device bug that causes it to ignore the configured video quality.  If Camera2Video works OK, then see what it does differently from your own app.</p>
",1344825,,,,,2019-02-05 19:42:47,,,,1,,,
Android,54562915,2,,54562648,2019-02-06 21:37:01,3338,,1,,"<p>You may check <a href=""https://github.com/googlesamples/android-play-location/blob/master/LocationUpdates/app/src/main/java/com/google/android/gms/location/sample/locationupdates/MainActivity.java"" rel=""nofollow noreferrer"">here</a>. It is <strong><em>GitHub</em></strong> from <strong><em>Google Devs</em></strong> and they show how they handle location. Also, you can find other examples <a href=""https://github.com/googlesamples/android-play-location"" rel=""nofollow noreferrer"">there</a></p>
",7750432,,7750432,,2019-02-06 21:42:31,2019-02-06 21:42:31,,,,0,,,
Android,54577333,2,,53849023,2019-02-07 15:59:16,3339,,3,,"<p>Google has created <a href=""https://github.com/googlesamples/android-credentials/blob/master/sms-verification/bin/sms_retriever_hash_v9.sh"" rel=""nofollow noreferrer"">a script</a> to wrap the necessary CLI commands to generate the app hash.</p>

<p>Usage is: </p>

<pre><code>./sms_retriever_hash_v9.sh --package ""com.your.packagename"" --keystore /path/to/your.keystore
</code></pre>

<p>Example output:</p>

<pre><code>$ ./sms_retriever_hash_v9.sh --package ""com.your.packagename"" --keystore debug.keystore

package name: com.your.packagename
keystore file: debug.keystore

File debug.keystore is found.

Enter keystore password:  


certificate in hex: 3082030d308201f5a003020102020475125fad300d06092a864886f70d01010b05003037310b30090603550406130255533110300e060355040a1307416e64726f6964311630140603550403130d416e64726f6964204465627567301e170d3135313132333231323734355a170d3435313131353231323734355a3037310b30090603550406130255533110300e060355040a1307416e64726f6964311630140603550403130d416e64726f696420446562756730820122300d06092a864886f70d01010105000382010f003082010a0282010100c7604e3b464d0c3f1b556aecfbfcd60b35bb8274909c3eac8825d909b47d44ad60f3dcbd3bdb270a91ed09a8f4c7d39a7da51519116ab2085fdc5761ab472c53860e71779dbf1ebdb5ce2d0140197ac9bcc6ab0e249440be09e233885b110a0fce4b04c903b7741cbc31207ceeb55f71f02b59c2771986238972610cf33e472c08d3b67147117f356617357300dac2655cfa3c056fcc12aa5837a22f9af82164008aae32564db25c2801a45cb66bc087fa8710d14f6448446bc43fb5938c30306959eb5e03dee3dfaf1c83d684338c213208b94a6ea2aa937ba00dd800cbe5b6e30a5a3752b95e5948b20eb6a7051768395e498d12cf2e507458e14e9433d7d70203010001a321301f301d0603551d0e04160414efd057879cfb3ed6c9122caa5d26a6da5f59aadd300d06092a864886f70d01010b0500038201010074004b26417b91333a0503e505030784172a5ac5ffa68d02d42f5991fa637365a3c4833707d062063210da0c16f32be730081420b4ec9563475a57f02f2bf0364cbdc01154e9921edd5140bb4218d7ec6fd3f062d1acacc7cc005c64b7f7e362601fea2a7571c395ecf071a0f10a1bf3c44aa874eb61375e11308ec318c81f4bbd701de2d2fcbbbf764507074da570636f740b379652afe386eb48f69407074b096f3ce03e1d7ac50d9b79169132b01d75389959255b530549a3179798503c83e153e6feb78a89ef80bfce197e23314740f1d55a0db140eb2a44d3acce82d41503b180b6e8ed28f2411f750f9308c72cd8867486ad64af593bc1f1fff5b30510

SHA-256 output in hex: 20e861ecc8550c1e608efc3006f82278025d5e3d7169b40c72b8c3dd0aa9cfd9

First 8 bytes encoded by base64: IOhh7MhVDB5

SMS Retriever hash code:  IOhh7MhVDB5
</code></pre>

<p>Save <a href=""https://raw.githubusercontent.com/googlesamples/android-credentials/master/sms-verification/bin/sms_retriever_hash_v9.sh"" rel=""nofollow noreferrer"">the raw script file</a> locally then run <code>chmod u+x sms_retriever_hash_v9.sh</code> to make it executable.</p>

<p>In case the link to the script disappears, here's the script contents:</p>

<pre><code>#!/bin/sh

# ------------------------------------------------------------------
# [Author] Title
#          Description
# ------------------------------------------------------------------

VERSION=0.1.0
SUBJECT=sms-retriever-hash-generator
USAGE=""Usage: sms_retriever_hash_v9.sh --package package_name --keystore keystore_file""

# --- Options processing -------------------------------------------
if [ $# == 0 ] ; then
    echo $USAGE
    exit 1;
fi

# USE: apkblacklister.sh --source source.apk --target target.apk more files to scan

if [[ ""$1"" != ""--package"" ]]; then
  echo ""Error: expected --package as first parameter""
  exit 1
fi
pkg=""$2""
shift 2

if [[ ""$1"" != ""--keystore"" ]]; then
  echo ""Error: expected --keystore as third parameter""
  exit 1
fi
keystore=""$2""
shift 2



echo
echo ""package name: $pkg""
echo ""keystore file: $keystore""
echo 

if [ -e ""$keystore"" ]
then
  echo ""File $keystore is found.""
  echo
else
  echo ""File $keystore is not found.""
  echo
  exit 0;
fi

# Retrieve certificate from keystore file. Decoded with Base64 and converted to hex
cert=$(keytool -list -rfc -keystore $keystore | sed  -e '1,/BEGIN/d' | sed -e '/END/,$d' | tr -d ' \n' | base64 --decode | xxd -p | tr -d ' \n')

echo
echo ""certificate in hex: $cert""


# concatenate input
input=""$pkg $cert""

# 256 bits = 32 bytes = 64 hex chars
output=$(printf ""$input"" | shasum -a 256 | cut -c1-64)
echo
echo ""SHA-256 output in hex: $output""

# take the beginning 72 bits (= 9 bytes = 18 hex chars)
output=$(printf $output | cut -c1-18)

# encode sha256sum output by base64 (11 chars)
base64output=$(printf $output | xxd -r -p | base64 | cut -c1-11)
echo
echo ""First 8 bytes encoded by base64: $base64output""
echo
echo ""SMS Retriever hash code:  $base64output""
echo
</code></pre>
",777265,,777265,,2019-02-08 9:14:21,2019-02-08 9:14:21,,,,1,,,
Android,54605373,2,,42926624,2019-02-09 10:34:50,3340,,3,,"<p>The issue could be due to <code>instant app</code> being enabled </p>

<p>Solution : 
Manually add <strong>google_app_id</strong> to the <strong>strings.xml</strong> file — <a href=""https://github.com/googlesamples/android-instant-apps/issues/44#issuecomment-378103468"" rel=""nofollow noreferrer"">as told here</a></p>

<p><a href=""https://i.stack.imgur.com/Ooce5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Ooce5.png"" alt=""enter image description here""></a></p>

<p>Update : In case app crashes without any warning or error, try this (maven):</p>

<p>Go to project level <code>build.gradle</code> &amp; check if it looks exactly like this:</p>

<pre><code>allprojects {
    repositories {
        jcenter()
        maven {
            url ""https://maven.google.com""
        }
    }
}
</code></pre>

<p>and the code suddenly works and when you'll look at other answers you will find the same.</p>
",5806017,,5806017,,2019-02-17 7:31:11,2019-02-17 7:31:11,,,,1,,,
Android,54759742,2,,54759403,2019-02-19 6:00:59,3350,,4,,"<p>Your question isn't about a problem and is not detailed. But I can give you a great Media Player from google samples named UAMP(Universal Android Media Player) with handle all about android media player. <a href=""https://github.com/googlesamples/android-UniversalMusicPlayer"" rel=""nofollow noreferrer"">Link</a> </p>

<p>UAMP uses a MediaMetadataCompat to update the song metadata like below code segment. </p>

<pre><code>fun MediaMetadataCompat.Builder.from(jsonMusic: JsonMusic): MediaMetadataCompat.Builder {
// The duration from the JSON is given in seconds, but the rest of the code works in
// milliseconds. Here's where we convert to the proper units.
val durationMs = TimeUnit.SECONDS.toMillis(jsonMusic.duration)

id = jsonMusic.id
title = jsonMusic.title
artist = jsonMusic.artist
album = jsonMusic.album
duration = durationMs
genre = jsonMusic.genre
mediaUri = jsonMusic.source
albumArtUri = jsonMusic.image
trackNumber = jsonMusic.trackNumber
trackCount = jsonMusic.totalTrackCount
flag = MediaItem.FLAG_PLAYABLE

// To make things easier for *displaying* these, set the display properties as well.
displayTitle = jsonMusic.title
displaySubtitle = jsonMusic.artist
displayDescription = jsonMusic.album
displayIconUri = jsonMusic.image

// Add downloadStatus to force the creation of an ""extras"" bundle in the resulting
// MediaMetadataCompat object. This is needed to send accurate metadata to the
// media session during updates.
downloadStatus = STATUS_NOT_DOWNLOADED

// Allow it to be used in the typical builder style.
return this
</code></pre>

<p>}</p>

<p>By this component, you can update song data in the notification, lock screen, and home screen.</p>
",4874842,,4874842,,2019-02-19 6:21:46,2019-02-19 6:21:46,,,,0,,,
Android,54779808,2,,54779594,2019-02-20 6:04:43,3351,,1,,"<p>It would be easier to generate hash through this code.</p>

<p>Just call below line and print your signature.</p>

<p><code>ArrayList&lt;String&gt; sigList = (new AppSignatureHelper(this)).getAppSignatures()</code></p>

<p>Code Reference: <a href=""https://github.com/googlesamples/android-credentials/blob/master/sms-verification/android/app/src/main/java/com/google/samples/smartlock/sms_verify/AppSignatureHelper.java"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-credentials/blob/master/sms-verification/android/app/src/main/java/com/google/samples/smartlock/sms_verify/AppSignatureHelper.java</a></p>

<p><strong>Update:</strong></p>

<p>Hash code for debug and release version will be different.
Make sure you are using release specific app hash code for otp message with required format.</p>

<p>AppSignatureHelper will provide hash code using which apk is signed. Build release apk and print hash code in log to get release specific hash code.</p>

<p><strong>Update:</strong></p>

<p>Another approach of generating through command mentioned in : <a href=""https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string"" rel=""nofollow noreferrer"">https://developers.google.com/identity/sms-retriever/verify#computing_your_apps_hash_string</a></p>

<p>However if you are using windows, it may not work as you it dont have binary (command) like xxd or tr.
in that case, you have to download those exe from somewhere else.</p>

<p>If you are using git then you can find them at ""C:\Program Files\Git\usr\bin\"", in that case follow this steps.</p>

<ol>
<li>Add path ""C:\Program Files\Git\usr\bin\"" in your environment variables.</li>
<li>Restart your command prompt. so xxd and tr starts working in prompt.</li>
<li>apply mentioned command in link. </li>
</ol>

<p><code>keytool -exportcert -alias MY_ANDROID_KEY -keystore MY_PRODUCTION_KEY | xxd -p | tr -d ""[:space:]"" | echo -n MY_PACKAGE_NAME</code>cat<code>| sha256sum | tr -d ""[:space:]-"" | xxd -r -p | base64 | cut -c1-11</code></p>

<p>Where in command</p>

<ul>
<li>replace MY_ANDROID_KEY with your key alias</li>
<li>replace MY_PRODUCTION_KEY with your keystore path (some xyz.jks) </li>
<li><p>replace MY_PACKAGE_NAME with your package name</p>

<ol start=""4"">
<li>you will get 11 character long hash key. Hurray.</li>
</ol></li>
</ul>

<p>Here, if you are facing error like <code>tr: write error: Illegal seek</code>,
you can call cammand up to tr like -></p>

<p><code>keytool -exportcert -alias MY_ANDROID_KEY -keystore MY_PRODUCTION_KEY | xxd -p | tr -d ""[:space:]""</code></p>

<p>in this case you will get around 1800+ character long signature string. 
pass package and signature string to hash method of AppSignatureHelper, it will return your key.</p>

<p>(Here, If at the end you are using <code>AppSignatureHelper</code>, i suggest to go for that first approach only)</p>
",4753486,,4753486,,2019-02-21 5:51:36,2019-02-21 5:51:36,,,,10,,,
Android,54880171,2,,53865978,2019-02-26 7:14:35,3357,,2,,"<p>Follow these steps to get the key for production:</p>

<ol>
<li>Go to the <strong>Build</strong> option.</li>
<li>In the options, choose <strong>Select Build Variant</strong>.</li>
<li>Then in the left corner, a dialog will open, from there Change Build Variant from <strong>debug</strong> to <strong>release</strong>.</li>
<li>Click on run, then this dialog will open:
<img src=""https://i.stack.imgur.com/OIOw5.png"" alt=""Then this dialog will open(point 4 pic.)""></li>
<li>Click on <strong>Run</strong>, next click on <strong>Continue Anyway</strong>, then click on <strong>Yes</strong> then in the dialog <img src=""https://i.stack.imgur.com/HReo2.png"" alt=""In this dialog Click on the **+** in left bottom"">.</li>
<li>Then fill these details: <img src=""https://i.stack.imgur.com/Wy9oe.png"" alt=""Then fill these details""></li>
<li>Now go to <strong>Build Types</strong> and follow this image: <img src=""https://i.stack.imgur.com/WVLXi.png"" alt=""Then go to build types and follow the image""></li>
<li>And click <strong>ok</strong>.</li>
</ol>

<p>Now when you run the commands to get the hash through <a href=""https://github.com/googlesamples/android-credentials/blob/master/sms-verification/android/app/src/main/java/com/google/samples/smartlock/sms_verify/AppSignatureHelper.java"" rel=""nofollow noreferrer"">AppSignatureHelper Class</a>, that key will be your production key.</p>
",7440113,,7117697,,2019-02-26 13:47:18,2019-02-26 13:47:18,,,,0,,,
Android,54900398,2,,54900268,2019-02-27 7:44:10,3358,,2,,"<p>This is the Android <a href=""https://codelabs.developers.google.com/codelabs/android-lifecycles/#0"" rel=""nofollow noreferrer"">lifecycle-aware components codelab</a>. It will do exatelly what you ask for. Here is the <a href=""https://developer.android.com/topic/libraries/architecture/index.html"" rel=""nofollow noreferrer"">Architecture components</a> part of the Android Jetpack and it is a set of Android libraries that help you structure your app in a way that is robust, testable, and maintainable.</p>

<p>Here is also the <a href=""https://github.com/googlesamples/android-sunflower"" rel=""nofollow noreferrer"">android-sunflower</a> A gardening app illustrating Android development best practices with Android Jetpack.</p>
",538837,,538837,,2019-02-27 7:46:24,2019-02-27 7:46:24,,,,1,,,
Android,54980053,2,,54967251,2019-03-04 9:18:20,3363,,2,,"<ol>
<li><p>Download opencv Android package (e.g. <a href=""https://netix.dl.sourceforge.net/project/opencvlibrary/4.0.1/opencv-4.0.1-android-sdk.zip"" rel=""nofollow noreferrer"">opencv-4.0.1-android-sdk</a>) and unpack to, say, <code>~/android</code>.</p></li>
<li><p>To the bottom of <a href=""https://github.com/googlesamples/android-ndk/blob/master/endless-tunnel/app/src/main/cpp/CMakeLists.txt"" rel=""nofollow noreferrer""><strong>CMakeLists.txt</strong></a>, add</p>

<pre><code>set( OpenCV_DIR ""~/android/OpenCV-android-sdk/sdk/native/jni"" )
find_package( OpenCV REQUIRED )
target_link_libraries(game opencv_java)

get_target_property(__src opencv_java IMPORTED_LOCATION_RELEASE )
add_custom_command(TARGET game POST_BUILD COMMAND
  ${CMAKE_COMMAND} -E copy ${__src} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
)
</code></pre></li>
</ol>

<p>The package will define the following variables:</p>

<p><strong>OpenCV_LIBS                     :</strong> The list of all imported targets for OpenCV modules.</p>

<p><strong>OpenCV_INCLUDE_DIRS             :</strong> The list of OpenCV include directories. With CMake >= 2.8.11 you don't even need to write </p>

<pre><code>include_directories(${OpenCV_INCLUDE_DIRS})
</code></pre>

<p>This version of prebuilt OpenCV SDK defines also</p>

<p><strong>OpenCV_VERSION                  :</strong> The version of this OpenCV build: <strong>""4.0.1""</strong></p>

<p><strong>OpenCV_ANDROID_NATIVE_API_LEVEL :</strong> Minimum required level of Android API: <strong>""16""</strong>.</p>

<p>This means that your app manifest needs <strong>minSdkVersion</strong> 16 or higher (the original sample needs a fix <a href=""https://github.com/googlesamples/android-ndk/blob/master/endless-tunnel/app/build.gradle#L24"" rel=""nofollow noreferrer"">here</a>).</p>

<p>Instead of the shared library that contains all OpenCV functionality, you can use static libraries (<strong>opencv_imgcodecs</strong>, <strong>opencv_stitching</strong>, <em>et al</em>). These static libraries assume the default <strong>ANDROID_STL=c++_static</strong>.</p>

<p>For best results, use NDK <strong>r.18</strong> or <strong>r.19</strong>.</p>

<p><em>I have opened a <a href=""https://github.com/android-ndk/ndk/issues/928"" rel=""nofollow noreferrer"">feature request</a> for Android NDK to provide better support for imported shared libraries</em>.</p>
",192373,,192373,,2019-03-10 16:24:21,2019-03-10 16:24:21,,,,10,,,
Android,55000999,2,,54969073,2019-03-05 10:47:13,3364,,1,,"<p>This is the expected behaviour. If you want to avoid this you must set <code>message = """"</code> and keep an empty check before showing the toast. </p>

<p>A better way to use it is something like Event Wrapper or <a href=""https://github.com/googlesamples/android-architecture/blob/dev-todo-mvvm-live/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/SingleLiveEvent.java"" rel=""nofollow noreferrer"">SingleLiveEvent</a></p>

<p>Highly recommend you to read this <a href=""https://medium.com/androiddevelopers/livedata-with-snackbar-navigation-and-other-events-the-singleliveevent-case-ac2622673150"" rel=""nofollow noreferrer"">article</a>. This explains why you are facing this and what are your options in detail.</p>
",5285588,,,,,2019-03-05 10:47:13,,,,0,,,
Android,55024255,2,,54949978,2019-03-06 13:27:43,3366,,1,,"<p>You need to replace:</p>

<pre><code>geofencePendingIntent = PendingIntent.getService(context, 0, intent, PendingIntent.
            FLAG_UPDATE_CURRENT); 
</code></pre>

<p>with </p>

<pre><code>Intent intent = new Intent(this, GeofenceBroadcastReceiver.class); 
mGeofencePendingIntent = PendingIntent.getBroadcast(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
</code></pre>

<p>For support Android 8, you should to use BroadcastReceiver for receiving geofence intent, since to <a href=""https://developer.android.com/about/versions/oreo/background#services"" rel=""nofollow noreferrer"">Background Execution Limits</a> (service can't be run in background)</p>

<p>see for more details: <a href=""https://github.com/googlesamples/android-play-location/commit/5f83047c8a462d7c619f6275b624e219b4622322"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/commit/5f83047c8a462d7c619f6275b624e219b4622322</a></p>

<p>google sample how to use geofence: <a href=""https://github.com/googlesamples/android-play-location/tree/master/Geofencing"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/tree/master/Geofencing</a></p>
",2715054,,2715054,,2019-03-06 13:50:39,2019-03-06 13:50:39,,,,2,,,
Android,55070194,2,,55070009,2019-03-08 19:58:21,3368,,1,,"<p>Take a look at the <a href=""https://github.com/googlesamples/android-Camera2Basic/tree/master/Application/src/main/java/com/example/android/camera2basic"" rel=""nofollow noreferrer"">Camera2Basic</a> sample to help out with the general flow of things.</p>

<p>In this particular case - a capture session can have multiple target output Surfaces (one for preview, one for still capture JPEGs, for example).  Each capture request can target any subset of those outputs (so the repeating request targets the preview output, while still captures target the JPEG output, etc).</p>

<p>So your capture request needs to have one or more Surfaces added as targets, and the Surfaces have to be one of the ones included in the session creation.</p>

<p>Since you only have one Surface in your session, just add</p>

<pre><code> captureRequestBuilder.addTarget(surface)
</code></pre>

<p>before the setRepeatingRequest call.</p>

<p>If you want to get a Java ByteBuffer of YUV data, you can add an <a href=""https://developer.android.com/reference/kotlin/android/media/ImageReader?hl=en"" rel=""nofollow noreferrer"">ImageReader</a> as an output target as well, for both the session and the capture request.
Note that only the YUV_420_888 flexible YUV format is guaranteed to be supported, so you'll have to manually adjust it if you really need something in an NV21 layout (on any given device, YUV_420_888 may be NV21 under the hood, but there's no guarantee about that).</p>
",1344825,,,,,2019-03-08 19:58:21,,,,2,,,
Android,55095429,2,,45717215,2019-03-11 4:55:36,3370,,1,,"<p>Migrating your parent <code>ViewGroup</code> (whatever is <code>ConstraintLayout</code>, <code>RelativeLayout</code> or anything else) to <code>MotionLayout</code> you can achieve this using <a href=""https://developer.android.com/reference/android/support/constraint/motion/MotionLayout.html#setprogress"" rel=""nofollow noreferrer"">MotionLayout.progress</a> (<code>setProgress(float)</code>) and <a href=""https://developer.android.com/reference/android/support/constraint/motion/MotionLayout.html#loadlayoutdescription"" rel=""nofollow noreferrer"">loadLayoutDescription</a> which give you power to process manually progress of a scene transition described in a motion scene.</p>

<p>Please see examples <a href=""https://github.com/googlesamples/android-ConstraintLayoutExamples/tree/master/motionlayout"" rel=""nofollow noreferrer"">here.</a></p>
",3278271,,3278271,,2019-03-11 5:21:28,2019-03-11 5:21:28,,,,0,,,
Android,55136950,2,,55136846,2019-03-13 8:01:50,3372,,1,,"<pre><code>@Override
public void onCreate() {
    mPrefs = PreferenceManager.getDefaultSharedPreferences(this);
    NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);

    // Android O requires a Notification Channel.
    if (Build.VERSION.SDK_INT &gt;= 26) {
        CharSequence name = getString(R.string.app_name);
        // Create the channel for the notification
        @SuppressLint(""WrongConstant"")
        NotificationChannel mChannel = new NotificationChannel(CHANNEL_ID, name, NotificationManager.IMPORTANCE_LOW);
        // Set the Notification Channel for the Notification Manager.
        if (notificationManager != null) {
            notificationManager.createNotificationChannel(mChannel);
        }

        startForegroundService(new Intent(ForegroundService.this, ForegroundService.class));
        //We only need to call this for SDK 26+, since startForeground always has to be called after startForegroundService.
        startForeground(NOTIFICATION_ID, getNotification());
    }
    else {
        startService(new Intent(ForegroundService.this, ForegroundService.class));
    }
</code></pre>

<p>Also, this project is a good base to start with for implementing a ForegroundService:</p>

<p><a href=""https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesForegroundService"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-play-location/tree/master/LocationUpdatesForegroundService</a></p>
",7434090,,7434090,,2019-03-13 8:11:54,2019-03-13 8:11:54,,,,8,,,
Android,55142106,2,,55118369,2019-03-13 12:36:37,3373,,1,,"<p>@hiren patel .. Have a look the example .. its working fine. </p>

<p><a href=""https://github.com/googlesamples/android-JobScheduler"" rel=""nofollow noreferrer"">Job Scheduler in Background</a></p>

<p>i think you need to schedule the scheduler before you kill or destroy..</p>

<ul>
<li>job scheduler having limitations</li>
<li>it wont work in offline.</li>
<li>its having time period 15 min, after 15 mins it automatically stops the service and we have to start or reschedule the job again..</li>
</ul>

<p>thank you..</p>
",5755569,,,,,2019-03-13 12:36:37,,,,1,,,
Android,55241966,2,,52801616,2019-03-19 13:14:52,3379,,1,,"<p>Having separate backstacks or not is a decision based on user experience but if you do want multiple backstacks for bottomnavigation then follow the link for correct approach by androidx developers.
<a href=""https://github.com/googlesamples/android-architecture-components/tree/master/NavigationAdvancedSample"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-architecture-components/tree/master/NavigationAdvancedSample</a></p>
",6744813,,,,,2019-03-19 13:14:52,,,,0,,,
Android,55248702,2,,55248213,2019-03-19 19:29:55,3379,,1,,"<p>I disagree with people who said that dagger is just library.</p>

<p><strong><a href=""https://en.wikipedia.org/wiki/Dependency_injection"" rel=""nofollow noreferrer"">Dependency Injection</a></strong> : Is a concept and a way to code, and dagger make it more easy to take advantage of dependency injection with annotations.</p>

<p>Also the <a href=""https://github.com/googlesamples/android-sunflower"" rel=""nofollow noreferrer"">Sun-Flower</a> project from google didn't use dagger while using MVVM pattern.</p>
",11161537,,,,,2019-03-19 19:29:55,,,,0,,,
Android,55269769,2,,55269522,2019-03-20 20:37:39,3380,,1,,"<p>If you want to rotate your activity you should remove <strong>android:screenOrientation=""portrait""</strong> and add <strong>android:configChanges=""orientation|keyboardHidden""</strong></p>

<pre><code>&lt;activity
    android:name="".activity.MainActivity""
    android:configChanges=""orientation|keyboardHidden""
    android:windowSoftInputMode=""stateUnspecified|adjustResize""&gt;&lt;/activity&gt;
</code></pre>

<p>Then override <strong>onConfigurationChanged()</strong> method in your activity to get callback when application is rotated</p>

<pre><code>class MainActivity extends AppCompatActivity {
    ...

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);

        // Checks the orientation of the screen
        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            // App is rotated to landscape
        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
            // App is rotated to portrait
        }
    }
}
</code></pre>

<p>In that case activity won't be re-created and you should handle updating UI components by yourself.
Take a look at <a href=""https://developer.android.com/guide/topics/resources/runtime-changes"" rel=""nofollow noreferrer"">original documentation</a> to get more details ;)</p>

<p><strong>Updated:</strong></p>

<p>If you want to hold Activity in portrait mode and detect just rotation look at:</p>

<ul>
<li><p><a href=""https://developer.android.com/guide/topics/sensors/sensors_motion"" rel=""nofollow noreferrer"">https://developer.android.com/guide/topics/sensors/sensors_motion</a></p></li>
<li><p><a href=""https://github.com/googlesamples/android-AccelerometerPlay/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-AccelerometerPlay/</a> - example which probably would be useful for your case</p></li>
<li><p><a href=""https://developer.android.com/guide/topics/sensors/sensors_position"" rel=""nofollow noreferrer"">https://developer.android.com/guide/topics/sensors/sensors_position</a></p></li>
</ul>
",3816129,,3816129,,2019-03-20 21:01:01,2019-03-20 21:01:01,,,,3,,,
Android,55294753,2,,55279965,2019-03-22 7:27:35,3381,,1,,"<p>If your other device is a bluetooth module, in your case Arduino, right?</p>

<p>If so, check this tutorial describing connection between Android device and HC05 module. 
<a href=""http://arduino-er.blogspot.com/2016/04/android-bluetoothchat-example-link-with.html"" rel=""nofollow noreferrer"">bthc-05 to android tutorial</a></p>

<p>Also, based on this official sample: <a href=""https://github.com/googlesamples/android-BluetoothChat"" rel=""nofollow noreferrer"">google sample - bluetooth chat</a></p>

<p>Alternatively, you could also have the following method that makes your device discoverable. And install it on two phones. Then you should be able to discover the phones on each other atleast.</p>

<pre><code>protected void makeDiscoverable(){
    // Make local device discoverable
    Intent discoverableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
    discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, DISCOVERABLE_DURATION);
    startActivityForResult(discoverableIntent, DISCOVERABLE_BT_REQUEST_CODE);
}
</code></pre>

<p>Maybe these help!</p>
",3360555,,,,,2019-03-22 7:27:35,,,,0,,,
Android,55414507,2,,55372259,2019-03-29 9:42:44,3388,,2,,"<p>You have to use <a href=""https://github.com/googlesamples/android-viewpager2/blob/master/app/src/main/java/com/example/androidx/viewpager2/TabLayoutMediator.java"" rel=""nofollow noreferrer"">this</a> <code>TabLayoutMediator</code> that mimics <code>tabLayout.setupWithViewPager()</code> and sets up the <code>ViewPager2</code> with <code>Tablayout</code>. Otherwise you will have to write your own adapter that will combine both parties. </p>
",557179,,,,,2019-03-29 9:42:44,,,,1,,,
Android,55467587,2,,55467059,2019-04-02 5:34:59,3392,,2,,"<p>Previously developers used to to build multiple APKs to target different API versions &amp; device types.</p>

<p>But with Android App Bundle I just upload the single artifact with all of our application resources and the tooling takes care of what needs to be built and delivered to the app user base. I was able to reduce app size by nearly between 60% to 70%.</p>

<p>Nowadays many famous apps like Airbnb , LinkedIn, Twitter use dynamic app delivery for its users. </p>

<p><a href=""https://joebirch.co/2018/08/23/exploring-the-android-app-bundle/"" rel=""nofollow noreferrer"">Have a look at this amazing post on Dynamic App Delivery by Joe Birch</a></p>

<p><a href=""https://developer.android.com/guide/app-bundle"" rel=""nofollow noreferrer"">Android developer guide on Dynamic App Delivery</a></p>

<p><a href=""https://www.raywenderlich.com/9043-android-app-bundles-getting-started"" rel=""nofollow noreferrer"">How to use App Bundles to reduce the size of the app </a></p>

<p><a href=""https://github.com/googlesamples/android-dynamic-features"" rel=""nofollow noreferrer"">Google Samples Android Dynamic Feature Modules</a></p>
",9652613,,9652613,,2019-04-02 6:55:42,2019-04-02 6:55:42,,,,2,,,
Android,55478586,2,,39491655,2019-04-02 15:36:51,3393,,1,,"<p>With the release of the architecture components you should probably have a look at the <a href=""https://developer.android.com/topic/libraries/architecture/viewmodel"" rel=""nofollow noreferrer"">viewmodel architecture component</a>.<br>
In combination with live data you will be easily able to communicate between arbitrarily nested fragments.
You might also to take a look at the <a href=""https://github.com/googlesamples/android-architecture/tree/dev-todo-mvvm-live"" rel=""nofollow noreferrer"">todoapp</a> and how they handle events there.</p>
",7439718,,,,,2019-04-02 15:36:51,,,,0,,,
Android,55494418,2,,55480988,2019-04-03 11:47:35,3393,,2,,"<p>I haven't run into the issue myself but here's an article that talks about supporting Direct Boot mode.</p>

<p><a href=""https://developer.android.com/training/articles/direct-boot"" rel=""nofollow noreferrer"">https://developer.android.com/training/articles/direct-boot</a></p>

<p>Here's also a Github link from Google showing how you can access a device's encrypted storage. In the AlarmStorage class.</p>

<p><a href=""https://github.com/googlesamples/android-DirectBoot/"" rel=""nofollow noreferrer"">https://github.com/googlesamples/android-DirectBoot/</a></p>
",421399,,,,,2019-04-03 11:47:35,,,,0,,,
Android,55619010,2,,55618741,2019-04-10 18:20:59,3401,,1,,"<p>The adapter has no way to know what <code>txvTitle</code> means, as it is specific to a single item in the <code>RecyclerView</code>.
Within a <code>ViewHolder</code> however, this property (if existent) is related to the view that is being ""prepared"".</p>

<p>Thus, updates to the view should only be done in the <code>ViewHolder</code> class.</p>

<p>Take a look at <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample/app/src/main/java/com/android/example/paging/pagingwithnetwork/reddit"" rel=""nofollow noreferrer"">this</a> example.
In this example, a separate class is created which extends <code>RecyclerView.Viewholder(view)</code>.
Within this class, a method called <code>bind</code> is defined, which is passed the object (or model) that is used to populate the view. 
The <code>create</code> method inflates the layout of the view to be drawn in the <code>RecyclerView</code></p>
",6409815,,6409815,,2019-04-10 18:26:05,2019-04-10 18:26:05,,,,1,,,
Android,55638758,2,,55637838,2019-04-11 18:08:55,3402,,1,,"<p>There are a lot of resources out there that show you how this can be done.
Take a look at this <a href=""https://www.andreasjakl.com/recyclerview-kotlin-style-click-listener-android/"" rel=""nofollow noreferrer"">blog post</a>.
Regarding your question of the context not being available in your adapter: just pass it in as a constructor argument. <s>This can be seen in <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample"" rel=""nofollow noreferrer"">this example repository</a>. </s></p>

<p>Sharing the data between the two fragments could be done using a <a href=""https://developer.android.com/topic/libraries/architecture/viewmodel#sharing"" rel=""nofollow noreferrer""><code>SharedViewModel</code></a> </p>

<p>If you can't figure it out, feel free to ask more questions.</p>

<p><strong>EDIT</strong>
I also found <a href=""https://stackoverflow.com/a/40584425/6409815"">this answer</a> to a similar question, which might offer a solution that is more easy to implement than the blog post I mentioned.</p>
",6409815,,6409815,,2019-04-12 15:39:56,2019-04-12 15:39:56,,,,1,,,
Android,55649243,2,,53313044,2019-04-12 10:06:06,3402,,2,,"<p>Based on this class on google sample <a href=""https://github.com/googlesamples/android-architecture-components/blob/master/PagingWithNetworkSample/app/src/main/java/com/android/example/paging/pagingwithnetwork/reddit/repository/NetworkState.kt"" rel=""nofollow noreferrer"">Network State</a>. Modify it to handle empty content in initialLoad.</p>

<pre><code>@Suppress(""DataClassPrivateConstructor"")
data class NetworkState private constructor(
    val status: Status,
    val msg: String? = null
) {

    enum class Status {
        RUNNING,
        SUCCESS_LOADED, // New
        SUCCESS_EMPTY, // New
        FAILED
    }

    companion object {

        val EMPTY = NetworkState(Status.SUCCESS_EMPTY) // New
        val LOADED = NetworkState(Status.SUCCESS_LOADED) // New
        val LOADING = NetworkState(Status.RUNNING)
        fun error(msg: String?) = NetworkState(Status.FAILED, msg)
    }
}
</code></pre>

<p>Usage as follow:</p>

<pre><code>class DataSource: PageKeyedDataSource&lt;Long, Item&gt;() {

    val initialLoad: MutableLiveData&lt;NetworkState&gt; = MutableLiveData()

    override fun loadInitial(params: LoadInitialParams&lt;Long&gt;, callback: LoadInitialCallback&lt;Long, Item&gt;) {
        initialLoad.postValue(NetworkState.LOADING)
        apiCallSource.subscribe({ items -&gt;
            if (items.isEmpty()) {
                initialLoad.postValue(NetworkState.EMPTY)
            } else {
                initialLoad.postValue(NetworkState.LOADED)
            }
        }, { error -&gt; 
            // handle error
        })
    }
}
</code></pre>

<p>And this is how the activity handle it:</p>

<pre><code>class activity: AppCompatActivity() {

    val viewModel = // init viewmodel

    override fun onCreate(savedInstanceState: Bundle?) {
        viewModel.refreshState.observe(this, Observer { networkState -&gt;
            if (it == NetworkState.LOADING) {
                // Show loading
            } else {
                // Hide loading

                if (it.status == NetworkState.Status.SUCCESS_EMPTY) {
                    // Show empty state for initial load
                }
            }
        }
    }
}
</code></pre>

<p>For more details on how to connect <em>DataSource</em> with <em>Activity</em>, see this <a href=""https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample"" rel=""nofollow noreferrer"">sample</a></p>
",7658268,,,,,2019-04-12 10:06:06,,,,0,,,
Spring,20935012,2,,20934985,2014-01-05 14:56:55,0,,11,,"<h2>Spring Guides</h2>

<p>Take look at <a href=""http://spring.io/guides"">Spring Guides</a>,
 all with Spring 4.0.</p>

<blockquote>
  <p>(..) these guides are designed to get you productive as quickly as possible – using the latest <strong>Spring</strong> project releases and techniques as <strong>recommended by the Spring team</strong>.</p>
</blockquote>

<p>I think tutorial <a href=""http://spring.io/guides/tutorials/data/"">Data Access with Spring</a> can help you,  especially step 3:</p>

<ul>
<li><a href=""http://spring.io/guides/tutorials/data/3/"">Storing Order Data Using the Java Persistence API (JPA)</a></li>
</ul>

<p>with source code: <a href=""https://github.com/spring-guides/tut-data"">https://github.com/spring-guides/tut-data</a></p>

<p>There is also Getting Started Guide, designed to be completed in 15-30 minutes</p>

<ul>
<li><a href=""http://spring.io/guides/gs/accessing-data-jpa/"">Accessing Data with JPA</a></li>
</ul>

<p>with source code: <a href=""https://github.com/spring-guides/gs-accessing-data-jpa"">https://github.com/spring-guides/gs-accessing-data-jpa</a>.</p>

<p>This give you general look at possibilites. You can use solutions from this (like <a href=""http://projects.spring.io/spring-data-jpa/"">Spring Data JPA</a> etc) with or without <a href=""http://projects.spring.io/spring-boot/"">Spring Boot</a>.</p>

<h2>Appfuse archetypes</h2>

<p>There is also <a href=""http://appfuse.org/pages/viewpage.action?pageId=15990813"">Appfuse 3.0</a> recently released with support for Spring 4.0. </p>

<blockquote>
  <p>AppFuse is a full-stack framework for building web applications on the JVM. It was originally developed to eliminate the ramp-up time when building new web applications. Over the years, it has matured into a very testable and secure system for creating Java-based webapps.</p>
</blockquote>

<p>AppFuse is full of good patterns, simply build new project from <a href=""http://appfuse.org/display/APF/AppFuse+QuickStart"">appfuse archetype</a> and take look. </p>
",516167,,516167,,2014-01-06 10:38:29,2014-01-06 10:38:29,,,,0,,,
Spring,21205372,2,,21203402,2014-01-18 14:25:08,13,,10,,"<p>Put <em>css</em> files into <em>webapp</em> resources folder:</p>

<pre><code>src/main/webapp/resources/css/ 
</code></pre>

<p>Configure resource handler</p>

<pre><code>public class WebConfig extends WebMvcConfigurerAdapter {

        @Override
        public void addResourceHandlers(ResourceHandlerRegistry registry) {
                registry.addResourceHandler(""/resources/**"")
                        .addResourceLocations(""/resources/"");
        }
</code></pre>

<p>Example projects: </p>

<ul>
<li><a href=""https://github.com/spring-guides/tut-web/tree/master/6/complete"" rel=""noreferrer"">https://github.com/spring-guides/tut-web/tree/master/6/complete</a></li>
<li><a href=""https://github.com/jaylindquist/spring-boot-service-and-static"" rel=""noreferrer"">Spring Boot Service Template with Static Content</a></li>
</ul>

<p>Source:</p>

<ul>
<li><a href=""https://spring.io/guides/tutorials/web/"" rel=""noreferrer"">Designing and Implementing a Web Application with Spring</a></li>
<li><a href=""http://spring.io/guides/gs/serving-web-content/"" rel=""noreferrer"">Serving Web Content with Spring MVC</a></li>
</ul>
",516167,,516167,,2014-01-18 16:38:44,2014-01-18 16:38:44,,,,3,,,
Spring,22770418,2,,22770220,2014-03-31 19:25:48,85,,1,,"<p>Have you tried removing the WEB-INF folder completely and sticking everything in resources as is done in <a href=""https://github.com/spring-guides/gs-serving-web-content/tree/master/complete/src/main/resources/templates"" rel=""nofollow"">this</a> guide?</p>
",2504224,,,,,2014-03-31 19:25:48,,,,8,,,
Spring,24359284,2,,24359162,2014-06-23 6:01:03,169,,3,,"<p>That's a mistake in the guide.
Somewhere below it mentions ""spring-context"", so I believe that should have been:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;4.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Notice ""spring-context"" instead of ""spring-framework"".
Github issue to have that fixed: <a href=""https://github.com/spring-guides/getting-started-guides/issues/6"" rel=""nofollow"">Github issue</a>.</p>
",3498062,,3498062,,2014-06-23 11:47:22,2014-06-23 11:47:22,,,,1,,,
Spring,25883140,2,,25823606,2014-09-17 5:47:16,255,,4,,"<p>One can never please everyone. </p>

<p>When adding plain Spring samples people will start asking question why <code>DataSource</code>s don't work or their activemq setup doesn't work (people usually don't takes days to figure it out, if it doesn't work &lt; 5m a guide/project/sample is crap even if the error is their own).</p>

<p>The same for XML and JavaConfig for years the argument was that Spring == XML Hell (just take a look at their samples was often overheard/-read) now that is Java based config (a road that even Java EE is taking) it isn't ok either. </p>

<p>The Spring Boot guides allow you to focus on the core content at hand, instead of all the necessities/complexities around them. Nonetheless I do agree that some basic plain Spring Framework guides should exist. You might wan to comment on <a href=""https://github.com/spring-guides/getting-started-guides/issues/9"" rel=""nofollow"">this issue</a></p>
",2696260,,472792,,2014-09-17 7:16:20,2014-09-17 7:16:20,,,,1,,,
Spring,26441702,2,,26441383,2014-10-18 15:59:41,286,,3,,"<p>Yes, version is not optional.</p>

<p>Consider a multimodule application which has 10 modules, say module1, module2.. module10.Assume that all of these 10 projects use the <code>spring-boot-starter-web</code>. In case these 10 modules are interdependent, you might want to use the same version of the <code>spring-boot-starter-web</code> in each of these 10. </p>

<p>Now just imagine how complicated it would be if you were to maintain the same version number in all of these 10 pom files and then update all of them when you want to use a newer version of <code>spring-boot-starter-web</code>. Wouldn't it be better if this information can be managed centrally?</p>

<p>Maven has got something known a <code>&lt;dependencyManagement/&gt;</code> tag to get around this and centralize dependency information.</p>

<p>For the example which you have provided, below set of links will help you understand how the version number is resolved even though it's not present in the pom which you are looking at.</p>

<p>Look at the parent tag of the pom you are looking at (<a href=""https://github.com/spring-guides/gs-authenticating-ldap/blob/master/complete/pom.xml"" rel=""nofollow"">https://github.com/spring-guides/gs-authenticating-ldap/blob/master/complete/pom.xml</a>)</p>

<p>Now lets go to that parent and see if the versions are specified in the dependencyManagement section of that pom(<a href=""https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/spring-boot-starter-parent/pom.xml"" rel=""nofollow"">https://github.com/spring-projects/spring-boot/blob/master/spring-boot-starters/spring-boot-starter-parent/pom.xml</a>). No it's not defined there as well. Now lets look at the parent of parent. <a href=""https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml"" rel=""nofollow"">https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml</a>. Oh yea, we have got the version numbers there.</p>

<p>Similar to dependencyManagement, plugins can be managed in the pluginManagement section of the pom. </p>

<p>Hope that explains it.</p>

<p>Refer : <a href=""http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management"" rel=""nofollow"">dependencyManagement</a>, <a href=""http://maven.apache.org/pom.html#Plugin_Management"" rel=""nofollow"">pluginManagement</a></p>
",775467,,775467,,2014-10-18 20:42:53,2014-10-18 20:42:53,,,,0,,,
Spring,27458161,2,,27457442,2014-12-13 11:13:36,342,,7,,"<p>Angular looks for a cookie called ""XSRF-TOKEN"" I believe, so the easiest thing to do for the client is to send that. You can do it in a <code>Filter</code> for instance (example from <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/blob/master/single/src/main/java/demo/UiApplication.java#L65"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-security-and-angular-js/blob/master/single/src/main/java/demo/UiApplication.java#L65</a>):</p>

<pre><code>    private Filter csrfHeaderFilter() {
        return new OncePerRequestFilter() {
            @Override
            protected void doFilterInternal(HttpServletRequest request,
                    HttpServletResponse response, FilterChain filterChain)
                    throws ServletException, IOException {
                CsrfToken csrf = (CsrfToken) request.getAttribute(CsrfToken.class
                        .getName());
                if (csrf != null) {
                    Cookie cookie = new Cookie(""XSRF-TOKEN"", csrf.getToken());
                    cookie.setPath(""/"");
                    response.addCookie(cookie);
                }
                filterChain.doFilter(request, response);
            }
        };
    }
</code></pre>

<p>Update: since spring security 4.2 the correct cookie name for angular is used by default if you use the cookie csrf  repository(the link is still the best source), i.e. there is no longer any need for a custom filter. Example:</p>

<pre><code>@Configuration
@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)
protected static class SecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                ...
                .and()
            .csrf()
                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());
</code></pre>
",1259109,,1259109,,2017-05-14 9:23:15,2017-05-14 9:23:15,,,,7,,,
Spring,29155839,2,,29155316,2015-03-19 22:03:03,438,,2,,"<p>You should put <a href=""https://github.com/spring-guides/gs-batch-processing/blob/master/initial/src/main/resources/schema-all.sql"" rel=""nofollow"">schema initialisation</a> in your <code>src/main/resources</code>. Spring batch automatically runs <code>schema-@@platform@@.sql</code> during startup and <code>-all</code> tells it to be for all platforms as noted in <code>readme.adoc</code> on github:</p>

<blockquote>
  <p>Next, you write a SQL script to create a table to store the data.</p>
  
  <p>src/main/resources/schema-all.sql</p>
  
  <p>link:initial/src/main/resources/schema-all.sql</p>
  
  <p><strong>Note:</strong> Spring Boot runs
  schema-@@platform@@.sql automatically during startup. -all is the
  default for all platforms.</p>
</blockquote>
",4617377,,,,,2015-03-19 22:03:03,,,,8,,,
Spring,30053139,2,,20740956,2015-05-05 12:36:45,485,,1,,"<p>Also if you want not to pass login/password to server (as you might rely on Spring security) then you shouldn't use</p>

<pre><code>stompClient.connect('', '', function(frame) {
</code></pre>

<p>but instead</p>

<pre><code>stompClient.connect({}, function(frame) {
</code></pre>

<p>Take a look here: <a href=""https://github.com/spring-guides/gs-messaging-stomp-websocket/issues/10"" rel=""nofollow"">https://github.com/spring-guides/gs-messaging-stomp-websocket/issues/10</a></p>
",1210071,,,,,2015-05-05 12:36:45,,,,1,,,
Spring,30488897,2,,30486487,2015-05-27 17:04:12,507,,2,,"<p>You aren't missing anything.  This is related to issue number 8 for that guide (<a href=""https://github.com/spring-guides/gs-batch-processing/issues/8"" rel=""nofollow"">https://github.com/spring-guides/gs-batch-processing/issues/8</a>).  I just created a pull request to address this issue.  You can view the PR here (<a href=""https://github.com/spring-guides/gs-batch-processing/pull/9"" rel=""nofollow"">https://github.com/spring-guides/gs-batch-processing/pull/9</a>) until it's merged.</p>

<p><strong>UPDATE</strong><br>
The PR has been merged and the guid has been updated.  The new version should no longer have this issue.</p>
",618059,,618059,,2015-05-27 18:15:19,2015-05-27 18:15:19,,,,0,,,
Spring,31654593,2,,31609078,2015-07-27 13:36:12,568,,6,,"<p>Without seeing your entire configuration it is hard to know exactly what is going on in your situation.  However using the latest guide at <a href=""https://github.com/spring-guides/gs-accessing-data-mongodb.git"" rel=""noreferrer"">https://github.com/spring-guides/gs-accessing-data-mongodb.git</a> I am able to get it working by making the following changes:</p>

<ul>
<li><p>Adding spring-boot-starter-data-rest as a dependency in the POM file.</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></li>
<li><p>Adding this annotation to the CustomerRepository class.</p>

<pre><code>@RepositoryRestResource(path = ""people"")
</code></pre></li>
<li><p>Setting up getters and setters in the Customer class for the 2 name fields in the constructor to avoid a Jackson serialization error.</p></li>
</ul>

<p>Using this when I run the application I am able to access the repository at <a href=""http://localhost:8080/people"" rel=""noreferrer"">http://localhost:8080/people</a>.  If I remove the annotation then the CustomerRepository is accessed at <a href=""http://localhost:8080/customers"" rel=""noreferrer"">http://localhost:8080/customers</a>.  Let me know if you want me to post a fork on GitHub.</p>

<p>To answer your question about what RepositoryRestResource is that it overrides the attributes for the <a href=""http://docs.spring.io/spring-data/rest/docs/current/api/org/springframework/data/rest/core/mapping/ResourceMapping.html"" rel=""noreferrer"">ResourceMapping</a> that is created by default.  It's attributes are used in creating the mapping and change the related return values of the methods on the mapping class.  By default Spring Data Rest creates defaults based on the class names of the objects used in the repository definition.</p>
",4768873,,,,,2015-07-27 13:36:12,,,,0,,,
Spring,31998792,2,,31993487,2015-08-13 21:31:45,585,,1,,"<p>Your problem is, your rest endpoints are authenticated with spring security. So the error message clearly indicates that, you want to be authenticate yourself before sending the request. You can ignore the authentication, until you make sure everything is working. What you will need is something like this.</p>

<pre><code>@Override
protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests().antMatchers(""/submitEnrollment"").permitAll().and().csrf().disable();
}
</code></pre>

<p>You can find a good config from <a href=""https://github.com/spring-guides/gs-securing-web/blob/master/complete/src/main/java/hello/WebSecurityConfig.java"" rel=""nofollow"">here</a>. If you need more complex config, go through this jhipster <a href=""https://github.com/jhipster/jhipster-sample-app-gradle"" rel=""nofollow"">project</a>, and specifically this <a href=""https://github.com/jhipster/jhipster-sample-app-gradle/blob/master/src/main/java/com/mycompany/myapp/config/SecurityConfiguration.java"" rel=""nofollow"">file</a>.</p>

<p>It is better you can go through <a href=""http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-security.html"" rel=""nofollow"">these</a> <a href=""http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/"" rel=""nofollow"">docs</a> as well. Hope this helps.</p>
",814025,,,,,2015-08-13 21:31:45,,,,0,,,
Spring,32189453,2,,32189144,2015-08-24 18:42:18,596,,1,,"<p>//edit:</p>

<p>I was sure that above will work, but..:)</p>

<p>according to documentation (<a href=""http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-application-property-files"" rel=""nofollow"">here</a>) you can create <code>config</code> directory next to your war/jar file, and create <code>application.properties</code> file there. It will be loaded.
Ive tested that by cloning <a href=""https://github.com/spring-guides/gs-spring-boot"" rel=""nofollow"">this</a> repo. Edit <code>HelloController</code> class in <code>initial</code> project:</p>

<pre><code>@RestController
public class HelloController {

@Value(""${test.property}"")
private String testProperty;

@RequestMapping(""/"")
public String index() {
    return ""Greetings from Spring Boot! Test property value=""+testProperty;
}
}
</code></pre>

<p>build jar with maven:</p>

<pre><code>mvn clean package
</code></pre>

<p>create <code>config</code> directory, add our property there, run app:</p>

<pre><code>cd target
mkdir config
echo ""test.property=Value from external config"" &gt;&gt; config/application.properties 
java -jar gs-spring-boot-0.1.0.jar
</code></pre>

<p>goto <code>localhost:8080</code> - value from external property file should be there :)</p>

<p>Ofcourse if you really have to store your files on <code>/etc/projects/</code> then you can create symlinks inside <code>config</code> dir. </p>
",1806005,,1806005,,2015-08-25 6:47:17,2015-08-25 6:47:17,,,,2,,,
Spring,34397080,2,,33743370,2015-12-21 13:40:01,715,,1,,"<p>It seems you are using Spring Cloud ""<strong>Angel</strong>"" together with Spring Boot ""1.3"". Instead you should use Spring Cloud ""<strong>Brixton</strong>"". Try to add a new parent like:</p>

<pre><code>&lt;parent&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;Brixton.M3&lt;/version&gt;
    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;
</code></pre>

<p>and delete you version entries related to <strong>org.springframework.cloud</strong>.</p>

<p>You also need to add these repositories to be able to find the Brixton version:</p>

<pre><code>&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;spring-snapshots&lt;/id&gt;
        &lt;name&gt;Spring Snapshots&lt;/name&gt;
        &lt;url&gt;http://repo.spring.io/libs-snapshot-local&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
    &lt;repository&gt;
        &lt;id&gt;spring-milestones&lt;/id&gt;
        &lt;name&gt;Spring Milestones&lt;/name&gt;
        &lt;url&gt;http://repo.spring.io/libs-milestone-local&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
    &lt;repository&gt;
        &lt;id&gt;spring-releases&lt;/id&gt;
        &lt;name&gt;Spring Releases&lt;/name&gt;
        &lt;url&gt;http://repo.spring.io/libs-release-local&lt;/url&gt;
        &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
        &lt;/snapshots&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>

<p>And there is also a known bug in Spring Boot 1.3 you might need to handle: <a href=""https://spring.io/blog/2015/11/30/migrating-oauth2-apps-from-spring-boot-1-2-to-1-3"" rel=""nofollow"">https://spring.io/blog/2015/11/30/migrating-oauth2-apps-from-spring-boot-1-2-to-1-3</a></p>

<p>Usefull examples: </p>

<ul>
<li><code>https://github.com/spring-guides/tut-spring-security-and-angular-js/blob/master/proxy/ui/pom.xml</code></li>
<li><code>https://github.com/spring-cloud-samples/sso/blob/master/pom.xml</code></li>
</ul>
",5663017,,,,,2015-12-21 13:40:01,,,,1,,,
Spring,36142806,2,,36142489,2016-03-21 22:26:39,806,,1,,"<p>If you read the tutorial carefully, you'll see:</p>

<blockquote>
  <p>In the configuration, you need to add the <code>@EnableNeo4jRepositories</code> annotation as well as extend the <code>Neo4jConfiguration</code> class to conveniently spin up needed components.</p>
  
  <p>By default, <code>@EnableNeo4jRepositories</code> will scan the current package for any interfaces that extend one of Spring Data’s repository interfaces. Use it’s <code>basePackageClasses=MyRepository.class</code> to safely tell Spring Data GemFire to scan a different root package by type if your project layout has multiple projects and its not finding your repositories.</p>
  
  <p>One piece that’s missing is the graph database service bean. In this case, you are using the <code>EmbeddedGraphDatabase</code>, which creates and reuses a file-based data store at <code>accessingdataneo4j.db</code>.</p>
</blockquote>

<p>As such, you need to write a class that will add the configuration of the Sprint Boot application. Let's call it <code>ApplicationConfig.java</code>. Putting into code what the tutorial is saying, we come up with:</p>

<pre><code>package hello;

import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.neo4j.config.EnableNeo4jRepositories;
import org.springframework.data.neo4j.config.Neo4jConfiguration;

@Configuration
@EnableNeo4jRepositories
class ApplicationConfig extends Neo4jConfiguration {

    public ApplicationConfig() {
        setBasePackage(""hello"");
    }

    @Bean
    GraphDatabaseService graphDatabaseService() {
        return new GraphDatabaseFactory().newEmbeddedDatabase(""accessingdataneo4j.db"");
    }
}
</code></pre>

<p>If you add this class to your <code>hello</code> package, the application will run correctly.</p>

<p>Note that you should keep the <code>PersonRepository</code> as it is defined in the tutorial, which is like the following:</p>

<pre><code>package hello;

import java.util.List;

import org.springframework.data.repository.CrudRepository;

public interface PersonRepository extends CrudRepository&lt;Person, String&gt; {

    Person findByName(String name);

    List&lt;Person&gt; findByTeammatesName(String name);

}
</code></pre>

<hr>

<p>As a side-note, you can see its full code on the <a href=""https://github.com/spring-guides/gs-accessing-data-neo4j/blob/master/complete"" rel=""nofollow"">Spring GitHub repo</a>.</p>
",1743880,,1743880,,2016-03-21 22:31:50,2016-03-21 22:31:50,,,,0,,,
Spring,36883381,2,,36878189,2016-04-27 7:40:49,843,,7,,"<p>Looking at the security configuration of that project, you will notice that a <code>XSRF-TOKEN</code> cookie is being added in each request <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/blob/master/double/gateway/src/main/java/demo/GatewayApplication.java#L93-L94"" rel=""noreferrer"">using a filter</a>. So what you have to do is take the value of that cookie and store it in <code>X-XSRF-TOKEN</code> header. I've made a test project with similar security configuration to test out this case, the complete code looks like this:</p>

<pre><code>@RestController
@SpringBootApplication
public class TestApplication extends WebSecurityConfigurerAdapter {

    public static void main(String[] args) {
        SpringApplication.run(TestApplication.class, args);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .antMatchers(""/**"")  // Disable authentication for all requests.
            .permitAll()
            .and()
            .csrf().csrfTokenRepository(csrfTokenRepository())
            .and()
            .addFilterAfter(csrfHeaderFilter(), SessionManagementFilter.class); // Register csrf filter.
    }

    private Filter csrfHeaderFilter() {
        return new OncePerRequestFilter() {

            @Override
            protected void doFilterInternal(HttpServletRequest request,
                                            HttpServletResponse response,
                                            FilterChain filterChain) throws ServletException, IOException {

                CsrfToken csrf = (CsrfToken) request.getAttribute(CsrfToken.class.getName());
                if (csrf != null) {
                    Cookie cookie = WebUtils.getCookie(request, ""XSRF-TOKEN"");
                    String token = csrf.getToken();
                    if (cookie == null || token != null
                            &amp;&amp; !token.equals(cookie.getValue())) {

                        // Token is being added to the XSRF-TOKEN cookie.
                        cookie = new Cookie(""XSRF-TOKEN"", token);
                        cookie.setPath(""/"");
                        response.addCookie(cookie);
                    }
                }
                filterChain.doFilter(request, response);
            }
        };
    }

    private CsrfTokenRepository csrfTokenRepository() {
        HttpSessionCsrfTokenRepository repository = new HttpSessionCsrfTokenRepository();
        repository.setHeaderName(""X-XSRF-TOKEN"");
        return repository;
    }

    @RequestMapping(value = ""/test"", method = RequestMethod.GET)
    public String testGet() {
        return ""hello"";
    }

    @RequestMapping(value = ""/test"", method = RequestMethod.POST)
    public String testPost() {
        return ""works!"";
    }
}
</code></pre>

<p>To test this out with postman do the following:</p>

<ul>
<li>Enable <a href=""https://www.getpostman.com/docs/capture"" rel=""noreferrer"">interceptor</a> to start capturing cookies.</li>
<li>Perform a <code>GET /test</code> request and open the cookies tab. There you should notice a cookie with a name <code>XSRF-TOKEN</code>.</li>
<li>Take the value of that cookie and put it in <code>X-XSRF-TOKEN</code> header and perform a <code>POST /test</code> request.</li>
</ul>
",3274974,,,,,2016-04-27 7:40:49,,,,0,,,
Spring,37848824,2,,37846821,2016-06-16 2:18:28,892,,1,,"<h2><a href=""https://github.com/eirslett/frontend-maven-plugin"" rel=""nofollow"">Maven Frontend Plugin</a></h2>

<p>This plugin allows you to harness the power of the Node.js ecosystem including Gulp, Bower &amp; much more.</p>

<p>Examples:</p>

<ul>
<li><a href=""https://github.com/jhipster/jhipster-sample-app"" rel=""nofollow"">JHipster Sample App</a></li>
<li><a href=""https://github.com/mikaelhg/spring-boot-webpack-es6-react-poc"" rel=""nofollow"">Spring Boot + Maven Frontend Plugin</a></li>
<li><a href=""https://github.com/spring-guides/tut-react-and-spring-data-rest"" rel=""nofollow"">React.js + Spring Data REST</a></li>
</ul>

<p>The aforementioned applications each use the plugin differently.  It supports a wide variety of configurations.  My preference is putting all my frontend code into src/main/frontend and directing the output to the <strong>target</strong> directory.</p>
",1078565,,,,,2016-06-16 2:18:28,,,,0,,,
Spring,37898342,2,,37898055,2016-06-18 14:59:13,895,,1,,"<p>I'll give you some examples of Java + Angular but they use the Spring Framework.  Should be easy enough to port to Dropwizard.</p>

<ul>
<li><strong><a href=""https://jhipster.github.io/"" rel=""nofollow"">JHipster</a></strong></li>
<li><strong><a href=""http://spring.io/guides/tutorials/spring-security-and-angular-js/"" rel=""nofollow"">Spring + Angular</a> | <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js"" rel=""nofollow"">GitHub</a></strong></li>
<li><strong><a href=""https://github.com/kbastani/spring-cloud-event-sourcing-example/tree/master/online-store-web"" rel=""nofollow"">Spring Cloud Online Store</a></strong></li>
</ul>
",1078565,,,,,2016-06-18 14:59:13,,,,3,,,
Spring,37911755,2,,37911120,2016-06-19 20:56:03,896,,1,,"<p>Have you looked at the <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/tree/master/auth-server"" rel=""nofollow""><em>Hosting an Authorization Server</em> OAuth 2</a> and <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/blob/master/auth-server/src/main/java/com/example/SocialApplication.java#L71"" rel=""nofollow""><code>SocialApplication.java</code></a> examples that are part of Spring Boot?</p>

<p>This example configures a server that's able to grant OAuth tokens using the <code>@EnableAuthorizationServer</code> annotation.</p>

<p>There are also two <code>curl</code> examples that demonstrate how a client can request an access token:</p>

<blockquote>
<pre><code>$ curl acme:acmesecret@localhost:8080/oauth/token -d grant_type=client_credentials
{""access_token"":""370592fd-b9f8-452d-816a-4fd5c6b4b8a6"",""token_type"":""bearer"",""expires_in"":43199,""scope"":""read write""}

$ curl acme:acmesecret@localhost:8080/oauth/token -d grant_type=password -d username=user -d password=...
{""access_token"":""aa49e025-c4fe-4892-86af-15af2e6b72a2"",""token_type"":""bearer"",""refresh_token"":""97a9f978-7aad-4af7-9329-78ff2ce9962d"",""expires_in"":43199,""scope"":""read write""}
</code></pre>
</blockquote>
",6243024,,,,,2016-06-19 20:56:03,,,,2,,,
Spring,37928963,2,,37918414,2016-06-20 18:01:01,897,,1,,"<p>What you are describing are Integration Tests and something <em>Spring Data GemFire</em> does almost exactly as you describe, albeit a bit more directly (i.e. injecting GemFire Regions or perhaps other GemFire components directly into test classes).  For instance have a look at the <a href=""https://github.com/jxblum/spring-data-gemfire/blob/master/src/test/java/org/springframework/data/gemfire/GemfireTemplateIntegrationTest.java#L58-L61"" rel=""nofollow"">GemFireTemplateIntegrationTest</a> class along with it's associated <a href=""https://github.com/jxblum/spring-data-gemfire/blob/master/src/test/resources/org/springframework/data/gemfire/GemfireTemplateIntegrationTest-context.xml#L13-L23"" rel=""nofollow"">Spring (XML) config</a>.</p>

<p>This makes sense for <em>Spring Data GemFire</em> to use GemFire components directly in tests.  Although, this is perhaps less than ideal in an actual application test suite, primarily because I believe in good Separation of Concerns and providing appropriate facades around the dependencies my application uses.</p>

<p>In other words, and as you alluded to above, having the following (traditional n) tiers in the application...</p>

<p>UI -> Service -> DAO</p>

<p>The Service tier is pure business logic and rules and any interactions (CRUD, Querying, Function execution, etc) with any data store (GemFire/Geode included) is done so via the DAO.</p>

<p>This makes mocking the DAO very easy so that you can focus on the point of the Service tests, to test the business logic and rules independently of how the underlying data store behaves.</p>

<p>Of course, it is important to have Integration Tests to ensure the proper interactions with your underlying data store, such as GemFire/Geode, if only to ensure proper transactional behavior, or that your OQL (query) statements are well formed.</p>

<p>But, there are many options when it comes to implementing your DAO.</p>

<ol>
<li><p>You can inject the Region into your DAO(s) and perform operations (CRUD, Queries, etc) directly on the Region.</p></li>
<li><p>If you are using <em>Spring Data GemFire</em>, you might prefer to shield your DAO(s) from direct use of the GemFire/Geode API using the <a href=""http://docs.spring.io/spring-data-gemfire/docs/current/api/org/springframework/data/gemfire/GemfireTemplate.html"" rel=""nofollow"">GemfireTemplate</a> (in case of interface breaking changes introduced by GemFire/Geode, or to wrap GemFire/Geode Exceptions in <em>Spring's</em> convenient and consistent (across data stores) <a href=""http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#dao-exceptions"" rel=""nofollow"">Exception class hierarchy</a>, which is useful if you ever swap out data stores).  See <a href=""http://docs.spring.io/spring-data-gemfire/docs/current/reference/html/#apis"" rel=""nofollow"">here</a> for more details.</p></li>
<li><p>Lastly (but not least), you can use <em>Spring Data GemFire's</em> <a href=""http://docs.spring.io/spring-data-gemfire/docs/current/reference/html/#gemfire-repositories"" rel=""nofollow"">extension</a> of <em>Spring Data Common's</em> Repository abstraction with support for GemFire/Geode.  This makes implementing DAOs (a.k.a. Repositories) as simples as defining an interface that extends <a href=""http://docs.spring.io/spring-data-gemfire/docs/current/api/org/springframework/data/gemfire/repository/GemfireRepository.html"" rel=""nofollow"">GemfireRepository</a>.</p></li>
</ol>

<p>You choice depends on the level of abstraction you prefer and each choice will slightly change how you approach your Integration Testing.</p>

<p>As one final tidbit, this does not preclude you from still writing true Unit Tests either.</p>

<p><em>Spring Data GemFire</em> employs a <a href=""https://github.com/jxblum/spring-data-gemfire/tree/master/src/test/java/org/springframework/data/gemfire/test"" rel=""nofollow"">custom test framework</a> (with mocks and stubs) to simplify Unit Tests involving GemFire components (such as Regions, AEQs, Gateways, etc).  This ""<em>custom test framework</em>"" is rooted in the <a href=""https://github.com/jxblum/spring-data-gemfire/blob/master/src/test/java/org/springframework/data/gemfire/test/GemfireTestApplicationContextInitializer.java"" rel=""nofollow"">GemfireTestApplicationContextInitializer</a> and the associated <a href=""https://github.com/jxblum/spring-data-gemfire/blob/master/src/test/java/org/springframework/data/gemfire/test/GemfireTestBeanPostProcessor.java"" rel=""nofollow"">GemfireTestBeanPostProcessor</a>.  If you follow the logic through you will begin to see how it works.</p>

<p>This custom test framework is very useful for testing the validity of the GemFire components created and initialized using <a href=""http://docs.spring.io/spring-data-gemfire/docs/current/reference/html/#appendix-schema"" rel=""nofollow"">SDG's XML namespace</a>.  However, it is becoming increasingly popular to put configuration meta-data, even for GemFire/Geode components into <a href=""https://github.com/spring-guides/gs-accessing-data-gemfire/blob/master/complete/src/main/java/hello/Application.java#L22-L47"" rel=""nofollow"">Spring config now</a>, something I am looking to <a href=""https://jira.spring.io/browse/SGF-492"" rel=""nofollow"">enhance/simplify</a> further in <em>Spring Data GemFire</em> 1.9.</p>

<p>In addition, I hope to, at some point, work that I have already begun, to uplift and refactor <em>Spring Data GemFire's</em> custom test framework into a separate, top-level Spring project extension for <em>Spring Data GemFire</em> as this sort of question has been asked a lot.</p>

<p>Anyway, hopefully this gives you some ideas how to best approach tests for you application in a simple, concise and consistent manner.</p>

<p>Cheers!</p>
",3390417,,,,,2016-06-20 18:01:01,,,,8,,,
Spring,38372142,2,,38279753,2016-07-14 10:45:27,921,,2,,"<p>I think I figured out what the problem was. </p>

<p>I went through the following example available on github where form based authentication mechanism was used (which is what I was looking for).</p>

<p><a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/"" rel=""nofollow"">https://github.com/spring-guides/tut-spring-security-and-angular-js/</a></p>

<p>The exact code is working fine if I use a non HTML page as my login page. For example, JSP or FTL. The example uses Freemarker. Everything is working fine with my settings if I use ftl pages. But the same are not working in case of .html pages. </p>
",1198911,,,,,2016-07-14 10:45:27,,,,0,,,
Spring,38723291,2,,38698426,2016-08-02 14:30:38,940,,4,,"<p>I'm sure, this is not security issue. This is chrome handler issue. I do not know how it happens, but my Firefox works correctly, and IE can process it in good way.</p>

<p>I have checked <em>chrome settings</em> and have found next: <em>settings</em> >> <em>Show advanced settings...</em> >> <em>Manage passwords</em> >> <em><strong>Auto Sign-in</strong></em> flag was turn on. I removed this flag. Problem was not solved. I changed my login in <em><strong>application.yml</strong></em>. After restarting application <em>IE</em>, <em>Firefox</em> continued work as accepted (show home page\login\logout and so on), <em><strong>BUT Chrome</strong></em> asked login password in popup window (window was like system), if i do not put here login\password - i can not see any page in chrome (<em>Whitelabel Error Page</em>), but if i put in popup window my credentials - i have got authorized session. If i press logout authorization do not disappear (after reloading page i can see details for authorized users only).</p>

<p>So i think question is closed in general. But if someone knows what should be fixed in chrome - please let me know. (i cleaned all cookies in chrome and cached data using <em><strong>Ctrl+Shift+Del</strong></em> - it does not help).</p>

<p><em>Add more details</em>
My user for application last time was <strong>u2</strong>. I renamed user in <em><strong>application.yml</strong></em> file to <strong>u3</strong>. I used chrome last time with <strong>u2</strong>, but server knows nothing about user <strong>u2</strong>. After restarting server i tried load home page with <em>chrome</em> -> than i have got <em>Authentication Request</em> pop up window in chrome. Server logs you can see below.</p>

<pre><code>2016-08-02 20:30:35.866  INFO 18404 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet 'dispatcherServlet'
2016-08-02 20:30:35.867  INFO 18404 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started
2016-08-02 20:30:35.883  INFO 18404 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 16 ms
2016-08-02 20:30:35.901 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/'; against '/css/**'
2016-08-02 20:30:35.901 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/'; against '/js/**'
2016-08-02 20:30:35.901 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/'; against '/images/**'
2016-08-02 20:30:35.901 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/'; against '/**/favicon.ico'
2016-08-02 20:30:35.901 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/'; against '/error'
2016-08-02 20:30:35.902 DEBUG 18404 --- [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : / at position 1 of 13 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter'
2016-08-02 20:30:35.903 DEBUG 18404 --- [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : / at position 2 of 13 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter'
2016-08-02 20:30:35.903 DEBUG 18404 --- [nio-8080-exec-1] w.c.HttpSessionSecurityContextRepository : No HttpSession currently exists
2016-08-02 20:30:35.903 DEBUG 18404 --- [nio-8080-exec-1] w.c.HttpSessionSecurityContextRepository : No SecurityContext was available from the HttpSession: null. A new one will be created.
2016-08-02 20:30:35.906 DEBUG 18404 --- [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : / at position 3 of 13 in additional filter chain; firing Filter: 'HeaderWriterFilter'
2016-08-02 20:30:35.906 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.header.writers.HstsHeaderWriter  : Not injecting HSTS header since it did not match the requestMatcher org.springframework.security.web.header.writers.HstsHeaderWriter$SecureRequestMatcher@2583a7b2
2016-08-02 20:30:35.907 DEBUG 18404 --- [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : / at position 4 of 13 in additional filter chain; firing Filter: 'CsrfFilter'
2016-08-02 20:30:35.925 DEBUG 18404 --- [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : / at position 5 of 13 in additional filter chain; firing Filter: ''
2016-08-02 20:30:35.935 DEBUG 18404 --- [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : / at position 6 of 13 in additional filter chain; firing Filter: 'LogoutFilter'
2016-08-02 20:30:35.935 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.u.matcher.AntPathRequestMatcher  : Checking match of request : '/'; against '/logout'
2016-08-02 20:30:35.935 DEBUG 18404 --- [nio-8080-exec-1] o.s.security.web.FilterChainProxy        : / at position 7 of 13 in additional filter chain; firing Filter: 'BasicAuthenticationFilter'
2016-08-02 20:30:35.937 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.a.www.BasicAuthenticationFilter  : Basic Authentication Authorization header found for user 'u2'
2016-08-02 20:30:35.939 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.authentication.ProviderManager     : Authentication attempt using org.springframework.security.authentication.dao.DaoAuthenticationProvider
2016-08-02 20:30:35.940 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.a.dao.DaoAuthenticationProvider    : User 'u2' not found
2016-08-02 20:30:35.941 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.a.www.BasicAuthenticationFilter  : Authentication request for failed: org.springframework.security.authentication.BadCredentialsException: Bad credentials
2016-08-02 20:30:35.941 DEBUG 18404 --- [nio-8080-exec-1] s.w.a.DelegatingAuthenticationEntryPoint : Trying to match using RequestHeaderRequestMatcher [expectedHeaderName=X-Requested-With, expectedHeaderValue=XMLHttpRequest]
2016-08-02 20:30:35.941 DEBUG 18404 --- [nio-8080-exec-1] s.w.a.DelegatingAuthenticationEntryPoint : No match found. Using default entry point org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint@32c6200d
2016-08-02 20:30:35.941 DEBUG 18404 --- [nio-8080-exec-1] w.c.HttpSessionSecurityContextRepository : SecurityContext is empty or contents are anonymous - context will not be stored in HttpSession.
2016-08-02 20:30:35.942 DEBUG 18404 --- [nio-8080-exec-1] s.s.w.c.SecurityContextPersistenceFilter : SecurityContextHolder now cleared, as request processing completed
</code></pre>

<p>Please pay attention i did not use user <strong>u2</strong> in this request but you can see information about this user in server logs:</p>

<pre><code>2016-08-02 20:30:35.937 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.w.a.www.BasicAuthenticationFilter  : Basic Authentication Authorization header found for user 'u2'
2016-08-02 20:30:35.939 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.authentication.ProviderManager     : Authentication attempt using org.springframework.security.authentication.dao.DaoAuthenticationProvider
2016-08-02 20:30:35.940 DEBUG 18404 --- [nio-8080-exec-1] o.s.s.a.dao.DaoAuthenticationProvider    : User 'u2' not found
</code></pre>

<p><em><strong>It seems chrome provides unexpected behavior.
AND <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/tree/master/single"" rel=""nofollow"">Example</a> works correctly without additional changes.</strong></em></p>

<p><strong>P.S. Solution for chrome.</strong></p>

<p>I think each time if you are using chrome you need use <em>incognito</em> mode. In <em>incognito mode</em> you have no any token for first request, <em>incognito mode</em> provides expected behavior as it should be without chrome <em>hacks</em> or <em>workarounds</em>.</p>
",5728095,,5728095,,2016-08-02 18:41:55,2016-08-02 18:41:55,,,,1,,,
Spring,38784322,2,,36840857,2016-08-05 8:10:08,943,,1,,"<p>Using the FacebookTemplate constructor directly will provide you with an unauthenticated (that is, without OAuth) connection only, that will work for queries that do not require authentication. This is why you get Authorization Exceptions, accessing feeds require authentication (an authenticated facebook user, that has given your application the proper authorization to perform these actions).</p>

<p>Note that you will need a way to get the user's access token to be authenticated, and doing so in a console application might prove tricky. Using Spring Social in a WebApplication however is quite easy, basically all you need is </p>

<pre><code>@Controller
@RequestMapping(""/"")
public class HelloController {

    private Facebook facebook;
    private ConnectionRepository connectionRepository;

    @Inject
    public HelloController(Facebook facebook, ConnectionRepository connectionRepository) {
        this.facebook = facebook;
        this.connectionRepository = connectionRepository;
    }

    @RequestMapping(method=RequestMethod.GET)
    public String helloFacebook(Model model) {
        if (connectionRepository.findPrimaryConnection(Facebook.class) == null) {
            return ""redirect:/connect/facebook"";
        }

        model.addAttribute(""facebookProfile"", facebook.userOperations().getUserProfile());
        PagedList&lt;Post&gt; feed = facebook.feedOperations().getFeed();
        model.addAttribute(""feed"", feed);
        return ""hello"";
    }

}
</code></pre>

<p>(example taken from here: <a href=""https://github.com/spring-guides/gs-accessing-facebook"" rel=""nofollow"">https://github.com/spring-guides/gs-accessing-facebook</a>)
with a configuration with <code>spring.social.facebook.appId</code> and <code>spring.social.facebook.appSecret</code> configured properly.</p>

<p>To <strong>test</strong> your queries with a console application however, you might</p>

<ol>
<li>Create app on Facebook's api pages.</li>
<li>Go to <a href=""https://developers.facebook.com/tools/accesstoken/"" rel=""nofollow"">https://developers.facebook.com/tools/accesstoken/</a></li>
<li>Use that tokens in the <code>FacebookTemplate</code>-Constructor</li>
</ol>

<p>This will always be your user, so you might not want to release this app into the wild ;)</p>
",6681381,,,,,2016-08-05 8:10:08,,,,0,,,
Spring,38791619,2,,38790753,2016-08-05 14:25:07,943,,4,,"<p>The problem that you've encountered happened because of the bug in the sample application. I see that they've upgraded the application to use Spring Boot 1.4 a week ago, but what they forgot to do is to migrate configuration.</p>

<p>Quote from <a href=""https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.4-Release-Notes#multipart-support"" rel=""nofollow"">Spring Boot 1.4 release note</a>:</p>

<blockquote>
  <p>The multipart properties have moved from the <code>multipart.</code> namespace to the <code>spring.http.multipart.</code> namespace.</p>
</blockquote>

<p>It means that obvious fix for you will be in modifying <code>application.properties</code> file.</p>

<p>Updated: I've filled issue for that: <a href=""https://github.com/spring-guides/gs-uploading-files/issues/29"" rel=""nofollow"">https://github.com/spring-guides/gs-uploading-files/issues/29</a></p>
",352708,,,,,2016-08-05 14:25:07,,,,2,,,
Spring,38826220,2,,38792637,2016-08-08 9:58:25,946,,2,,"<p>The problem and solution is described <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/issues/68#issuecomment-187675742"" rel=""nofollow"">here</a>. The solution consist in the implementation of a OncePerRequestFilter where you can match the full URI against whatever you want.</p>
",1121555,,,,,2016-08-08 9:58:25,,,,0,,,
Spring,39189586,2,,39186670,2016-08-28 9:01:10,966,,2,,"<p>What you're doing wrong is that the methods in your <code>@Configuration</code> class are not public. Just add <code>public</code> to <code>facebook</code> and <code>facebookResource</code> and you'll be fine. I've just polished that doc in <a href=""https://github.com/spring-projects/spring-boot/commit/c4cb8317704add37b5d1a8070d943ecad3152578"" rel=""nofollow"">c4cb8317</a> and I've <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/pull/35"" rel=""nofollow"">submitted a PR to fix the tutorial</a> you were using as a base.</p>

<p>Also the generated metadata were mostly empty since nested objects were not flagged with <code>@NestedConfigurationProperty</code>. I've submitted <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/pull/36"" rel=""nofollow"">another pull request</a> to fix that.</p>
",613628,,613628,,2016-08-29 9:54:18,2016-08-29 9:54:18,,,,6,,,
Spring,39337121,2,,39331929,2016-09-05 20:12:07,974,,7,,"<p><strong>Avoid @EnableWebMvc</strong></p>

<p>By default Spring-Boot serves static content in <code>src/main/resources</code>:</p>

<ul>
<li>/META-INF/resources/</li>
<li>/resources/</li>
<li>/static/</li>
<li>/public/</li>
</ul>

<p>Take a look at <a href=""https://spring.io/blog/2013/12/19/serving-static-web-content-with-spring-boot"" rel=""noreferrer"">this</a> and <a href=""https://stackoverflow.com/a/29022362/641627"">this</a>;</p>

<p><strong>Or keep @EnableWebMvc and override addViewControllers</strong></p>

<p>Did you specify <code>@EnableWebMvc</code> ? Take a look a this: <a href=""https://stackoverflow.com/questions/27381781/java-spring-boot-how-to-map-my-app-root-to-index-html"">Java Spring Boot: How to map my app root (“/”) to index.html?</a></p>

<p>Either you remove @EnableWebMvc, or you can re-define <code>addViewControllers</code>:</p>

<pre><code>@Override
public void addViewControllers(ViewControllerRegistry registry) {
    registry.addViewController(""/"").setViewName(""forward:/index.html"");
}
</code></pre>

<p><strong>Or define a Controller to catch <code>/</code></strong></p>

<p>You may take a look a this <a href=""https://github.com/spring-guides/tut-react-and-spring-data-rest/tree/master/basic"" rel=""noreferrer"">spring-boot-reactjs sample project on github</a>:</p>

<p>It does what you want using a Controller:</p>

<pre><code>@Controller
public class HomeController {

    @RequestMapping(value = ""/"")
    public String index() {
        return ""index"";
    }

}
</code></pre>

<p>Its <code>index.html</code> is under <code>src/main/resources/templates</code></p>
",641627,,641627,,2017-09-26 14:50:36,2017-09-26 14:50:36,,,,2,,,
Spring,39527800,2,,39527308,2016-09-16 9:17:01,985,,1,,"<p>I am able to achieve social login with multiple RESTful resource by following two example applications, following are the steps:</p>

<p>(1) Checkout <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/tree/master/oauth2"" rel=""nofollow"">https://github.com/spring-guides/tut-spring-security-and-angular-js/tree/master/oauth2</a></p>

<p>(2) Delete ""authserver"" folder (We will use auth-server from another project)</p>

<p>(3) Checkout auth-server from social demo: <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/tree/master/auth-server"" rel=""nofollow"">https://github.com/spring-guides/tut-spring-boot-oauth2/tree/master/auth-server</a></p>

<p>(4) Open application.yml of ""ui"" project and do following changes:</p>

<pre><code>server.port: 9001
server.context-path: /zuul
debug: true

spring:
  aop:
    proxy-target-class: true


security:
  oauth2:
    client:
      client-id: acme
      client-secret: acmesecret
      access-token-uri: http://localhost:8080/oauth/token
      user-authorization-uri: http://localhost:8080/oauth/authorize
      grant-type: implicit
    resource:
      user-info-uri: http://localhost:8080/me

zuul:
  routes:
    resource:
      path: /resource/**
      url: http://localhost:9000/resource
    user:
      path: /user/**
      url: http://localhost:8080/me

logging:
  level:
    org.springframework.security: DEBUG
</code></pre>

<p>(5) Open application.yml of auth-server and add google properties:</p>

<pre><code>google:
  client:
    clientId: &lt;your client id&gt;
    clientSecret: &lt;your client secret&gt;
    accessTokenUri: https://accounts.google.com/o/oauth2/token
    scope: profile,email
    userAuthorizationUri: https://accounts.google.com/o/oauth2/auth
    clientAuthenticationScheme: form
    redirect-uri: http://localhost:8080
  resource:
    userInfoUri: https://www.googleapis.com/plus/v1/people/me
</code></pre>

<p>(6) Open SocialApplication.java of auth-server :
Add google related bean and filters (similar to facebook and github).</p>

<p>(7) rename application.properties to application.yml of ""resource"" project 
following is the content of that yml:</p>

<pre><code>server:
  port: 9000
  context-path: /resource
security:
  oauth2:
    resource:
      user-info-uri: http://localhost:8080/me

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
</code></pre>

<p>(8) Now run auth-server, resource and ui projects and hit URL with port 9001 and context /zuul.</p>
",4405397,,,,,2016-09-16 9:17:01,,,,4,,,
Spring,39933279,2,,39923714,2016-10-08 13:59:18,"1,007",,1,,"<p>The point here is that Spring Boot (in reality Spring Security) creates an <a href=""https://javaee-spec.java.net/nonav/javadocs/javax/servlet/http/HttpSession.html"" rel=""nofollow""><code>HttpSession</code></a> on the backend side after successful authentication.</p>

<p>Actually, the backend is stateful because it retains session data (authenticated user) on the server side. A client (here browser) gets identified by the supplied session id.</p>

<p>The authentication flow looks like this from a protocol perspective.</p>

<p><strong>Use case</strong>: Browser initiates an HTTP call to the backend: Backend answers with <code>Unauthorized</code> because the client tries to access a protected resource without <code>Authorization</code> header</p>

<pre><code>$ curl -I -H ""X-Requested-With:XMLHttpRequest"" http://localhost:8080/user

HTTP/1.1 401
Set-Cookie: XSRF-TOKEN=b1137571-5e15-491c-8df5-9db5d34f29a8;path=/
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Transfer-Encoding: chunked
</code></pre>

<p><strong>Use case</strong>: Preemptive basic authentication. Backend grants access to resource and notifies client about session id</p>

<pre><code>$ curl -I -H ""X-Requested-With:XMLHttpRequest"" -H ""Authorization:Basic dXNlcjpwYXNzd29yZA=="" http://localhost:8080/user

HTTP/1.1 200
Set-Cookie: XSRF-TOKEN=ef72f0b8-4262-4ea2-8a46-5f7e19558079;path=/
Set-Cookie: JSESSIONID=52B61923DE639EE339A653845FBFC5F2;path=/;HttpOnly
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Content-Type    : application/json;charset=UTF-8
Content-Length: 343
</code></pre>

<p>Due to the fact that the browser sends valid user credentials via the HTTP header <code>Authorization</code>, the backend creates a new <code>HttpSession</code> and sends back an identifier (the session id) to the browser </p>

<pre><code>Set-Cookie: JSESSIONID=52B61923DE639EE339A653845FBFC5F2;path=/;HttpOnly
</code></pre>

<p>Now, the browser attaches to every subsequent HTTP call the <code>Cookie</code> header automatically</p>

<pre><code>Cookie: JSESSIONID=52B61923DE639EE339A653845FBFC5F2
</code></pre>

<p>which prevents a new authentication cycle. As long as the session does not timeout on the server side, the server ""assigns"" the session data to this particular HTTP request.</p>

<p>Basic authentication is not limited to Spring Boot (Spring Security) nor Angular. It is a <a href=""https://www.ietf.org/rfc/rfc2617.txt"" rel=""nofollow"">standardized authentication scheme</a> for the Internet since many years.</p>

<p>Bear in mind, basic authentication is an old-fashioned authentication scheme and <strong>highly discouraged in modern web applications</strong>. </p>

<blockquote>
  <p>Will Spring simply let the request through since the user is already authenticated and does this happen because the Authentication Basic header is set post form authentication?</p>
</blockquote>

<p>Regarding the quoted example, you may now understand why an empty <code>headers</code> object does not lead to a rejection.</p>

<ol>
<li>The browser (the Angular application) sets preemptive the <code>Authorization</code> header with valid user credentials and initiates an HTTP request to a restricted resource</li>
<li>The server validates user credentials, creates an <code>HttpSession</code> identified by a session id and sends it back to the browser</li>
<li>The browser attaches the session id as a cookie to every subsequent HTTP request automatically</li>
<li>The server identifies the HTTP request by session id and accepts the incoming request</li>
</ol>

<p>What happens if you instruct Spring Security not to create sessions on the server? For that purpose append </p>

<pre><code>.and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
</code></pre>

<p>to <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/blob/e383841dc390b1dcd45972cf346327b6d6fd18c5/single/src/main/java/demo/UiApplication.java#L54"" rel=""nofollow""><code>SecurityConfiguration::configure</code></a>.</p>

<p>Now, you can see that every call to <code>/resource</code> in the example leads to an HTTP 401 because there is no session on the server anymore. The Angular application is now forced to set the <code>Authorization</code> header on every HTTP request on its own.</p>

<p>The browser may attach <code>Authorization</code> header automatically too. For the sake of brevity, I will skip that part. Please keep in mind, <strong>basic authentication is highly discouraged in modern web applications</strong>. </p>

<p>The intention of the example is not to show you how to implement a sign in with Spring Boot and Angular. The <a href=""https://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application"" rel=""nofollow"">main intention</a> is to evolve the primitive sign in towards a single sign on based on OAuth2 and Spring in a microservice architecture.</p>

<p>Don't take the code example for granted. </p>
",3151168,,1684269,,2016-10-12 21:36:11,2016-10-12 21:36:11,,,,0,,,
Spring,39947995,2,,39938585,2016-10-09 20:05:17,"1,008",,5,,"<p>You don't need such a complicated configuration. Add <code>@EnableOAuth2Sso</code> to your <code>MainConfiguration</code> and set appropriate application properties.</p>

<p>Here is what I have done in order to use Facebook as a authorization server.</p>

<p><strong>a)</strong> Remove <code>clientId</code> and <code>authServer</code> from <code>UserServiceImpl</code>. Otherwise you'll be forced to configure an authorization server that is not needed.</p>

<p><strong>b)</strong> Remove <code>AuthorizationServerConfiguration</code> completely.</p>

<p><strong>c)</strong> Add <code>@EnableWebSecurity</code> and <code>@EnableOAuth2Sso</code> to your <code>MainConfiguration</code>.</p>

<p><strong>d)</strong> Change <code>MainConfiguration::configure</code> to </p>

<pre><code>http
    .logout().logoutSuccessUrl(""/"").permitAll().and()
    .authorizeRequests().antMatchers(""/"", ""/login"", ""/home.html"").permitAll()
    .anyRequest().authenticated()
    .and().csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());
</code></pre>

<p><strong>e)</strong> Delete everything else except nested class <code>AuthenticationSecurity</code> from <code>MainConfiguration</code>.</p>

<p><strong>f)</strong> Change <code>ResourceServerConfiguration::configure(HttpSecurity)</code> to</p>

<pre><code>http.antMatcher(""/api/**"").authorizeRequests().anyRequest().authenticated();
</code></pre>

<p><strong>f)</strong> Remove attribute <code>tokenStore</code> and method <code>ResourceServerConfiguration::configure(ResourceServerSecurityConfigurer)</code> from <code>ResourceServerConfiguration</code>.</p>

<p><strong>g)</strong> Remove configuration block <code>security</code> and <code>facebook</code> from <code>application.yml</code>. Instead add this</p>

<pre><code>security:
  oauth2:
    client:
      client-id: &lt;CLIENT_ID&gt;
      token-name: oauth_token
      authentication-scheme: query
      client-authentication-scheme: form
      access-token-uri: https://graph.facebook.com/oauth/access_token
      user-authorization-uri: https://www.facebook.com/dialog/oauth
    resource:
      user-info-uri: https://graph.facebook.com/me
      client-id: &lt;CLIENT_ID&gt;
      client-secret: &lt;CLIENT_SECRET&gt;
      token-type: code
</code></pre>

<p><strong>h)</strong> In <code>index.html</code> change <code>&lt;a href=""#/login""&gt;login&lt;/a&gt;</code> to <code>&lt;a href=""/login""&gt;login&lt;/a&gt;</code>.
<strong>i)</strong> Replace the content of <code>hello.js</code> with this <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/blob/e26998812799ae7a8ee3786c3e5fd35ea43e0b81/oauth2/ui/src/main/resources/static/js/hello.js"" rel=""nofollow"">one</a>.</p>

<blockquote>
  <p>But I'd like to have the traditional username/password form login experience (log user in directly instead of showing the Authorization page).</p>
</blockquote>

<p>I would never use a site that requires my credentials without redirecting me to the origin! I don't know you and you are under suspicion being a phishing site.
You should really reconsider your decision.</p>

<p>Btw, I created a pull request with these changes.</p>
",3151168,,3151168,,2016-10-10 5:12:54,2016-10-10 5:12:54,,,,2,,,
Spring,40145674,2,,40144561,2016-10-20 4:47:44,"1,019",,6,,"<p>I just took the complete Spring boot example from : <a href=""https://github.com/spring-guides/gs-messaging-jms/"" rel=""noreferrer"">https://github.com/spring-guides/gs-messaging-jms/</a></p>

<p>In this it is created for sending and receipt of messages from a queue. To Change this to a topic , you have to set the Pub-Sub property in the Factory instance.</p>

<pre><code>import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jms.DefaultJmsListenerContainerFactoryConfigurer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.jms.config.DefaultJmsListenerContainerFactory;
import org.springframework.jms.config.JmsListenerContainerFactory;
import org.springframework.jms.connection.CachingConnectionFactory;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.support.converter.MappingJackson2MessageConverter;
import org.springframework.jms.support.converter.MessageConverter;
import org.springframework.jms.support.converter.MessageType;

import javax.jms.ConnectionFactory;

@SpringBootApplication
@EnableJms
public class JmsSampleApplication {

public void registerBeans(ConfigurableApplicationContext context ){
    BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(JmsTemplate.class);
    CachingConnectionFactory cachingConnectionFactory = new CachingConnectionFactory();

    builder.addPropertyValue(""connectionFactory"", cachingConnectionFactory);      // set property value
    DefaultListableBeanFactory factory = (DefaultListableBeanFactory) context.getAutowireCapableBeanFactory();
    factory.registerBeanDefinition(""jmsTemplateName"", builder.getBeanDefinition());
}

@Bean
public JmsListenerContainerFactory&lt;?&gt; topicListenerFactory(ConnectionFactory connectionFactory,
                                                DefaultJmsListenerContainerFactoryConfigurer configurer) {
    DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
    factory.setPubSubDomain(true);
    // This provides all boot's default to this factory, including the message converter
    configurer.configure(factory, connectionFactory);
    // You could still override some of Boot's default if necessary.
    return factory;
}

@Bean
public JmsListenerContainerFactory&lt;?&gt; queueListenerFactory(ConnectionFactory connectionFactory,
                                                           DefaultJmsListenerContainerFactoryConfigurer configurer) {
    DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
    //factory.setPubSubDomain(true);
    // This provides all boot's default to this factory, including the message converter
    configurer.configure(factory, connectionFactory);
    return factory;
}

@Bean // Serialize message content to json using TextMessage
public MessageConverter jacksonJmsMessageConverter() {
    MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();
    converter.setTargetType(MessageType.TEXT);
    converter.setTypeIdPropertyName(""_type"");
    return converter;
}
public static void main(String[] args) {
    ConfigurableApplicationContext context = SpringApplication.run(JmsSampleApplication.class, args);

    JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class);

    // Send a message with a POJO - the template reuse the message converter
    System.out.println(""Sending an email message."");
    jmsTemplate.convertAndSend(""mailbox.topic"", new Email(""info@example.com"", ""Hello""));
    jmsTemplate.convertAndSend(""mailbox.queue"", new Email(""info@example.com"", ""Hello""));

    }
}
</code></pre>

<p><strong>The listener</strong></p>

<pre><code>package org.springboot.jms;

import org.springframework.jms.annotation.JmsListener;
import org.springframework.stereotype.Component;

/**
 * Created by RGOVIND on 10/20/2016.
 */
@Component
public class HelloTopicListener {

    @JmsListener(destination = ""mailbox.topic"", containerFactory = ""topicListenerFactory"")
    public void receiveTopicMessage(Email email) {
        System.out.println(""Received &lt;"" + email + ""&gt;"");
    }

    @JmsListener(destination = ""mailbox.queue"", containerFactory = ""queueListenerFactory"")
    public void receiveQueueMessage(Email email) {
        System.out.println(""Received &lt;"" + email + ""&gt;"");
    }
}
</code></pre>

<p>Once this is done , you are all set to subscribe to the topic of choice.</p>

<p>There are multiple approaches to this of course , you can have a map of beans for different jmsTemplates , each of which can be used when you need them based on queue or topic. The template &amp; beans can be instantiated in a method you choose to like discussed in this <a href=""https://stackoverflow.com/questions/32332840/spring-dynamically-create-jmstemplates"">SO Question</a>. Hope it helps</p>
",6617152,,6617152,,2016-10-21 6:12:25,2016-10-21 6:12:25,,,,4,,,
Spring,40226857,2,,40225023,2016-10-24 20:19:47,"1,023",,1,,"<p>Your code sample looks totally fine for me. Moreover, I've created a project with sample code you've provided and it worked( with spring.boot.version 1.2.1.RELEASE ).</p>

<p>There is a similar project on <a href=""https://github.com/spring-guides/gs-scheduling-tasks/tree/master/complete"" rel=""nofollow"">github</a> you may be interested in.</p>
",5202500,,,,,2016-10-24 20:19:47,,,,1,,,
Spring,40312890,2,,40306791,2016-10-28 20:37:58,"1,027",,1,,"<p>To start from scratch, move on to Build with Gradle.</p>

<p>If you know basics and want code template, do the following:</p>

<p>Download and unzip the source repository or clone it using Git: git clone <a href=""https://github.com/spring-guides/gs-serving-web-content.git"" rel=""nofollow"">https://github.com/spring-guides/gs-serving-web-content.git</a>
cd into gs-serving-web-content/initial
Jump ahead to Create a web controller.
When you’re finished, you can check your results against the code in gs-serving-web-content/complete.</p>

<p><strong>Build with Gradle</strong></p>

<p>First you set up a basic build script. You can use any build system you like when building apps with Spring, but the code you need to work with Gradle is included here.</p>

<p><strong>Create the directory structure</strong></p>

<p>In a project directory of your choosing, create the following subdirectory structure; for example, with mkdir -p src/main/java/hello on *nix systems:</p>

<pre><code>└── src

    └── main

        └── java

            └── hello
</code></pre>

<p>Create a Gradle build file</p>

<p>Below is the initial Gradle build file.</p>

<pre><code>build.gradle

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(""org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE"")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

jar {
    baseName = 'gs-serving-web-content'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile(""org.springframework.boot:spring-boot-starter-thymeleaf"")
    compile(""org.springframework.boot:spring-boot-devtools"")
    testCompile(""junit:junit"")
}


The Spring Boot gradle plugin provides many convenient features:

It collects all the jars on the classpath and builds a single, runnable ""über-jar"", which makes it more convenient to execute and transport your service.
    It searches for the public static void main() method to flag as a runnable class.
    It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. You can override any version you wish, but it will default to Boot’s chosen set of versions.

    **Create a web controller**

    In Spring’s approach to building web sites, HTTP requests are handled by a controller. You can easily identify these requests by the @Controller annotation. In the following example, the GreetingController handles GET requests for /greeting by returning the name of a View, in this case, ""greeting"". A View is responsible for rendering the HTML content:


src/main/java/hello/GreetingController.java

package hello;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class GreetingController {

    @RequestMapping(""/greeting"")
    public String greeting(@RequestParam(value=""name"", required=false, defaultValue=""World"") String name, Model model) {
        model.addAttribute(""name"", name);
        return ""greeting"";
    }

}
</code></pre>

<p>This controller is concise and simple, but there’s plenty going on. Let’s break it down step by step.</p>

<p>The @RequestMapping annotation ensures that HTTP requests to /greeting are mapped to the greeting() method.</p>

<p>The above example does not specify GET vs. PUT, POST, and so forth, because @RequestMapping maps all HTTP operations by default. Use @RequestMapping(method=GET) to narrow this mapping.
@RequestParam binds the value of the query String parameter name into the name parameter of the greeting() method. This query String parameter is not required; if it is absent in the request, the defaultValue of ""World"" is used. The value of the name parameter is added to a Model object, ultimately making it accessible to the view template.</p>

<p>The implementation of the method body relies on a view technology, in this case Thymeleaf, to perform server-side rendering of the HTML. Thymeleaf parses the greeting.html template below and evaluates the th:text expression to render the value of the ${name} parameter that was set in the controller.</p>

<pre><code>src/main/resources/templates/greeting.html

&lt;!DOCTYPE HTML&gt;
&lt;html xmlns:th=""http://www.thymeleaf.org""&gt;
&lt;head&gt;
    &lt;title&gt;Getting Started: Serving Web Content&lt;/title&gt;
    &lt;meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" /&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p th:text=""'Hello, ' + ${name} + '!'"" /&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><strong>Developing web apps</strong></p>

<p>A common feature of developing web apps is coding a change, restarting your app, and refreshing the browser to view the change. This entire process can eat up a lot of time. To speed up the cycle of things, Spring Boot comes with a handy module known as spring-boot-devtools.</p>

<p>Enable hot swapping
Switches template engines to disable caching
Enables LiveReload to refresh browser automatically
Other reasonable defaults based on development instead of production
Make the application executable</p>

<p>Although it is possible to package this service as a traditional WAR file for deployment to an external application server, the simpler approach demonstrated below creates a standalone application. You package everything in a single, executable JAR file, driven by a good old Java main() method. Along the way, you use Spring’s support for embedding the Tomcat servlet container as the HTTP runtime, instead of deploying to an external instance.</p>

<pre><code>src/main/java/hello/Application.java

package hello;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}
</code></pre>

<p>@SpringBootApplication is a convenience annotation that adds all of the following:</p>

<p>@Configuration tags the class as a source of bean definitions for the application context.
@EnableAutoConfiguration tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.
Normally you would add @EnableWebMvc for a Spring MVC app, but Spring Boot adds it automatically when it sees spring-webmvc on the classpath. This flags the application as a web application and activates key behaviors such as setting up a DispatcherServlet.
@ComponentScan tells Spring to look for other components, configurations, and services in the the hello package, allowing it to find the controllers.
The main() method uses Spring Boot’s SpringApplication.run() method to launch an application. Did you notice that there wasn’t a single line of XML? No web.xml file either. This web application is 100% pure Java and you didn’t have to deal with configuring any plumbing or infrastructure.</p>

<p><strong>Build an executable JAR</strong></p>

<p>You can run the application from the command line with Gradle or Maven. Or you can build a single executable JAR file that contains all the necessary dependencies, classes, and resources, and run that. This makes it easy to ship, version, and deploy the service as an application throughout the development lifecycle, across different environments, and so forth.</p>

<p>If you are using Gradle, you can run the application using ./gradlew bootRun. Or you can build the JAR file using ./gradlew build. Then you can run the JAR file:</p>

<p>java -jar build/libs/gs-serving-web-content-0.1.0.jar
If you are using Maven, you can run the application using ./mvnw spring-boot:run. Or you can build the JAR file with ./mvnw clean package. Then you can run the JAR file:</p>

<p>java -jar target/gs-serving-web-content-0.1.0.jar
The procedure above will create a runnable JAR. You can also opt to build a classic WAR file instead.
Logging output is displayed. The app should be up and running within a few seconds.</p>

<p><strong>Test the App</strong></p>

<p>Now that the web site is running, visit <a href=""http://localhost:8080/greeting"" rel=""nofollow"">http://localhost:8080/greeting</a>, where you see:</p>

<p>""Hello, World!""
Provide a name query string parameter with <a href=""http://localhost:8080/greeting?name=User"" rel=""nofollow"">http://localhost:8080/greeting?name=User</a>. Notice how the message changes from ""Hello, World!"" to ""Hello, User!"":</p>

<p>""Hello, User!""
This change demonstrates that the @RequestParam arrangement in GreetingController is working as expected. The name parameter has been given a default value of ""World"", but can always be explicitly overridden through the query string.</p>

<p><strong>Add a Home Page</strong></p>

<p>Static resources, like HTML or JavaScript or CSS, can easily be served from your Spring Boot application just be dropping them into the right place in the source code. By default Spring Boot serves static content from resources in the classpath at ""/static"" (or ""/public""). The index.html resource is special because it is used as a ""welcome page"" if it exists, which means it will be served up as the root resource, i.e. at <a href=""http://localhost:8080/"" rel=""nofollow"">http://localhost:8080/</a> in our example. So create this file:</p>

<pre><code>src/main/resources/static/index.html

&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Getting Started: Serving Web Content&lt;/title&gt;
    &lt;meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"" /&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;Get your greeting &lt;a href=""/greeting""&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
and when you restart the app you will see the HTML at http://localhost:8080/.
</code></pre>
",4539626,,,,,2016-10-28 20:37:58,,,,0,,,
Spring,40454751,2,,26549379,2016-11-06 21:29:53,"1,036",,37,,"<p>According to official documentation: <a href=""http://docs.spring.io/spring/docs/4.3.3.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-restcontroller"" rel=""noreferrer"">Creating REST Controllers with the @RestController annotation</a></p>

<blockquote>
  <p>@RestController is a stereotype annotation that combines @ResponseBody
  and @Controller. <strong>More than that, it gives more meaning to your
  Controller and also may carry additional semantics in future releases
  of the framework.</strong></p>
</blockquote>

<p>It seems that it's best to use <code>@RestController</code> for clarity, but you can also <strong>combine</strong> it with <code>ResponseEntity</code> for flexibility when needed (<a href=""https://spring.io/guides/tutorials/bookmarks/"" rel=""noreferrer"">According to official tutorial</a> and <a href=""https://github.com/spring-guides/tut-bookmarks/blob/a5b4d43d63d3c7d8a6107873841526f92d7bad2d/rest/src/main/java/bookmarks/BookmarkRestController.java#L56"" rel=""noreferrer"">the code here</a> and <a href=""https://github.com/spring-guides/tut-bookmarks/issues/22"" rel=""noreferrer"">my question to confirm that</a>).</p>

<p>For example:</p>

<pre><code>@RestController
public class MyController {

    @GetMapping(path = ""/test"")
    @ResponseStatus(HttpStatus.OK)
    public User test() {
        User user = new User();
        user.setName(""Name 1"");

        return user;
    }

}
</code></pre>

<p>is the same as:</p>

<pre><code>@RestController
public class MyController {

    @GetMapping(path = ""/test"")
    public ResponseEntity&lt;User&gt; test() {
        User user = new User();
        user.setName(""Name 1"");

        HttpHeaders responseHeaders = new HttpHeaders();
        // ...
        return new ResponseEntity&lt;&gt;(user, responseHeaders, HttpStatus.OK);
    }

}
</code></pre>

<p>This way, you can define <code>ResponseEntity</code> only when needed.</p>

<p><strong>Update</strong></p>

<p>You can use this: </p>

<pre><code>    return ResponseEntity.ok().headers(responseHeaders).body(user);
</code></pre>
",4791401,,6630785,,2017-11-14 9:45:48,2017-11-14 9:45:48,,,,3,,,
Spring,40634383,2,,40615279,2016-11-16 14:15:40,"1,046",,1,,"<p>After way too much time, I settled on this approach. </p>

<p><a href=""https://spring.io/blog/2016/08/30/custom-test-slice-with-spring-boot-1-4"" rel=""nofollow noreferrer"">Custom Test Slice with Spring Boot 1.4</a> looked promising but I couldn't get anywhere with it.</p>

<p>While going over and over</p>

<p><a href=""https://spring.io/guides/gs/accessing-data-rest/"" rel=""nofollow noreferrer"">Accessing JPA Data with REST</a></p>

<p>I realised I had to include the JPA setup because <code>spring-data-rest</code> is using them directly - no chance to mock them or run unit tests without an embedded database. </p>

<p>At least not as far as I understand it. Maybe it is possible to mock them and have <code>spring-data-rest</code> run on the mocks against test data, but I think <code>spring-data-rest</code> and <code>spring-data</code> are probably too tightly coupled. </p>

<p>So integration testing it must be.</p>

<p>In the Spring source code provided with the articles above</p>

<p><a href=""https://github.com/spring-guides/gs-accessing-data-rest/blob/master/complete/src/test/java/hello/ApplicationTests.java"" rel=""nofollow noreferrer"">gs-accessing-data-rest/ApplicationTests.java</a></p>

<p>the logging shows Spring Boot pulling in the whole configuration for the application context.</p>

<p>So that my <code>SpringBootApplication</code> class is avoided and the security module isn't loaded up, I set up my tests like this:</p>

<pre><code>@RunWith(SpringRunner.class)
@SpringBootTest
@ContextConfiguration(classes = {
        JpaDataConfiguration.class,
        TestJpaConfiguration.class,
        TestRestConfiguration.class,
        PropertySpringConfig.class})
public class ForecastRestTests {

    @SuppressWarnings(""SpringJavaAutowiringInspection"")
    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ForecastRepository forecastRepository;

    @Before
    public void deleteAllBeforeTests() throws Exception {
        forecastRepository.deleteAll();
    }

    @Test
    public void shouldReturnRepositoryIndex() throws Exception {

        mockMvc.perform(get(""/"")).andDo(print()).andExpect(status().isOk()).andExpect(
                jsonPath(""$._links.forecasts"").exists());
    }

}
</code></pre>

<p>with these configuration classes:</p>

<pre><code>@Configuration
@EnableJpaRepositories(basePackages = {""com.bp.gis.tardis.repository""})
@EntityScan(basePackages = {""com.bp.gis.tardis.type""})
public class JpaDataConfiguration {
</code></pre>

<p>and </p>

<pre><code>@Configuration
@OverrideAutoConfiguration(enabled = false)
@ImportAutoConfiguration(value = {
        CacheAutoConfiguration.class,
        JpaRepositoriesAutoConfiguration.class,
        DataSourceAutoConfiguration.class,
        DataSourceTransactionManagerAutoConfiguration.class,
        HibernateJpaAutoConfiguration.class,
        TransactionAutoConfiguration.class,
        TestDatabaseAutoConfiguration.class,
        TestEntityManagerAutoConfiguration.class })
public class TestJpaConfiguration {}
</code></pre>

<p>and </p>

<pre><code>@Configuration
@OverrideAutoConfiguration(enabled = false)
@ImportAutoConfiguration(value = {
        RepositoryRestMvcAutoConfiguration.class,
        HttpMessageConvertersAutoConfiguration.class,
        WebMvcAutoConfiguration.class,
        MockMvcAutoConfiguration.class,
        MockMvcSecurityAutoConfiguration.class
})
public class TestRestConfiguration {}
</code></pre>

<p>so the TL;DR summary is: use <code>@ContextConfiguration</code> to specify the configuration files that specify <code>@OverrideAutoConfiguration</code> and <code>@ImportAutoConfiguration</code></p>
",1385174,,,,,2016-11-16 14:15:40,,,,0,,,
Spring,40962303,2,,40961878,2016-12-04 18:50:37,"1,064",,1,,"<p>Spring has a few examples - <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-security-and-angular-js</a>. You could see the folder structure and the mechanism for unit testing.</p>

<p>Another good resource is <a href=""https://dzone.com/articles/java-maven-angularjs-seed"" rel=""nofollow noreferrer"">https://dzone.com/articles/java-maven-angularjs-seed</a></p>

<p>jHipster <a href=""https://jhipster.github.io/"" rel=""nofollow noreferrer"">https://jhipster.github.io/</a> is another good framework which sets up a maven or gradle project with the required project structure for angularjs and spring boot. They however use npm but its worth exploring.</p>
",5947369,,5947369,,2016-12-04 18:58:24,2016-12-04 18:58:24,,,,0,,,
Spring,41020009,2,,40846972,2016-12-07 14:28:23,"1,067",,1,,"<p>You can have a look at <a href=""https://spring.io/guides/tutorials/spring-boot-oauth2/"" rel=""nofollow noreferrer"">spring's tutorial focusing on oauth2</a>, and checkout the github project. They have a nice auth-server project where you can find an exemple of what you want to achieve.</p>

<h3>Steps to test your scenario are:</h3>

<ul>
<li>Checkout the tutorial project <code>git clone https://github.com/spring-guides/tut-spring-boot-oauth2.git</code></li>
<li>Run the spring boot project named <code>auth-server</code>
<code>cd auth-server &amp;&amp; mvn spring-boot:run</code></li>
<li>Authenticate through <a href=""http://localhost:8080"" rel=""nofollow noreferrer"">http://localhost:8080</a></li>
</ul>

<p>You'll find out that on auth-server side (the api server), an <code>OAuth2Authentication</code> principal will be available with a bearer token made available. You could use this auth-server exemple to design a Controller returning this token if user is authenticated.</p>

<ul>
<li>Then you'll be able to wget or curl the auth-server with such requests:</li>
</ul>

<p><code>curl -X GET ""http://localhost:8080/me"" -H ""Authorization: Bearer 22e70fcf-eb60-483c-9105-xxxx""</code></p>

<p>In my tests I got following response: <code>{""name"":""674008369426415""}</code></p>

<p>without the bearer, I fortunately got:</p>

<p><code>curl -X GET ""http://localhost:8080/me""</code>                                                                </p>

<p><code>{""error"":""unauthorized"",""error_description"":""Full authentication is required to access this resource""}</code></p>

<h3>Missing parts of code</h3>

<p>Looking at your code, I think you're missing the SSO Filter part of the spring's tutorial:</p>

<pre><code>http.antMatcher(""/**"")
// more configuration here
.addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class);
</code></pre>

<p>and </p>

<pre><code>@Bean
public FilterRegistrationBean oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) {
    FilterRegistrationBean registration = new FilterRegistrationBean();
    registration.setFilter(filter);
    registration.setOrder(-100);
    return registration;
}
</code></pre>

<p>There must be an interception of client's request somewhere, so this may be something worth looking.</p>
",4757672,,,,,2016-12-07 14:28:23,,,,2,,,
Spring,41493864,2,,6610563,2017-01-05 20:13:51,"1,096",,1,,"<p>I realized following the tutorial <a href=""https://github.com/spring-guides/gs-async-method"" rel=""nofollow noreferrer"">async-method tutorial code</a> that my issue source was: the bean with the annotated <code>@Async</code> method was not being created wrapped in a proxy.
I started digging and realized that there was a message saying </p>

<blockquote>
  <p>Bean 'NameOfTheBean' is not eligible for getting processed by all
  BeanPostProcessors (for example: not eligible for auto-proxying)</p>
</blockquote>

<p>You can see <a href=""https://stackoverflow.com/questions/1201726/tracking-down-cause-of-springs-not-eligible-for-auto-proxying"">here</a> responses about this issue and its basically that BeanPostProcessors are required by every Bean, so every bean injected here and its dependencies will be excluded to be processed later by other BeanPostProcessors, because it corrupted the life cycle of beans. So identify which is the <code>BeanPostProcessor</code> that is causing this and dont use or create beans inside of it.</p>

<p>In my case i had this configuration</p>

<pre><code>@EnableWs
@Configuration
public class WebServiceConfig extends WsConfigurerAdapter {

    @Autowired
    private Wss4jSecurityInterceptor securityInterceptor;

    @Autowired
    private DefaultPayloadLoggingInterceptor payloadLoggingInterceptor;

    @Override
    public void addInterceptors(List&lt;EndpointInterceptor&gt; interceptors) {
        interceptors.add(securityInterceptor);
        interceptors.add(payloadLoggingInterceptor);
    }
}
</code></pre>

<p><code>WsConfigurerAdapter</code> is actually a <code>BeanPostProcessor</code> and you realize it because there is always a pattern: <code>@Configuration</code> that extends classes and override some of it functions to install or tweak beans involved in some non functional features, like web service or security.</p>

<p>In the aforementioned example you have to override the <code>addInterceptors</code> and added interceptors beans, so if you are using some annotation like <code>@Async</code> inside <code>DefaultPayloadLoggingInterceptor</code> it wont work. What is the solution? Get ride of <code>WsConfigurerAdapter</code> to start. 
After digging a bit i realized a class named <code>PayloadRootAnnotationMethodEndpointMapping</code> at the end was which had all valid interceptors, so i did it manually insted of overriding a function.</p>

<pre><code>@EnableWs
@Configuration
public class WebServiceConfig {

    @Autowired
    private Wss4jSecurityInterceptor securityInterceptor;

    @Autowired
    private DefaultPayloadLoggingInterceptor payloadLoggingInterceptor;

    @Autowired
    public void setupInterceptors(PayloadRootAnnotationMethodEndpointMapping endpointMapping) {
        EndpointInterceptor[] interceptors = {
                securityInterceptor,
                payloadLoggingInterceptor
        };

        endpointMapping.setInterceptors(interceptors);
    }
}
</code></pre>

<p>So this will be run after all <code>BeanPostProcessor</code> have done their job. The <code>setupInterceptors</code> function will run when that party is over and install the interceptors beans. This use case may be extrapolated to cases like Security.</p>

<p>Conclusions:</p>

<ul>
<li>If you are using a @Configuration extending from some class that runs some given functions automatically and you override them, you are probably inside of a <code>BeanPostProcessor</code>, so dont inject beans there and try to use AOP behaviour, because it wont work, and you will see Spring tells it to you with the beforementioned message in the console. In those cases dont use beans but objects (using the <code>new</code> clause).</li>
<li>If you need to use beans digg about which class is carrying the beans you want to setup at the end, <code>@Autowired</code> it and add those beans like i did before.</li>
</ul>

<p>I hope this may save some time for you.</p>
",3233398,,-1,,2017-05-23 12:10:26,2017-01-10 15:40:48,,,,0,,,
Spring,41700354,2,,41696541,2017-01-17 14:59:30,"1,108",,1,,"<p>There is a issue related: <a href=""https://github.com/spring-guides/gs-messaging-stomp-websocket/issues/10"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-messaging-stomp-websocket/issues/10</a></p>

<p>use </p>

<pre><code>stompClient.connect({}, function(frame) {
</code></pre>

<p>instead of </p>

<pre><code>stompClient.connect("""","""",function (frame) {
</code></pre>

<p>Edit:
If you are wondering to use Rest Controller please use SimpMessagingTemplate to send your messages.</p>

<pre><code>@Autowired
private SimpMessagingTemplate messagingTemplate;
</code></pre>

<p>and your method will call </p>

<pre><code>messagingTemplate.convertAndSend(""/topic/notification"", ""test"");
</code></pre>

<p>If not, be sure to annotate your sendToMenuItems with <code>@MessageMapping(value = ""/sentToMenu"")</code> and you have a proper stomp client sending a message: <code>stompClient.send(""/sentToMenu"", {}, 'teste');</code></p>
",5734165,,5734165,,2017-01-17 19:00:03,2017-01-17 19:00:03,,,,6,,,
Spring,41837989,2,,41738864,2017-01-24 20:05:25,"1,115",,2,,"<p>If I understand your question correctly, </p>

<blockquote>
  <p>how can I use the other SSO providers to get such token as well from
  the auth server?</p>
</blockquote>

<p>This custom Auth server is abstracting out your interaction with FB or Github and issuing you it's own token. The token that your custom Auth server spitting out is not an FB or Github token, it's a token generated by your custom Auth server (After authenticating with FB/Github token).</p>

<blockquote>
  <p>Then why do we need FB/github?</p>
</blockquote>

<p>How else your custom Auth server can identify a person, It sure can use user Id and Password; consider 'login with FB' as another nice option it gives to the user.</p>

<blockquote>
  <p>How to add other SSO providers like digitalocean in addition to FB and github?</p>
</blockquote>

<p>Just do the same as we did for FB and Github (register a client id with digital ocean and then in auth server application, Add client Id and secret in the properties/yaml file etc)</p>

<blockquote>
  <p>The resource server should not care how did I get the token and
  whether I am authenticated using Facebook or my custom auth server. It
  should simply ask the auth server what is the Principal (logged user)
  and then decide which resources to show him, right?</p>
</blockquote>

<p>Yes, your understanding is correct.</p>

<h1>Edit (To answer question asked in the comment)</h1>

<blockquote>
  <p>But lets say I log in with Facebook through my Auth server. Where do I
  find the token that I can use with the Resource server? Let's say I
  have a RestClient and want to make a request to obtain some resource
  belonging to a user which went through the Facebook auth process via
  my auth server. Where do I find the token to use?</p>
</blockquote>

<p>If that's a requirement, I think you can use this <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/tree/master/github"" rel=""nofollow noreferrer"">example</a> instead; you may not need a custom auth server as such. Whole point of having custom auth server is abstracting out the interaction with FB or github.</p>

<p>Or</p>

<p>If you still want to go with custom auth server direction, then expose an endpoint from Auth server (which will get you the resources you need from FB) and then make use of that from your resource server.</p>
",6785908,,6785908,,2017-01-27 6:36:10,2017-01-27 6:36:10,,,,4,,,
Spring,42791800,2,,42789583,2017-03-14 16:44:03,"1,164",,1,,"<p>You can use OAuth in combination with your JDBC login. If the user chooses to login using Google he will be redirected to Google Login page. This is absolutely possible. </p>

<p>Examples: <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-boot-oauth2</a>
       <a href=""https://github.com/Baeldung/spring-security-oauth"" rel=""nofollow noreferrer"">https://github.com/Baeldung/spring-security-oauth</a></p>
",6387370,,,,,2017-03-14 16:44:03,,,,7,,,
Spring,42947325,2,,31018377,2017-03-22 9:23:01,"1,172",,2,,"<p>As stated in this git issue: <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/issues/140"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-security-and-angular-js/issues/140</a>, the problem might be related to the fact that with versions 1.4 and above of spring boot the Zuul filter that handles the downstream of access tokens to services (<code>org.springframework.cloud.security.oauth2.proxy.OAuth2TokenRelayFilter</code>)  is missing a bean of type <code>OAuth2RestTemplate</code>, which is used by the filter itself to automatically handle the refresh_token grant when access tokens expire.</p>

<p>I had the same issue and I solved it by adding in a configuration class the following bean:</p>

<pre><code>@Configuration
public class ZuulConfiguration {
    @Bean
    protected OAuth2RestTemplate oauth2RestTemplate(OAuth2ProtectedResourceDetails resource, 
        OAuth2ClientContext context) {

        return new OAuth2RestTemplate(resource, context);
    }
}
</code></pre>
",1095446,,,,,2017-03-22 9:23:01,,,,0,,,
Spring,43096324,2,,43094830,2017-03-29 14:24:19,"1,179",,7,,"<p>Once you're working with the API, you've to use either HTTP Basic or token authentication and not Form one. It's required to use HTTPS when using any of them.</p>

<p>To auth in HTTP Basic way using Angular 2 the login service may look like this:</p>

<pre><code>login (loginDetails: any): Observable&lt;LoginResponse&gt; { // custom class, may be empty for now

    let headers = new Headers({ 
          'Authorization': 'Basic ' + btoa(loginDetails.login + ':' + loginDetails.pass),
          'X-Requested-With': 'XMLHttpRequest' // to suppress 401 browser popup
    });

    let options = new RequestOptions({ 
           headers: headers 
    });

    return this
              .http
              .post(this.loginUrl, {}, options)
              .catch(e =&gt; this.handleError(e); // handle 401 error - bad credentials
}
</code></pre>

<p>... then you can subscribe this in a component:</p>

<pre><code>loginNow() {
   this
     .loginService
     .login(this.loginDetails)
     .subscribe(next =&gt; {
        this.router.navigateByUrl(""/""); // login succeed
     }, error =&gt; {
        this.error = ""Bad credentials""; // or extract smth from &lt;error&gt; object
     });
}
</code></pre>

<p>Then you can use the <code>loginNow()</code> method inside the component templates like this <code>(click)=""loginNow()</code>. </p>

<p>Once the server will accept the authorization, <code>JSESSIONID</code> will be stored in your browser automatically because of Spring Security features and you won't be forced to send the credential details each time in order to access private resources.</p>

<p>Your login server method may look like this:</p>

<pre><code>@PreAuthorize(""hasRole('USER')"")
@PostMapping(""/login"")
public ResponseEntity login() {
    return new ResponseEntity&lt;&gt;(HttpStatus.OK);
}
</code></pre>

<p>... it will reject with <code>401 UNAUTHORIZED</code> once the authorization fails or accept with <code>200 SUCCESS</code> if it won't.</p>

<p>How to setup the server in the proper way there's a number of Spring Security demo projects - <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-security-and-angular-js</a></p>

<p>the code isn't tested though :(</p>
",3019024,,3019024,,2019-01-28 17:36:00,2019-01-28 17:36:00,,,,4,,,
Spring,43758305,2,,43756960,2017-05-03 11:07:16,"1,214",,1,,"<p>I would not mix JSP views with an API serving JSON. I would suggest either using JSP/Thymeleaf views with the spring Model(AndView) OR building an API that serves JSON and then use a frontend javascript framework like angular to handle the view and model.</p>

<p>If I were in your situation i would move forward with Thymeleaf as a templating engine and drop the JSON stuff. Since you mentioned a lack of experience with frontend I think this route is less of a leap. Good examples can be found on the <a href=""https://github.com/spring-guides/gs-serving-web-content/tree/master/complete"" rel=""nofollow noreferrer"">Spring Github</a>
found through <a href=""https://spring.io/guides/gs/serving-web-content/"" rel=""nofollow noreferrer"">this guide</a> </p>
",4165604,,4165604,,2017-05-03 12:46:29,2017-05-03 12:46:29,,,,1,,,
Spring,44587309,2,,44568463,2017-06-16 10:44:36,"1,258",,2,,"<p><code>SpringRunner</code> tries to find any spring configuration class in your classpath and doesn't find anything.
It will be enough to create class annotated with <code>@SpringBootApplication</code> in the root of your src hierarchy as it's done in the <a href=""https://spring.io/guides/gs/testing-web/"" rel=""nofollow noreferrer"">test sample</a> or provide any other spring configuration class using <code>@ContextConfiguration</code> on your test class.</p>

<p><a href=""https://github.com/spring-guides/gs-testing-web/tree/master/complete/src/main/java/hello"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-testing-web/tree/master/complete/src/main/java/hello</a></p>
",4337243,,,,,2017-06-16 10:44:36,,,,0,,,
Spring,44610148,2,,44575555,2017-06-17 22:54:20,"1,259",,4,,"<p>I would suggest you Spring as the most popular framework for building web apps in Java. It has Spring Security module that can facilitate developing OAuth 2.0 clients as well as resource servers, as shown <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/blob/master/simple/src/main/resources/application.yml"" rel=""nofollow noreferrer"">here</a> or <a href=""https://github.com/making/oauth2-sso-demo/blob/master/resource/src/main/resources/application.properties"" rel=""nofollow noreferrer"">here</a>.</p>
",2328781,,,,,2017-06-17 22:54:20,,,,4,,,
Spring,44845539,2,,44845359,2017-06-30 11:35:46,"1,272",,1,,"<p>It works as supposed, when you <em>separate</em> the methods into different services (public facades).</p>

<p>Starting from <a href=""https://github.com/spring-guides/gs-caching.git"" rel=""nofollow noreferrer"">spring-caching example</a> (<code>/complete</code>), I moved <code>SimpleBookRepository</code> with small adjustments to a new class (supposed to be the ""cached service""):</p>

<pre><code>@Component
public class SimpleCache {

    @Cacheable(""map"")
    public Map&lt;String, String&gt; getMap() {
        simulateSlowService();
        Map&lt;String, String&gt; result = new HashMap&lt;&gt;();
        result.put(""foo"", ""bar"");
        result.put(""bar"", ""foo"");
        return result;
    }

    // Don't do this at home
    private void simulateSlowService() {
        try {
            long time = 3000L;
            Thread.sleep(time);
        } catch (InterruptedException e) {
            throw new IllegalStateException(e);
        }
    }

}
</code></pre>

<p>Some small adjustments to match the question/example:</p>

<pre><code>package hello;

public interface BookRepository {
    //originally it returned {@link hello.Book}
    String getByIsbn(String isbn);
}
</code></pre>

<p>...and introducing (as the cache facade/invoker  ... no sense in caching <code>getByIsbn()</code>!!):</p>

<pre><code>@Component
public class SimpleBookRepository implements BookRepository {
    @Autowired
    private transient SimpleCache cache;

    @Override
    public String getByIsbn(String isbn) {
       return cache.getMap().get(isbn);
    }

}
</code></pre>

<p>With a slightly adjusted <code>AppRunner</code>:</p>

<pre><code>//...
logger.info("".... Fetching books"");
logger.info(""foo --&gt; {}"", bookRepository.getByIsbn(""foo""));
logger.info(""bar --&gt; {}"", bookRepository.getByIsbn(""bar""));
logger.info(""foo --&gt; {}"", bookRepository.getByIsbn(""foo""));
logger.info(""bar --&gt; {}"", bookRepository.getByIsbn(""bar""));
logger.info(""foo --&gt; {}"", bookRepository.getByIsbn(""foo""));
logger.info(""foo --&gt; {}"", bookRepository.getByIsbn(""foo""));
//...
</code></pre>

<p>...we get the following output:</p>

<pre><code>2017-06-30 15:54:52.584 INFO 3984 --- [ main] hello.AppRunner : .... Fetching books
2017-06-30 15:54:55.616 INFO 3984 --- [ main] hello.AppRunner : foo --&gt; bar
2017-06-30 15:54:55.618 INFO 3984 --- [ main] hello.AppRunner : bar --&gt; foo
2017-06-30 15:54:55.619 INFO 3984 --- [ main] hello.AppRunner : foo --&gt; bar
2017-06-30 15:54:55.619 INFO 3984 --- [ main] hello.AppRunner : bar --&gt; foo
2017-06-30 15:54:55.619 INFO 3984 --- [ main] hello.AppRunner : foo --&gt; bar
2017-06-30 15:54:55.619 INFO 3984 --- [ main] hello.AppRunner : foo --&gt; bar
2017-06-30 15:54:55.623 INFO 3984 --- [ main] hello.Application  : Started Application in 4.982 seconds (JVM running for 5.513)
</code></pre>

<p>;)</p>
",592355,,592355,,2017-07-03 11:05:27,2017-07-03 11:05:27,,,,3,,,
Spring,45359294,2,,45357194,2017-07-27 19:18:33,"1,299",,1,,"<p>This answer is written based on this application: <a href=""https://github.com/spring-guides/gs-messaging-stomp-websocket"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-messaging-stomp-websocket</a></p>

<p>In order to register a user, you must first create an object that will represent it, for example:</p>

<pre><code>public final class User implements Principal {

    private final String name;

    public User(String name) {
        this.name = name;
    }

    @Override
    public String getName() {
        return name;
    }
}
</code></pre>

<p>Then you'll need a way to create these <code>User</code> objects. One way of doing it is when <code>SockJS</code> sends you the connect message headers. In order to do so, you need to intercept the connect message. You can do that by creating our your interceptor, for example:</p>

<pre><code>public class UserInterceptor extends ChannelInterceptorAdapter {

    @Override
    public Message&lt;?&gt; preSend(Message&lt;?&gt; message, MessageChannel channel) {

        StompHeaderAccessor accessor =
                MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);

        if (StompCommand.CONNECT.equals(accessor.getCommand())) {
            Object raw = message
                    .getHeaders()
                    .get(SimpMessageHeaderAccessor.NATIVE_HEADERS);

            if (raw instanceof Map) {
                Object name = ((Map) raw).get(""name"");

                if (name instanceof LinkedList) {
                    accessor.setUser(new User(((LinkedList) name).get(0).toString()));
                }
            }
        }
        return message;
    }
}
</code></pre>

<p>Once you have that, you must also register this <code>UserInterceptor</code>. I'm guessing somewhere in your application you have defined a configuration <code>AbstractWebSocketMessageBrokerConfigurer</code> class. In this class you can register your user interceptor by overriding <code>configureClientInboundChannel</code> method. You can do it like this:</p>

<pre><code>@Override
public void configureClientInboundChannel(ChannelRegistration registration) {
    registration.setInterceptors(new UserInterceptor());
}
</code></pre>

<p>And then finally, when your clients connect, they'll have to provide their usernames:</p>

<pre><code>stompClient.connect({
    name: 'test' // Username!
}, function () {
    console.log('connected');
});
</code></pre>

<p>After you have all this setup, <code>simpUserRegistry.getUsers()</code> will return a list of users and you'll be able to use <code>convertAndSendToUser</code> method:</p>

<pre><code>messaging.convertAndSendToUser(""test"", ..., ...);
</code></pre>

<p><strong>Edit</strong></p>

<p>Testing this out a bit further, when subscribing, you'll have to prefix your topics with <code>/user</code> as <code>SimpMessagingTemplate</code> uses this as a default prefix, for example:</p>

<pre><code>stompClient.subscribe('/user/...', ...);
</code></pre>

<p>Also I had made a mistake in <code>UserInterceptor</code> and corrected it (name parsing part).</p>
",3274974,,3274974,,2017-07-27 19:50:37,2017-07-27 19:50:37,,,,3,,,
Spring,45491682,2,,45491308,2017-08-03 18:12:32,"1,306",,1,,"<p><code>@RestController</code> itself adds <code>@ResponseBody</code> annotation. You can see it in the <a href=""https://github.com/spring-guides/tut-bookmarks/issues/22"" rel=""nofollow noreferrer"">Github Issue</a></p>

<p>You can also check the <a href=""https://spring.io/guides/tutorials/bookmarks/"" rel=""nofollow noreferrer"">official spring tutorials</a>. Here you can check the below lines and examples:</p>

<blockquote>
  <p>These controller methods return simple POJOs - <code>Collection&lt;Bookmark&gt;</code>,
  and <code>Bookmark</code>, etc., in all but the <code>add</code> case. When an HTTP request
  comes in that specifies an <code>Accept header</code>, <code>Spring MVC</code> loops through the
  configured <code>HttpMessageConverter</code> until it finds one that can convert
  from the <code>POJO</code> domain model types into the content-type specified in
  the <code>Accept header</code>, if so configured.</p>
</blockquote>

<p>You can also follow the below lines and examples from <a href=""http://docs.spring.io/spring/docs/4.3.3.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-restcontroller"" rel=""nofollow noreferrer"">Official doc</a></p>

<blockquote>
  <p>@RestController is a stereotype annotation that combines @ResponseBody
  and @Controller. More than that, it gives more meaning to your
  Controller and also may carry additional semantics in future releases
  of the framework.</p>
</blockquote>

<p>And, </p>

<blockquote>
  <p>As with @RequestBody and @ResponseBody, Spring uses
  HttpMessageConverter to convert from and to the request and response
  streams.</p>
</blockquote>
",2315473,,2315473,,2017-08-04 15:29:16,2017-08-04 15:29:16,,,,3,,,
Spring,45770857,2,,45761054,2017-08-19 11:14:47,"1,322",,1,,"<p>You have to use a composite filter in which you configure your desired authentication providers, for example: </p>

<pre><code>private Filter ssoFilter() {
    CompositeFilter filter = new CompositeFilter();
    List&lt;Filter&gt; filters = new ArrayList&lt;&gt;();
    filters.add(ssoFilter(facebook(), ""/login/facebook""));
    filters.add(ssoFilter(google(), ""/login/google""));
    filter.setFilters(filters);
    return filter;
}

private Filter ssoFilter(ClientResources client, String path) {
    OAuth2ClientAuthenticationProcessingFilter oAuth2ClientAuthenticationFilter = new OAuth2ClientAuthenticationProcessingFilter(
            path);
    OAuth2RestTemplate oAuth2RestTemplate = new OAuth2RestTemplate(client.getClient(), oauth2ClientContext);

    oAuth2ClientAuthenticationFilter.setRestTemplate(oAuth2RestTemplate);
    UserInfoTokenServices tokenServices = new UserInfoTokenServices(client.getResource().getUserInfoUri(),
            client.getClient().getClientId());

    tokenServices.setRestTemplate(oAuth2RestTemplate);
    oAuth2ClientAuthenticationFilter.setTokenServices(tokenServices);
    return oAuth2ClientAuthenticationFilter;
}
</code></pre>

<p>where: </p>

<pre><code>@Bean
@ConfigurationProperties(""google"")
public ClientResources google() {
    return new ClientResources();
}

@Bean
@ConfigurationProperties(""facebook"")
public ClientResources facebook() {
    return new ClientResources();
}
</code></pre>

<p>and:</p>

<pre><code>class ClientResources {

    @NestedConfigurationProperty
    private AuthorizationCodeResourceDetails client = new AuthorizationCodeResourceDetails();


    @NestedConfigurationProperty
    private ResourceServerProperties resource = new ResourceServerProperties();

    public AuthorizationCodeResourceDetails getClient() {
        return client;
    }

    public ResourceServerProperties getResource() {
        return resource;
    }
}
</code></pre>

<p>finally, add the filter before the BasicAuthenticationFilter in your HTTP security config:</p>

<pre><code>@Override
    protected void configure(HttpSecurity http) throws Exception {
        String[] anonymousRequest = { urls};

        http
        .authorizeRequests()
        //..other rules
        addFilterBefore(ssoFilter(), BasicAuthenticationFilter.class);
</code></pre>

<p>Ps: your configuration properties has to start with the value specified in the <code>@ConfigurationProperties(""facebook"")</code>:</p>

<pre><code>facebook:
  client:
    clientId: yourCliendId
    clientSecret: yourClientSecret
    accessTokenUri: https://graph.facebook.com/oauth/access_token
    userAuthorizationUri: https://www.facebook.com/dialog/oauth
    tokenName: oauth_token
    authenticationScheme: query
    registeredRedirectUri: http://localhost:8083/app.html
    preEstablishedRedirectUri: http://localhost:8083/app.html
    clientAuthenticationScheme: form
  resource:
    userInfoUri: https://graph.facebook.com/me
</code></pre>

<p>This is inspired from the example presented here:  <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/tree/master/github"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-boot-oauth2/tree/master/github</a></p>
",6387370,,,,,2017-08-19 11:14:47,,,,1,,,
Spring,45958165,2,,45796021,2017-08-30 10:36:22,"1,333",,3,,"<p>Thanks for the feedback. This is a little bit confusing indeed and I've created <a href=""https://github.com/spring-guides/gs-messaging-jms/issues/15"" rel=""nofollow noreferrer"">an issue</a> to improve the sample.</p>

<p><code>@EnableJms</code> is a framework signal to start processing listeners and it has to be explicit because the framework has no way to know that you want to use JMS.</p>

<p>Spring Boot, on the other hand, can take default decisions for you based on the context. If you have the necessary bits to create a <code>ConnectionFactory</code> it will do so. Down the road, if we detect that a <code>ConnectionFactory</code> is available, we'll automatically enable the processing of JMS listeners.</p>
",613628,,,,,2017-08-30 10:36:22,,,,0,,,
Spring,46794654,2,,46792838,2017-10-17 16:13:41,"1,381",,1,,"<p>You missed to <em>join</em> the asynchronous jobs, that's why the <code>run</code> method exits (far) before all threads complete - and the awkward behavior is ""more comprehensible"".</p>

<p>According to <a href=""https://github.com/spring-guides/gs-async-method/blob/master/complete/src/main/java/hello/AppRunner.java"" rel=""nofollow noreferrer"">doc</a>, you could join like:</p>

<pre><code>...
CompletableFuture&lt;Void&gt;[] myJobs = new CompletableFuture&lt;&gt;[N];
...
for (int i = 0; i &lt; N; i++) {
        myJobs[i] = asyncService.runAsyncMethod();
}
...
CompletableFuture.allOf(myJobs).join();
</code></pre>

<p>And your <code>runAsyncMethod()</code> would need to return a <code>CompletableFuture&lt;Void&gt;</code>. To do so, you can just <code>return CompletableFuture.completedFuture(null);</code></p>
",592355,,2561365,,2017-10-17 16:21:48,2017-10-17 16:21:48,,,,0,,,
Spring,48295077,2,,48247788,2018-01-17 6:44:11,"1,473",,1,,"<p>There are two things that you need to take care of </p>

<p><strong>FIRST -</strong>  You need to keep your angular artifacts outside of the <code>WEB-INF</code> directory. You should copy the contents of you <code>dist</code> folder directly to your <code>web</code> directory.</p>

<p>Ref - <a href=""https://stackoverflow.com/questions/2386031/jsp-in-web-inf-returns-http-status-404-the-requested-resource-is-not-available"">JSP in /WEB-INF returns &quot;HTTP Status 404 The requested resource is not available&quot;</a> for more details.</p>

<p><strong>SECOND -</strong> Your <code>index.html</code> should contain correct <code>base href</code> not just default <code>""/""</code>. Your <code>base href</code> should be </p>

<pre><code>&lt;base href=""/myUrl/""&gt;
</code></pre>

<p>where <code>myUrl</code> is your web application context.</p>

<p>You can either manually modify the base href in you index.html or you can provide it while building your angular app like this.</p>

<pre><code>ng build --base-href /myUrl/
</code></pre>

<p>Ref - <a href=""https://stackoverflow.com/questions/38112891/set-base-href-dynamically-angular-2-4-5/41949470#41949470"">Set base href dynamically - Angular 2 / 4 / 5</a> for more details.</p>

<p><strong>UPDATE</strong></p>

<p>If you really want to keep your angular artifacts in <code>/web/dist</code> directory then </p>

<p>your <code>web.xml</code> should have following</p>

<pre><code>&lt;welcome-file-list&gt;
    &lt;welcome-file&gt;dist/index.html&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;
</code></pre>

<p>and your <code>index.html</code> should contain </p>

<pre><code>&lt;base href=""/myUrl/dist/""&gt;
</code></pre>

<p>and you should define an endpoint </p>

<pre><code>@GetMapping(""/dist"")
public void forward(HttpServletResponse response) throws IOException {
    response.sendRedirect(""/myUrl/dist/index.html"");
}
</code></pre>

<p>Then you can access your angular application with any of the following urls</p>

<pre><code>http://host:port/myUrl
http://host:port/myUrl/dist
http://host:port/myUrl/dist/index.html
</code></pre>

<p>and reload will also not cause any problem.</p>

<p><strong>UPDATE - 2</strong></p>

<p>The above endpoint may not be able to reload the html5 angular routes url. So instead of the above endpoint you can apply this below filter which will be able to handle the reloads.</p>

<pre><code>@Override
    protected void configure(HttpSecurity http) throws Exception {
        http.
             ....
             .addFilterAfter(new OncePerRequestFilter() {
                   // add the values you want to redirect for
                   private Pattern patt = Pattern.compile(""/dist/.*"");

                   @Override
                   protected void doFilterInternal(HttpServletRequest request, 
                                                   HttpServletResponse response, 
                                                   FilterChain filterChain)
                                    throws ServletException, IOException {
                        if(this.patt.matcher(request.getRequestURI()).matches()) {
                            RequestDispatcher rd = request.getRequestDispatcher(""/dist/index.html"");
                            rd.forward(request, response);
                        } else {
                            filterChain.doFilter(request, response);
                        }
                 }
        }, FilterSecurityInterceptor.class)
        .... 
</code></pre>

<p>Ref - <a href=""https://github.com/spring-guides/tut-spring-security-and-angular-js/issues/68#issuecomment-187675742"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-security-and-angular-js/issues/68#issuecomment-187675742</a> for more details.</p>
",8949547,,8949547,,2018-01-24 20:30:06,2018-01-24 20:30:06,,,,5,,,
Spring,48402254,2,,48370628,2018-01-23 12:52:15,"1,479",,1,,"<p>If you want to create only the PubSub Listener, the following worked for me:</p>

<ol>
<li><code>git clone https://github.com/spring-guides/gs-messaging-gcp-pubsub</code></li>
<li><code>cd gs-messaging-gcp-pubsub/complete</code></li>
<li>Change your build.gradle file to the build.gradle file below.</li>
<li><code>cd gs-messaging-gcp-pubsub/complete/src/main/resources</code> Once in there you can delete the static folder.</li>
<li>Go to gs-messaging-gcp-pubsub/complete/src/main/java/hello ; In there you should have two files: PubSubApplication.java and WebAppController.java. Remove WebAppController.java and change the PubSubApplication.java to the file below:</li>
</ol>

<p>build.gradle:</p>

<pre><code>buildscript { 
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(""org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE"")
    }    
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'gs-spring-cloud-gcp'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
    maven {
        url ""http://repo.spring.io/snapshot""
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile(""org.springframework.cloud:spring-cloud-gcp-starter-pubsub:1.0.0.BUILD-SNAPSHOT"")
    compile(""org.springframework.cloud:spring-integration-gcp:1.0.0.BUILD-SNAPSHOT"")
}
</code></pre>

<p>pubSubApplication.java</p>

<pre><code>package hello;

import java.io.IOException;

import com.google.cloud.pubsub.v1.AckReplyConsumer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.gcp.pubsub.core.PubSubOperations;
import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;
import org.springframework.cloud.gcp.pubsub.support.GcpHeaders;
import org.springframework.context.annotation.Bean;
import org.springframework.integration.annotation.MessagingGateway;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.integration.channel.DirectChannel;
import org.springframework.integration.gcp.pubsub.AckMode;

import org.springframework.integration.gcp.pubsub.inbound.PubSubInboundChannelAdapter;
import org.springframework.integration.gcp.pubsub.outbound.PubSubMessageHandler;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHandler;

@SpringBootApplication
public class PubSubApplication {

  private static final Log LOGGER = LogFactory.getLog(PubSubApplication.class);

  public static void main(String[] args) throws IOException {
    SpringApplication.run(PubSubApplication.class, args);
  }


  @Bean
  public MessageChannel pubsubInputChannel() {
    return new DirectChannel();
  }

  @Bean
  public PubSubInboundChannelAdapter messageChannelAdapter(
      @Qualifier(""pubsubInputChannel"") MessageChannel inputChannel,
      PubSubOperations pubSubTemplate) {
    PubSubInboundChannelAdapter adapter =
        new PubSubInboundChannelAdapter(pubSubTemplate, ""testSubscription"");
    adapter.setOutputChannel(inputChannel);
    adapter.setAckMode(AckMode.MANUAL);

    return adapter;


      }

  @Bean
  @ServiceActivator(inputChannel = ""pubsubInputChannel"")
  public MessageHandler messageReceiver() {
    return message -&gt; {
      LOGGER.info(""Message arrived! Payload: "" + message.getPayload());
      AckReplyConsumer consumer =
          (AckReplyConsumer) message.getHeaders().get(GcpHeaders.ACKNOWLEDGEMENT);
      consumer.ack();
    };

  }

}
</code></pre>

<p>Change ""testSubscription"" <a href=""https://spring.io/guides/gs/messaging-gcp-pubsub/#_set_up_google_cloud_pub_sub_environment"" rel=""nofollow noreferrer"">to the Subscription you are using</a></p>

<p>Now in folder gs-messaging-gcp-pubsub/complete, if you run ./gradlew bootRun the app hello.PubSubApplication should get running on local. Any message you publish to the Topic where you are subscribed should appear where you are running the app.</p>

<p>If you have problems with credentials/authenticaion change the parameters in: </p>

<p>gs-messaging-gcp-pubsub/complete/src/main/resources/application.properties</p>
",6915507,,,,,2018-01-23 12:52:15,,,,2,,,
Spring,49041769,2,,45348065,2018-03-01 2:36:55,"1,515",,1,,"<p>Have a look through this repository it's from spring. The projects here uses React+SpringBoot+WebpackV1</p>

<p><a href=""https://github.com/spring-guides/tut-react-and-spring-data-rest"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-react-and-spring-data-rest</a></p>

<p>Here is the actual tutorial for the above repository, have a read through its very well explained.
<a href=""https://spring.io/guides/tutorials/react-and-spring-data-rest/"" rel=""nofollow noreferrer"">https://spring.io/guides/tutorials/react-and-spring-data-rest/</a></p>
",1111063,,,,,2018-03-01 2:36:55,,,,0,,,
Spring,49162710,2,,29734305,2018-03-07 23:04:27,"1,522",,1,,"<p>This <a href=""https://spring.io/guides/tutorials/spring-boot-oauth2/#_social_login_authserver"" rel=""nofollow noreferrer"">tutorial</a> shows how to achieve exactly that (if I understood the problem correctly) : having an auth server issuing your own oauth2 tokens based on external oauth2 authentication.
The corresponding code is available <a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/blob/master/auth-server/src/main/java/com/example/SocialApplication.java"" rel=""nofollow noreferrer"">here</a>.</p>

<p>The gist of it is that you use <code>@EnableOAuth2Client</code> in addition to <code>@EnableAuthorizationServer</code> and insert an <code>OAuth2ClientAuthenticationProcessingFilter</code> filter before spring security default ones.</p>
",1688851,,,,,2018-03-07 23:04:27,,,,0,,,
Spring,49824007,2,,49817462,2018-04-13 19:36:00,"1,559",,1,,"<p>Look into this tutorial from Spring, there is a ""frontend-maven-plugin"" that you might find very useful. I would ditch the war and just build your spring boot app as a jar, then place your js files in src/main/js, and your index.html in /src/main/resources/static. </p>

<p>The tutorial is available here:</p>

<p><a href=""https://spring.io/guides/tutorials/react-and-spring-data-rest/"" rel=""nofollow noreferrer"">https://spring.io/guides/tutorials/react-and-spring-data-rest/</a></p>

<p>And the code is available here:</p>

<p><a href=""https://github.com/spring-guides/tut-react-and-spring-data-rest/tree/master/basic"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-react-and-spring-data-rest/tree/master/basic</a></p>

<p>Use a webpack.config.js config similar to the one used in the tutorial, and it will ""just work"" once you build using the maven front end plugin.</p>

<p>As others have suggested, you will be better off separating your front-end and back-end code (keep them in separate repositories).</p>
",3154872,,3154872,,2018-04-17 14:42:23,2018-04-17 14:42:23,,,,8,,,
Spring,50038545,2,,34927236,2018-04-26 8:41:33,"1,572",,1,,"<h1>Short answer</h1>

<ul>
<li>use gradle plugins: <code>eclipse-wtp</code> and <code>war</code></li>
<li>extend <code>SpringBootServletInitializer</code> in <code>Application</code></li>
</ul>

<h2>Explanation:</h2>

<p>In order to run a spring boot application on tomcat generally the produced artifact has to be a <code>war</code> application.</p>

<p>In order to make it run on tomcat inside Eclipse you have to use a WTP-Project (Web Tools Platform aka Dynamic Web Module) using the <code>eclipse-wtp</code> gradle plugin.</p>

<p>The <code>SpringBootServletInitializer</code> thing has to be extended in order to make Spring Boot application context launch when Tomcat is launched.</p>

<h1>How to create a test project</h1>

<p>Spring offers a <a href=""https://spring.io/guides/gs/rest-service/"" rel=""nofollow noreferrer"">Getting Started Tutorial</a> how to build a REST webservice with Spring Boot. I enhanced the project to work with Tomcat and Eclipse:</p>

<h2>Check out</h2>

<p>the sample project:</p>

<pre><code>git clone https://github.com/spring-guides/gs-rest-service.git
</code></pre>

<h2>Import it into eclipse</h2>

<p>Import the <code>complete/</code> subfolder as gradle project.</p>

<h2>Change <code>build.gradle</code></h2>

<p>remove</p>

<pre><code>apply plugin: 'java'
apply plugin: 'eclipse'
</code></pre>

<p>add</p>

<pre><code>apply plugin: 'war'
apply plugin: 'eclipse-wtp'
</code></pre>

<h2>Change <code>src/main/java/hello/Application.java</code></h2>

<p>add extension of <code>SpringBootServletInitializer</code></p>

<pre><code>public class Application extends SpringBootServletInitializer {
    ...
}
</code></pre>

<p>That done I could deploy the sample project to a Tomcat server configured in eclipse and start the server. The url is: <a href=""http://localhost:8080/complete/greeting?name=User"" rel=""nofollow noreferrer"">http://localhost:8080/complete/greeting?name=User</a></p>

<p>Check out the <a href=""https://github.com/rasenderhase/gs-rest-service"" rel=""nofollow noreferrer"">Complete Sample</a>.</p>
",1032484,,1032484,,2018-04-26 9:03:21,2018-04-26 9:03:21,,,,0,,,
Spring,50328339,2,,49798302,2018-05-14 10:40:19,"1,59",,5,,"<p>I had this error while following the <a href=""https://spring.io/guides/gs/spring-boot-docker/"" rel=""nofollow noreferrer"">Spring Boot with Docker</a> guide because my application is using Spring Boot 1.5.10.RELEASE and <a href=""https://docs.spring.io/spring-boot/docs/current/gradle-plugin/api/org/springframework/boot/gradle/tasks/run/BootRun.html"" rel=""nofollow noreferrer"">bootRun</a> was only introduced in 2.0.0.</p>

<p>Luckily, the Spring Boot Docker guide code is in a Github repository, so I was able to navigate back to a pre 2.0.0 version: <a href=""https://github.com/spring-guides/gs-spring-boot-docker/tree/8933f6efa9a94cf596095658dc0b81986d11a3ec"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-spring-boot-docker/tree/8933f6efa9a94cf596095658dc0b81986d11a3ec</a></p>

<p>See the completed <a href=""https://github.com/spring-guides/gs-spring-boot-docker/blob/8933f6efa9a94cf596095658dc0b81986d11a3ec/complete/build.gradle"" rel=""nofollow noreferrer"">build.gradle</a> file for 1.5.10-RELEASE:</p>

<pre><code>// This is used as the docker image prefix (org)
group = 'springio'

jar {
    baseName = 'gs-spring-boot-docker'
    version =  '0.1.0'
}

// tag::task[]
docker {
    name ""${project.group}/${jar.baseName}""
    files jar.archivePath
    buildArgs(['JAR_FILE': ""${jar.archiveName}""])
}
// end::task[]
</code></pre>
",1912127,,1912127,,2018-10-25 7:51:04,2018-10-25 7:51:04,,,,0,,,
Spring,50349078,2,,49942640,2018-05-15 11:29:42,"1,591",,6,,"<p>Finally I've found the problem. I see this behaviour due the fact of cookies clashing for client and server if you start both applications on localhost.</p>

<p>It happens due the fact of usage wrong property for context.</p>

<p>So to fix application you need to replace:</p>

<pre><code>server:
  context-path: /client
</code></pre>

<p>with</p>

<pre><code>server:  
  servlet:
    context-path: /client
</code></pre>

<h2>P.S.</h2>

<p>I've created issue on github:  </p>

<p><a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/issues/80"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-boot-oauth2/issues/80</a></p>

<p>and made the pull request:</p>

<p><a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/pull/81"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-boot-oauth2/pull/81</a></p>

<h2>P.S.2</h2>

<p>Finally my pull request was merged:
<a href=""https://github.com/spring-guides/tut-spring-boot-oauth2/pull/81"" rel=""nofollow noreferrer"">https://github.com/spring-guides/tut-spring-boot-oauth2/pull/81</a></p>
",2674303,,2674303,,2018-12-05 21:06:28,2018-12-05 21:06:28,,,,0,,,
Spring,52645021,2,,52644505,2018-10-04 10:56:54,"1,733",,2,,"<p>A good option is run rabbitmq in a docker container on the local machine. You could use a rabbitmq image <a href=""https://hub.docker.com/_/rabbitmq/"" rel=""nofollow noreferrer"">already published on dockerhub</a> and if you want to you could even start it automatically in your integration tests using the <a href=""https://github.com/fabric8io/docker-maven-plugin"" rel=""nofollow noreferrer"">fabric8 maven plugin</a>. We've been <a href=""https://github.com/Activiti/activiti-cloud-runtime-bundle-service/blob/7.0.0.Beta1/activiti-cloud-starter-runtime-bundle/pom.xml#L222"" rel=""nofollow noreferrer"">doing that on the Activiti project</a>, also with spring cloud streams. You could run this in a maven profile so that you only activate it on machines which have docker available.</p>

<p>For tests <a href=""https://dzone.com/articles/mocking-rabbitmq-for-integration-tests"" rel=""nofollow noreferrer"">apache qpid</a> might be an option. There aren't many examples with spring cloud streams available right now but there is <a href=""https://github.com/spring-guides/gs-messaging-rabbitmq/pull/12"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-messaging-rabbitmq/pull/12</a></p>
",9705485,,9705485,,2018-10-04 11:14:10,2018-10-04 11:14:10,,,,2,,,
Spring,52701488,2,,52701198,2018-10-08 11:42:16,"1,737",,1,,"<p>Maven is frequently installed by java developpers, but there is a workaround if you don't have maven:</p>

<p>You can use the Spring boot maven wrapper, you don't need Spring boot dependencies, it's only 2 script and a directory with a jar that can be copied/pasted in your project : <strong>mvnw</strong> and mvnw.cmd and .mvn/*</p>

<p>Find an example of source here:</p>

<p><a href=""https://github.com/spring-guides/gs-spring-boot/blob/master/complete/mvnw"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-spring-boot/blob/master/complete/mvnw</a></p>

<p><a href=""https://github.com/spring-guides/gs-spring-boot/blob/master/complete/mvnw.cmd"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-spring-boot/blob/master/complete/mvnw.cmd</a></p>

<p><a href=""https://github.com/spring-guides/gs-spring-boot/tree/master/complete/.mvn/wrapper"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-spring-boot/tree/master/complete/.mvn/wrapper</a></p>

<p>It works just like the graddle wrapper: </p>

<ul>
<li>It download a maven runtime from the tiny jar</li>
<li>It launch it.</li>
</ul>

<p>CLI usage:</p>

<pre><code>$ ./mvnw clean install
</code></pre>

<p>PS: The inconvenience of this method is that you rely on having the network for the download (with proxy well configured if needed) and every project you build will need the wrapper.</p>
",2173392,,2173392,,2018-10-08 11:49:25,2018-10-08 11:49:25,,,,0,,,
Spring,52871335,2,,52870403,2018-10-18 9:46:15,"1,747",,1,,"<p>You can use this method from <a href=""https://spring.io/guides/gs/uploading-files/"" rel=""nofollow noreferrer"">spring guide</a>   </p>

<pre><code>public Stream&lt;Path&gt; loadAll() {
    Path rootLocation = Paths.get(""&lt;your path&gt;"");
    try {
        return Files.walk(rootLocation, 1).filter(path -&gt; !path.equals(rootLocation)).map(rootLocation::relativize);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>In order to list files:</p>

<pre><code>@GetMapping(""/"")
public String listUploadedFiles(Model model) throws IOException {

    model.addAttribute(""files"",
            storageService.loadAll()
                    .map(path -&gt; MvcUriComponentsBuilder
                            .fromMethodName(FileUploadController.class, ""serveFile"", path.getFileName().toString())
                            .build().toString())
                    .collect(Collectors.toList()));

    return ""uploadForm"";
}
</code></pre>

<p>Where <em>uploadForm</em> is html document. For more details check out <a href=""https://github.com/spring-guides/gs-uploading-files"" rel=""nofollow noreferrer"">guide repo</a>.</p>
",8349029,,,,,2018-10-18 9:46:15,,,,0,,,
Spring,54694402,2,,54693472,2019-02-14 15:57:46,"1,866",,1,,"<p>Please have a try to add follow script in the pom.xml file.</p>

<pre><code>&lt;properties&gt; 
&lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt; 
&lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt; 
&lt;/properties&gt;
</code></pre>

<p>For more information, please refer to this <a href=""https://github.com/spring-guides/gs-maven/issues/21"" rel=""nofollow noreferrer"">issue</a>.</p>
",7005159,,,,,2019-02-14 15:57:46,,,,4,,,
Spring,55401367,2,,18762318,2019-03-28 15:27:09,"1,908",,1,,"<p>In case of </p>

<pre><code>Exception in thread ""main"" java.lang.NoClassDefFoundError: com/sun/tools/xjc/api/ErrorListener
    at java.lang.ClassLoader.defineClass1(Native Method)
    at java.lang.ClassLoader.defineClass(Unknown Source)
    at java.security.SecureClassLoader.defineClass(Unknown Source)
    at java.net.URLClassLoader.defineClass(Unknown Source)
    at java.net.URLClassLoader.access$100(Unknown Source)
    at java.net.URLClassLoader$1.run(Unknown Source)
    at java.net.URLClassLoader$1.run(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.Class.getDeclaredConstructors0(Native Method)
    at java.lang.Class.privateGetDeclaredConstructors(Unknown Source)
    at java.lang.Class.getConstructor0(Unknown Source)
    at java.lang.Class.getConstructor(Unknown Source)
    at org.codehaus.mojo.jaxws.Invoker.main(Invoker.java:72)
Caused by: java.lang.ClassNotFoundException: com.sun.tools.xjc.api.ErrorListener
    at java.net.URLClassLoader.findClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    at java.lang.ClassLoader.loadClass(Unknown Source)
    ... 16 more
</code></pre>

<p>it could be that you are using a JRE instead of a JDK as project (or default) Eclipse JRE</p>

<p>Reference: <a href=""https://github.com/spring-guides/gs-consuming-web-service/issues/15#issuecomment-314018799"" rel=""nofollow noreferrer"">https://github.com/spring-guides/gs-consuming-web-service/issues/15#issuecomment-314018799</a> </p>
",2929757,,,,,2019-03-28 15:27:09,,,,0,,,
